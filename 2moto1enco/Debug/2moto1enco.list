
2moto1enco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c88  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08009d98  08009d98  00019d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1d4  0800a1d4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1d4  0800a1d4  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1d4  0800a1d4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a1d4  0800a1d4  0001a1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1dc  0800a1dc  0001a1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a1e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  200001d8  0800a3b8  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014ec  0800a3b8  000214ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019fb9  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a79  00000000  00000000  0003a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f8  00000000  00000000  0003dc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103a  00000000  00000000  0003f170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dcb3  00000000  00000000  000401aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001857f  00000000  00000000  0005de5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cb14  00000000  00000000  000763dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069f8  00000000  00000000  00112ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001198e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d80 	.word	0x08009d80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08009d80 	.word	0x08009d80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 80010c0:	787a      	ldrb	r2, [r7, #1]
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	4619      	mov	r1, r3
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f001 ffc2 	bl	8003050 <HAL_GPIO_WritePin>

}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af02      	add	r7, sp, #8
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	461a      	mov	r2, r3
 80010e0:	460b      	mov	r3, r1
 80010e2:	72fb      	strb	r3, [r7, #11]
 80010e4:	4613      	mov	r3, r2
 80010e6:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 80010e8:	893b      	ldrh	r3, [r7, #8]
 80010ea:	2200      	movs	r2, #0
 80010ec:	4619      	mov	r1, r3
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffde 	bl	80010b0 <setCSLine>
	delay(docDelay);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f915 	bl	8001324 <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 80010fa:	f107 0217 	add.w	r2, r7, #23
 80010fe:	f107 010b 	add.w	r1, r7, #11
 8001102:	230a      	movs	r3, #10
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f002 fca3 	bl	8003a54 <HAL_SPI_TransmitReceive>
	delay(docDelay);
 800110e:	2003      	movs	r0, #3
 8001110:	f000 f908 	bl	8001324 <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 8001114:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001118:	893b      	ldrh	r3, [r7, #8]
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ffc7 	bl	80010b0 <setCSLine>
	return data;
 8001122:	7dfb      	ldrb	r3, [r7, #23]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	; 0x30
 8001130:	af02      	add	r7, sp, #8
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	4611      	mov	r1, r2
 8001138:	461a      	mov	r2, r3
 800113a:	460b      	mov	r3, r1
 800113c:	80fb      	strh	r3, [r7, #6]
 800113e:	4613      	mov	r3, r2
 8001140:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 8001142:	f000 f901 	bl	8001348 <DWT_Delay_Init>

	uint16_t currentPosition = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	2200      	movs	r2, #0
 800114e:	9200      	str	r2, [sp, #0]
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	2100      	movs	r1, #0
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f7ff ffbd 	bl	80010d4 <spiWriteRead>
 800115a:	4603      	mov	r3, r0
 800115c:	b29b      	uxth	r3, r3
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	84fb      	strh	r3, [r7, #38]	; 0x26
	delay(docDelay);
 8001162:	2003      	movs	r0, #3
 8001164:	f000 f8de 	bl	8001324 <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	2201      	movs	r2, #1
 800116c:	9200      	str	r2, [sp, #0]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	2100      	movs	r1, #0
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f7ff ffae 	bl	80010d4 <spiWriteRead>
 8001178:	4603      	mov	r3, r0
 800117a:	b29a      	uxth	r2, r3
 800117c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800117e:	4313      	orrs	r3, r2
 8001180:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 0; i < 16; i++)
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
 8001186:	e010      	b.n	80011aa <getPositionSPI+0x7e>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 8001188:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	fa42 f303 	asr.w	r3, r2, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	b2d9      	uxtb	r1, r3
 8001198:	f107 0210 	add.w	r2, r7, #16
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	4413      	add	r3, r2
 80011a0:	460a      	mov	r2, r1
 80011a2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	3301      	adds	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	ddeb      	ble.n	8001188 <getPositionSPI+0x5c>
	if ((binaryArray[15]
 80011b0:	7ffb      	ldrb	r3, [r7, #31]
 80011b2:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80011b4:	7f7a      	ldrb	r2, [r7, #29]
 80011b6:	7efb      	ldrb	r3, [r7, #27]
 80011b8:	4053      	eors	r3, r2
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7e7b      	ldrb	r3, [r7, #25]
 80011be:	4053      	eors	r3, r2
 80011c0:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80011c4:	4053      	eors	r3, r2
 80011c6:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 80011c8:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80011ca:	4053      	eors	r3, r2
 80011cc:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 80011ce:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80011d0:	4053      	eors	r3, r2
 80011d2:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 80011d4:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	bf0c      	ite	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	2300      	movne	r3, #0
 80011de:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 80011e0:	4299      	cmp	r1, r3
 80011e2:	d11e      	bne.n	8001222 <getPositionSPI+0xf6>
			&& (binaryArray[14]
 80011e4:	7fbb      	ldrb	r3, [r7, #30]
 80011e6:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80011e8:	7f3a      	ldrb	r2, [r7, #28]
 80011ea:	7ebb      	ldrb	r3, [r7, #26]
 80011ec:	4053      	eors	r3, r2
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	7e3b      	ldrb	r3, [r7, #24]
 80011f2:	4053      	eors	r3, r2
 80011f4:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80011f6:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80011f8:	4053      	eors	r3, r2
 80011fa:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80011fc:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80011fe:	4053      	eors	r3, r2
 8001200:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8001202:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8001204:	4053      	eors	r3, r2
 8001206:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 8001208:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 800120a:	429a      	cmp	r2, r3
 800120c:	bf0c      	ite	eq
 800120e:	2301      	moveq	r3, #1
 8001210:	2300      	movne	r3, #0
 8001212:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 8001214:	4299      	cmp	r1, r3
 8001216:	d104      	bne.n	8001222 <getPositionSPI+0xf6>
		currentPosition &= 0x3FFF;
 8001218:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800121a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800121e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001220:	e002      	b.n	8001228 <getPositionSPI+0xfc>
	} else {
		currentPosition = 0xFFFF; //bad position
 8001222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001226:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 8001228:	797b      	ldrb	r3, [r7, #5]
 800122a:	2b0c      	cmp	r3, #12
 800122c:	d107      	bne.n	800123e <getPositionSPI+0x112>
 800122e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001234:	4293      	cmp	r3, r2
 8001236:	d002      	beq.n	800123e <getPositionSPI+0x112>
		currentPosition = currentPosition >> 2;
 8001238:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 800123e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001240:	4618      	mov	r0, r3
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <setZeroSPI>:

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af02      	add	r7, sp, #8
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	4613      	mov	r3, r2
 8001254:	80fb      	strh	r3, [r7, #6]

	spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0);
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	2200      	movs	r2, #0
 800125a:	9200      	str	r2, [sp, #0]
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	2100      	movs	r1, #0
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f7ff ff37 	bl	80010d4 <spiWriteRead>
	delay( docDelay);
 8001266:	2003      	movs	r0, #3
 8001268:	f000 f85c 	bl	8001324 <delay>
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	2201      	movs	r2, #1
 8001270:	9200      	str	r2, [sp, #0]
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	2170      	movs	r1, #112	; 0x70
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f7ff ff2c 	bl	80010d4 <spiWriteRead>
	delay( docDelayLong + docDelayLong);
 800127c:	2064      	movs	r0, #100	; 0x64
 800127e:	f000 f851 	bl	8001324 <delay>

}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <calculateAngle>:

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	460a      	mov	r2, r1
 8001296:	80fb      	strh	r3, [r7, #6]
 8001298:	4613      	mov	r3, r2
 800129a:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
	if (bitDepth == 12) {
 80012a2:	797b      	ldrb	r3, [r7, #5]
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	d111      	bne.n	80012cc <calculateAngle+0x40>
		angle = ((float) encoderValue * 360)/ ENCODER_RESOLUTION_12_BIT;
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fcc2 	bl	8000c34 <__aeabi_ui2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	491a      	ldr	r1, [pc, #104]	; (800131c <calculateAngle+0x90>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fd15 	bl	8000ce4 <__aeabi_fmul>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fdc3 	bl	8000e4c <__aeabi_fdiv>
 80012c6:	4603      	mov	r3, r0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	e013      	b.n	80012f4 <calculateAngle+0x68>
	} else if (bitDepth == 14) {
 80012cc:	797b      	ldrb	r3, [r7, #5]
 80012ce:	2b0e      	cmp	r3, #14
 80012d0:	d110      	bne.n	80012f4 <calculateAngle+0x68>
		angle = ((float) encoderValue * 360)/ ENCODER_RESOLUTION_14_BIT;
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fcad 	bl	8000c34 <__aeabi_ui2f>
 80012da:	4603      	mov	r3, r0
 80012dc:	490f      	ldr	r1, [pc, #60]	; (800131c <calculateAngle+0x90>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fd00 	bl	8000ce4 <__aeabi_fmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fdae 	bl	8000e4c <__aeabi_fdiv>
 80012f0:	4603      	mov	r3, r0
 80012f2:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	angle = roundf(angle * 100.0) / 100.0;
 80012f4:	490a      	ldr	r1, [pc, #40]	; (8001320 <calculateAngle+0x94>)
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f7ff fcf4 	bl	8000ce4 <__aeabi_fmul>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4618      	mov	r0, r3
 8001300:	f005 feae 	bl	8007060 <roundf>
 8001304:	4603      	mov	r3, r0
 8001306:	4906      	ldr	r1, [pc, #24]	; (8001320 <calculateAngle+0x94>)
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fd9f 	bl	8000e4c <__aeabi_fdiv>
 800130e:	4603      	mov	r3, r0
 8001310:	60fb      	str	r3, [r7, #12]
	return angle;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	43b40000 	.word	0x43b40000
 8001320:	42c80000 	.word	0x42c80000

08001324 <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

	DWT_Delay_ms(delayTime);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f83b 	bl	80013a8 <DWT_Delay_ms>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <startDWT>:

int startDWT(){
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0

	 DWT_Delay_Init();
 800133e:	f000 f803 	bl	8001348 <DWT_Delay_Init>

}
 8001342:	bf00      	nop
 8001344:	4618      	mov	r0, r3
 8001346:	bd80      	pop	{r7, pc}

08001348 <DWT_Delay_Init>:
 */

#include "DWT_Delay.h"

uint32_t DWT_Delay_Init()
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <DWT_Delay_Init+0x58>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <DWT_Delay_Init+0x58>)
 8001352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001356:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <DWT_Delay_Init+0x58>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <DWT_Delay_Init+0x58>)
 800135e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001362:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <DWT_Delay_Init+0x5c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <DWT_Delay_Init+0x5c>)
 800136a:	f023 0301 	bic.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <DWT_Delay_Init+0x5c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <DWT_Delay_Init+0x5c>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <DWT_Delay_Init+0x5c>)
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8001382:	bf00      	nop
    __ASM volatile ("NOP");
 8001384:	bf00      	nop
    __ASM volatile ("NOP");
 8001386:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <DWT_Delay_Init+0x5c>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001390:	2300      	movs	r3, #0
 8001392:	e000      	b.n	8001396 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001394:	2301      	movs	r3, #1
    }
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000edf0 	.word	0xe000edf0
 80013a4:	e0001000 	.word	0xe0001000

080013a8 <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <DWT_Delay_ms+0x44>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 80013b6:	f002 fa2f 	bl	8003818 <HAL_RCC_GetHCLKFreq>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <DWT_Delay_ms+0x48>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	099b      	lsrs	r3, r3, #6
 80013c4:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 80013d0:	bf00      	nop
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <DWT_Delay_ms+0x44>)
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad2      	subs	r2, r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3f8      	bcc.n	80013d2 <DWT_Delay_ms+0x2a>
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e0001000 	.word	0xe0001000
 80013f0:	10624dd3 	.word	0x10624dd3

080013f4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f005 fde3 	bl	8006fe0 <ceilf>
 800141a:	4603      	mov	r3, r0
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_ZN7RoboArmC1Ehh>:
 *      Author: admin
 */

#include "RoboArm.h"

RoboArm::RoboArm(uint8_t defaultAngleT, uint8_t defaultDistanseT) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
 8001430:	4613      	mov	r3, r2
 8001432:	70bb      	strb	r3, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <_ZN7RoboArmC1Ehh+0x7c>)
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	220e      	movs	r2, #14
 800144a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	661a      	str	r2, [r3, #96]	; 0x60
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	// TODO Auto-generated constructor stub
	defaultAngle = defaultAngleT;
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	b29a      	uxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	defaultDistanse = defaultDistanseT;
 8001488:	78bb      	ldrb	r3, [r7, #2]
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	startDWT();
 8001492:	f7ff ff52 	bl	800133a <startDWT>
}
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	42200000 	.word	0x42200000
 80014a4:	00000000 	.word	0x00000000

080014a8 <_ZN7RoboArm15Move2MotorsSimuEft>:

return 0;

}

int RoboArm::Move2MotorsSimu(float angle, uint16_t distance) {
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b08b      	sub	sp, #44	; 0x2c
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	4613      	mov	r3, r2
 80014b4:	80fb      	strh	r3, [r7, #6]
	// 20 мм - 27.71
	// 40 мм - 56.47
	// 80 мм - 111.01
	// 230 мм - 321.68

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_3);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2108      	movs	r1, #8
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 ffe5 	bl	800448c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_3);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2108      	movs	r1, #8
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 ffdf 	bl	800448c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 feba 	bl	800424c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 feb5 	bl	800424c <HAL_TIM_Base_Stop_IT>

	if (lastPosAngle < angle) {
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e6:	4619      	mov	r1, r3
 80014e8:	68b8      	ldr	r0, [r7, #8]
 80014ea:	f7ff fdb7 	bl	800105c <__aeabi_fcmpgt>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <_ZN7RoboArm15Move2MotorsSimuEft+0x5e>
		HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	68d8      	ldr	r0, [r3, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8a1b      	ldrh	r3, [r3, #16]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4619      	mov	r1, r3
 8001500:	f001 fda6 	bl	8003050 <HAL_GPIO_WritePin>
 8001504:	e010      	b.n	8001528 <_ZN7RoboArm15Move2MotorsSimuEft+0x80>
	} else if (lastPosAngle > angle) {
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150a:	4619      	mov	r1, r3
 800150c:	68b8      	ldr	r0, [r7, #8]
 800150e:	f7ff fd87 	bl	8001020 <__aeabi_fcmplt>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d007      	beq.n	8001528 <_ZN7RoboArm15Move2MotorsSimuEft+0x80>
		HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	68d8      	ldr	r0, [r3, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8a1b      	ldrh	r3, [r3, #16]
 8001520:	2200      	movs	r2, #0
 8001522:	4619      	mov	r1, r3
 8001524:	f001 fd94 	bl	8003050 <HAL_GPIO_WritePin>
	}

	if (lastPosLinear < distance) {
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800152e:	88fa      	ldrh	r2, [r7, #6]
 8001530:	429a      	cmp	r2, r3
 8001532:	d908      	bls.n	8001546 <_ZN7RoboArm15Move2MotorsSimuEft+0x9e>
		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6958      	ldr	r0, [r3, #20]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8b1b      	ldrh	r3, [r3, #24]
 800153c:	2201      	movs	r2, #1
 800153e:	4619      	mov	r1, r3
 8001540:	f001 fd86 	bl	8003050 <HAL_GPIO_WritePin>
 8001544:	e00d      	b.n	8001562 <_ZN7RoboArm15Move2MotorsSimuEft+0xba>
	} else if (lastPosLinear > distance){
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800154c:	88fa      	ldrh	r2, [r7, #6]
 800154e:	429a      	cmp	r2, r3
 8001550:	d207      	bcs.n	8001562 <_ZN7RoboArm15Move2MotorsSimuEft+0xba>
		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6958      	ldr	r0, [r3, #20]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8b1b      	ldrh	r3, [r3, #24]
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	f001 fd77 	bl	8003050 <HAL_GPIO_WritePin>
	}

    uint32_t actualPosAngle = abs(lastPosAngle-angle);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fab1 	bl	8000ad0 <__aeabi_fsub>
 800156e:	4603      	mov	r3, r0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff3f 	bl	80013f4 <_ZSt3absf>
 8001576:	4603      	mov	r3, r0
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fd79 	bl	8001070 <__aeabi_f2uiz>
 800157e:	4603      	mov	r3, r0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t actualPosDistance = abs(lastPosLinear-distance);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001588:	461a      	mov	r2, r3
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	bfb8      	it	lt
 8001592:	425b      	neglt	r3, r3
 8001594:	623b      	str	r3, [r7, #32]

	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 800159c:	fb02 f303 	mul.w	r3, r2, r3
 80015a0:	08db      	lsrs	r3, r3, #3
 80015a2:	4a8d      	ldr	r2, [pc, #564]	; (80017d8 <_ZN7RoboArm15Move2MotorsSimuEft+0x330>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	859a      	strh	r2, [r3, #44]	; 0x2c
	distPsteps = actualPosDistance * linearStepsMil; //steps to distanse
 80015b0:	6a38      	ldr	r0, [r7, #32]
 80015b2:	f7ff fb3f 	bl	8000c34 <__aeabi_ui2f>
 80015b6:	4602      	mov	r2, r0
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f7ff fb90 	bl	8000ce4 <__aeabi_fmul>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fd52 	bl	8001070 <__aeabi_f2uiz>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	855a      	strh	r2, [r3, #42]	; 0x2a

	uint32_t distPangle = ((distPsteps / (motorStep * drvMicroSteps)) * 360
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d8:	4a80      	ldr	r2, [pc, #512]	; (80017dc <_ZN7RoboArm15Move2MotorsSimuEft+0x334>)
 80015da:	fb82 1203 	smull	r1, r2, r2, r3
 80015de:	1252      	asrs	r2, r2, #9
 80015e0:	17db      	asrs	r3, r3, #31
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80015e8:	fb02 f303 	mul.w	r3, r2, r3
			/ 6.45) * 100;
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff09 	bl	8000404 <__aeabi_i2d>
 80015f2:	a377      	add	r3, pc, #476	; (adr r3, 80017d0 <_ZN7RoboArm15Move2MotorsSimuEft+0x328>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7ff f898 	bl	800072c <__aeabi_ddiv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	4b75      	ldr	r3, [pc, #468]	; (80017e0 <_ZN7RoboArm15Move2MotorsSimuEft+0x338>)
 800160a:	f7fe ff65 	bl	80004d8 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
	uint32_t distPangle = ((distPsteps / (motorStep * drvMicroSteps)) * 360
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff fa37 	bl	8000a88 <__aeabi_d2uiz>
 800161a:	4603      	mov	r3, r0
 800161c:	61fb      	str	r3, [r7, #28]

	lastPosAngle=angle;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	661a      	str	r2, [r3, #96]	; 0x60
	lastPosLinear=distance;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	88fa      	ldrh	r2, [r7, #6]
 8001628:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c


//  частота шим = входящая частота / период (arr)
//  125 000 (125 килогерц)  = 16 000 000 / 128
// (1/60)*1000 = частота 16 (герц);
	float periodM1 = 600; //мікросекунд
 800162c:	4b6d      	ldr	r3, [pc, #436]	; (80017e4 <_ZN7RoboArm15Move2MotorsSimuEft+0x33c>)
 800162e:	61bb      	str	r3, [r7, #24]
	uint32_t psc = 72;
 8001630:	2348      	movs	r3, #72	; 0x48
 8001632:	617b      	str	r3, [r7, #20]
	float mnoj=0;
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	613b      	str	r3, [r7, #16]

	if (anglePsteps > distPsteps) {
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001642:	429a      	cmp	r2, r3
 8001644:	d94f      	bls.n	80016e6 <_ZN7RoboArm15Move2MotorsSimuEft+0x23e>

		htim1M1->Instance->PSC = psc;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	681c      	ldr	r4, [r3, #0]
 8001656:	69b8      	ldr	r0, [r7, #24]
 8001658:	f7ff fd0a 	bl	8001070 <__aeabi_f2uiz>
 800165c:	4603      	mov	r3, r0
 800165e:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR3 = periodM1 / 2;
 8001660:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001664:	69b8      	ldr	r0, [r7, #24]
 8001666:	f7ff fbf1 	bl	8000e4c <__aeabi_fdiv>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	681c      	ldr	r4, [r3, #0]
 8001674:	4610      	mov	r0, r2
 8001676:	f7ff fcfb 	bl	8001070 <__aeabi_f2uiz>
 800167a:	4603      	mov	r3, r0
 800167c:	63e3      	str	r3, [r4, #60]	; 0x3c

		mnoj = ceil(periodM1 * (anglePsteps / distPsteps));
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	b29b      	uxth	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fad5 	bl	8000c3c <__aeabi_i2f>
 8001692:	4603      	mov	r3, r0
 8001694:	69b9      	ldr	r1, [r7, #24]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fb24 	bl	8000ce4 <__aeabi_fmul>
 800169c:	4603      	mov	r3, r0
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff feb4 	bl	800140c <_ZSt4ceilf>
 80016a4:	6138      	str	r0, [r7, #16]

		htim2M2->Instance->PSC = psc;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	681c      	ldr	r4, [r3, #0]
 80016b6:	6938      	ldr	r0, [r7, #16]
 80016b8:	f7ff fcda 	bl	8001070 <__aeabi_f2uiz>
 80016bc:	4603      	mov	r3, r0
 80016be:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR3 = ceil(mnoj / 2);
 80016c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016c4:	6938      	ldr	r0, [r7, #16]
 80016c6:	f7ff fbc1 	bl	8000e4c <__aeabi_fdiv>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fe9d 	bl	800140c <_ZSt4ceilf>
 80016d2:	4602      	mov	r2, r0
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	681c      	ldr	r4, [r3, #0]
 80016da:	4610      	mov	r0, r2
 80016dc:	f7ff fcc8 	bl	8001070 <__aeabi_f2uiz>
 80016e0:	4603      	mov	r3, r0
 80016e2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80016e4:	e04e      	b.n	8001784 <_ZN7RoboArm15Move2MotorsSimuEft+0x2dc>
//	uint16_t impMore = (72000000/psc_max)/1000; 						//імпульсів кроків за секунду для мотора з більшої кількістю кроків  КРОКІВ НА СЕКУНДУ
//	uint16_t allSecMore = (distPsteps/impMore)*1000;		 				//загальний час роботи мотора із більшої кількістю кроків  мілісекунд
//	uint16_t stepSecM1 =  (anglePsteps/allSecMore)*1000; 					//кроків на секунду на двигуна LESS  250
//	uint16_t PSCmLess= 72000000 / (stepSecM1 * 1000); 					//дільник для мотора LESS

		htim2M2->Instance->PSC = psc;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	681c      	ldr	r4, [r3, #0]
 80016f6:	69b8      	ldr	r0, [r7, #24]
 80016f8:	f7ff fcba 	bl	8001070 <__aeabi_f2uiz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR3 = periodM1 / 2;
 8001700:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001704:	69b8      	ldr	r0, [r7, #24]
 8001706:	f7ff fba1 	bl	8000e4c <__aeabi_fdiv>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	681c      	ldr	r4, [r3, #0]
 8001714:	4610      	mov	r0, r2
 8001716:	f7ff fcab 	bl	8001070 <__aeabi_f2uiz>
 800171a:	4603      	mov	r3, r0
 800171c:	63e3      	str	r3, [r4, #60]	; 0x3c

		mnoj = ceil(periodM1 * (anglePsteps / distPsteps));
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	b29b      	uxth	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fa85 	bl	8000c3c <__aeabi_i2f>
 8001732:	4603      	mov	r3, r0
 8001734:	69b9      	ldr	r1, [r7, #24]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fad4 	bl	8000ce4 <__aeabi_fmul>
 800173c:	4603      	mov	r3, r0
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fe64 	bl	800140c <_ZSt4ceilf>
 8001744:	6138      	str	r0, [r7, #16]

		htim1M1->Instance->PSC = psc;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	681c      	ldr	r4, [r3, #0]
 8001756:	6938      	ldr	r0, [r7, #16]
 8001758:	f7ff fc8a 	bl	8001070 <__aeabi_f2uiz>
 800175c:	4603      	mov	r3, r0
 800175e:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR3 = ceil(mnoj / 2);
 8001760:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001764:	6938      	ldr	r0, [r7, #16]
 8001766:	f7ff fb71 	bl	8000e4c <__aeabi_fdiv>
 800176a:	4603      	mov	r3, r0
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fe4d 	bl	800140c <_ZSt4ceilf>
 8001772:	4602      	mov	r2, r0
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	681c      	ldr	r4, [r3, #0]
 800177a:	4610      	mov	r0, r2
 800177c:	f7ff fc78 	bl	8001070 <__aeabi_f2uiz>
 8001780:	4603      	mov	r3, r0
 8001782:	63e3      	str	r3, [r4, #60]	; 0x3c
	}

//Старт таймера та переривань

	stateMoveM1=true;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	stateMoveM2=true;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	HAL_TIM_Base_Start_IT(htim1M1);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	f002 fd05 	bl	80041a8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fd00 	bl	80041a8 <HAL_TIM_Base_Start_IT>
	 HAL_Delay(2);
 80017a8:	2002      	movs	r0, #2
 80017aa:	f001 f917 	bl	80029dc <HAL_Delay>
	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_3);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2108      	movs	r1, #8
 80017b4:	4618      	mov	r0, r3
 80017b6:	f002 fdc7 	bl	8004348 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_3);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2108      	movs	r1, #8
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fdc1 	bl	8004348 <HAL_TIM_PWM_Start>

	return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	372c      	adds	r7, #44	; 0x2c
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}
 80017d0:	cccccccd 	.word	0xcccccccd
 80017d4:	4019cccc 	.word	0x4019cccc
 80017d8:	16c16c17 	.word	0x16c16c17
 80017dc:	51eb851f 	.word	0x51eb851f
 80017e0:	40590000 	.word	0x40590000
 80017e4:	44160000 	.word	0x44160000

080017e8 <_ZN7RoboArm13setPrintStateEb>:

int RoboArm::OpenGripper() {
	return 0;
}

int RoboArm::setPrintState(bool state) {
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
	if (state) {
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <_ZN7RoboArm13setPrintStateEb+0x1c>
		PrintAllState = true;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8001802:	e003      	b.n	800180c <_ZN7RoboArm13setPrintStateEb+0x24>
	} else {
		PrintAllState = false;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}
	return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <_ZN7RoboArm13getPrintStateEv>:

bool RoboArm::getPrintState() {
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	if (PrintAllState) {
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <_ZN7RoboArm13getPrintStateEv+0x16>
		return true;
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <_ZN7RoboArm13getPrintStateEv+0x18>
	} else {
		return false;
 800182e:	2300      	movs	r3, #0
	}
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>:


int RoboArm::SetSettEncoders(SPI_HandleTypeDef &arm_hspi1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc1T, uint16_t CS_Pin_Enc1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc2T, uint16_t CS_Pin_Enc2T,
		uint8_t ResolutionEncodersT) {
 800183a:	b480      	push	{r7}
 800183c:	b085      	sub	sp, #20
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	807b      	strh	r3, [r7, #2]

	arm_hspi1 = &arm_hspi1T;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
	CS_GPIO_Port_Enc1 = CS_GPIO_Port_Enc1T;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	639a      	str	r2, [r3, #56]	; 0x38
	CS_Pin_Enc1 = CS_Pin_Enc1T;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	869a      	strh	r2, [r3, #52]	; 0x34
	CS_Pin_Enc2 = CS_Pin_Enc2T;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8bba      	ldrh	r2, [r7, #28]
 800185e:	879a      	strh	r2, [r3, #60]	; 0x3c
	CS_GPIO_Port_Enc2 = CS_GPIO_Port_Enc2T;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
	ResolutionEncoders = ResolutionEncodersT;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f897 2020 	ldrb.w	r2, [r7, #32]
 800186c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <_ZN7RoboArm16GetAngleEncodersEm>:

float RoboArm::GetAngleEncoders(uint32_t encoderValue) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	//	https://www.cuidevices.com/product/resource/amt22.pdf
	return calculateAngle(encoderValue, ResolutionEncoders);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f7ff fcfa 	bl	800128c <calculateAngle>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_ZN7RoboArm14GetPosEncodersEh>:

uint32_t RoboArm::GetPosEncoders(uint8_t numEnc) {
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70fb      	strb	r3, [r7, #3]
	switch (numEnc) {
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d002      	beq.n	80018ba <_ZN7RoboArm14GetPosEncodersEh+0x18>
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d012      	beq.n	80018de <_ZN7RoboArm14GetPosEncodersEh+0x3c>
 80018b8:	e023      	b.n	8001902 <_ZN7RoboArm14GetPosEncodersEh+0x60>
	case 1:
		posNowEnc1 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80018cc:	f7ff fc2e 	bl	800112c <getPositionSPI>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44
				ResolutionEncoders);
		return posNowEnc1;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	e012      	b.n	8001904 <_ZN7RoboArm14GetPosEncodersEh+0x62>
		break;
	case 2:
		posNowEnc2 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80018f0:	f7ff fc1c 	bl	800112c <getPositionSPI>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	649a      	str	r2, [r3, #72]	; 0x48
				ResolutionEncoders);
		return posNowEnc2;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001900:	e000      	b.n	8001904 <_ZN7RoboArm14GetPosEncodersEh+0x62>
		break;
	default:
		return 1;
 8001902:	2301      	movs	r3, #1
		break;
	}
	return 0;
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_ZN7RoboArm15SetZeroEncodersEv>:

int RoboArm::SetZeroEncoders() {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

	HAL_Delay(300);
 8001914:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001918:	f001 f860 	bl	80029dc <HAL_Delay>
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800192e:	f7ff fbfd 	bl	800112c <getPositionSPI>
			ResolutionEncoders);
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001944:	f7ff fbf2 	bl	800112c <getPositionSPI>
			ResolutionEncoders);
	//	resetAMT22();
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1); //воно само зчитає поточну позицію и засейвить її в пам'ять
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001954:	461a      	mov	r2, r3
 8001956:	f7ff fc77 	bl	8001248 <setZeroSPI>
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2); //воно само зчитає поточну позицію и засейвить її в пам'ять
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001966:	461a      	mov	r2, r3
 8001968:	f7ff fc6e 	bl	8001248 <setZeroSPI>
	HAL_Delay(250);
 800196c:	20fa      	movs	r0, #250	; 0xfa
 800196e:	f001 f835 	bl	80029dc <HAL_Delay>
	return 0;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_ZN7RoboArm13SetSettMotorsER17TIM_HandleTypeDefS1_P12GPIO_TypeDeftS3_tS3_tS3_t>:

int RoboArm::SetSettMotors(TIM_HandleTypeDef &htim1, TIM_HandleTypeDef &htim2,
		GPIO_TypeDef *Dir1_GPIO_Port_M1T, uint16_t Dir1_Pin_M1T,
		GPIO_TypeDef *Dir2_GPIO_Port_M2T, uint16_t Dir2_Pin_M2T,
		GPIO_TypeDef *EN1_GPIO_Port_M1T, uint16_t EN1_Pin_M1T,
		GPIO_TypeDef *EN2_GPIO_Port_M2T, uint16_t EN2_Pin_M2T) {
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
	htim1M1 = &htim1;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	605a      	str	r2, [r3, #4]
	htim2M2 = &htim2;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	609a      	str	r2, [r3, #8]

	Dir1_GPIO_Port_M1 = Dir1_GPIO_Port_M1T;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	60da      	str	r2, [r3, #12]
	Dir1_Pin_M1 = Dir1_Pin_M1T;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8b3a      	ldrh	r2, [r7, #24]
 80019a0:	821a      	strh	r2, [r3, #16]
	Dir2_GPIO_Port_M2 = Dir2_GPIO_Port_M2T;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	615a      	str	r2, [r3, #20]
	Dir2_Pin_M2 = Dir2_Pin_M2T;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8c3a      	ldrh	r2, [r7, #32]
 80019ac:	831a      	strh	r2, [r3, #24]
	EN1_GPIO_Port_M1 = EN1_GPIO_Port_M1T;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b2:	61da      	str	r2, [r3, #28]
	EN1_Pin_M1 = EN1_Pin_M1T;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019b8:	841a      	strh	r2, [r3, #32]
	EN2_GPIO_Port_M2 = EN2_GPIO_Port_M2T;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019be:	625a      	str	r2, [r3, #36]	; 0x24
	EN2_Pin_M2 = EN2_Pin_M2T;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80019c4:	851a      	strh	r2, [r3, #40]	; 0x28

	return 0;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
	...

080019d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4a06      	ldr	r2, [pc, #24]	; (80019fc <vApplicationGetIdleTaskMemory+0x28>)
 80019e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <vApplicationGetIdleTaskMemory+0x2c>)
 80019ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	200001f4 	.word	0x200001f4
 8001a00:	20000248 	.word	0x20000248

08001a04 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a04:	b5b0      	push	{r4, r5, r7, lr}
 8001a06:	b09e      	sub	sp, #120	; 0x78
 8001a08:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a0a:	f000 ffb5 	bl	8002978 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a0e:	f000 f887 	bl	8001b20 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a12:	f000 fa41 	bl	8001e98 <_ZL12MX_GPIO_Initv>
	MX_TIM1_Init();
 8001a16:	f000 f911 	bl	8001c3c <_ZL12MX_TIM1_Initv>
	MX_TIM2_Init();
 8001a1a:	f000 f9a7 	bl	8001d6c <_ZL12MX_TIM2_Initv>
	MX_SPI1_Init();
 8001a1e:	f000 f8d1 	bl	8001bc4 <_ZL12MX_SPI1_Initv>
	MX_USART1_UART_Init();
 8001a22:	f000 fa0b 	bl	8001e3c <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Init(&htim1);
 8001a26:	4832      	ldr	r0, [pc, #200]	; (8001af0 <main+0xec>)
 8001a28:	f002 fb66 	bl	80040f8 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 8001a2c:	4831      	ldr	r0, [pc, #196]	; (8001af4 <main+0xf0>)
 8001a2e:	f002 fb63 	bl	80040f8 <HAL_TIM_Base_Init>

	arm.SetSettMotors(htim1, htim2, Dir_GPIO_Port, Dir_Pin, Dir2_GPIO_Port,
 8001a32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a36:	9306      	str	r3, [sp, #24]
 8001a38:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <main+0xf4>)
 8001a3a:	9305      	str	r3, [sp, #20]
 8001a3c:	2320      	movs	r3, #32
 8001a3e:	9304      	str	r3, [sp, #16]
 8001a40:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <main+0xf4>)
 8001a42:	9303      	str	r3, [sp, #12]
 8001a44:	2340      	movs	r3, #64	; 0x40
 8001a46:	9302      	str	r3, [sp, #8]
 8001a48:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <main+0xf8>)
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	2340      	movs	r3, #64	; 0x40
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <main+0xf4>)
 8001a52:	4a28      	ldr	r2, [pc, #160]	; (8001af4 <main+0xf0>)
 8001a54:	4926      	ldr	r1, [pc, #152]	; (8001af0 <main+0xec>)
 8001a56:	482a      	ldr	r0, [pc, #168]	; (8001b00 <main+0xfc>)
 8001a58:	f7ff ff90 	bl	800197c <_ZN7RoboArm13SetSettMotorsER17TIM_HandleTypeDefS1_P12GPIO_TypeDeftS3_tS3_tS3_t>
			Dir_Pin, En_GPIO_Port, En_Pin, En2_GPIO_Port, En2_Pin);
	arm.SetSettEncoders(hspi1, CS_GPIO_Port, CS_Pin, CS2_GPIO_Port, CS2_Pin,
 8001a5c:	230e      	movs	r3, #14
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	2302      	movs	r3, #2
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <main+0xf8>)
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	4a24      	ldr	r2, [pc, #144]	; (8001afc <main+0xf8>)
 8001a6c:	4925      	ldr	r1, [pc, #148]	; (8001b04 <main+0x100>)
 8001a6e:	4824      	ldr	r0, [pc, #144]	; (8001b00 <main+0xfc>)
 8001a70:	f7ff fee3 	bl	800183a <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>
			14);
	arm.SetZeroEncoders();
 8001a74:	4822      	ldr	r0, [pc, #136]	; (8001b00 <main+0xfc>)
 8001a76:	f7ff ff49 	bl	800190c <_ZN7RoboArm15SetZeroEncodersEv>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <main+0x104>)
 8001a7c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001a80:	461d      	mov	r5, r3
 8001a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001a8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f004 f8e5 	bl	8005c64 <osThreadCreate>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <main+0x108>)
 8001a9e:	6013      	str	r3, [r2, #0]

	/* definition and creation of myAMT22Task */
	osThreadDef(myAMT22Task, StartAMT22Data, osPriorityIdle, 0, 128);
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <main+0x10c>)
 8001aa2:	f107 0420 	add.w	r4, r7, #32
 8001aa6:	461d      	mov	r5, r3
 8001aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myAMT22TaskHandle = osThreadCreate(osThread(myAMT22Task), NULL);
 8001ab4:	f107 0320 	add.w	r3, r7, #32
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 f8d2 	bl	8005c64 <osThreadCreate>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <main+0x110>)
 8001ac4:	6013      	str	r3, [r2, #0]

	/* definition and creation of myUARTTask */
	osThreadDef(myUARTTask, StartUARTData, osPriorityIdle, 0, 128);
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <main+0x114>)
 8001ac8:	1d3c      	adds	r4, r7, #4
 8001aca:	461d      	mov	r5, r3
 8001acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ad4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myUARTTaskHandle = osThreadCreate(osThread(myUARTTask), NULL);
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 f8c1 	bl	8005c64 <osThreadCreate>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <main+0x118>)
 8001ae6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001ae8:	f004 f8b5 	bl	8005c56 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8001aec:	e7fe      	b.n	8001aec <main+0xe8>
 8001aee:	bf00      	nop
 8001af0:	200004a0 	.word	0x200004a0
 8001af4:	200004e8 	.word	0x200004e8
 8001af8:	40010800 	.word	0x40010800
 8001afc:	40010c00 	.word	0x40010c00
 8001b00:	2000059c 	.word	0x2000059c
 8001b04:	20000448 	.word	0x20000448
 8001b08:	08009da4 	.word	0x08009da4
 8001b0c:	20000578 	.word	0x20000578
 8001b10:	08009dcc 	.word	0x08009dcc
 8001b14:	2000057c 	.word	0x2000057c
 8001b18:	08009df4 	.word	0x08009df4
 8001b1c:	20000580 	.word	0x20000580

08001b20 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b090      	sub	sp, #64	; 0x40
 8001b24:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001b26:	f107 0318 	add.w	r3, r7, #24
 8001b2a:	2228      	movs	r2, #40	; 0x28
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f006 f83d 	bl	8007bae <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b42:	2301      	movs	r3, #1
 8001b44:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b4a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b50:	2301      	movs	r3, #1
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b54:	2302      	movs	r3, #2
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b5e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b64:	f107 0318 	add.w	r3, r7, #24
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f001 fa89 	bl	8003080 <HAL_RCC_OscConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf14      	ite	ne
 8001b74:	2301      	movne	r3, #1
 8001b76:	2300      	moveq	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 8001b7e:	f000 fb85 	bl	800228c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b82:	230f      	movs	r3, #15
 8001b84:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b86:	2302      	movs	r3, #2
 8001b88:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b92:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 fcf1 	bl	8003584 <HAL_RCC_ClockConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 8001bb2:	f000 fb6b 	bl	800228c <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8001bb6:	f001 fdcf 	bl	8003758 <HAL_RCC_EnableCSS>
}
 8001bba:	bf00      	nop
 8001bbc:	3740      	adds	r7, #64	; 0x40
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <_ZL12MX_SPI1_Initv+0x70>)
 8001bca:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <_ZL12MX_SPI1_Initv+0x74>)
 8001bcc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <_ZL12MX_SPI1_Initv+0x70>)
 8001bd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bd4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <_ZL12MX_SPI1_Initv+0x70>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <_ZL12MX_SPI1_Initv+0x70>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <_ZL12MX_SPI1_Initv+0x70>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <_ZL12MX_SPI1_Initv+0x70>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <_ZL12MX_SPI1_Initv+0x70>)
 8001bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <_ZL12MX_SPI1_Initv+0x70>)
 8001bf8:	2218      	movs	r2, #24
 8001bfa:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <_ZL12MX_SPI1_Initv+0x70>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <_ZL12MX_SPI1_Initv+0x70>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <_ZL12MX_SPI1_Initv+0x70>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <_ZL12MX_SPI1_Initv+0x70>)
 8001c10:	220a      	movs	r2, #10
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001c14:	4807      	ldr	r0, [pc, #28]	; (8001c34 <_ZL12MX_SPI1_Initv+0x70>)
 8001c16:	f001 fe99 	bl	800394c <HAL_SPI_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf14      	ite	ne
 8001c20:	2301      	movne	r3, #1
 8001c22:	2300      	moveq	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 8001c2a:	f000 fb2f 	bl	800228c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000448 	.word	0x20000448
 8001c38:	40013000 	.word	0x40013000

08001c3c <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b092      	sub	sp, #72	; 0x48
 8001c40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
 8001c5c:	615a      	str	r2, [r3, #20]
 8001c5e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2220      	movs	r2, #32
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f005 ffa1 	bl	8007bae <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001c6c:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <_ZL12MX_TIM1_Initv+0x128>)
 8001c6e:	4a3e      	ldr	r2, [pc, #248]	; (8001d68 <_ZL12MX_TIM1_Initv+0x12c>)
 8001c70:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 8000 - 1;
 8001c72:	4b3c      	ldr	r3, [pc, #240]	; (8001d64 <_ZL12MX_TIM1_Initv+0x128>)
 8001c74:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001c78:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <_ZL12MX_TIM1_Initv+0x128>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8001c80:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <_ZL12MX_TIM1_Initv+0x128>)
 8001c82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c86:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <_ZL12MX_TIM1_Initv+0x128>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001c8e:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <_ZL12MX_TIM1_Initv+0x128>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c94:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <_ZL12MX_TIM1_Initv+0x128>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001c9a:	4832      	ldr	r0, [pc, #200]	; (8001d64 <_ZL12MX_TIM1_Initv+0x128>)
 8001c9c:	f002 fb04 	bl	80042a8 <HAL_TIM_PWM_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bf14      	ite	ne
 8001ca6:	2301      	movne	r3, #1
 8001ca8:	2300      	moveq	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <_ZL12MX_TIM1_Initv+0x78>
		Error_Handler();
 8001cb0:	f000 faec 	bl	800228c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001cbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4828      	ldr	r0, [pc, #160]	; (8001d64 <_ZL12MX_TIM1_Initv+0x128>)
 8001cc4:	f003 f842 	bl	8004d4c <HAL_TIMEx_MasterConfigSynchronization>
 8001cc8:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <_ZL12MX_TIM1_Initv+0xa0>
		Error_Handler();
 8001cd8:	f000 fad8 	bl	800228c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cdc:	2360      	movs	r3, #96	; 0x60
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8001cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4818      	ldr	r0, [pc, #96]	; (8001d64 <_ZL12MX_TIM1_Initv+0x128>)
 8001d02:	f002 fd2f 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 8001d06:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <_ZL12MX_TIM1_Initv+0xde>
		Error_Handler();
 8001d16:	f000 fab9 	bl	800228c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d32:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4809      	ldr	r0, [pc, #36]	; (8001d64 <_ZL12MX_TIM1_Initv+0x128>)
 8001d3e:	f003 f863 	bl	8004e08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d42:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf14      	ite	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	2300      	moveq	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <_ZL12MX_TIM1_Initv+0x11a>
		Error_Handler();
 8001d52:	f000 fa9b 	bl	800228c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001d56:	4803      	ldr	r0, [pc, #12]	; (8001d64 <_ZL12MX_TIM1_Initv+0x128>)
 8001d58:	f000 fba0 	bl	800249c <HAL_TIM_MspPostInit>

}
 8001d5c:	bf00      	nop
 8001d5e:	3748      	adds	r7, #72	; 0x48
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200004a0 	.word	0x200004a0
 8001d68:	40012c00 	.word	0x40012c00

08001d6c <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d72:	f107 0320 	add.w	r3, r7, #32
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001d8e:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <_ZL12MX_TIM2_Initv+0xcc>)
 8001d90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d94:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8000 - 1;
 8001d96:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <_ZL12MX_TIM2_Initv+0xcc>)
 8001d98:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001d9c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <_ZL12MX_TIM2_Initv+0xcc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8001da4:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <_ZL12MX_TIM2_Initv+0xcc>)
 8001da6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001daa:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <_ZL12MX_TIM2_Initv+0xcc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <_ZL12MX_TIM2_Initv+0xcc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001db8:	481f      	ldr	r0, [pc, #124]	; (8001e38 <_ZL12MX_TIM2_Initv+0xcc>)
 8001dba:	f002 fa75 	bl	80042a8 <HAL_TIM_PWM_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <_ZL12MX_TIM2_Initv+0x66>
		Error_Handler();
 8001dce:	f000 fa5d 	bl	800228c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001dda:	f107 0320 	add.w	r3, r7, #32
 8001dde:	4619      	mov	r1, r3
 8001de0:	4815      	ldr	r0, [pc, #84]	; (8001e38 <_ZL12MX_TIM2_Initv+0xcc>)
 8001de2:	f002 ffb3 	bl	8004d4c <HAL_TIMEx_MasterConfigSynchronization>
 8001de6:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <_ZL12MX_TIM2_Initv+0x8e>
		Error_Handler();
 8001df6:	f000 fa49 	bl	800228c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfa:	2360      	movs	r3, #96	; 0x60
 8001dfc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4809      	ldr	r0, [pc, #36]	; (8001e38 <_ZL12MX_TIM2_Initv+0xcc>)
 8001e12:	f002 fca7 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <_ZL12MX_TIM2_Initv+0xbe>
		Error_Handler();
 8001e26:	f000 fa31 	bl	800228c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001e2a:	4803      	ldr	r0, [pc, #12]	; (8001e38 <_ZL12MX_TIM2_Initv+0xcc>)
 8001e2c:	f000 fb36 	bl	800249c <HAL_TIM_MspPostInit>

}
 8001e30:	bf00      	nop
 8001e32:	3728      	adds	r7, #40	; 0x28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200004e8 	.word	0x200004e8

08001e3c <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e42:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001e44:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e4c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001e72:	4807      	ldr	r0, [pc, #28]	; (8001e90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e74:	f003 f82b 	bl	8004ece <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf14      	ite	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	2300      	moveq	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8001e88:	f000 fa00 	bl	800228c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000530 	.word	0x20000530
 8001e94:	40013800 	.word	0x40013800

08001e98 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001eac:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <_ZL12MX_GPIO_Initv+0xf8>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a37      	ldr	r2, [pc, #220]	; (8001f90 <_ZL12MX_GPIO_Initv+0xf8>)
 8001eb2:	f043 0310 	orr.w	r3, r3, #16
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b35      	ldr	r3, [pc, #212]	; (8001f90 <_ZL12MX_GPIO_Initv+0xf8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec4:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a31      	ldr	r2, [pc, #196]	; (8001f90 <_ZL12MX_GPIO_Initv+0xf8>)
 8001eca:	f043 0320 	orr.w	r3, r3, #32
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b2f      	ldr	r3, [pc, #188]	; (8001f90 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <_ZL12MX_GPIO_Initv+0xf8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef4:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a25      	ldr	r2, [pc, #148]	; (8001f90 <_ZL12MX_GPIO_Initv+0xf8>)
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <_ZL12MX_GPIO_Initv+0xf8>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f12:	4820      	ldr	r0, [pc, #128]	; (8001f94 <_ZL12MX_GPIO_Initv+0xfc>)
 8001f14:	f001 f89c 	bl	8003050 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, En_Pin | Dir_Pin, GPIO_PIN_RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2160      	movs	r1, #96	; 0x60
 8001f1c:	481e      	ldr	r0, [pc, #120]	; (8001f98 <_ZL12MX_GPIO_Initv+0x100>)
 8001f1e:	f001 f897 	bl	8003050 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CS_Pin | CS2_Pin | Dir2_Pin, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f240 4103 	movw	r1, #1027	; 0x403
 8001f28:	481c      	ldr	r0, [pc, #112]	; (8001f9c <_ZL12MX_GPIO_Initv+0x104>)
 8001f2a:	f001 f891 	bl	8003050 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Led_Pin */
	GPIO_InitStruct.Pin = Led_Pin;
 8001f2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f32:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	4619      	mov	r1, r3
 8001f46:	4813      	ldr	r0, [pc, #76]	; (8001f94 <_ZL12MX_GPIO_Initv+0xfc>)
 8001f48:	f000 fefe 	bl	8002d48 <HAL_GPIO_Init>

	/*Configure GPIO pins : En_Pin Dir_Pin */
	GPIO_InitStruct.Pin = En_Pin | Dir_Pin;
 8001f4c:	2360      	movs	r3, #96	; 0x60
 8001f4e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f50:	2301      	movs	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4619      	mov	r1, r3
 8001f62:	480d      	ldr	r0, [pc, #52]	; (8001f98 <_ZL12MX_GPIO_Initv+0x100>)
 8001f64:	f000 fef0 	bl	8002d48 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_Pin CS2_Pin Dir2_Pin */
	GPIO_InitStruct.Pin = CS_Pin | CS2_Pin | Dir2_Pin;
 8001f68:	f240 4303 	movw	r3, #1027	; 0x403
 8001f6c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4806      	ldr	r0, [pc, #24]	; (8001f9c <_ZL12MX_GPIO_Initv+0x104>)
 8001f82:	f000 fee1 	bl	8002d48 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */

}
 8001f86:	bf00      	nop
 8001f88:	3720      	adds	r7, #32
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40011000 	.word	0x40011000
 8001f98:	40010800 	.word	0x40010800
 8001f9c:	40010c00 	.word	0x40010c00

08001fa0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if (huart == &huart1) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a30      	ldr	r2, [pc, #192]	; (800206c <HAL_UART_RxCpltCallback+0xcc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d154      	bne.n	800205a <HAL_UART_RxCpltCallback+0xba>
//		if(!strcmp(rx_buffer,"TEXT")) {
//
//		}
		if (rx_buffer[0] == '1') {
 8001fb0:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_UART_RxCpltCallback+0xd0>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b31      	cmp	r3, #49	; 0x31
 8001fb6:	d14b      	bne.n	8002050 <HAL_UART_RxCpltCallback+0xb0>
			recAngle = ((rx_buffer[1] - '0') * 100)
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_UART_RxCpltCallback+0xd0>)
 8001fba:	785b      	ldrb	r3, [r3, #1]
 8001fbc:	3b30      	subs	r3, #48	; 0x30
					+ ((rx_buffer[2] - '0') * 10) + (rx_buffer[3] - '0');
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	0091      	lsls	r1, r2, #2
 8001fca:	461a      	mov	r2, r3
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_UART_RxCpltCallback+0xd0>)
 8001fd6:	789b      	ldrb	r3, [r3, #2]
 8001fd8:	3b30      	subs	r3, #48	; 0x30
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4619      	mov	r1, r3
 8001fde:	0089      	lsls	r1, r1, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HAL_UART_RxCpltCallback+0xd0>)
 8001fec:	78db      	ldrb	r3, [r3, #3]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b30      	subs	r3, #48	; 0x30
 8001ff6:	b29a      	uxth	r2, r3
			recAngle = ((rx_buffer[1] - '0') * 100)
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_UART_RxCpltCallback+0xd4>)
 8001ffa:	801a      	strh	r2, [r3, #0]
			recDist = ((rx_buffer[4] - '0') * 100)
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <HAL_UART_RxCpltCallback+0xd0>)
 8001ffe:	791b      	ldrb	r3, [r3, #4]
 8002000:	3b30      	subs	r3, #48	; 0x30
					+ ((rx_buffer[5] - '0') * 10) + (rx_buffer[6] - '0');
 8002002:	b29b      	uxth	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	0092      	lsls	r2, r2, #2
 8002008:	4413      	add	r3, r2
 800200a:	461a      	mov	r2, r3
 800200c:	0091      	lsls	r1, r2, #2
 800200e:	461a      	mov	r2, r3
 8002010:	460b      	mov	r3, r1
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_UART_RxCpltCallback+0xd0>)
 800201a:	795b      	ldrb	r3, [r3, #5]
 800201c:	3b30      	subs	r3, #48	; 0x30
 800201e:	b29b      	uxth	r3, r3
 8002020:	4619      	mov	r1, r3
 8002022:	0089      	lsls	r1, r1, #2
 8002024:	440b      	add	r3, r1
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	b29b      	uxth	r3, r3
 800202a:	4413      	add	r3, r2
 800202c:	b29a      	uxth	r2, r3
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_UART_RxCpltCallback+0xd0>)
 8002030:	799b      	ldrb	r3, [r3, #6]
 8002032:	b29b      	uxth	r3, r3
 8002034:	4413      	add	r3, r2
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b30      	subs	r3, #48	; 0x30
 800203a:	b29a      	uxth	r2, r3
			recDist = ((rx_buffer[4] - '0') * 100)
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <HAL_UART_RxCpltCallback+0xd8>)
 800203e:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, rx_buffer, 8);
 8002040:	2208      	movs	r2, #8
 8002042:	490b      	ldr	r1, [pc, #44]	; (8002070 <HAL_UART_RxCpltCallback+0xd0>)
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <HAL_UART_RxCpltCallback+0xcc>)
 8002046:	f003 f815 	bl	8005074 <HAL_UART_Transmit_IT>
			//	HAL_UART_Transmit_IT(&huart1,reinterpret_cast<uint8_t *>(recDist), sizeof(recDist));
			startMove=true;
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_UART_RxCpltCallback+0xdc>)
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]

		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002050:	2209      	movs	r2, #9
 8002052:	2100      	movs	r1, #0
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <HAL_UART_RxCpltCallback+0xd0>)
 8002056:	f005 fdaa 	bl	8007bae <memset>
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 800205a:	2209      	movs	r2, #9
 800205c:	4904      	ldr	r1, [pc, #16]	; (8002070 <HAL_UART_RxCpltCallback+0xd0>)
 800205e:	4803      	ldr	r0, [pc, #12]	; (800206c <HAL_UART_RxCpltCallback+0xcc>)
 8002060:	f003 f83d 	bl	80050de <HAL_UART_Receive_IT>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000530 	.word	0x20000530
 8002070:	20000584 	.word	0x20000584
 8002074:	2000058e 	.word	0x2000058e
 8002078:	20000590 	.word	0x20000590
 800207c:	2000058d 	.word	0x2000058d

08002080 <_Z16StartDefaultTaskPKv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	arm.setPrintState(true);
 8002088:	2101      	movs	r1, #1
 800208a:	480d      	ldr	r0, [pc, #52]	; (80020c0 <_Z16StartDefaultTaskPKv+0x40>)
 800208c:	f7ff fbac 	bl	80017e8 <_ZN7RoboArm13setPrintStateEb>
	/* Infinite loop */
	for (;;) {

		if(startMove) {
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <_Z16StartDefaultTaskPKv+0x44>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00e      	beq.n	80020b6 <_Z16StartDefaultTaskPKv+0x36>
			startMove=false;
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <_Z16StartDefaultTaskPKv+0x44>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
			arm.Move2MotorsSimu(recAngle, recDist);
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <_Z16StartDefaultTaskPKv+0x48>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fdc6 	bl	8000c34 <__aeabi_ui2f>
 80020a8:	4601      	mov	r1, r0
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <_Z16StartDefaultTaskPKv+0x4c>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	4803      	ldr	r0, [pc, #12]	; (80020c0 <_Z16StartDefaultTaskPKv+0x40>)
 80020b2:	f7ff f9f9 	bl	80014a8 <_ZN7RoboArm15Move2MotorsSimuEft>
		}


		osDelay(1);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f003 fe20 	bl	8005cfc <osDelay>
		if(startMove) {
 80020bc:	e7e8      	b.n	8002090 <_Z16StartDefaultTaskPKv+0x10>
 80020be:	bf00      	nop
 80020c0:	2000059c 	.word	0x2000059c
 80020c4:	2000058d 	.word	0x2000058d
 80020c8:	2000058e 	.word	0x2000058e
 80020cc:	20000590 	.word	0x20000590

080020d0 <_Z14StartAMT22DataPKv>:
 * @brief Function implementing the myAMT22Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAMT22Data */
void StartAMT22Data(void const *argument) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {



		osDelay(50);
 80020d8:	2032      	movs	r0, #50	; 0x32
 80020da:	f003 fe0f 	bl	8005cfc <osDelay>
 80020de:	e7fb      	b.n	80020d8 <_Z14StartAMT22DataPKv+0x8>

080020e0 <_Z13StartUARTDataPKv>:
 * @brief Function implementing the myUARTTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUARTData */
void StartUARTData(void const *argument) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08e      	sub	sp, #56	; 0x38
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUARTData */
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80020e8:	2209      	movs	r2, #9
 80020ea:	4932      	ldr	r1, [pc, #200]	; (80021b4 <_Z13StartUARTDataPKv+0xd4>)
 80020ec:	4832      	ldr	r0, [pc, #200]	; (80021b8 <_Z13StartUARTDataPKv+0xd8>)
 80020ee:	f002 fff6 	bl	80050de <HAL_UART_Receive_IT>
	uint32_t posnowT;
	uint32_t angleT = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	637b      	str	r3, [r7, #52]	; 0x34
	flagReadEnc = 1;
 80020f6:	4b31      	ldr	r3, [pc, #196]	; (80021bc <_Z13StartUARTDataPKv+0xdc>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	for (;;) {

		if (arm.getPrintState()) {
 80020fc:	4830      	ldr	r0, [pc, #192]	; (80021c0 <_Z13StartUARTDataPKv+0xe0>)
 80020fe:	f7ff fb8b 	bl	8001818 <_ZN7RoboArm13getPrintStateEv>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d051      	beq.n	80021ac <_Z13StartUARTDataPKv+0xcc>

			char str[40];
			posnowT = arm.GetPosEncoders(1);
 8002108:	2101      	movs	r1, #1
 800210a:	482d      	ldr	r0, [pc, #180]	; (80021c0 <_Z13StartUARTDataPKv+0xe0>)
 800210c:	f7ff fbc9 	bl	80018a2 <_ZN7RoboArm14GetPosEncodersEh>
 8002110:	6338      	str	r0, [r7, #48]	; 0x30
			angleT = arm.GetAngleEncoders(posnowT) * 100;
 8002112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002114:	482a      	ldr	r0, [pc, #168]	; (80021c0 <_Z13StartUARTDataPKv+0xe0>)
 8002116:	f7ff fbb1 	bl	800187c <_ZN7RoboArm16GetAngleEncodersEm>
 800211a:	4603      	mov	r3, r0
 800211c:	4929      	ldr	r1, [pc, #164]	; (80021c4 <_Z13StartUARTDataPKv+0xe4>)
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fde0 	bl	8000ce4 <__aeabi_fmul>
 8002124:	4603      	mov	r3, r0
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe ffa2 	bl	8001070 <__aeabi_f2uiz>
 800212c:	4603      	mov	r3, r0
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
			sprintf(str, "x: %d = %d \n", posnowT, angleT);
 8002130:	f107 0008 	add.w	r0, r7, #8
 8002134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002138:	4923      	ldr	r1, [pc, #140]	; (80021c8 <_Z13StartUARTDataPKv+0xe8>)
 800213a:	f005 fcd5 	bl	8007ae8 <siprintf>
			HAL_UART_Transmit(&huart1, reinterpret_cast<uint8_t*>(str),
					strlen(str),
 800213e:	f107 0308 	add.w	r3, r7, #8
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe f804 	bl	8000150 <strlen>
 8002148:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, reinterpret_cast<uint8_t*>(str),
 800214a:	b29a      	uxth	r2, r3
 800214c:	f107 0108 	add.w	r1, r7, #8
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
 8002154:	4818      	ldr	r0, [pc, #96]	; (80021b8 <_Z13StartUARTDataPKv+0xd8>)
 8002156:	f002 ff0a 	bl	8004f6e <HAL_UART_Transmit>
					HAL_MAX_DELAY);

			posnowT = arm.GetPosEncoders(2);
 800215a:	2102      	movs	r1, #2
 800215c:	4818      	ldr	r0, [pc, #96]	; (80021c0 <_Z13StartUARTDataPKv+0xe0>)
 800215e:	f7ff fba0 	bl	80018a2 <_ZN7RoboArm14GetPosEncodersEh>
 8002162:	6338      	str	r0, [r7, #48]	; 0x30
			angleT = arm.GetAngleEncoders(posnowT) * 100;
 8002164:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002166:	4816      	ldr	r0, [pc, #88]	; (80021c0 <_Z13StartUARTDataPKv+0xe0>)
 8002168:	f7ff fb88 	bl	800187c <_ZN7RoboArm16GetAngleEncodersEm>
 800216c:	4603      	mov	r3, r0
 800216e:	4915      	ldr	r1, [pc, #84]	; (80021c4 <_Z13StartUARTDataPKv+0xe4>)
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fdb7 	bl	8000ce4 <__aeabi_fmul>
 8002176:	4603      	mov	r3, r0
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe ff79 	bl	8001070 <__aeabi_f2uiz>
 800217e:	4603      	mov	r3, r0
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
			sprintf(str, "y: %d = %d \n", posnowT, angleT);
 8002182:	f107 0008 	add.w	r0, r7, #8
 8002186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800218a:	4910      	ldr	r1, [pc, #64]	; (80021cc <_Z13StartUARTDataPKv+0xec>)
 800218c:	f005 fcac 	bl	8007ae8 <siprintf>
			HAL_UART_Transmit(&huart1, reinterpret_cast<uint8_t*>(str),
					strlen(str),
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	4618      	mov	r0, r3
 8002196:	f7fd ffdb 	bl	8000150 <strlen>
 800219a:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, reinterpret_cast<uint8_t*>(str),
 800219c:	b29a      	uxth	r2, r3
 800219e:	f107 0108 	add.w	r1, r7, #8
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	4804      	ldr	r0, [pc, #16]	; (80021b8 <_Z13StartUARTDataPKv+0xd8>)
 80021a8:	f002 fee1 	bl	8004f6e <HAL_UART_Transmit>
					HAL_MAX_DELAY);

		}

		osDelay(200);
 80021ac:	20c8      	movs	r0, #200	; 0xc8
 80021ae:	f003 fda5 	bl	8005cfc <osDelay>
	}
 80021b2:	e7a3      	b.n	80020fc <_Z13StartUARTDataPKv+0x1c>
 80021b4:	20000584 	.word	0x20000584
 80021b8:	20000530 	.word	0x20000530
 80021bc:	20000592 	.word	0x20000592
 80021c0:	2000059c 	.word	0x2000059c
 80021c4:	42c80000 	.word	0x42c80000
 80021c8:	08009e10 	.word	0x08009e10
 80021cc:	08009e20 	.word	0x08009e20

080021d0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a24      	ldr	r2, [pc, #144]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d11a      	bne.n	8002218 <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		++cntImpulse1;
 80021e2:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3301      	adds	r3, #1
 80021e8:	4a22      	ldr	r2, [pc, #136]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80021ea:	6013      	str	r3, [r2, #0]

		if (cntImpulse1 >= arm.anglePsteps) {
 80021ec:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80021ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d835      	bhi.n	8002266 <HAL_TIM_PeriodElapsedCallback+0x96>
			//	HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80021fa:	2108      	movs	r1, #8
 80021fc:	481f      	ldr	r0, [pc, #124]	; (800227c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80021fe:	f002 f945 	bl	800448c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002202:	481e      	ldr	r0, [pc, #120]	; (800227c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002204:	f002 f822 	bl	800424c <HAL_TIM_Base_Stop_IT>
			//	HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);

			cntImpulse1=0;
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
			arm.stateMoveM1=false;
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	/* USER CODE END Callback 0 */

	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002216:	e026      	b.n	8002266 <HAL_TIM_PeriodElapsedCallback+0x96>
	} else if (htim->Instance == TIM2) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	d11a      	bne.n	8002258 <HAL_TIM_PeriodElapsedCallback+0x88>
		++cntImpulse2;
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	4a15      	ldr	r2, [pc, #84]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800222a:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= arm.distPsteps) {
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	461a      	mov	r2, r3
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d815      	bhi.n	8002266 <HAL_TIM_PeriodElapsedCallback+0x96>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800223a:	2108      	movs	r1, #8
 800223c:	4811      	ldr	r0, [pc, #68]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800223e:	f002 f925 	bl	800448c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8002242:	4810      	ldr	r0, [pc, #64]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002244:	f002 f802 	bl	800424c <HAL_TIM_Base_Stop_IT>
			cntImpulse2=0;
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
			arm.stateMoveM1=false;
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 8002256:	e006      	b.n	8002266 <HAL_TIM_PeriodElapsedCallback+0x96>
	} else if (htim->Instance == TIM4) {
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d101      	bne.n	8002266 <HAL_TIM_PeriodElapsedCallback+0x96>
		HAL_IncTick();
 8002262:	f000 fb9f 	bl	80029a4 <HAL_IncTick>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40012c00 	.word	0x40012c00
 8002274:	20000594 	.word	0x20000594
 8002278:	2000059c 	.word	0x2000059c
 800227c:	200004a0 	.word	0x200004a0
 8002280:	20000598 	.word	0x20000598
 8002284:	200004e8 	.word	0x200004e8
 8002288:	40000800 	.word	0x40000800

0800228c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002290:	b672      	cpsid	i
}
 8002292:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002294:	e7fe      	b.n	8002294 <Error_Handler+0x8>
	...

08002298 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d109      	bne.n	80022bc <_Z41__static_initialization_and_destruction_0ii+0x24>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d104      	bne.n	80022bc <_Z41__static_initialization_and_destruction_0ii+0x24>
RoboArm arm(120, 124);
 80022b2:	227c      	movs	r2, #124	; 0x7c
 80022b4:	2178      	movs	r1, #120	; 0x78
 80022b6:	4803      	ldr	r0, [pc, #12]	; (80022c4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80022b8:	f7ff f8b4 	bl	8001424 <_ZN7RoboArmC1Ehh>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	2000059c 	.word	0x2000059c

080022c8 <_GLOBAL__sub_I_hspi1>:
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022d0:	2001      	movs	r0, #1
 80022d2:	f7ff ffe1 	bl	8002298 <_Z41__static_initialization_and_destruction_0ii>
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_MspInit+0x78>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_MspInit+0x78>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6193      	str	r3, [r2, #24]
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_MspInit+0x78>)
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_MspInit+0x78>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	4a15      	ldr	r2, [pc, #84]	; (8002350 <HAL_MspInit+0x78>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002300:	61d3      	str	r3, [r2, #28]
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_MspInit+0x78>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	210f      	movs	r1, #15
 8002312:	f06f 0001 	mvn.w	r0, #1
 8002316:	f000 fc3a 	bl	8002b8e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2105      	movs	r1, #5
 800231e:	2005      	movs	r0, #5
 8002320:	f000 fc35 	bl	8002b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002324:	2005      	movs	r0, #5
 8002326:	f000 fc4e 	bl	8002bc6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_MspInit+0x7c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_MspInit+0x7c>)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	40010000 	.word	0x40010000

08002358 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a26      	ldr	r2, [pc, #152]	; (800240c <HAL_SPI_MspInit+0xb4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d145      	bne.n	8002404 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002378:	4b25      	ldr	r3, [pc, #148]	; (8002410 <HAL_SPI_MspInit+0xb8>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a24      	ldr	r2, [pc, #144]	; (8002410 <HAL_SPI_MspInit+0xb8>)
 800237e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b22      	ldr	r3, [pc, #136]	; (8002410 <HAL_SPI_MspInit+0xb8>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002390:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <HAL_SPI_MspInit+0xb8>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <HAL_SPI_MspInit+0xb8>)
 8002396:	f043 0308 	orr.w	r3, r3, #8
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <HAL_SPI_MspInit+0xb8>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80023a8:	2328      	movs	r3, #40	; 0x28
 80023aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4619      	mov	r1, r3
 80023ba:	4816      	ldr	r0, [pc, #88]	; (8002414 <HAL_SPI_MspInit+0xbc>)
 80023bc:	f000 fcc4 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023c0:	2310      	movs	r3, #16
 80023c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	4810      	ldr	r0, [pc, #64]	; (8002414 <HAL_SPI_MspInit+0xbc>)
 80023d4:	f000 fcb8 	bl	8002d48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <HAL_SPI_MspInit+0xc0>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <HAL_SPI_MspInit+0xc0>)
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2105      	movs	r1, #5
 80023f8:	2023      	movs	r0, #35	; 0x23
 80023fa:	f000 fbc8 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80023fe:	2023      	movs	r0, #35	; 0x23
 8002400:	f000 fbe1 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002404:	bf00      	nop
 8002406:	3728      	adds	r7, #40	; 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40013000 	.word	0x40013000
 8002410:	40021000 	.word	0x40021000
 8002414:	40010c00 	.word	0x40010c00
 8002418:	40010000 	.word	0x40010000

0800241c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <HAL_TIM_PWM_MspInit+0x78>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d114      	bne.n	8002458 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <HAL_TIM_PWM_MspInit+0x7c>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	4a19      	ldr	r2, [pc, #100]	; (8002498 <HAL_TIM_PWM_MspInit+0x7c>)
 8002434:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002438:	6193      	str	r3, [r2, #24]
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_TIM_PWM_MspInit+0x7c>)
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2105      	movs	r1, #5
 800244a:	2019      	movs	r0, #25
 800244c:	f000 fb9f 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002450:	2019      	movs	r0, #25
 8002452:	f000 fbb8 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002456:	e018      	b.n	800248a <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002460:	d113      	bne.n	800248a <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_TIM_PWM_MspInit+0x7c>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <HAL_TIM_PWM_MspInit+0x7c>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	61d3      	str	r3, [r2, #28]
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_TIM_PWM_MspInit+0x7c>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2105      	movs	r1, #5
 800247e:	201c      	movs	r0, #28
 8002480:	f000 fb85 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002484:	201c      	movs	r0, #28
 8002486:	f000 fb9e 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40012c00 	.word	0x40012c00
 8002498:	40021000 	.word	0x40021000

0800249c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1f      	ldr	r2, [pc, #124]	; (8002534 <HAL_TIM_MspPostInit+0x98>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d119      	bne.n	80024f0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024bc:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <HAL_TIM_MspPostInit+0x9c>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <HAL_TIM_MspPostInit+0x9c>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_TIM_MspPostInit+0x9c>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024de:	2303      	movs	r3, #3
 80024e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4619      	mov	r1, r3
 80024e8:	4814      	ldr	r0, [pc, #80]	; (800253c <HAL_TIM_MspPostInit+0xa0>)
 80024ea:	f000 fc2d 	bl	8002d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024ee:	e01c      	b.n	800252a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f8:	d117      	bne.n	800252a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <HAL_TIM_MspPostInit+0x9c>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <HAL_TIM_MspPostInit+0x9c>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6193      	str	r3, [r2, #24]
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <HAL_TIM_MspPostInit+0x9c>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002512:	2304      	movs	r3, #4
 8002514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f107 0310 	add.w	r3, r7, #16
 8002522:	4619      	mov	r1, r3
 8002524:	4805      	ldr	r0, [pc, #20]	; (800253c <HAL_TIM_MspPostInit+0xa0>)
 8002526:	f000 fc0f 	bl	8002d48 <HAL_GPIO_Init>
}
 800252a:	bf00      	nop
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40021000 	.word	0x40021000
 800253c:	40010800 	.word	0x40010800

08002540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <HAL_UART_MspInit+0xb4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d145      	bne.n	80025ec <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_UART_MspInit+0xb8>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	4a24      	ldr	r2, [pc, #144]	; (80025f8 <HAL_UART_MspInit+0xb8>)
 8002566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256a:	6193      	str	r3, [r2, #24]
 800256c:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_UART_MspInit+0xb8>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_UART_MspInit+0xb8>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	4a1e      	ldr	r2, [pc, #120]	; (80025f8 <HAL_UART_MspInit+0xb8>)
 800257e:	f043 0308 	orr.w	r3, r3, #8
 8002582:	6193      	str	r3, [r2, #24]
 8002584:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_UART_MspInit+0xb8>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002590:	2340      	movs	r3, #64	; 0x40
 8002592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	4816      	ldr	r0, [pc, #88]	; (80025fc <HAL_UART_MspInit+0xbc>)
 80025a4:	f000 fbd0 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4619      	mov	r1, r3
 80025ba:	4810      	ldr	r0, [pc, #64]	; (80025fc <HAL_UART_MspInit+0xbc>)
 80025bc:	f000 fbc4 	bl	8002d48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80025c0:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <HAL_UART_MspInit+0xc0>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	f043 0304 	orr.w	r3, r3, #4
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <HAL_UART_MspInit+0xc0>)
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80025dc:	2200      	movs	r2, #0
 80025de:	2105      	movs	r1, #5
 80025e0:	2025      	movs	r0, #37	; 0x25
 80025e2:	f000 fad4 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025e6:	2025      	movs	r0, #37	; 0x25
 80025e8:	f000 faed 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025ec:	bf00      	nop
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40013800 	.word	0x40013800
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40010c00 	.word	0x40010c00
 8002600:	40010000 	.word	0x40010000

08002604 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08e      	sub	sp, #56	; 0x38
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800261a:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_InitTick+0xe8>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a33      	ldr	r2, [pc, #204]	; (80026ec <HAL_InitTick+0xe8>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	61d3      	str	r3, [r2, #28]
 8002626:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_InitTick+0xe8>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002632:	f107 0210 	add.w	r2, r7, #16
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f001 f91d 	bl	800387c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800264c:	f001 f8ee 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8002650:	6378      	str	r0, [r7, #52]	; 0x34
 8002652:	e004      	b.n	800265e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002654:	f001 f8ea 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8002658:	4603      	mov	r3, r0
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800265e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002660:	4a23      	ldr	r2, [pc, #140]	; (80026f0 <HAL_InitTick+0xec>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	0c9b      	lsrs	r3, r3, #18
 8002668:	3b01      	subs	r3, #1
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800266c:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <HAL_InitTick+0xf0>)
 800266e:	4a22      	ldr	r2, [pc, #136]	; (80026f8 <HAL_InitTick+0xf4>)
 8002670:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_InitTick+0xf0>)
 8002674:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002678:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800267a:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <HAL_InitTick+0xf0>)
 800267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002680:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <HAL_InitTick+0xf0>)
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_InitTick+0xf0>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_InitTick+0xf0>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002692:	4818      	ldr	r0, [pc, #96]	; (80026f4 <HAL_InitTick+0xf0>)
 8002694:	f001 fd30 	bl	80040f8 <HAL_TIM_Base_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800269e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d11b      	bne.n	80026de <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80026a6:	4813      	ldr	r0, [pc, #76]	; (80026f4 <HAL_InitTick+0xf0>)
 80026a8:	f001 fd7e 	bl	80041a8 <HAL_TIM_Base_Start_IT>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80026b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d111      	bne.n	80026de <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026ba:	201e      	movs	r0, #30
 80026bc:	f000 fa83 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b0f      	cmp	r3, #15
 80026c4:	d808      	bhi.n	80026d8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80026c6:	2200      	movs	r2, #0
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	201e      	movs	r0, #30
 80026cc:	f000 fa5f 	bl	8002b8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026d0:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <HAL_InitTick+0xf8>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e002      	b.n	80026de <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80026de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3738      	adds	r7, #56	; 0x38
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	431bde83 	.word	0x431bde83
 80026f4:	20000604 	.word	0x20000604
 80026f8:	40000800 	.word	0x40000800
 80026fc:	20000004 	.word	0x20000004

08002700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002704:	f001 f8ea 	bl	80038dc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <NMI_Handler+0x8>

0800270a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <HardFault_Handler+0x4>

08002710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <MemManage_Handler+0x4>

08002716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271a:	e7fe      	b.n	800271a <BusFault_Handler+0x4>

0800271c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <UsageFault_Handler+0x4>

08002722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
	...

0800273c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <TIM1_UP_IRQHandler+0x10>)
 8002742:	f001 ff07 	bl	8004554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200004a0 	.word	0x200004a0

08002750 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <TIM2_IRQHandler+0x10>)
 8002756:	f001 fefd 	bl	8004554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200004e8 	.word	0x200004e8

08002764 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <TIM4_IRQHandler+0x10>)
 800276a:	f001 fef3 	bl	8004554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000604 	.word	0x20000604

08002778 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <SPI1_IRQHandler+0x10>)
 800277e:	f001 fb19 	bl	8003db4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000448 	.word	0x20000448

0800278c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <USART1_IRQHandler+0x10>)
 8002792:	f002 fcc9 	bl	8005128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000530 	.word	0x20000530

080027a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return 1;
 80027a4:	2301      	movs	r3, #1
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <_kill>:

int _kill(int pid, int sig)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027b8:	f005 fa4c 	bl	8007c54 <__errno>
 80027bc:	4603      	mov	r3, r0
 80027be:	2216      	movs	r2, #22
 80027c0:	601a      	str	r2, [r3, #0]
  return -1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_exit>:

void _exit (int status)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027d6:	f04f 31ff 	mov.w	r1, #4294967295
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ffe7 	bl	80027ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80027e0:	e7fe      	b.n	80027e0 <_exit+0x12>

080027e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e00a      	b.n	800280a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027f4:	f3af 8000 	nop.w
 80027f8:	4601      	mov	r1, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	60ba      	str	r2, [r7, #8]
 8002800:	b2ca      	uxtb	r2, r1
 8002802:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3301      	adds	r3, #1
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	429a      	cmp	r2, r3
 8002810:	dbf0      	blt.n	80027f4 <_read+0x12>
  }

  return len;
 8002812:	687b      	ldr	r3, [r7, #4]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	e009      	b.n	8002842 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	60ba      	str	r2, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3301      	adds	r3, #1
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	429a      	cmp	r2, r3
 8002848:	dbf1      	blt.n	800282e <_write+0x12>
  }
  return len;
 800284a:	687b      	ldr	r3, [r7, #4]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_close>:

int _close(int file)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800285c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800287a:	605a      	str	r2, [r3, #4]
  return 0;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <_isatty>:

int _isatty(int file)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002890:	2301      	movs	r3, #1
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <_sbrk+0x5c>)
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <_sbrk+0x60>)
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <_sbrk+0x64>)
 80028d2:	4a12      	ldr	r2, [pc, #72]	; (800291c <_sbrk+0x68>)
 80028d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <_sbrk+0x64>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d207      	bcs.n	80028f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e4:	f005 f9b6 	bl	8007c54 <__errno>
 80028e8:	4603      	mov	r3, r0
 80028ea:	220c      	movs	r2, #12
 80028ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
 80028f2:	e009      	b.n	8002908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <_sbrk+0x64>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028fa:	4b07      	ldr	r3, [pc, #28]	; (8002918 <_sbrk+0x64>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <_sbrk+0x64>)
 8002904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20005000 	.word	0x20005000
 8002914:	00000400 	.word	0x00000400
 8002918:	2000064c 	.word	0x2000064c
 800291c:	200014f0 	.word	0x200014f0

08002920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800292c:	f7ff fff8 	bl	8002920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002930:	480b      	ldr	r0, [pc, #44]	; (8002960 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002932:	490c      	ldr	r1, [pc, #48]	; (8002964 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002934:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002938:	e002      	b.n	8002940 <LoopCopyDataInit>

0800293a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800293c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293e:	3304      	adds	r3, #4

08002940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002944:	d3f9      	bcc.n	800293a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002946:	4a09      	ldr	r2, [pc, #36]	; (800296c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002948:	4c09      	ldr	r4, [pc, #36]	; (8002970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800294c:	e001      	b.n	8002952 <LoopFillZerobss>

0800294e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002950:	3204      	adds	r2, #4

08002952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002954:	d3fb      	bcc.n	800294e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002956:	f005 f983 	bl	8007c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800295a:	f7ff f853 	bl	8001a04 <main>
  bx lr
 800295e:	4770      	bx	lr
  ldr r0, =_sdata
 8002960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002964:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002968:	0800a1e0 	.word	0x0800a1e0
  ldr r2, =_sbss
 800296c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002970:	200014ec 	.word	0x200014ec

08002974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002974:	e7fe      	b.n	8002974 <ADC1_2_IRQHandler>
	...

08002978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_Init+0x28>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <HAL_Init+0x28>)
 8002982:	f043 0310 	orr.w	r3, r3, #16
 8002986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002988:	2003      	movs	r0, #3
 800298a:	f000 f8f5 	bl	8002b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800298e:	200f      	movs	r0, #15
 8002990:	f7ff fe38 	bl	8002604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002994:	f7ff fca0 	bl	80022d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40022000 	.word	0x40022000

080029a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_IncTick+0x1c>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_IncTick+0x20>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	4a03      	ldr	r2, [pc, #12]	; (80029c4 <HAL_IncTick+0x20>)
 80029b6:	6013      	str	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	20000008 	.word	0x20000008
 80029c4:	20000650 	.word	0x20000650

080029c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return uwTick;
 80029cc:	4b02      	ldr	r3, [pc, #8]	; (80029d8 <HAL_GetTick+0x10>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	20000650 	.word	0x20000650

080029dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7ff fff0 	bl	80029c8 <HAL_GetTick>
 80029e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d005      	beq.n	8002a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <HAL_Delay+0x44>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4413      	add	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a02:	bf00      	nop
 8002a04:	f7ff ffe0 	bl	80029c8 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d8f7      	bhi.n	8002a04 <HAL_Delay+0x28>
  {
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000008 	.word	0x20000008

08002a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a56:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	60d3      	str	r3, [r2, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <__NVIC_GetPriorityGrouping+0x18>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	f003 0307 	and.w	r3, r3, #7
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	db0b      	blt.n	8002ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4906      	ldr	r1, [pc, #24]	; (8002abc <__NVIC_EnableIRQ+0x34>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	e000e100 	.word	0xe000e100

08002ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	6039      	str	r1, [r7, #0]
 8002aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	db0a      	blt.n	8002aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	490c      	ldr	r1, [pc, #48]	; (8002b0c <__NVIC_SetPriority+0x4c>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	0112      	lsls	r2, r2, #4
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae8:	e00a      	b.n	8002b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4908      	ldr	r1, [pc, #32]	; (8002b10 <__NVIC_SetPriority+0x50>)
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	3b04      	subs	r3, #4
 8002af8:	0112      	lsls	r2, r2, #4
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	440b      	add	r3, r1
 8002afe:	761a      	strb	r2, [r3, #24]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000e100 	.word	0xe000e100
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f1c3 0307 	rsb	r3, r3, #7
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	bf28      	it	cs
 8002b32:	2304      	movcs	r3, #4
 8002b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d902      	bls.n	8002b44 <NVIC_EncodePriority+0x30>
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3b03      	subs	r3, #3
 8002b42:	e000      	b.n	8002b46 <NVIC_EncodePriority+0x32>
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b48:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	401a      	ands	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	43d9      	mvns	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	4313      	orrs	r3, r2
         );
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3724      	adds	r7, #36	; 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ff4f 	bl	8002a24 <__NVIC_SetPriorityGrouping>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba0:	f7ff ff64 	bl	8002a6c <__NVIC_GetPriorityGrouping>
 8002ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	6978      	ldr	r0, [r7, #20]
 8002bac:	f7ff ffb2 	bl	8002b14 <NVIC_EncodePriority>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff81 	bl	8002ac0 <__NVIC_SetPriority>
}
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff57 	bl	8002a88 <__NVIC_EnableIRQ>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d008      	beq.n	8002c0c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e020      	b.n	8002c4e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 020e 	bic.w	r2, r2, #14
 8002c1a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d005      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2204      	movs	r2, #4
 8002c74:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
 8002c7a:	e051      	b.n	8002d20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 020e 	bic.w	r2, r2, #14
 8002c8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a22      	ldr	r2, [pc, #136]	; (8002d2c <HAL_DMA_Abort_IT+0xd4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d029      	beq.n	8002cfa <HAL_DMA_Abort_IT+0xa2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a21      	ldr	r2, [pc, #132]	; (8002d30 <HAL_DMA_Abort_IT+0xd8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x9e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1f      	ldr	r2, [pc, #124]	; (8002d34 <HAL_DMA_Abort_IT+0xdc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01a      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x98>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1e      	ldr	r2, [pc, #120]	; (8002d38 <HAL_DMA_Abort_IT+0xe0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d012      	beq.n	8002cea <HAL_DMA_Abort_IT+0x92>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1c      	ldr	r2, [pc, #112]	; (8002d3c <HAL_DMA_Abort_IT+0xe4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_DMA_Abort_IT+0x8c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1b      	ldr	r2, [pc, #108]	; (8002d40 <HAL_DMA_Abort_IT+0xe8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d102      	bne.n	8002cde <HAL_DMA_Abort_IT+0x86>
 8002cd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002cdc:	e00e      	b.n	8002cfc <HAL_DMA_Abort_IT+0xa4>
 8002cde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce2:	e00b      	b.n	8002cfc <HAL_DMA_Abort_IT+0xa4>
 8002ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ce8:	e008      	b.n	8002cfc <HAL_DMA_Abort_IT+0xa4>
 8002cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cee:	e005      	b.n	8002cfc <HAL_DMA_Abort_IT+0xa4>
 8002cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cf4:	e002      	b.n	8002cfc <HAL_DMA_Abort_IT+0xa4>
 8002cf6:	2310      	movs	r3, #16
 8002cf8:	e000      	b.n	8002cfc <HAL_DMA_Abort_IT+0xa4>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	4a11      	ldr	r2, [pc, #68]	; (8002d44 <HAL_DMA_Abort_IT+0xec>)
 8002cfe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
    } 
  }
  return status;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40020008 	.word	0x40020008
 8002d30:	4002001c 	.word	0x4002001c
 8002d34:	40020030 	.word	0x40020030
 8002d38:	40020044 	.word	0x40020044
 8002d3c:	40020058 	.word	0x40020058
 8002d40:	4002006c 	.word	0x4002006c
 8002d44:	40020000 	.word	0x40020000

08002d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b08b      	sub	sp, #44	; 0x2c
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d52:	2300      	movs	r3, #0
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5a:	e169      	b.n	8003030 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	f040 8158 	bne.w	800302a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a9a      	ldr	r2, [pc, #616]	; (8002fe8 <HAL_GPIO_Init+0x2a0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d05e      	beq.n	8002e42 <HAL_GPIO_Init+0xfa>
 8002d84:	4a98      	ldr	r2, [pc, #608]	; (8002fe8 <HAL_GPIO_Init+0x2a0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d875      	bhi.n	8002e76 <HAL_GPIO_Init+0x12e>
 8002d8a:	4a98      	ldr	r2, [pc, #608]	; (8002fec <HAL_GPIO_Init+0x2a4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d058      	beq.n	8002e42 <HAL_GPIO_Init+0xfa>
 8002d90:	4a96      	ldr	r2, [pc, #600]	; (8002fec <HAL_GPIO_Init+0x2a4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d86f      	bhi.n	8002e76 <HAL_GPIO_Init+0x12e>
 8002d96:	4a96      	ldr	r2, [pc, #600]	; (8002ff0 <HAL_GPIO_Init+0x2a8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d052      	beq.n	8002e42 <HAL_GPIO_Init+0xfa>
 8002d9c:	4a94      	ldr	r2, [pc, #592]	; (8002ff0 <HAL_GPIO_Init+0x2a8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d869      	bhi.n	8002e76 <HAL_GPIO_Init+0x12e>
 8002da2:	4a94      	ldr	r2, [pc, #592]	; (8002ff4 <HAL_GPIO_Init+0x2ac>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d04c      	beq.n	8002e42 <HAL_GPIO_Init+0xfa>
 8002da8:	4a92      	ldr	r2, [pc, #584]	; (8002ff4 <HAL_GPIO_Init+0x2ac>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d863      	bhi.n	8002e76 <HAL_GPIO_Init+0x12e>
 8002dae:	4a92      	ldr	r2, [pc, #584]	; (8002ff8 <HAL_GPIO_Init+0x2b0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d046      	beq.n	8002e42 <HAL_GPIO_Init+0xfa>
 8002db4:	4a90      	ldr	r2, [pc, #576]	; (8002ff8 <HAL_GPIO_Init+0x2b0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d85d      	bhi.n	8002e76 <HAL_GPIO_Init+0x12e>
 8002dba:	2b12      	cmp	r3, #18
 8002dbc:	d82a      	bhi.n	8002e14 <HAL_GPIO_Init+0xcc>
 8002dbe:	2b12      	cmp	r3, #18
 8002dc0:	d859      	bhi.n	8002e76 <HAL_GPIO_Init+0x12e>
 8002dc2:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <HAL_GPIO_Init+0x80>)
 8002dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc8:	08002e43 	.word	0x08002e43
 8002dcc:	08002e1d 	.word	0x08002e1d
 8002dd0:	08002e2f 	.word	0x08002e2f
 8002dd4:	08002e71 	.word	0x08002e71
 8002dd8:	08002e77 	.word	0x08002e77
 8002ddc:	08002e77 	.word	0x08002e77
 8002de0:	08002e77 	.word	0x08002e77
 8002de4:	08002e77 	.word	0x08002e77
 8002de8:	08002e77 	.word	0x08002e77
 8002dec:	08002e77 	.word	0x08002e77
 8002df0:	08002e77 	.word	0x08002e77
 8002df4:	08002e77 	.word	0x08002e77
 8002df8:	08002e77 	.word	0x08002e77
 8002dfc:	08002e77 	.word	0x08002e77
 8002e00:	08002e77 	.word	0x08002e77
 8002e04:	08002e77 	.word	0x08002e77
 8002e08:	08002e77 	.word	0x08002e77
 8002e0c:	08002e25 	.word	0x08002e25
 8002e10:	08002e39 	.word	0x08002e39
 8002e14:	4a79      	ldr	r2, [pc, #484]	; (8002ffc <HAL_GPIO_Init+0x2b4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e1a:	e02c      	b.n	8002e76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	623b      	str	r3, [r7, #32]
          break;
 8002e22:	e029      	b.n	8002e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	623b      	str	r3, [r7, #32]
          break;
 8002e2c:	e024      	b.n	8002e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	3308      	adds	r3, #8
 8002e34:	623b      	str	r3, [r7, #32]
          break;
 8002e36:	e01f      	b.n	8002e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	623b      	str	r3, [r7, #32]
          break;
 8002e40:	e01a      	b.n	8002e78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	623b      	str	r3, [r7, #32]
          break;
 8002e4e:	e013      	b.n	8002e78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d105      	bne.n	8002e64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e58:	2308      	movs	r3, #8
 8002e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	611a      	str	r2, [r3, #16]
          break;
 8002e62:	e009      	b.n	8002e78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e64:	2308      	movs	r3, #8
 8002e66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	615a      	str	r2, [r3, #20]
          break;
 8002e6e:	e003      	b.n	8002e78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e70:	2300      	movs	r3, #0
 8002e72:	623b      	str	r3, [r7, #32]
          break;
 8002e74:	e000      	b.n	8002e78 <HAL_GPIO_Init+0x130>
          break;
 8002e76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	2bff      	cmp	r3, #255	; 0xff
 8002e7c:	d801      	bhi.n	8002e82 <HAL_GPIO_Init+0x13a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	e001      	b.n	8002e86 <HAL_GPIO_Init+0x13e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3304      	adds	r3, #4
 8002e86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2bff      	cmp	r3, #255	; 0xff
 8002e8c:	d802      	bhi.n	8002e94 <HAL_GPIO_Init+0x14c>
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	e002      	b.n	8002e9a <HAL_GPIO_Init+0x152>
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	3b08      	subs	r3, #8
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	210f      	movs	r1, #15
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	401a      	ands	r2, r3
 8002eac:	6a39      	ldr	r1, [r7, #32]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80b1 	beq.w	800302a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ec8:	4b4d      	ldr	r3, [pc, #308]	; (8003000 <HAL_GPIO_Init+0x2b8>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	4a4c      	ldr	r2, [pc, #304]	; (8003000 <HAL_GPIO_Init+0x2b8>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6193      	str	r3, [r2, #24]
 8002ed4:	4b4a      	ldr	r3, [pc, #296]	; (8003000 <HAL_GPIO_Init+0x2b8>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ee0:	4a48      	ldr	r2, [pc, #288]	; (8003004 <HAL_GPIO_Init+0x2bc>)
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4013      	ands	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a40      	ldr	r2, [pc, #256]	; (8003008 <HAL_GPIO_Init+0x2c0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d013      	beq.n	8002f34 <HAL_GPIO_Init+0x1ec>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a3f      	ldr	r2, [pc, #252]	; (800300c <HAL_GPIO_Init+0x2c4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00d      	beq.n	8002f30 <HAL_GPIO_Init+0x1e8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a3e      	ldr	r2, [pc, #248]	; (8003010 <HAL_GPIO_Init+0x2c8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d007      	beq.n	8002f2c <HAL_GPIO_Init+0x1e4>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a3d      	ldr	r2, [pc, #244]	; (8003014 <HAL_GPIO_Init+0x2cc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d101      	bne.n	8002f28 <HAL_GPIO_Init+0x1e0>
 8002f24:	2303      	movs	r3, #3
 8002f26:	e006      	b.n	8002f36 <HAL_GPIO_Init+0x1ee>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	e004      	b.n	8002f36 <HAL_GPIO_Init+0x1ee>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e002      	b.n	8002f36 <HAL_GPIO_Init+0x1ee>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <HAL_GPIO_Init+0x1ee>
 8002f34:	2300      	movs	r3, #0
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	f002 0203 	and.w	r2, r2, #3
 8002f3c:	0092      	lsls	r2, r2, #2
 8002f3e:	4093      	lsls	r3, r2
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f46:	492f      	ldr	r1, [pc, #188]	; (8003004 <HAL_GPIO_Init+0x2bc>)
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d006      	beq.n	8002f6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f60:	4b2d      	ldr	r3, [pc, #180]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	492c      	ldr	r1, [pc, #176]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	608b      	str	r3, [r1, #8]
 8002f6c:	e006      	b.n	8002f7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	4928      	ldr	r1, [pc, #160]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d006      	beq.n	8002f96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f88:	4b23      	ldr	r3, [pc, #140]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	4922      	ldr	r1, [pc, #136]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60cb      	str	r3, [r1, #12]
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	491e      	ldr	r1, [pc, #120]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	4918      	ldr	r1, [pc, #96]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]
 8002fbc:	e006      	b.n	8002fcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fbe:	4b16      	ldr	r3, [pc, #88]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	4914      	ldr	r1, [pc, #80]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d021      	beq.n	800301c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	490e      	ldr	r1, [pc, #56]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
 8002fe4:	e021      	b.n	800302a <HAL_GPIO_Init+0x2e2>
 8002fe6:	bf00      	nop
 8002fe8:	10320000 	.word	0x10320000
 8002fec:	10310000 	.word	0x10310000
 8002ff0:	10220000 	.word	0x10220000
 8002ff4:	10210000 	.word	0x10210000
 8002ff8:	10120000 	.word	0x10120000
 8002ffc:	10110000 	.word	0x10110000
 8003000:	40021000 	.word	0x40021000
 8003004:	40010000 	.word	0x40010000
 8003008:	40010800 	.word	0x40010800
 800300c:	40010c00 	.word	0x40010c00
 8003010:	40011000 	.word	0x40011000
 8003014:	40011400 	.word	0x40011400
 8003018:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <HAL_GPIO_Init+0x304>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	43db      	mvns	r3, r3
 8003024:	4909      	ldr	r1, [pc, #36]	; (800304c <HAL_GPIO_Init+0x304>)
 8003026:	4013      	ands	r3, r2
 8003028:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	3301      	adds	r3, #1
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	fa22 f303 	lsr.w	r3, r2, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	f47f ae8e 	bne.w	8002d5c <HAL_GPIO_Init+0x14>
  }
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	372c      	adds	r7, #44	; 0x2c
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	40010400 	.word	0x40010400

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
 800305c:	4613      	mov	r3, r2
 800305e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800306c:	e003      	b.n	8003076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	041a      	lsls	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	611a      	str	r2, [r3, #16]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e272      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8087 	beq.w	80031ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a0:	4b92      	ldr	r3, [pc, #584]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d00c      	beq.n	80030c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030ac:	4b8f      	ldr	r3, [pc, #572]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d112      	bne.n	80030de <HAL_RCC_OscConfig+0x5e>
 80030b8:	4b8c      	ldr	r3, [pc, #560]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c4:	d10b      	bne.n	80030de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c6:	4b89      	ldr	r3, [pc, #548]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d06c      	beq.n	80031ac <HAL_RCC_OscConfig+0x12c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d168      	bne.n	80031ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e24c      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_OscConfig+0x76>
 80030e8:	4b80      	ldr	r3, [pc, #512]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a7f      	ldr	r2, [pc, #508]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	e02e      	b.n	8003154 <HAL_RCC_OscConfig+0xd4>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x98>
 80030fe:	4b7b      	ldr	r3, [pc, #492]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a7a      	ldr	r2, [pc, #488]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b78      	ldr	r3, [pc, #480]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a77      	ldr	r2, [pc, #476]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0xd4>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0xbc>
 8003122:	4b72      	ldr	r3, [pc, #456]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a71      	ldr	r2, [pc, #452]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b6f      	ldr	r3, [pc, #444]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6e      	ldr	r2, [pc, #440]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xd4>
 800313c:	4b6b      	ldr	r3, [pc, #428]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a6a      	ldr	r2, [pc, #424]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b68      	ldr	r3, [pc, #416]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a67      	ldr	r2, [pc, #412]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003152:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7ff fc34 	bl	80029c8 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003164:	f7ff fc30 	bl	80029c8 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e200      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b5d      	ldr	r3, [pc, #372]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0xe4>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7ff fc20 	bl	80029c8 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7ff fc1c 	bl	80029c8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1ec      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b53      	ldr	r3, [pc, #332]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x10c>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d063      	beq.n	8003282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ba:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031c6:	4b49      	ldr	r3, [pc, #292]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d11c      	bne.n	800320c <HAL_RCC_OscConfig+0x18c>
 80031d2:	4b46      	ldr	r3, [pc, #280]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d116      	bne.n	800320c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	4b43      	ldr	r3, [pc, #268]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x176>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1c0      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b3d      	ldr	r3, [pc, #244]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4939      	ldr	r1, [pc, #228]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	e03a      	b.n	8003282 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003214:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <HAL_RCC_OscConfig+0x270>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7ff fbd5 	bl	80029c8 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003222:	f7ff fbd1 	bl	80029c8 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1a1      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4927      	ldr	r1, [pc, #156]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	e015      	b.n	8003282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003256:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <HAL_RCC_OscConfig+0x270>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7ff fbb4 	bl	80029c8 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003264:	f7ff fbb0 	bl	80029c8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e180      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d03a      	beq.n	8003304 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d019      	beq.n	80032ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <HAL_RCC_OscConfig+0x274>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329c:	f7ff fb94 	bl	80029c8 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a4:	f7ff fb90 	bl	80029c8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e160      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032c2:	2001      	movs	r0, #1
 80032c4:	f000 fb1e 	bl	8003904 <RCC_Delay>
 80032c8:	e01c      	b.n	8003304 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_RCC_OscConfig+0x274>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d0:	f7ff fb7a 	bl	80029c8 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d6:	e00f      	b.n	80032f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d8:	f7ff fb76 	bl	80029c8 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d908      	bls.n	80032f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e146      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	42420000 	.word	0x42420000
 80032f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	4b92      	ldr	r3, [pc, #584]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e9      	bne.n	80032d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80a6 	beq.w	800345e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003316:	4b8b      	ldr	r3, [pc, #556]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10d      	bne.n	800333e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	4b88      	ldr	r3, [pc, #544]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	4a87      	ldr	r2, [pc, #540]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332c:	61d3      	str	r3, [r2, #28]
 800332e:	4b85      	ldr	r3, [pc, #532]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333a:	2301      	movs	r3, #1
 800333c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x4c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d118      	bne.n	800337c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800334a:	4b7f      	ldr	r3, [pc, #508]	; (8003548 <HAL_RCC_OscConfig+0x4c8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7e      	ldr	r2, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x4c8>)
 8003350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003356:	f7ff fb37 	bl	80029c8 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335e:	f7ff fb33 	bl	80029c8 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b64      	cmp	r3, #100	; 0x64
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e103      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003370:	4b75      	ldr	r3, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x4c8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d106      	bne.n	8003392 <HAL_RCC_OscConfig+0x312>
 8003384:	4b6f      	ldr	r3, [pc, #444]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4a6e      	ldr	r2, [pc, #440]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6213      	str	r3, [r2, #32]
 8003390:	e02d      	b.n	80033ee <HAL_RCC_OscConfig+0x36e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x334>
 800339a:	4b6a      	ldr	r3, [pc, #424]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4a69      	ldr	r2, [pc, #420]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6213      	str	r3, [r2, #32]
 80033a6:	4b67      	ldr	r3, [pc, #412]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	4a66      	ldr	r2, [pc, #408]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	f023 0304 	bic.w	r3, r3, #4
 80033b0:	6213      	str	r3, [r2, #32]
 80033b2:	e01c      	b.n	80033ee <HAL_RCC_OscConfig+0x36e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d10c      	bne.n	80033d6 <HAL_RCC_OscConfig+0x356>
 80033bc:	4b61      	ldr	r3, [pc, #388]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a60      	ldr	r2, [pc, #384]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	6213      	str	r3, [r2, #32]
 80033c8:	4b5e      	ldr	r3, [pc, #376]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	4a5d      	ldr	r2, [pc, #372]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6213      	str	r3, [r2, #32]
 80033d4:	e00b      	b.n	80033ee <HAL_RCC_OscConfig+0x36e>
 80033d6:	4b5b      	ldr	r3, [pc, #364]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	4a5a      	ldr	r2, [pc, #360]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	6213      	str	r3, [r2, #32]
 80033e2:	4b58      	ldr	r3, [pc, #352]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	4a57      	ldr	r2, [pc, #348]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d015      	beq.n	8003422 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f6:	f7ff fae7 	bl	80029c8 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7ff fae3 	bl	80029c8 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0b1      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003414:	4b4b      	ldr	r3, [pc, #300]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ee      	beq.n	80033fe <HAL_RCC_OscConfig+0x37e>
 8003420:	e014      	b.n	800344c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003422:	f7ff fad1 	bl	80029c8 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7ff facd 	bl	80029c8 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e09b      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003440:	4b40      	ldr	r3, [pc, #256]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1ee      	bne.n	800342a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d105      	bne.n	800345e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003452:	4b3c      	ldr	r3, [pc, #240]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4a3b      	ldr	r2, [pc, #236]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 8087 	beq.w	8003576 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003468:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d061      	beq.n	8003538 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d146      	bne.n	800350a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347c:	4b33      	ldr	r3, [pc, #204]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003482:	f7ff faa1 	bl	80029c8 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348a:	f7ff fa9d 	bl	80029c8 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e06d      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349c:	4b29      	ldr	r3, [pc, #164]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d108      	bne.n	80034c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4921      	ldr	r1, [pc, #132]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c4:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a19      	ldr	r1, [r3, #32]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	430b      	orrs	r3, r1
 80034d6:	491b      	ldr	r1, [pc, #108]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7ff fa71 	bl	80029c8 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ea:	f7ff fa6d 	bl	80029c8 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e03d      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x46a>
 8003508:	e035      	b.n	8003576 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7ff fa5a 	bl	80029c8 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003518:	f7ff fa56 	bl	80029c8 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e026      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x498>
 8003536:	e01e      	b.n	8003576 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d107      	bne.n	8003550 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e019      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
 800354c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_OscConfig+0x500>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	429a      	cmp	r2, r3
 8003562:	d106      	bne.n	8003572 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0d0      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b6a      	ldr	r3, [pc, #424]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d910      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b67      	ldr	r3, [pc, #412]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 0207 	bic.w	r2, r3, #7
 80035ae:	4965      	ldr	r1, [pc, #404]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b63      	ldr	r3, [pc, #396]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0b8      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d020      	beq.n	8003616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e0:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4a58      	ldr	r2, [pc, #352]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b50      	ldr	r3, [pc, #320]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	494d      	ldr	r1, [pc, #308]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d040      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d115      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07f      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e073      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e06b      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003662:	4b39      	ldr	r3, [pc, #228]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f023 0203 	bic.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4936      	ldr	r1, [pc, #216]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003674:	f7ff f9a8 	bl	80029c8 <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	e00a      	b.n	8003692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367c:	f7ff f9a4 	bl	80029c8 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e053      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003692:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 020c 	and.w	r2, r3, #12
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d1eb      	bne.n	800367c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a4:	4b27      	ldr	r3, [pc, #156]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d210      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 0207 	bic.w	r2, r3, #7
 80036ba:	4922      	ldr	r1, [pc, #136]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e032      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4916      	ldr	r1, [pc, #88]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	490e      	ldr	r1, [pc, #56]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003712:	f000 f82d 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	490a      	ldr	r1, [pc, #40]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1cc>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1d0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe ff66 	bl	8002604 <HAL_InitTick>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40022000 	.word	0x40022000
 8003748:	40021000 	.word	0x40021000
 800374c:	08009e38 	.word	0x08009e38
 8003750:	20000000 	.word	0x20000000
 8003754:	20000004 	.word	0x20000004

08003758 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <HAL_RCC_EnableCSS+0x14>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	4242004c 	.word	0x4242004c

08003770 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800378a:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <HAL_RCC_GetSysClockFreq+0x94>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b04      	cmp	r3, #4
 8003798:	d002      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x30>
 800379a:	2b08      	cmp	r3, #8
 800379c:	d003      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x36>
 800379e:	e027      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037a0:	4b19      	ldr	r3, [pc, #100]	; (8003808 <HAL_RCC_GetSysClockFreq+0x98>)
 80037a2:	613b      	str	r3, [r7, #16]
      break;
 80037a4:	e027      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	0c9b      	lsrs	r3, r3, #18
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	4a17      	ldr	r2, [pc, #92]	; (800380c <HAL_RCC_GetSysClockFreq+0x9c>)
 80037b0:	5cd3      	ldrb	r3, [r2, r3]
 80037b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d010      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037be:	4b11      	ldr	r3, [pc, #68]	; (8003804 <HAL_RCC_GetSysClockFreq+0x94>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	0c5b      	lsrs	r3, r3, #17
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	4a11      	ldr	r2, [pc, #68]	; (8003810 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037ca:	5cd3      	ldrb	r3, [r2, r3]
 80037cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a0d      	ldr	r2, [pc, #52]	; (8003808 <HAL_RCC_GetSysClockFreq+0x98>)
 80037d2:	fb03 f202 	mul.w	r2, r3, r2
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e004      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a0c      	ldr	r2, [pc, #48]	; (8003814 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037e4:	fb02 f303 	mul.w	r3, r2, r3
 80037e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	613b      	str	r3, [r7, #16]
      break;
 80037ee:	e002      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetSysClockFreq+0x98>)
 80037f2:	613b      	str	r3, [r7, #16]
      break;
 80037f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f6:	693b      	ldr	r3, [r7, #16]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	007a1200 	.word	0x007a1200
 800380c:	08009e50 	.word	0x08009e50
 8003810:	08009e60 	.word	0x08009e60
 8003814:	003d0900 	.word	0x003d0900

08003818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800381c:	4b02      	ldr	r3, [pc, #8]	; (8003828 <HAL_RCC_GetHCLKFreq+0x10>)
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	20000000 	.word	0x20000000

0800382c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003830:	f7ff fff2 	bl	8003818 <HAL_RCC_GetHCLKFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40021000 	.word	0x40021000
 8003850:	08009e48 	.word	0x08009e48

08003854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003858:	f7ff ffde 	bl	8003818 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	0adb      	lsrs	r3, r3, #11
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4903      	ldr	r1, [pc, #12]	; (8003878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	08009e48 	.word	0x08009e48

0800387c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	220f      	movs	r2, #15
 800388a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <HAL_RCC_GetClockConfig+0x58>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0203 	and.w	r2, r3, #3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003898:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <HAL_RCC_GetClockConfig+0x58>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_GetClockConfig+0x58>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <HAL_RCC_GetClockConfig+0x58>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	08db      	lsrs	r3, r3, #3
 80038b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_RCC_GetClockConfig+0x5c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0207 	and.w	r2, r3, #7
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40022000 	.word	0x40022000

080038dc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_RCC_NMI_IRQHandler+0x20>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e8:	2b80      	cmp	r3, #128	; 0x80
 80038ea:	d104      	bne.n	80038f6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80038ec:	f000 f828 	bl	8003940 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_RCC_NMI_IRQHandler+0x24>)
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	701a      	strb	r2, [r3, #0]
  }
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
 8003900:	4002100a 	.word	0x4002100a

08003904 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <RCC_Delay+0x34>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0a      	ldr	r2, [pc, #40]	; (800393c <RCC_Delay+0x38>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	0a5b      	lsrs	r3, r3, #9
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003920:	bf00      	nop
  }
  while (Delay --);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1e5a      	subs	r2, r3, #1
 8003926:	60fa      	str	r2, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f9      	bne.n	8003920 <RCC_Delay+0x1c>
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	20000000 	.word	0x20000000
 800393c:	10624dd3 	.word	0x10624dd3

08003940 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e076      	b.n	8003a4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800396e:	d009      	beq.n	8003984 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	61da      	str	r2, [r3, #28]
 8003976:	e005      	b.n	8003984 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fe fcda 	bl	8002358 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	ea42 0103 	orr.w	r1, r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	0c1a      	lsrs	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f002 0204 	and.w	r2, r2, #4
 8003a2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a62:	2301      	movs	r3, #1
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_SPI_TransmitReceive+0x26>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e198      	b.n	8003dac <HAL_SPI_TransmitReceive+0x358>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a82:	f7fe ffa1 	bl	80029c8 <HAL_GetTick>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a98:	887b      	ldrh	r3, [r7, #2]
 8003a9a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d00f      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x70>
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aaa:	d107      	bne.n	8003abc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d103      	bne.n	8003abc <HAL_SPI_TransmitReceive+0x68>
 8003ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d003      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
 8003abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ac2:	e16d      	b.n	8003da0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_SPI_TransmitReceive+0x82>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_SPI_TransmitReceive+0x82>
 8003ad0:	887b      	ldrh	r3, [r7, #2]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003adc:	e160      	b.n	8003da0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d003      	beq.n	8003af2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2205      	movs	r2, #5
 8003aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	887a      	ldrh	r2, [r7, #2]
 8003b02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	887a      	ldrh	r2, [r7, #2]
 8003b08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	887a      	ldrh	r2, [r7, #2]
 8003b14:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	887a      	ldrh	r2, [r7, #2]
 8003b1a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d007      	beq.n	8003b46 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4e:	d17c      	bne.n	8003c4a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_SPI_TransmitReceive+0x10a>
 8003b58:	8b7b      	ldrh	r3, [r7, #26]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d16a      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	881a      	ldrh	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	1c9a      	adds	r2, r3, #2
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b82:	e057      	b.n	8003c34 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d11b      	bne.n	8003bca <HAL_SPI_TransmitReceive+0x176>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d016      	beq.n	8003bca <HAL_SPI_TransmitReceive+0x176>
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d113      	bne.n	8003bca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	881a      	ldrh	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	1c9a      	adds	r2, r3, #2
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d119      	bne.n	8003c0c <HAL_SPI_TransmitReceive+0x1b8>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d014      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	b292      	uxth	r2, r2
 8003bee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	1c9a      	adds	r2, r3, #2
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c0c:	f7fe fedc 	bl	80029c8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d80b      	bhi.n	8003c34 <HAL_SPI_TransmitReceive+0x1e0>
 8003c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	d007      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003c32:	e0b5      	b.n	8003da0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1a2      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x130>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d19d      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x130>
 8003c48:	e080      	b.n	8003d4c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_SPI_TransmitReceive+0x204>
 8003c52:	8b7b      	ldrh	r3, [r7, #26]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d16f      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	7812      	ldrb	r2, [r2, #0]
 8003c64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c7e:	e05b      	b.n	8003d38 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d11c      	bne.n	8003cc8 <HAL_SPI_TransmitReceive+0x274>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d017      	beq.n	8003cc8 <HAL_SPI_TransmitReceive+0x274>
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d114      	bne.n	8003cc8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d119      	bne.n	8003d0a <HAL_SPI_TransmitReceive+0x2b6>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d014      	beq.n	8003d0a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d06:	2301      	movs	r3, #1
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d0a:	f7fe fe5d 	bl	80029c8 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d803      	bhi.n	8003d22 <HAL_SPI_TransmitReceive+0x2ce>
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d102      	bne.n	8003d28 <HAL_SPI_TransmitReceive+0x2d4>
 8003d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d107      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003d36:	e033      	b.n	8003da0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d19e      	bne.n	8003c80 <HAL_SPI_TransmitReceive+0x22c>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d199      	bne.n	8003c80 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 f9b3 	bl	80040bc <SPI_EndRxTxTransaction>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d006      	beq.n	8003d6a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d68:	e01a      	b.n	8003da0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d96:	e003      	b.n	8003da0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003da8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3730      	adds	r7, #48	; 0x30
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10e      	bne.n	8003df4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d009      	beq.n	8003df4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4798      	blx	r3
    return;
 8003df2:	e0b7      	b.n	8003f64 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_SPI_IRQHandler+0x5e>
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
    return;
 8003e10:	e0a8      	b.n	8003f64 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_SPI_IRQHandler+0x74>
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 809e 	beq.w	8003f64 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8098 	beq.w	8003f64 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d023      	beq.n	8003e86 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d011      	beq.n	8003e6e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	f043 0204 	orr.w	r2, r3, #4
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	e00b      	b.n	8003e86 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	693b      	ldr	r3, [r7, #16]
        return;
 8003e84:	e06e      	b.n	8003f64 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d014      	beq.n	8003eba <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	f043 0201 	orr.w	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d04f      	beq.n	8003f62 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ed0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <HAL_SPI_IRQHandler+0x13a>
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d034      	beq.n	8003f58 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0203 	bic.w	r2, r2, #3
 8003efc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d011      	beq.n	8003f2a <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0a:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <HAL_SPI_IRQHandler+0x1b8>)
 8003f0c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe fea0 	bl	8002c58 <HAL_DMA_Abort_IT>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d016      	beq.n	8003f60 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f36:	4a0d      	ldr	r2, [pc, #52]	; (8003f6c <HAL_SPI_IRQHandler+0x1b8>)
 8003f38:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe fe8a 	bl	8002c58 <HAL_DMA_Abort_IT>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003f56:	e003      	b.n	8003f60 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f809 	bl	8003f70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003f5e:	e000      	b.n	8003f62 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8003f60:	bf00      	nop
    return;
 8003f62:	bf00      	nop
  }
}
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	08003f83 	.word	0x08003f83

08003f70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7ff ffe7 	bl	8003f70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fbc:	f7fe fd04 	bl	80029c8 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	4413      	add	r3, r2
 8003fca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fcc:	f7fe fcfc 	bl	80029c8 <HAL_GetTick>
 8003fd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fd2:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	015b      	lsls	r3, r3, #5
 8003fd8:	0d1b      	lsrs	r3, r3, #20
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	fb02 f303 	mul.w	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fe2:	e054      	b.n	800408e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fea:	d050      	beq.n	800408e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fec:	f7fe fcec 	bl	80029c8 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d902      	bls.n	8004002 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d13d      	bne.n	800407e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004010:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401a:	d111      	bne.n	8004040 <SPI_WaitFlagStateUntilTimeout+0x94>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004024:	d004      	beq.n	8004030 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402e:	d107      	bne.n	8004040 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004048:	d10f      	bne.n	800406a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004068:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e017      	b.n	80040ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	3b01      	subs	r3, #1
 800408c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d19b      	bne.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000000 	.word	0x20000000

080040bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2200      	movs	r2, #0
 80040d0:	2180      	movs	r1, #128	; 0x80
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f7ff ff6a 	bl	8003fac <SPI_WaitFlagStateUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	f043 0220 	orr.w	r2, r3, #32
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e000      	b.n	80040f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e041      	b.n	800418e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f839 	bl	8004196 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 fbfa 	bl	8004930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d001      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e03a      	b.n	8004236 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a18      	ldr	r2, [pc, #96]	; (8004240 <HAL_TIM_Base_Start_IT+0x98>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x58>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ea:	d009      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x58>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a14      	ldr	r2, [pc, #80]	; (8004244 <HAL_TIM_Base_Start_IT+0x9c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x58>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a13      	ldr	r2, [pc, #76]	; (8004248 <HAL_TIM_Base_Start_IT+0xa0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d111      	bne.n	8004224 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b06      	cmp	r3, #6
 8004210:	d010      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	e007      	b.n	8004234 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800

0800424c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	f241 1311 	movw	r3, #4369	; 0x1111
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10f      	bne.n	8004294 <HAL_TIM_Base_Stop_IT+0x48>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6a1a      	ldr	r2, [r3, #32]
 800427a:	f240 4344 	movw	r3, #1092	; 0x444
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d107      	bne.n	8004294 <HAL_TIM_Base_Stop_IT+0x48>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e041      	b.n	800433e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fe f8a4 	bl	800241c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f000 fb22 	bl	8004930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <HAL_TIM_PWM_Start+0x24>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e022      	b.n	80043b2 <HAL_TIM_PWM_Start+0x6a>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b04      	cmp	r3, #4
 8004370:	d109      	bne.n	8004386 <HAL_TIM_PWM_Start+0x3e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	bf14      	ite	ne
 800437e:	2301      	movne	r3, #1
 8004380:	2300      	moveq	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	e015      	b.n	80043b2 <HAL_TIM_PWM_Start+0x6a>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d109      	bne.n	80043a0 <HAL_TIM_PWM_Start+0x58>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e008      	b.n	80043b2 <HAL_TIM_PWM_Start+0x6a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e05e      	b.n	8004478 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <HAL_TIM_PWM_Start+0x82>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c8:	e013      	b.n	80043f2 <HAL_TIM_PWM_Start+0xaa>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d104      	bne.n	80043da <HAL_TIM_PWM_Start+0x92>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d8:	e00b      	b.n	80043f2 <HAL_TIM_PWM_Start+0xaa>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d104      	bne.n	80043ea <HAL_TIM_PWM_Start+0xa2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e8:	e003      	b.n	80043f2 <HAL_TIM_PWM_Start+0xaa>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2201      	movs	r2, #1
 80043f8:	6839      	ldr	r1, [r7, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fc82 	bl	8004d04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <HAL_TIM_PWM_Start+0x138>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d107      	bne.n	800441a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004418:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a18      	ldr	r2, [pc, #96]	; (8004480 <HAL_TIM_PWM_Start+0x138>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00e      	beq.n	8004442 <HAL_TIM_PWM_Start+0xfa>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442c:	d009      	beq.n	8004442 <HAL_TIM_PWM_Start+0xfa>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a14      	ldr	r2, [pc, #80]	; (8004484 <HAL_TIM_PWM_Start+0x13c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_TIM_PWM_Start+0xfa>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a12      	ldr	r2, [pc, #72]	; (8004488 <HAL_TIM_PWM_Start+0x140>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d111      	bne.n	8004466 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b06      	cmp	r3, #6
 8004452:	d010      	beq.n	8004476 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004464:	e007      	b.n	8004476 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800

0800448c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2200      	movs	r2, #0
 800449c:	6839      	ldr	r1, [r7, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fc30 	bl	8004d04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a29      	ldr	r2, [pc, #164]	; (8004550 <HAL_TIM_PWM_Stop+0xc4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d117      	bne.n	80044de <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6a1a      	ldr	r2, [r3, #32]
 80044b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10f      	bne.n	80044de <HAL_TIM_PWM_Stop+0x52>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6a1a      	ldr	r2, [r3, #32]
 80044c4:	f240 4344 	movw	r3, #1092	; 0x444
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d107      	bne.n	80044de <HAL_TIM_PWM_Stop+0x52>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10f      	bne.n	800450e <HAL_TIM_PWM_Stop+0x82>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6a1a      	ldr	r2, [r3, #32]
 80044f4:	f240 4344 	movw	r3, #1092	; 0x444
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d107      	bne.n	800450e <HAL_TIM_PWM_Stop+0x82>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0201 	bic.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d104      	bne.n	800451e <HAL_TIM_PWM_Stop+0x92>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800451c:	e013      	b.n	8004546 <HAL_TIM_PWM_Stop+0xba>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d104      	bne.n	800452e <HAL_TIM_PWM_Stop+0xa2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800452c:	e00b      	b.n	8004546 <HAL_TIM_PWM_Stop+0xba>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d104      	bne.n	800453e <HAL_TIM_PWM_Stop+0xb2>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800453c:	e003      	b.n	8004546 <HAL_TIM_PWM_Stop+0xba>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40012c00 	.word	0x40012c00

08004554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b02      	cmp	r3, #2
 8004568:	d122      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	d11b      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0202 	mvn.w	r2, #2
 8004580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f9af 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 800459c:	e005      	b.n	80045aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f9a2 	bl	80048e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f9b1 	bl	800490c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d122      	bne.n	8004604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d11b      	bne.n	8004604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0204 	mvn.w	r2, #4
 80045d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f985 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 80045f0:	e005      	b.n	80045fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f978 	bl	80048e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f987 	bl	800490c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b08      	cmp	r3, #8
 8004610:	d122      	bne.n	8004658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b08      	cmp	r3, #8
 800461e:	d11b      	bne.n	8004658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0208 	mvn.w	r2, #8
 8004628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2204      	movs	r2, #4
 800462e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f95b 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 8004644:	e005      	b.n	8004652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f94e 	bl	80048e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f95d 	bl	800490c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b10      	cmp	r3, #16
 8004664:	d122      	bne.n	80046ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b10      	cmp	r3, #16
 8004672:	d11b      	bne.n	80046ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0210 	mvn.w	r2, #16
 800467c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2208      	movs	r2, #8
 8004682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f931 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 8004698:	e005      	b.n	80046a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f924 	bl	80048e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f933 	bl	800490c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d10e      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d107      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0201 	mvn.w	r2, #1
 80046d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fd fd7c 	bl	80021d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e2:	2b80      	cmp	r3, #128	; 0x80
 80046e4:	d10e      	bne.n	8004704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f0:	2b80      	cmp	r3, #128	; 0x80
 80046f2:	d107      	bne.n	8004704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fbdc 	bl	8004ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d10e      	bne.n	8004730 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471c:	2b40      	cmp	r3, #64	; 0x40
 800471e:	d107      	bne.n	8004730 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f8f7 	bl	800491e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b20      	cmp	r3, #32
 800473c:	d10e      	bne.n	800475c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b20      	cmp	r3, #32
 800474a:	d107      	bne.n	800475c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0220 	mvn.w	r2, #32
 8004754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fba7 	bl	8004eaa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800477e:	2302      	movs	r3, #2
 8004780:	e0ae      	b.n	80048e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b0c      	cmp	r3, #12
 800478e:	f200 809f 	bhi.w	80048d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004792:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	080047cd 	.word	0x080047cd
 800479c:	080048d1 	.word	0x080048d1
 80047a0:	080048d1 	.word	0x080048d1
 80047a4:	080048d1 	.word	0x080048d1
 80047a8:	0800480d 	.word	0x0800480d
 80047ac:	080048d1 	.word	0x080048d1
 80047b0:	080048d1 	.word	0x080048d1
 80047b4:	080048d1 	.word	0x080048d1
 80047b8:	0800484f 	.word	0x0800484f
 80047bc:	080048d1 	.word	0x080048d1
 80047c0:	080048d1 	.word	0x080048d1
 80047c4:	080048d1 	.word	0x080048d1
 80047c8:	0800488f 	.word	0x0800488f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 f90e 	bl	80049f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0208 	orr.w	r2, r2, #8
 80047e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0204 	bic.w	r2, r2, #4
 80047f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6999      	ldr	r1, [r3, #24]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	619a      	str	r2, [r3, #24]
      break;
 800480a:	e064      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f954 	bl	8004ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6999      	ldr	r1, [r3, #24]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	021a      	lsls	r2, r3, #8
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	619a      	str	r2, [r3, #24]
      break;
 800484c:	e043      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	4618      	mov	r0, r3
 8004856:	f000 f99d 	bl	8004b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0208 	orr.w	r2, r2, #8
 8004868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69da      	ldr	r2, [r3, #28]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0204 	bic.w	r2, r2, #4
 8004878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69d9      	ldr	r1, [r3, #28]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	61da      	str	r2, [r3, #28]
      break;
 800488c:	e023      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	4618      	mov	r0, r3
 8004896:	f000 f9e7 	bl	8004c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69d9      	ldr	r1, [r3, #28]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	021a      	lsls	r2, r3, #8
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	61da      	str	r2, [r3, #28]
      break;
 80048ce:	e002      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	75fb      	strb	r3, [r7, #23]
      break;
 80048d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048de:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr

080048fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr

0800490c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr

08004930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a29      	ldr	r2, [pc, #164]	; (80049e8 <TIM_Base_SetConfig+0xb8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00b      	beq.n	8004960 <TIM_Base_SetConfig+0x30>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494e:	d007      	beq.n	8004960 <TIM_Base_SetConfig+0x30>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a26      	ldr	r2, [pc, #152]	; (80049ec <TIM_Base_SetConfig+0xbc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d003      	beq.n	8004960 <TIM_Base_SetConfig+0x30>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a25      	ldr	r2, [pc, #148]	; (80049f0 <TIM_Base_SetConfig+0xc0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d108      	bne.n	8004972 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1c      	ldr	r2, [pc, #112]	; (80049e8 <TIM_Base_SetConfig+0xb8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00b      	beq.n	8004992 <TIM_Base_SetConfig+0x62>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004980:	d007      	beq.n	8004992 <TIM_Base_SetConfig+0x62>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a19      	ldr	r2, [pc, #100]	; (80049ec <TIM_Base_SetConfig+0xbc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_Base_SetConfig+0x62>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a18      	ldr	r2, [pc, #96]	; (80049f0 <TIM_Base_SetConfig+0xc0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d108      	bne.n	80049a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a07      	ldr	r2, [pc, #28]	; (80049e8 <TIM_Base_SetConfig+0xb8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d103      	bne.n	80049d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	615a      	str	r2, [r3, #20]
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800

080049f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f023 0201 	bic.w	r2, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f023 0302 	bic.w	r3, r3, #2
 8004a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a1c      	ldr	r2, [pc, #112]	; (8004abc <TIM_OC1_SetConfig+0xc8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d10c      	bne.n	8004a6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0308 	bic.w	r3, r3, #8
 8004a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f023 0304 	bic.w	r3, r3, #4
 8004a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a13      	ldr	r2, [pc, #76]	; (8004abc <TIM_OC1_SetConfig+0xc8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d111      	bne.n	8004a96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	621a      	str	r2, [r3, #32]
}
 8004ab0:	bf00      	nop
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40012c00 	.word	0x40012c00

08004ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f023 0210 	bic.w	r2, r3, #16
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f023 0320 	bic.w	r3, r3, #32
 8004b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a1d      	ldr	r2, [pc, #116]	; (8004b90 <TIM_OC2_SetConfig+0xd0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d10d      	bne.n	8004b3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a14      	ldr	r2, [pc, #80]	; (8004b90 <TIM_OC2_SetConfig+0xd0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d113      	bne.n	8004b6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	621a      	str	r2, [r3, #32]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr
 8004b90:	40012c00 	.word	0x40012c00

08004b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0303 	bic.w	r3, r3, #3
 8004bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <TIM_OC3_SetConfig+0xd0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d10d      	bne.n	8004c0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	021b      	lsls	r3, r3, #8
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a14      	ldr	r2, [pc, #80]	; (8004c64 <TIM_OC3_SetConfig+0xd0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d113      	bne.n	8004c3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	621a      	str	r2, [r3, #32]
}
 8004c58:	bf00      	nop
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40012c00 	.word	0x40012c00

08004c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	021b      	lsls	r3, r3, #8
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	031b      	lsls	r3, r3, #12
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a0f      	ldr	r2, [pc, #60]	; (8004d00 <TIM_OC4_SetConfig+0x98>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d109      	bne.n	8004cdc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	019b      	lsls	r3, r3, #6
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr
 8004d00:	40012c00 	.word	0x40012c00

08004d04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 031f 	and.w	r3, r3, #31
 8004d16:	2201      	movs	r2, #1
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a1a      	ldr	r2, [r3, #32]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	43db      	mvns	r3, r3
 8004d26:	401a      	ands	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a1a      	ldr	r2, [r3, #32]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e046      	b.n	8004df2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a16      	ldr	r2, [pc, #88]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00e      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db0:	d009      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a12      	ldr	r2, [pc, #72]	; (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a10      	ldr	r2, [pc, #64]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d10c      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40000400 	.word	0x40000400
 8004e04:	40000800 	.word	0x40000800

08004e08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e03d      	b.n	8004ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	4770      	bx	lr

08004eaa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr

08004ece <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e042      	b.n	8004f66 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fd fb23 	bl	8002540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2224      	movs	r2, #36	; 0x24
 8004efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f10:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fdfa 	bl	8005b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f26:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695a      	ldr	r2, [r3, #20]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f36:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f46:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b08a      	sub	sp, #40	; 0x28
 8004f72:	af02      	add	r7, sp, #8
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	603b      	str	r3, [r7, #0]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d16d      	bne.n	800506a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_UART_Transmit+0x2c>
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e066      	b.n	800506c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2221      	movs	r2, #33	; 0x21
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fac:	f7fd fd0c 	bl	80029c8 <HAL_GetTick>
 8004fb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	88fa      	ldrh	r2, [r7, #6]
 8004fb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	88fa      	ldrh	r2, [r7, #6]
 8004fbc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc6:	d108      	bne.n	8004fda <HAL_UART_Transmit+0x6c>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d104      	bne.n	8004fda <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	e003      	b.n	8004fe2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fe2:	e02a      	b.n	800503a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2200      	movs	r2, #0
 8004fec:	2180      	movs	r1, #128	; 0x80
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 fb49 	bl	8005686 <UART_WaitOnFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e036      	b.n	800506c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10b      	bne.n	800501c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005012:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	3302      	adds	r3, #2
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	e007      	b.n	800502c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	781a      	ldrb	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	3301      	adds	r3, #1
 800502a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1cf      	bne.n	8004fe4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	2140      	movs	r1, #64	; 0x40
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fb19 	bl	8005686 <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e006      	b.n	800506c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	e000      	b.n	800506c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800506a:	2302      	movs	r3, #2
  }
}
 800506c:	4618      	mov	r0, r3
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	4613      	mov	r3, r2
 8005080:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b20      	cmp	r3, #32
 800508c:	d121      	bne.n	80050d2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_UART_Transmit_IT+0x26>
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e01a      	b.n	80050d4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	88fa      	ldrh	r2, [r7, #6]
 80050a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2221      	movs	r2, #33	; 0x21
 80050ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050cc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e000      	b.n	80050d4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
  }
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr

080050de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	4613      	mov	r3, r2
 80050ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d112      	bne.n	800511e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_UART_Receive_IT+0x26>
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e00b      	b.n	8005120 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	461a      	mov	r2, r3
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 fb24 	bl	8005762 <UART_Start_Receive_IT>
 800511a:	4603      	mov	r3, r0
 800511c:	e000      	b.n	8005120 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800511e:	2302      	movs	r3, #2
  }
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b0ba      	sub	sp, #232	; 0xe8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800514e:	2300      	movs	r3, #0
 8005150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005154:	2300      	movs	r3, #0
 8005156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800515a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10f      	bne.n	800518e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800516e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <HAL_UART_IRQHandler+0x66>
 800517a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fc01 	bl	800598e <UART_Receive_IT>
      return;
 800518c:	e25b      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800518e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80de 	beq.w	8005354 <HAL_UART_IRQHandler+0x22c>
 8005198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80d1 	beq.w	8005354 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <HAL_UART_IRQHandler+0xae>
 80051be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ce:	f043 0201 	orr.w	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <HAL_UART_IRQHandler+0xd2>
 80051e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f2:	f043 0202 	orr.w	r2, r3, #2
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <HAL_UART_IRQHandler+0xf6>
 8005206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005216:	f043 0204 	orr.w	r2, r3, #4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800521e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d011      	beq.n	800524e <HAL_UART_IRQHandler+0x126>
 800522a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	d105      	bne.n	8005242 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005246:	f043 0208 	orr.w	r2, r3, #8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 81f2 	beq.w	800563c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_UART_IRQHandler+0x14e>
 8005264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fb8c 	bl	800598e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	bf14      	ite	ne
 8005284:	2301      	movne	r3, #1
 8005286:	2300      	moveq	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <HAL_UART_IRQHandler+0x17a>
 800529a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d04f      	beq.n	8005342 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa96 	bl	80057d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d041      	beq.n	800533a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3314      	adds	r3, #20
 80052bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3314      	adds	r3, #20
 80052de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1d9      	bne.n	80052b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d013      	beq.n	8005332 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530e:	4a7e      	ldr	r2, [pc, #504]	; (8005508 <HAL_UART_IRQHandler+0x3e0>)
 8005310:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005316:	4618      	mov	r0, r3
 8005318:	f7fd fc9e 	bl	8002c58 <HAL_DMA_Abort_IT>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d016      	beq.n	8005350 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800532c:	4610      	mov	r0, r2
 800532e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005330:	e00e      	b.n	8005350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f993 	bl	800565e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005338:	e00a      	b.n	8005350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f98f 	bl	800565e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005340:	e006      	b.n	8005350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f98b 	bl	800565e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800534e:	e175      	b.n	800563c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005350:	bf00      	nop
    return;
 8005352:	e173      	b.n	800563c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	2b01      	cmp	r3, #1
 800535a:	f040 814f 	bne.w	80055fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8148 	beq.w	80055fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800536c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8141 	beq.w	80055fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800537a:	2300      	movs	r3, #0
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60bb      	str	r3, [r7, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80b6 	beq.w	800550c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8145 	beq.w	8005640 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053be:	429a      	cmp	r2, r3
 80053c0:	f080 813e 	bcs.w	8005640 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	f000 8088 	beq.w	80054e8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	330c      	adds	r3, #12
 80053de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	330c      	adds	r3, #12
 8005400:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005404:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005408:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005410:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800541c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1d9      	bne.n	80053d8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3314      	adds	r3, #20
 800542a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005436:	f023 0301 	bic.w	r3, r3, #1
 800543a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3314      	adds	r3, #20
 8005444:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005448:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800544c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005450:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800545a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e1      	bne.n	8005424 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3314      	adds	r3, #20
 8005466:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3314      	adds	r3, #20
 8005480:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005484:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005486:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800548a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e3      	bne.n	8005460 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	330c      	adds	r3, #12
 80054ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b8:	f023 0310 	bic.w	r3, r3, #16
 80054bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	330c      	adds	r3, #12
 80054c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80054ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80054cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e3      	bne.n	80054a6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fd fb7d 	bl	8002be2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f8b6 	bl	8005670 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005504:	e09c      	b.n	8005640 <HAL_UART_IRQHandler+0x518>
 8005506:	bf00      	nop
 8005508:	08005899 	.word	0x08005899
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005514:	b29b      	uxth	r3, r3
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 808e 	beq.w	8005644 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8089 	beq.w	8005644 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	330c      	adds	r3, #12
 8005538:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005544:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005548:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	330c      	adds	r3, #12
 8005552:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005556:	647a      	str	r2, [r7, #68]	; 0x44
 8005558:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800555c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e3      	bne.n	8005532 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3314      	adds	r3, #20
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	623b      	str	r3, [r7, #32]
   return(result);
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3314      	adds	r3, #20
 800558a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800558e:	633a      	str	r2, [r7, #48]	; 0x30
 8005590:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e3      	bne.n	800556a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	60fb      	str	r3, [r7, #12]
   return(result);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0310 	bic.w	r3, r3, #16
 80055c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	330c      	adds	r3, #12
 80055d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80055d4:	61fa      	str	r2, [r7, #28]
 80055d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	69b9      	ldr	r1, [r7, #24]
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	617b      	str	r3, [r7, #20]
   return(result);
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e3      	bne.n	80055b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f83b 	bl	8005670 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055fa:	e023      	b.n	8005644 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005604:	2b00      	cmp	r3, #0
 8005606:	d009      	beq.n	800561c <HAL_UART_IRQHandler+0x4f4>
 8005608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800560c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f953 	bl	80058c0 <UART_Transmit_IT>
    return;
 800561a:	e014      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800561c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00e      	beq.n	8005646 <HAL_UART_IRQHandler+0x51e>
 8005628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f992 	bl	800595e <UART_EndTransmit_IT>
    return;
 800563a:	e004      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
    return;
 800563c:	bf00      	nop
 800563e:	e002      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
      return;
 8005640:	bf00      	nop
 8005642:	e000      	b.n	8005646 <HAL_UART_IRQHandler+0x51e>
      return;
 8005644:	bf00      	nop
  }
}
 8005646:	37e8      	adds	r7, #232	; 0xe8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr

08005686 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b090      	sub	sp, #64	; 0x40
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	4613      	mov	r3, r2
 8005694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005696:	e050      	b.n	800573a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d04c      	beq.n	800573a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80056a6:	f7fd f98f 	bl	80029c8 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d241      	bcs.n	800573a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	330c      	adds	r3, #12
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	330c      	adds	r3, #12
 80056d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056d6:	637a      	str	r2, [r7, #52]	; 0x34
 80056d8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e5      	bne.n	80056b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3314      	adds	r3, #20
 80056f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	613b      	str	r3, [r7, #16]
   return(result);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	63bb      	str	r3, [r7, #56]	; 0x38
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3314      	adds	r3, #20
 8005708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800570a:	623a      	str	r2, [r7, #32]
 800570c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	69f9      	ldr	r1, [r7, #28]
 8005710:	6a3a      	ldr	r2, [r7, #32]
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	61bb      	str	r3, [r7, #24]
   return(result);
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e5      	bne.n	80056ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2220      	movs	r2, #32
 8005722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e00f      	b.n	800575a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4013      	ands	r3, r2
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	429a      	cmp	r2, r3
 8005748:	bf0c      	ite	eq
 800574a:	2301      	moveq	r3, #1
 800574c:	2300      	movne	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	429a      	cmp	r2, r3
 8005756:	d09f      	beq.n	8005698 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3740      	adds	r7, #64	; 0x40
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	4613      	mov	r3, r2
 800576e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	88fa      	ldrh	r2, [r7, #6]
 800577a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	88fa      	ldrh	r2, [r7, #6]
 8005780:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2222      	movs	r2, #34	; 0x22
 800578c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057a6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695a      	ldr	r2, [r3, #20]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0220 	orr.w	r2, r2, #32
 80057c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr

080057d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b095      	sub	sp, #84	; 0x54
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	330c      	adds	r3, #12
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	330c      	adds	r3, #12
 80057fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057fc:	643a      	str	r2, [r7, #64]	; 0x40
 80057fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e5      	bne.n	80057dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3314      	adds	r3, #20
 8005816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f023 0301 	bic.w	r3, r3, #1
 8005826:	64bb      	str	r3, [r7, #72]	; 0x48
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3314      	adds	r3, #20
 800582e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005830:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005832:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e5      	bne.n	8005810 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	2b01      	cmp	r3, #1
 800584a:	d119      	bne.n	8005880 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	60bb      	str	r3, [r7, #8]
   return(result);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f023 0310 	bic.w	r3, r3, #16
 8005862:	647b      	str	r3, [r7, #68]	; 0x44
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	330c      	adds	r3, #12
 800586a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800586c:	61ba      	str	r2, [r7, #24]
 800586e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6979      	ldr	r1, [r7, #20]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	613b      	str	r3, [r7, #16]
   return(result);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e5      	bne.n	800584c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800588e:	bf00      	nop
 8005890:	3754      	adds	r7, #84	; 0x54
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr

08005898 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f7ff fed3 	bl	800565e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058b8:	bf00      	nop
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b21      	cmp	r3, #33	; 0x21
 80058d2:	d13e      	bne.n	8005952 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058dc:	d114      	bne.n	8005908 <UART_Transmit_IT+0x48>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d110      	bne.n	8005908 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	461a      	mov	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	1c9a      	adds	r2, r3, #2
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	621a      	str	r2, [r3, #32]
 8005906:	e008      	b.n	800591a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	1c59      	adds	r1, r3, #1
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6211      	str	r1, [r2, #32]
 8005912:	781a      	ldrb	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29b      	uxth	r3, r3
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	4619      	mov	r1, r3
 8005928:	84d1      	strh	r1, [r2, #38]	; 0x26
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10f      	bne.n	800594e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800593c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800594c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	e000      	b.n	8005954 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005952:	2302      	movs	r3, #2
  }
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr

0800595e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005974:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff fe64 	bl	800564c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b08c      	sub	sp, #48	; 0x30
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b22      	cmp	r3, #34	; 0x22
 80059a0:	f040 80ae 	bne.w	8005b00 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ac:	d117      	bne.n	80059de <UART_Receive_IT+0x50>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d113      	bne.n	80059de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	1c9a      	adds	r2, r3, #2
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	629a      	str	r2, [r3, #40]	; 0x28
 80059dc:	e026      	b.n	8005a2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059e4:	2300      	movs	r3, #0
 80059e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f0:	d007      	beq.n	8005a02 <UART_Receive_IT+0x74>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <UART_Receive_IT+0x82>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	e008      	b.n	8005a22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d15d      	bne.n	8005afc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0220 	bic.w	r2, r2, #32
 8005a4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695a      	ldr	r2, [r3, #20]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d135      	bne.n	8005af2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330c      	adds	r3, #12
 8005a92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f023 0310 	bic.w	r3, r3, #16
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	330c      	adds	r3, #12
 8005aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aac:	623a      	str	r2, [r7, #32]
 8005aae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	69f9      	ldr	r1, [r7, #28]
 8005ab2:	6a3a      	ldr	r2, [r7, #32]
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e5      	bne.n	8005a8c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2b10      	cmp	r3, #16
 8005acc:	d10a      	bne.n	8005ae4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff fdc0 	bl	8005670 <HAL_UARTEx_RxEventCallback>
 8005af0:	e002      	b.n	8005af8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fc fa54 	bl	8001fa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	e002      	b.n	8005b02 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e000      	b.n	8005b02 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3730      	adds	r7, #48	; 0x30
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b46:	f023 030c 	bic.w	r3, r3, #12
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	6812      	ldr	r2, [r2, #0]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	430b      	orrs	r3, r1
 8005b52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699a      	ldr	r2, [r3, #24]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a2c      	ldr	r2, [pc, #176]	; (8005c20 <UART_SetConfig+0x114>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d103      	bne.n	8005b7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b74:	f7fd fe6e 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	e002      	b.n	8005b82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b7c:	f7fd fe56 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8005b80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009a      	lsls	r2, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b98:	4a22      	ldr	r2, [pc, #136]	; (8005c24 <UART_SetConfig+0x118>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	0119      	lsls	r1, r3, #4
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009a      	lsls	r2, r3, #2
 8005bac:	441a      	add	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bb8:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <UART_SetConfig+0x118>)
 8005bba:	fba3 0302 	umull	r0, r3, r3, r2
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2064      	movs	r0, #100	; 0x64
 8005bc2:	fb00 f303 	mul.w	r3, r0, r3
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	3332      	adds	r3, #50	; 0x32
 8005bcc:	4a15      	ldr	r2, [pc, #84]	; (8005c24 <UART_SetConfig+0x118>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd8:	4419      	add	r1, r3
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	009a      	lsls	r2, r3, #2
 8005be4:	441a      	add	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bf0:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <UART_SetConfig+0x118>)
 8005bf2:	fba3 0302 	umull	r0, r3, r3, r2
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	2064      	movs	r0, #100	; 0x64
 8005bfa:	fb00 f303 	mul.w	r3, r0, r3
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	3332      	adds	r3, #50	; 0x32
 8005c04:	4a07      	ldr	r2, [pc, #28]	; (8005c24 <UART_SetConfig+0x118>)
 8005c06:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	f003 020f 	and.w	r2, r3, #15
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	440a      	add	r2, r1
 8005c16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c18:	bf00      	nop
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40013800 	.word	0x40013800
 8005c24:	51eb851f 	.word	0x51eb851f

08005c28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c3a:	2b84      	cmp	r3, #132	; 0x84
 8005c3c:	d005      	beq.n	8005c4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4413      	add	r3, r2
 8005c46:	3303      	adds	r3, #3
 8005c48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bc80      	pop	{r7}
 8005c54:	4770      	bx	lr

08005c56 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c5a:	f000 fad1 	bl	8006200 <vTaskStartScheduler>
  
  return osOK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c66:	b089      	sub	sp, #36	; 0x24
 8005c68:	af04      	add	r7, sp, #16
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d020      	beq.n	8005cb8 <osThreadCreate+0x54>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01c      	beq.n	8005cb8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685c      	ldr	r4, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691e      	ldr	r6, [r3, #16]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff ffc9 	bl	8005c28 <makeFreeRtosPriority>
 8005c96:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ca0:	9202      	str	r2, [sp, #8]
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	9100      	str	r1, [sp, #0]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	4632      	mov	r2, r6
 8005caa:	4629      	mov	r1, r5
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 f8e8 	bl	8005e82 <xTaskCreateStatic>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	e01c      	b.n	8005cf2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685c      	ldr	r4, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cc4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff ffab 	bl	8005c28 <makeFreeRtosPriority>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	f107 030c 	add.w	r3, r7, #12
 8005cd8:	9301      	str	r3, [sp, #4]
 8005cda:	9200      	str	r2, [sp, #0]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	4632      	mov	r2, r6
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f000 f929 	bl	8005f3a <xTaskCreate>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d001      	beq.n	8005cf2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e000      	b.n	8005cf4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cfc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <osDelay+0x16>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	e000      	b.n	8005d14 <osDelay+0x18>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fa3f 	bl	8006198 <vTaskDelay>
  
  return osOK;
 8005d1a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f103 0208 	add.w	r2, r3, #8
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f103 0208 	add.w	r2, r3, #8
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f103 0208 	add.w	r2, r3, #8
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc80      	pop	{r7}
 8005d60:	4770      	bx	lr

08005d62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bc80      	pop	{r7}
 8005d78:	4770      	bx	lr

08005d7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b085      	sub	sp, #20
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	601a      	str	r2, [r3, #0]
}
 8005db6:	bf00      	nop
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr

08005dc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d103      	bne.n	8005de0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e00c      	b.n	8005dfa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3308      	adds	r3, #8
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e002      	b.n	8005dee <vListInsert+0x2e>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d2f6      	bcs.n	8005de8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	601a      	str	r2, [r3, #0]
}
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bc80      	pop	{r7}
 8005e2e:	4770      	bx	lr

08005e30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6892      	ldr	r2, [r2, #8]
 8005e46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6852      	ldr	r2, [r2, #4]
 8005e50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d103      	bne.n	8005e64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	1e5a      	subs	r2, r3, #1
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr

08005e82 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b08e      	sub	sp, #56	; 0x38
 8005e86:	af04      	add	r7, sp, #16
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10a      	bne.n	8005ec8 <xTaskCreateStatic+0x46>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	61fb      	str	r3, [r7, #28]
}
 8005ec4:	bf00      	nop
 8005ec6:	e7fe      	b.n	8005ec6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ec8:	2354      	movs	r3, #84	; 0x54
 8005eca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	2b54      	cmp	r3, #84	; 0x54
 8005ed0:	d00a      	beq.n	8005ee8 <xTaskCreateStatic+0x66>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	61bb      	str	r3, [r7, #24]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d01e      	beq.n	8005f2c <xTaskCreateStatic+0xaa>
 8005eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01b      	beq.n	8005f2c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005efc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	2202      	movs	r2, #2
 8005f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f06:	2300      	movs	r3, #0
 8005f08:	9303      	str	r3, [sp, #12]
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	9302      	str	r3, [sp, #8]
 8005f0e:	f107 0314 	add.w	r3, r7, #20
 8005f12:	9301      	str	r3, [sp, #4]
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f850 	bl	8005fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f26:	f000 f8cd 	bl	80060c4 <prvAddNewTaskToReadyList>
 8005f2a:	e001      	b.n	8005f30 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f30:	697b      	ldr	r3, [r7, #20]
	}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3728      	adds	r7, #40	; 0x28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b08c      	sub	sp, #48	; 0x30
 8005f3e:	af04      	add	r7, sp, #16
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	603b      	str	r3, [r7, #0]
 8005f46:	4613      	mov	r3, r2
 8005f48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fe6e 	bl	8006c30 <pvPortMalloc>
 8005f54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00e      	beq.n	8005f7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f5c:	2054      	movs	r0, #84	; 0x54
 8005f5e:	f000 fe67 	bl	8006c30 <pvPortMalloc>
 8005f62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f70:	e005      	b.n	8005f7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f72:	6978      	ldr	r0, [r7, #20]
 8005f74:	f000 ff20 	bl	8006db8 <vPortFree>
 8005f78:	e001      	b.n	8005f7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d017      	beq.n	8005fb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f8c:	88fa      	ldrh	r2, [r7, #6]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9303      	str	r3, [sp, #12]
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	9302      	str	r3, [sp, #8]
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f80e 	bl	8005fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fa8:	69f8      	ldr	r0, [r7, #28]
 8005faa:	f000 f88b 	bl	80060c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	e002      	b.n	8005fba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fba:	69bb      	ldr	r3, [r7, #24]
	}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3720      	adds	r7, #32
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f023 0307 	bic.w	r3, r3, #7
 8005fea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	617b      	str	r3, [r7, #20]
}
 8006008:	bf00      	nop
 800600a:	e7fe      	b.n	800600a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800600c:	2300      	movs	r3, #0
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	e012      	b.n	8006038 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	7819      	ldrb	r1, [r3, #0]
 800601a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	3334      	adds	r3, #52	; 0x34
 8006022:	460a      	mov	r2, r1
 8006024:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	4413      	add	r3, r2
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d006      	beq.n	8006040 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3301      	adds	r3, #1
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	2b0f      	cmp	r3, #15
 800603c:	d9e9      	bls.n	8006012 <prvInitialiseNewTask+0x4e>
 800603e:	e000      	b.n	8006042 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006040:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	2b06      	cmp	r3, #6
 800604e:	d901      	bls.n	8006054 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006050:	2306      	movs	r3, #6
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006058:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800605e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	2200      	movs	r2, #0
 8006064:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	3304      	adds	r3, #4
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff fe79 	bl	8005d62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	3318      	adds	r3, #24
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fe74 	bl	8005d62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800607e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	f1c3 0207 	rsb	r2, r3, #7
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	2200      	movs	r2, #0
 8006094:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	68f9      	ldr	r1, [r7, #12]
 80060a2:	69b8      	ldr	r0, [r7, #24]
 80060a4:	f000 fc0e 	bl	80068c4 <pxPortInitialiseStack>
 80060a8:	4602      	mov	r2, r0
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ba:	bf00      	nop
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060cc:	f000 fcee 	bl	8006aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060d0:	4b2a      	ldr	r3, [pc, #168]	; (800617c <prvAddNewTaskToReadyList+0xb8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3301      	adds	r3, #1
 80060d6:	4a29      	ldr	r2, [pc, #164]	; (800617c <prvAddNewTaskToReadyList+0xb8>)
 80060d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060da:	4b29      	ldr	r3, [pc, #164]	; (8006180 <prvAddNewTaskToReadyList+0xbc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d109      	bne.n	80060f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060e2:	4a27      	ldr	r2, [pc, #156]	; (8006180 <prvAddNewTaskToReadyList+0xbc>)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060e8:	4b24      	ldr	r3, [pc, #144]	; (800617c <prvAddNewTaskToReadyList+0xb8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d110      	bne.n	8006112 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060f0:	f000 fac0 	bl	8006674 <prvInitialiseTaskLists>
 80060f4:	e00d      	b.n	8006112 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060f6:	4b23      	ldr	r3, [pc, #140]	; (8006184 <prvAddNewTaskToReadyList+0xc0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060fe:	4b20      	ldr	r3, [pc, #128]	; (8006180 <prvAddNewTaskToReadyList+0xbc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	429a      	cmp	r2, r3
 800610a:	d802      	bhi.n	8006112 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800610c:	4a1c      	ldr	r2, [pc, #112]	; (8006180 <prvAddNewTaskToReadyList+0xbc>)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006112:	4b1d      	ldr	r3, [pc, #116]	; (8006188 <prvAddNewTaskToReadyList+0xc4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3301      	adds	r3, #1
 8006118:	4a1b      	ldr	r2, [pc, #108]	; (8006188 <prvAddNewTaskToReadyList+0xc4>)
 800611a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	2201      	movs	r2, #1
 8006122:	409a      	lsls	r2, r3
 8006124:	4b19      	ldr	r3, [pc, #100]	; (800618c <prvAddNewTaskToReadyList+0xc8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4313      	orrs	r3, r2
 800612a:	4a18      	ldr	r2, [pc, #96]	; (800618c <prvAddNewTaskToReadyList+0xc8>)
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4a15      	ldr	r2, [pc, #84]	; (8006190 <prvAddNewTaskToReadyList+0xcc>)
 800613c:	441a      	add	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3304      	adds	r3, #4
 8006142:	4619      	mov	r1, r3
 8006144:	4610      	mov	r0, r2
 8006146:	f7ff fe18 	bl	8005d7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800614a:	f000 fcdf 	bl	8006b0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800614e:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <prvAddNewTaskToReadyList+0xc0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00e      	beq.n	8006174 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006156:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <prvAddNewTaskToReadyList+0xbc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	429a      	cmp	r2, r3
 8006162:	d207      	bcs.n	8006174 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006164:	4b0b      	ldr	r3, [pc, #44]	; (8006194 <prvAddNewTaskToReadyList+0xd0>)
 8006166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006174:	bf00      	nop
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20000754 	.word	0x20000754
 8006180:	20000654 	.word	0x20000654
 8006184:	20000760 	.word	0x20000760
 8006188:	20000770 	.word	0x20000770
 800618c:	2000075c 	.word	0x2000075c
 8006190:	20000658 	.word	0x20000658
 8006194:	e000ed04 	.word	0xe000ed04

08006198 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d017      	beq.n	80061da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061aa:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <vTaskDelay+0x60>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <vTaskDelay+0x30>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	60bb      	str	r3, [r7, #8]
}
 80061c4:	bf00      	nop
 80061c6:	e7fe      	b.n	80061c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061c8:	f000 f87a 	bl	80062c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061cc:	2100      	movs	r1, #0
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fb12 	bl	80067f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061d4:	f000 f882 	bl	80062dc <xTaskResumeAll>
 80061d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d107      	bne.n	80061f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <vTaskDelay+0x64>)
 80061e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	2000077c 	.word	0x2000077c
 80061fc:	e000ed04 	.word	0xe000ed04

08006200 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08a      	sub	sp, #40	; 0x28
 8006204:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800620e:	463a      	mov	r2, r7
 8006210:	1d39      	adds	r1, r7, #4
 8006212:	f107 0308 	add.w	r3, r7, #8
 8006216:	4618      	mov	r0, r3
 8006218:	f7fb fbdc 	bl	80019d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	9202      	str	r2, [sp, #8]
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	2300      	movs	r3, #0
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	2300      	movs	r3, #0
 800622c:	460a      	mov	r2, r1
 800622e:	491e      	ldr	r1, [pc, #120]	; (80062a8 <vTaskStartScheduler+0xa8>)
 8006230:	481e      	ldr	r0, [pc, #120]	; (80062ac <vTaskStartScheduler+0xac>)
 8006232:	f7ff fe26 	bl	8005e82 <xTaskCreateStatic>
 8006236:	4603      	mov	r3, r0
 8006238:	4a1d      	ldr	r2, [pc, #116]	; (80062b0 <vTaskStartScheduler+0xb0>)
 800623a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800623c:	4b1c      	ldr	r3, [pc, #112]	; (80062b0 <vTaskStartScheduler+0xb0>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006244:	2301      	movs	r3, #1
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	e001      	b.n	800624e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d116      	bne.n	8006282 <vTaskStartScheduler+0x82>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	613b      	str	r3, [r7, #16]
}
 8006266:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006268:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <vTaskStartScheduler+0xb4>)
 800626a:	f04f 32ff 	mov.w	r2, #4294967295
 800626e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006270:	4b11      	ldr	r3, [pc, #68]	; (80062b8 <vTaskStartScheduler+0xb8>)
 8006272:	2201      	movs	r2, #1
 8006274:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006276:	4b11      	ldr	r3, [pc, #68]	; (80062bc <vTaskStartScheduler+0xbc>)
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800627c:	f000 fba4 	bl	80069c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006280:	e00e      	b.n	80062a0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006288:	d10a      	bne.n	80062a0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	60fb      	str	r3, [r7, #12]
}
 800629c:	bf00      	nop
 800629e:	e7fe      	b.n	800629e <vTaskStartScheduler+0x9e>
}
 80062a0:	bf00      	nop
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	08009e30 	.word	0x08009e30
 80062ac:	08006645 	.word	0x08006645
 80062b0:	20000778 	.word	0x20000778
 80062b4:	20000774 	.word	0x20000774
 80062b8:	20000760 	.word	0x20000760
 80062bc:	20000758 	.word	0x20000758

080062c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062c4:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <vTaskSuspendAll+0x18>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3301      	adds	r3, #1
 80062ca:	4a03      	ldr	r2, [pc, #12]	; (80062d8 <vTaskSuspendAll+0x18>)
 80062cc:	6013      	str	r3, [r2, #0]
}
 80062ce:	bf00      	nop
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bc80      	pop	{r7}
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	2000077c 	.word	0x2000077c

080062dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062ea:	4b41      	ldr	r3, [pc, #260]	; (80063f0 <xTaskResumeAll+0x114>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <xTaskResumeAll+0x2c>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	603b      	str	r3, [r7, #0]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006308:	f000 fbd0 	bl	8006aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800630c:	4b38      	ldr	r3, [pc, #224]	; (80063f0 <xTaskResumeAll+0x114>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3b01      	subs	r3, #1
 8006312:	4a37      	ldr	r2, [pc, #220]	; (80063f0 <xTaskResumeAll+0x114>)
 8006314:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006316:	4b36      	ldr	r3, [pc, #216]	; (80063f0 <xTaskResumeAll+0x114>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d161      	bne.n	80063e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800631e:	4b35      	ldr	r3, [pc, #212]	; (80063f4 <xTaskResumeAll+0x118>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d05d      	beq.n	80063e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006326:	e02e      	b.n	8006386 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006328:	4b33      	ldr	r3, [pc, #204]	; (80063f8 <xTaskResumeAll+0x11c>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3318      	adds	r3, #24
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fd7b 	bl	8005e30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3304      	adds	r3, #4
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff fd76 	bl	8005e30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	2201      	movs	r2, #1
 800634a:	409a      	lsls	r2, r3
 800634c:	4b2b      	ldr	r3, [pc, #172]	; (80063fc <xTaskResumeAll+0x120>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4313      	orrs	r3, r2
 8006352:	4a2a      	ldr	r2, [pc, #168]	; (80063fc <xTaskResumeAll+0x120>)
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4a27      	ldr	r2, [pc, #156]	; (8006400 <xTaskResumeAll+0x124>)
 8006364:	441a      	add	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3304      	adds	r3, #4
 800636a:	4619      	mov	r1, r3
 800636c:	4610      	mov	r0, r2
 800636e:	f7ff fd04 	bl	8005d7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006376:	4b23      	ldr	r3, [pc, #140]	; (8006404 <xTaskResumeAll+0x128>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	429a      	cmp	r2, r3
 800637e:	d302      	bcc.n	8006386 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006380:	4b21      	ldr	r3, [pc, #132]	; (8006408 <xTaskResumeAll+0x12c>)
 8006382:	2201      	movs	r2, #1
 8006384:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006386:	4b1c      	ldr	r3, [pc, #112]	; (80063f8 <xTaskResumeAll+0x11c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1cc      	bne.n	8006328 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006394:	f000 fa0c 	bl	80067b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006398:	4b1c      	ldr	r3, [pc, #112]	; (800640c <xTaskResumeAll+0x130>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d010      	beq.n	80063c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063a4:	f000 f836 	bl	8006414 <xTaskIncrementTick>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80063ae:	4b16      	ldr	r3, [pc, #88]	; (8006408 <xTaskResumeAll+0x12c>)
 80063b0:	2201      	movs	r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1f1      	bne.n	80063a4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80063c0:	4b12      	ldr	r3, [pc, #72]	; (800640c <xTaskResumeAll+0x130>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063c6:	4b10      	ldr	r3, [pc, #64]	; (8006408 <xTaskResumeAll+0x12c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063ce:	2301      	movs	r3, #1
 80063d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063d2:	4b0f      	ldr	r3, [pc, #60]	; (8006410 <xTaskResumeAll+0x134>)
 80063d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063e2:	f000 fb93 	bl	8006b0c <vPortExitCritical>

	return xAlreadyYielded;
 80063e6:	68bb      	ldr	r3, [r7, #8]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	2000077c 	.word	0x2000077c
 80063f4:	20000754 	.word	0x20000754
 80063f8:	20000714 	.word	0x20000714
 80063fc:	2000075c 	.word	0x2000075c
 8006400:	20000658 	.word	0x20000658
 8006404:	20000654 	.word	0x20000654
 8006408:	20000768 	.word	0x20000768
 800640c:	20000764 	.word	0x20000764
 8006410:	e000ed04 	.word	0xe000ed04

08006414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800641a:	2300      	movs	r3, #0
 800641c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800641e:	4b51      	ldr	r3, [pc, #324]	; (8006564 <xTaskIncrementTick+0x150>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f040 808d 	bne.w	8006542 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006428:	4b4f      	ldr	r3, [pc, #316]	; (8006568 <xTaskIncrementTick+0x154>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3301      	adds	r3, #1
 800642e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006430:	4a4d      	ldr	r2, [pc, #308]	; (8006568 <xTaskIncrementTick+0x154>)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d120      	bne.n	800647e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800643c:	4b4b      	ldr	r3, [pc, #300]	; (800656c <xTaskIncrementTick+0x158>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <xTaskIncrementTick+0x48>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	603b      	str	r3, [r7, #0]
}
 8006458:	bf00      	nop
 800645a:	e7fe      	b.n	800645a <xTaskIncrementTick+0x46>
 800645c:	4b43      	ldr	r3, [pc, #268]	; (800656c <xTaskIncrementTick+0x158>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	4b43      	ldr	r3, [pc, #268]	; (8006570 <xTaskIncrementTick+0x15c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a41      	ldr	r2, [pc, #260]	; (800656c <xTaskIncrementTick+0x158>)
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	4a41      	ldr	r2, [pc, #260]	; (8006570 <xTaskIncrementTick+0x15c>)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	4b40      	ldr	r3, [pc, #256]	; (8006574 <xTaskIncrementTick+0x160>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3301      	adds	r3, #1
 8006476:	4a3f      	ldr	r2, [pc, #252]	; (8006574 <xTaskIncrementTick+0x160>)
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	f000 f999 	bl	80067b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800647e:	4b3e      	ldr	r3, [pc, #248]	; (8006578 <xTaskIncrementTick+0x164>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	429a      	cmp	r2, r3
 8006486:	d34d      	bcc.n	8006524 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006488:	4b38      	ldr	r3, [pc, #224]	; (800656c <xTaskIncrementTick+0x158>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <xTaskIncrementTick+0x82>
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <xTaskIncrementTick+0x84>
 8006496:	2300      	movs	r3, #0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d004      	beq.n	80064a6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800649c:	4b36      	ldr	r3, [pc, #216]	; (8006578 <xTaskIncrementTick+0x164>)
 800649e:	f04f 32ff 	mov.w	r2, #4294967295
 80064a2:	601a      	str	r2, [r3, #0]
					break;
 80064a4:	e03e      	b.n	8006524 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064a6:	4b31      	ldr	r3, [pc, #196]	; (800656c <xTaskIncrementTick+0x158>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d203      	bcs.n	80064c6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064be:	4a2e      	ldr	r2, [pc, #184]	; (8006578 <xTaskIncrementTick+0x164>)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6013      	str	r3, [r2, #0]
						break;
 80064c4:	e02e      	b.n	8006524 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	3304      	adds	r3, #4
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff fcb0 	bl	8005e30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d004      	beq.n	80064e2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	3318      	adds	r3, #24
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff fca7 	bl	8005e30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e6:	2201      	movs	r2, #1
 80064e8:	409a      	lsls	r2, r3
 80064ea:	4b24      	ldr	r3, [pc, #144]	; (800657c <xTaskIncrementTick+0x168>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	4a22      	ldr	r2, [pc, #136]	; (800657c <xTaskIncrementTick+0x168>)
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4a1f      	ldr	r2, [pc, #124]	; (8006580 <xTaskIncrementTick+0x16c>)
 8006502:	441a      	add	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	3304      	adds	r3, #4
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f7ff fc35 	bl	8005d7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006514:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <xTaskIncrementTick+0x170>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651a:	429a      	cmp	r2, r3
 800651c:	d3b4      	bcc.n	8006488 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800651e:	2301      	movs	r3, #1
 8006520:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006522:	e7b1      	b.n	8006488 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006524:	4b17      	ldr	r3, [pc, #92]	; (8006584 <xTaskIncrementTick+0x170>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652a:	4915      	ldr	r1, [pc, #84]	; (8006580 <xTaskIncrementTick+0x16c>)
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d907      	bls.n	800654c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800653c:	2301      	movs	r3, #1
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e004      	b.n	800654c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006542:	4b11      	ldr	r3, [pc, #68]	; (8006588 <xTaskIncrementTick+0x174>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3301      	adds	r3, #1
 8006548:	4a0f      	ldr	r2, [pc, #60]	; (8006588 <xTaskIncrementTick+0x174>)
 800654a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800654c:	4b0f      	ldr	r3, [pc, #60]	; (800658c <xTaskIncrementTick+0x178>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006554:	2301      	movs	r3, #1
 8006556:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006558:	697b      	ldr	r3, [r7, #20]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	2000077c 	.word	0x2000077c
 8006568:	20000758 	.word	0x20000758
 800656c:	2000070c 	.word	0x2000070c
 8006570:	20000710 	.word	0x20000710
 8006574:	2000076c 	.word	0x2000076c
 8006578:	20000774 	.word	0x20000774
 800657c:	2000075c 	.word	0x2000075c
 8006580:	20000658 	.word	0x20000658
 8006584:	20000654 	.word	0x20000654
 8006588:	20000764 	.word	0x20000764
 800658c:	20000768 	.word	0x20000768

08006590 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006596:	4b26      	ldr	r3, [pc, #152]	; (8006630 <vTaskSwitchContext+0xa0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800659e:	4b25      	ldr	r3, [pc, #148]	; (8006634 <vTaskSwitchContext+0xa4>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065a4:	e03f      	b.n	8006626 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80065a6:	4b23      	ldr	r3, [pc, #140]	; (8006634 <vTaskSwitchContext+0xa4>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065ac:	4b22      	ldr	r3, [pc, #136]	; (8006638 <vTaskSwitchContext+0xa8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	fab3 f383 	clz	r3, r3
 80065b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80065ba:	7afb      	ldrb	r3, [r7, #11]
 80065bc:	f1c3 031f 	rsb	r3, r3, #31
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	491e      	ldr	r1, [pc, #120]	; (800663c <vTaskSwitchContext+0xac>)
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	440b      	add	r3, r1
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10a      	bne.n	80065ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	607b      	str	r3, [r7, #4]
}
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <vTaskSwitchContext+0x5a>
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4a11      	ldr	r2, [pc, #68]	; (800663c <vTaskSwitchContext+0xac>)
 80065f8:	4413      	add	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	605a      	str	r2, [r3, #4]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	3308      	adds	r3, #8
 800660e:	429a      	cmp	r2, r3
 8006610:	d104      	bne.n	800661c <vTaskSwitchContext+0x8c>
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	605a      	str	r2, [r3, #4]
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	4a07      	ldr	r2, [pc, #28]	; (8006640 <vTaskSwitchContext+0xb0>)
 8006624:	6013      	str	r3, [r2, #0]
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr
 8006630:	2000077c 	.word	0x2000077c
 8006634:	20000768 	.word	0x20000768
 8006638:	2000075c 	.word	0x2000075c
 800663c:	20000658 	.word	0x20000658
 8006640:	20000654 	.word	0x20000654

08006644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800664c:	f000 f852 	bl	80066f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006650:	4b06      	ldr	r3, [pc, #24]	; (800666c <prvIdleTask+0x28>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d9f9      	bls.n	800664c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006658:	4b05      	ldr	r3, [pc, #20]	; (8006670 <prvIdleTask+0x2c>)
 800665a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006668:	e7f0      	b.n	800664c <prvIdleTask+0x8>
 800666a:	bf00      	nop
 800666c:	20000658 	.word	0x20000658
 8006670:	e000ed04 	.word	0xe000ed04

08006674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800667a:	2300      	movs	r3, #0
 800667c:	607b      	str	r3, [r7, #4]
 800667e:	e00c      	b.n	800669a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	4613      	mov	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4a12      	ldr	r2, [pc, #72]	; (80066d4 <prvInitialiseTaskLists+0x60>)
 800668c:	4413      	add	r3, r2
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff fb48 	bl	8005d24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3301      	adds	r3, #1
 8006698:	607b      	str	r3, [r7, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b06      	cmp	r3, #6
 800669e:	d9ef      	bls.n	8006680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066a0:	480d      	ldr	r0, [pc, #52]	; (80066d8 <prvInitialiseTaskLists+0x64>)
 80066a2:	f7ff fb3f 	bl	8005d24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066a6:	480d      	ldr	r0, [pc, #52]	; (80066dc <prvInitialiseTaskLists+0x68>)
 80066a8:	f7ff fb3c 	bl	8005d24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066ac:	480c      	ldr	r0, [pc, #48]	; (80066e0 <prvInitialiseTaskLists+0x6c>)
 80066ae:	f7ff fb39 	bl	8005d24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066b2:	480c      	ldr	r0, [pc, #48]	; (80066e4 <prvInitialiseTaskLists+0x70>)
 80066b4:	f7ff fb36 	bl	8005d24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066b8:	480b      	ldr	r0, [pc, #44]	; (80066e8 <prvInitialiseTaskLists+0x74>)
 80066ba:	f7ff fb33 	bl	8005d24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066be:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <prvInitialiseTaskLists+0x78>)
 80066c0:	4a05      	ldr	r2, [pc, #20]	; (80066d8 <prvInitialiseTaskLists+0x64>)
 80066c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066c4:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <prvInitialiseTaskLists+0x7c>)
 80066c6:	4a05      	ldr	r2, [pc, #20]	; (80066dc <prvInitialiseTaskLists+0x68>)
 80066c8:	601a      	str	r2, [r3, #0]
}
 80066ca:	bf00      	nop
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000658 	.word	0x20000658
 80066d8:	200006e4 	.word	0x200006e4
 80066dc:	200006f8 	.word	0x200006f8
 80066e0:	20000714 	.word	0x20000714
 80066e4:	20000728 	.word	0x20000728
 80066e8:	20000740 	.word	0x20000740
 80066ec:	2000070c 	.word	0x2000070c
 80066f0:	20000710 	.word	0x20000710

080066f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066fa:	e019      	b.n	8006730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066fc:	f000 f9d6 	bl	8006aac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006700:	4b10      	ldr	r3, [pc, #64]	; (8006744 <prvCheckTasksWaitingTermination+0x50>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3304      	adds	r3, #4
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff fb8f 	bl	8005e30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006712:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <prvCheckTasksWaitingTermination+0x54>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3b01      	subs	r3, #1
 8006718:	4a0b      	ldr	r2, [pc, #44]	; (8006748 <prvCheckTasksWaitingTermination+0x54>)
 800671a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800671c:	4b0b      	ldr	r3, [pc, #44]	; (800674c <prvCheckTasksWaitingTermination+0x58>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3b01      	subs	r3, #1
 8006722:	4a0a      	ldr	r2, [pc, #40]	; (800674c <prvCheckTasksWaitingTermination+0x58>)
 8006724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006726:	f000 f9f1 	bl	8006b0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f810 	bl	8006750 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006730:	4b06      	ldr	r3, [pc, #24]	; (800674c <prvCheckTasksWaitingTermination+0x58>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e1      	bne.n	80066fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000728 	.word	0x20000728
 8006748:	20000754 	.word	0x20000754
 800674c:	2000073c 	.word	0x2000073c

08006750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800675e:	2b00      	cmp	r3, #0
 8006760:	d108      	bne.n	8006774 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fb26 	bl	8006db8 <vPortFree>
				vPortFree( pxTCB );
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fb23 	bl	8006db8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006772:	e018      	b.n	80067a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800677a:	2b01      	cmp	r3, #1
 800677c:	d103      	bne.n	8006786 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fb1a 	bl	8006db8 <vPortFree>
	}
 8006784:	e00f      	b.n	80067a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800678c:	2b02      	cmp	r3, #2
 800678e:	d00a      	beq.n	80067a6 <prvDeleteTCB+0x56>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	60fb      	str	r3, [r7, #12]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <prvDeleteTCB+0x54>
	}
 80067a6:	bf00      	nop
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b6:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <prvResetNextTaskUnblockTime+0x40>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <prvResetNextTaskUnblockTime+0x14>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e000      	b.n	80067c6 <prvResetNextTaskUnblockTime+0x16>
 80067c4:	2300      	movs	r3, #0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067ca:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <prvResetNextTaskUnblockTime+0x44>)
 80067cc:	f04f 32ff 	mov.w	r2, #4294967295
 80067d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067d2:	e008      	b.n	80067e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067d4:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <prvResetNextTaskUnblockTime+0x40>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	4a04      	ldr	r2, [pc, #16]	; (80067f4 <prvResetNextTaskUnblockTime+0x44>)
 80067e4:	6013      	str	r3, [r2, #0]
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr
 80067f0:	2000070c 	.word	0x2000070c
 80067f4:	20000774 	.word	0x20000774

080067f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006802:	4b29      	ldr	r3, [pc, #164]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006808:	4b28      	ldr	r3, [pc, #160]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3304      	adds	r3, #4
 800680e:	4618      	mov	r0, r3
 8006810:	f7ff fb0e 	bl	8005e30 <uxListRemove>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800681a:	4b24      	ldr	r3, [pc, #144]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	2201      	movs	r2, #1
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	43da      	mvns	r2, r3
 8006828:	4b21      	ldr	r3, [pc, #132]	; (80068b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4013      	ands	r3, r2
 800682e:	4a20      	ldr	r2, [pc, #128]	; (80068b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006830:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006838:	d10a      	bne.n	8006850 <prvAddCurrentTaskToDelayedList+0x58>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006840:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3304      	adds	r3, #4
 8006846:	4619      	mov	r1, r3
 8006848:	481a      	ldr	r0, [pc, #104]	; (80068b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800684a:	f7ff fa96 	bl	8005d7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800684e:	e026      	b.n	800689e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4413      	add	r3, r2
 8006856:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006858:	4b14      	ldr	r3, [pc, #80]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d209      	bcs.n	800687c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006868:	4b13      	ldr	r3, [pc, #76]	; (80068b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3304      	adds	r3, #4
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f7ff faa3 	bl	8005dc0 <vListInsert>
}
 800687a:	e010      	b.n	800689e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800687c:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f7ff fa99 	bl	8005dc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800688e:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	d202      	bcs.n	800689e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006898:	4a09      	ldr	r2, [pc, #36]	; (80068c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	6013      	str	r3, [r2, #0]
}
 800689e:	bf00      	nop
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20000758 	.word	0x20000758
 80068ac:	20000654 	.word	0x20000654
 80068b0:	2000075c 	.word	0x2000075c
 80068b4:	20000740 	.word	0x20000740
 80068b8:	20000710 	.word	0x20000710
 80068bc:	2000070c 	.word	0x2000070c
 80068c0:	20000774 	.word	0x20000774

080068c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3b04      	subs	r3, #4
 80068d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3b04      	subs	r3, #4
 80068e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f023 0201 	bic.w	r2, r3, #1
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068f4:	4a08      	ldr	r2, [pc, #32]	; (8006918 <pxPortInitialiseStack+0x54>)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3b14      	subs	r3, #20
 80068fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3b20      	subs	r3, #32
 800690a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800690c:	68fb      	ldr	r3, [r7, #12]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr
 8006918:	0800691d 	.word	0x0800691d

0800691c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006922:	2300      	movs	r3, #0
 8006924:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006926:	4b12      	ldr	r3, [pc, #72]	; (8006970 <prvTaskExitError+0x54>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692e:	d00a      	beq.n	8006946 <prvTaskExitError+0x2a>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60fb      	str	r3, [r7, #12]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <prvTaskExitError+0x28>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	60bb      	str	r3, [r7, #8]
}
 8006958:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800695a:	bf00      	nop
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0fc      	beq.n	800695c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	bc80      	pop	{r7}
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	2000000c 	.word	0x2000000c
	...

08006980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006980:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <pxCurrentTCBConst2>)
 8006982:	6819      	ldr	r1, [r3, #0]
 8006984:	6808      	ldr	r0, [r1, #0]
 8006986:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800698a:	f380 8809 	msr	PSP, r0
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f04f 0000 	mov.w	r0, #0
 8006996:	f380 8811 	msr	BASEPRI, r0
 800699a:	f04e 0e0d 	orr.w	lr, lr, #13
 800699e:	4770      	bx	lr

080069a0 <pxCurrentTCBConst2>:
 80069a0:	20000654 	.word	0x20000654
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop

080069a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80069a8:	4806      	ldr	r0, [pc, #24]	; (80069c4 <prvPortStartFirstTask+0x1c>)
 80069aa:	6800      	ldr	r0, [r0, #0]
 80069ac:	6800      	ldr	r0, [r0, #0]
 80069ae:	f380 8808 	msr	MSP, r0
 80069b2:	b662      	cpsie	i
 80069b4:	b661      	cpsie	f
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	df00      	svc	0
 80069c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069c2:	bf00      	nop
 80069c4:	e000ed08 	.word	0xe000ed08

080069c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069ce:	4b32      	ldr	r3, [pc, #200]	; (8006a98 <xPortStartScheduler+0xd0>)
 80069d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	22ff      	movs	r2, #255	; 0xff
 80069de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	4b2a      	ldr	r3, [pc, #168]	; (8006a9c <xPortStartScheduler+0xd4>)
 80069f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069f6:	4b2a      	ldr	r3, [pc, #168]	; (8006aa0 <xPortStartScheduler+0xd8>)
 80069f8:	2207      	movs	r2, #7
 80069fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069fc:	e009      	b.n	8006a12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80069fe:	4b28      	ldr	r3, [pc, #160]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	4a26      	ldr	r2, [pc, #152]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1a:	2b80      	cmp	r3, #128	; 0x80
 8006a1c:	d0ef      	beq.n	80069fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a1e:	4b20      	ldr	r3, [pc, #128]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f1c3 0307 	rsb	r3, r3, #7
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d00a      	beq.n	8006a40 <xPortStartScheduler+0x78>
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	60bb      	str	r3, [r7, #8]
}
 8006a3c:	bf00      	nop
 8006a3e:	e7fe      	b.n	8006a3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a40:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	021b      	lsls	r3, r3, #8
 8006a46:	4a16      	ldr	r2, [pc, #88]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a4a:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a52:	4a13      	ldr	r2, [pc, #76]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a5e:	4b11      	ldr	r3, [pc, #68]	; (8006aa4 <xPortStartScheduler+0xdc>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a10      	ldr	r2, [pc, #64]	; (8006aa4 <xPortStartScheduler+0xdc>)
 8006a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a6a:	4b0e      	ldr	r3, [pc, #56]	; (8006aa4 <xPortStartScheduler+0xdc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a0d      	ldr	r2, [pc, #52]	; (8006aa4 <xPortStartScheduler+0xdc>)
 8006a70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a76:	f000 f8b9 	bl	8006bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <xPortStartScheduler+0xe0>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a80:	f7ff ff92 	bl	80069a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a84:	f7ff fd84 	bl	8006590 <vTaskSwitchContext>
	prvTaskExitError();
 8006a88:	f7ff ff48 	bl	800691c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	e000e400 	.word	0xe000e400
 8006a9c:	20000780 	.word	0x20000780
 8006aa0:	20000784 	.word	0x20000784
 8006aa4:	e000ed20 	.word	0xe000ed20
 8006aa8:	2000000c 	.word	0x2000000c

08006aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	607b      	str	r3, [r7, #4]
}
 8006ac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ac6:	4b0f      	ldr	r3, [pc, #60]	; (8006b04 <vPortEnterCritical+0x58>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	4a0d      	ldr	r2, [pc, #52]	; (8006b04 <vPortEnterCritical+0x58>)
 8006ace:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ad0:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <vPortEnterCritical+0x58>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d10f      	bne.n	8006af8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ad8:	4b0b      	ldr	r3, [pc, #44]	; (8006b08 <vPortEnterCritical+0x5c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	603b      	str	r3, [r7, #0]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <vPortEnterCritical+0x4a>
	}
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	2000000c 	.word	0x2000000c
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b12:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <vPortExitCritical+0x4c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <vPortExitCritical+0x24>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	607b      	str	r3, [r7, #4]
}
 8006b2c:	bf00      	nop
 8006b2e:	e7fe      	b.n	8006b2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b30:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <vPortExitCritical+0x4c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	4a08      	ldr	r2, [pc, #32]	; (8006b58 <vPortExitCritical+0x4c>)
 8006b38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b3a:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <vPortExitCritical+0x4c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d105      	bne.n	8006b4e <vPortExitCritical+0x42>
 8006b42:	2300      	movs	r3, #0
 8006b44:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr
 8006b58:	2000000c 	.word	0x2000000c
 8006b5c:	00000000 	.word	0x00000000

08006b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b60:	f3ef 8009 	mrs	r0, PSP
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <pxCurrentTCBConst>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b70:	6010      	str	r0, [r2, #0]
 8006b72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006b76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b7a:	f380 8811 	msr	BASEPRI, r0
 8006b7e:	f7ff fd07 	bl	8006590 <vTaskSwitchContext>
 8006b82:	f04f 0000 	mov.w	r0, #0
 8006b86:	f380 8811 	msr	BASEPRI, r0
 8006b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b8e:	6819      	ldr	r1, [r3, #0]
 8006b90:	6808      	ldr	r0, [r1, #0]
 8006b92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b96:	f380 8809 	msr	PSP, r0
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	4770      	bx	lr

08006ba0 <pxCurrentTCBConst>:
 8006ba0:	20000654 	.word	0x20000654
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop

08006ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	607b      	str	r3, [r7, #4]
}
 8006bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bc2:	f7ff fc27 	bl	8006414 <xTaskIncrementTick>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <SysTick_Handler+0x40>)
 8006bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f383 8811 	msr	BASEPRI, r3
}
 8006bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	e000ed04 	.word	0xe000ed04

08006bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <vPortSetupTimerInterrupt+0x30>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bf6:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <vPortSetupTimerInterrupt+0x34>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bfc:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <vPortSetupTimerInterrupt+0x38>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a09      	ldr	r2, [pc, #36]	; (8006c28 <vPortSetupTimerInterrupt+0x3c>)
 8006c02:	fba2 2303 	umull	r2, r3, r2, r3
 8006c06:	099b      	lsrs	r3, r3, #6
 8006c08:	4a08      	ldr	r2, [pc, #32]	; (8006c2c <vPortSetupTimerInterrupt+0x40>)
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c0e:	4b03      	ldr	r3, [pc, #12]	; (8006c1c <vPortSetupTimerInterrupt+0x30>)
 8006c10:	2207      	movs	r2, #7
 8006c12:	601a      	str	r2, [r3, #0]
}
 8006c14:	bf00      	nop
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bc80      	pop	{r7}
 8006c1a:	4770      	bx	lr
 8006c1c:	e000e010 	.word	0xe000e010
 8006c20:	e000e018 	.word	0xe000e018
 8006c24:	20000000 	.word	0x20000000
 8006c28:	10624dd3 	.word	0x10624dd3
 8006c2c:	e000e014 	.word	0xe000e014

08006c30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08a      	sub	sp, #40	; 0x28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c3c:	f7ff fb40 	bl	80062c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c40:	4b58      	ldr	r3, [pc, #352]	; (8006da4 <pvPortMalloc+0x174>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c48:	f000 f910 	bl	8006e6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c4c:	4b56      	ldr	r3, [pc, #344]	; (8006da8 <pvPortMalloc+0x178>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4013      	ands	r3, r2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f040 808e 	bne.w	8006d76 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01d      	beq.n	8006c9c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c60:	2208      	movs	r2, #8
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d014      	beq.n	8006c9c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f023 0307 	bic.w	r3, r3, #7
 8006c78:	3308      	adds	r3, #8
 8006c7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <pvPortMalloc+0x6c>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	617b      	str	r3, [r7, #20]
}
 8006c98:	bf00      	nop
 8006c9a:	e7fe      	b.n	8006c9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d069      	beq.n	8006d76 <pvPortMalloc+0x146>
 8006ca2:	4b42      	ldr	r3, [pc, #264]	; (8006dac <pvPortMalloc+0x17c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d864      	bhi.n	8006d76 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cac:	4b40      	ldr	r3, [pc, #256]	; (8006db0 <pvPortMalloc+0x180>)
 8006cae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cb0:	4b3f      	ldr	r3, [pc, #252]	; (8006db0 <pvPortMalloc+0x180>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cb6:	e004      	b.n	8006cc2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d903      	bls.n	8006cd4 <pvPortMalloc+0xa4>
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1f1      	bne.n	8006cb8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cd4:	4b33      	ldr	r3, [pc, #204]	; (8006da4 <pvPortMalloc+0x174>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d04b      	beq.n	8006d76 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2208      	movs	r2, #8
 8006ce4:	4413      	add	r3, r2
 8006ce6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	1ad2      	subs	r2, r2, r3
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d91f      	bls.n	8006d40 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4413      	add	r3, r2
 8006d06:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <pvPortMalloc+0xf8>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	613b      	str	r3, [r7, #16]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	1ad2      	subs	r2, r2, r3
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d3a:	69b8      	ldr	r0, [r7, #24]
 8006d3c:	f000 f8f8 	bl	8006f30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d40:	4b1a      	ldr	r3, [pc, #104]	; (8006dac <pvPortMalloc+0x17c>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	4a18      	ldr	r2, [pc, #96]	; (8006dac <pvPortMalloc+0x17c>)
 8006d4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d4e:	4b17      	ldr	r3, [pc, #92]	; (8006dac <pvPortMalloc+0x17c>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b18      	ldr	r3, [pc, #96]	; (8006db4 <pvPortMalloc+0x184>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d203      	bcs.n	8006d62 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d5a:	4b14      	ldr	r3, [pc, #80]	; (8006dac <pvPortMalloc+0x17c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a15      	ldr	r2, [pc, #84]	; (8006db4 <pvPortMalloc+0x184>)
 8006d60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <pvPortMalloc+0x178>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d76:	f7ff fab1 	bl	80062dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00a      	beq.n	8006d9a <pvPortMalloc+0x16a>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	60fb      	str	r3, [r7, #12]
}
 8006d96:	bf00      	nop
 8006d98:	e7fe      	b.n	8006d98 <pvPortMalloc+0x168>
	return pvReturn;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3728      	adds	r7, #40	; 0x28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20001390 	.word	0x20001390
 8006da8:	2000139c 	.word	0x2000139c
 8006dac:	20001394 	.word	0x20001394
 8006db0:	20001388 	.word	0x20001388
 8006db4:	20001398 	.word	0x20001398

08006db8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d048      	beq.n	8006e5c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dca:	2308      	movs	r3, #8
 8006dcc:	425b      	negs	r3, r3
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	4b21      	ldr	r3, [pc, #132]	; (8006e64 <vPortFree+0xac>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4013      	ands	r3, r2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10a      	bne.n	8006dfc <vPortFree+0x44>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60fb      	str	r3, [r7, #12]
}
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <vPortFree+0x62>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	60bb      	str	r3, [r7, #8]
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	4b11      	ldr	r3, [pc, #68]	; (8006e64 <vPortFree+0xac>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d019      	beq.n	8006e5c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d115      	bne.n	8006e5c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <vPortFree+0xac>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e40:	f7ff fa3e 	bl	80062c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <vPortFree+0xb0>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	4a06      	ldr	r2, [pc, #24]	; (8006e68 <vPortFree+0xb0>)
 8006e50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e52:	6938      	ldr	r0, [r7, #16]
 8006e54:	f000 f86c 	bl	8006f30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e58:	f7ff fa40 	bl	80062dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e5c:	bf00      	nop
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	2000139c 	.word	0x2000139c
 8006e68:	20001394 	.word	0x20001394

08006e6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e78:	4b27      	ldr	r3, [pc, #156]	; (8006f18 <prvHeapInit+0xac>)
 8006e7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f003 0307 	and.w	r3, r3, #7
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00c      	beq.n	8006ea0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3307      	adds	r3, #7
 8006e8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0307 	bic.w	r3, r3, #7
 8006e92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	4a1f      	ldr	r2, [pc, #124]	; (8006f18 <prvHeapInit+0xac>)
 8006e9c:	4413      	add	r3, r2
 8006e9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ea4:	4a1d      	ldr	r2, [pc, #116]	; (8006f1c <prvHeapInit+0xb0>)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006eaa:	4b1c      	ldr	r3, [pc, #112]	; (8006f1c <prvHeapInit+0xb0>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006eb8:	2208      	movs	r2, #8
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1a9b      	subs	r3, r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0307 	bic.w	r3, r3, #7
 8006ec6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <prvHeapInit+0xb4>)
 8006ecc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ece:	4b14      	ldr	r3, [pc, #80]	; (8006f20 <prvHeapInit+0xb4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ed6:	4b12      	ldr	r3, [pc, #72]	; (8006f20 <prvHeapInit+0xb4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	1ad2      	subs	r2, r2, r3
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006eec:	4b0c      	ldr	r3, [pc, #48]	; (8006f20 <prvHeapInit+0xb4>)
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	4a0a      	ldr	r2, [pc, #40]	; (8006f24 <prvHeapInit+0xb8>)
 8006efa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	4a09      	ldr	r2, [pc, #36]	; (8006f28 <prvHeapInit+0xbc>)
 8006f02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f04:	4b09      	ldr	r3, [pc, #36]	; (8006f2c <prvHeapInit+0xc0>)
 8006f06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f0a:	601a      	str	r2, [r3, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bc80      	pop	{r7}
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000788 	.word	0x20000788
 8006f1c:	20001388 	.word	0x20001388
 8006f20:	20001390 	.word	0x20001390
 8006f24:	20001398 	.word	0x20001398
 8006f28:	20001394 	.word	0x20001394
 8006f2c:	2000139c 	.word	0x2000139c

08006f30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f38:	4b27      	ldr	r3, [pc, #156]	; (8006fd8 <prvInsertBlockIntoFreeList+0xa8>)
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	e002      	b.n	8006f44 <prvInsertBlockIntoFreeList+0x14>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d8f7      	bhi.n	8006f3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	4413      	add	r3, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d108      	bne.n	8006f72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	441a      	add	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	441a      	add	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d118      	bne.n	8006fb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	4b14      	ldr	r3, [pc, #80]	; (8006fdc <prvInsertBlockIntoFreeList+0xac>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d00d      	beq.n	8006fae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	441a      	add	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	e008      	b.n	8006fc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fae:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <prvInsertBlockIntoFreeList+0xac>)
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e003      	b.n	8006fc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d002      	beq.n	8006fce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fce:	bf00      	nop
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bc80      	pop	{r7}
 8006fd6:	4770      	bx	lr
 8006fd8:	20001388 	.word	0x20001388
 8006fdc:	20001390 	.word	0x20001390

08006fe0 <ceilf>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8006fe6:	3d7f      	subs	r5, #127	; 0x7f
 8006fe8:	2d16      	cmp	r5, #22
 8006fea:	4601      	mov	r1, r0
 8006fec:	4604      	mov	r4, r0
 8006fee:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8006ff2:	dc25      	bgt.n	8007040 <ceilf+0x60>
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	da0e      	bge.n	8007016 <ceilf+0x36>
 8006ff8:	4917      	ldr	r1, [pc, #92]	; (8007058 <ceilf+0x78>)
 8006ffa:	f7f9 fd6b 	bl	8000ad4 <__addsf3>
 8006ffe:	2100      	movs	r1, #0
 8007000:	f7fa f82c 	bl	800105c <__aeabi_fcmpgt>
 8007004:	b128      	cbz	r0, 8007012 <ceilf+0x32>
 8007006:	2c00      	cmp	r4, #0
 8007008:	db22      	blt.n	8007050 <ceilf+0x70>
 800700a:	2e00      	cmp	r6, #0
 800700c:	bf18      	it	ne
 800700e:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 8007012:	4621      	mov	r1, r4
 8007014:	e01a      	b.n	800704c <ceilf+0x6c>
 8007016:	4e11      	ldr	r6, [pc, #68]	; (800705c <ceilf+0x7c>)
 8007018:	412e      	asrs	r6, r5
 800701a:	4230      	tst	r0, r6
 800701c:	d016      	beq.n	800704c <ceilf+0x6c>
 800701e:	490e      	ldr	r1, [pc, #56]	; (8007058 <ceilf+0x78>)
 8007020:	f7f9 fd58 	bl	8000ad4 <__addsf3>
 8007024:	2100      	movs	r1, #0
 8007026:	f7fa f819 	bl	800105c <__aeabi_fcmpgt>
 800702a:	2800      	cmp	r0, #0
 800702c:	d0f1      	beq.n	8007012 <ceilf+0x32>
 800702e:	2c00      	cmp	r4, #0
 8007030:	bfc2      	ittt	gt
 8007032:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8007036:	412b      	asrgt	r3, r5
 8007038:	18e4      	addgt	r4, r4, r3
 800703a:	ea24 0406 	bic.w	r4, r4, r6
 800703e:	e7e8      	b.n	8007012 <ceilf+0x32>
 8007040:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007044:	d302      	bcc.n	800704c <ceilf+0x6c>
 8007046:	f7f9 fd45 	bl	8000ad4 <__addsf3>
 800704a:	4601      	mov	r1, r0
 800704c:	4608      	mov	r0, r1
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007054:	e7dd      	b.n	8007012 <ceilf+0x32>
 8007056:	bf00      	nop
 8007058:	7149f2ca 	.word	0x7149f2ca
 800705c:	007fffff 	.word	0x007fffff

08007060 <roundf>:
 8007060:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007064:	3b7f      	subs	r3, #127	; 0x7f
 8007066:	2b16      	cmp	r3, #22
 8007068:	4601      	mov	r1, r0
 800706a:	b510      	push	{r4, lr}
 800706c:	dc14      	bgt.n	8007098 <roundf+0x38>
 800706e:	2b00      	cmp	r3, #0
 8007070:	da07      	bge.n	8007082 <roundf+0x22>
 8007072:	3301      	adds	r3, #1
 8007074:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8007078:	d101      	bne.n	800707e <roundf+0x1e>
 800707a:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800707e:	4608      	mov	r0, r1
 8007080:	bd10      	pop	{r4, pc}
 8007082:	4a08      	ldr	r2, [pc, #32]	; (80070a4 <roundf+0x44>)
 8007084:	411a      	asrs	r2, r3
 8007086:	4210      	tst	r0, r2
 8007088:	d0f9      	beq.n	800707e <roundf+0x1e>
 800708a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800708e:	4119      	asrs	r1, r3
 8007090:	4401      	add	r1, r0
 8007092:	ea21 0102 	bic.w	r1, r1, r2
 8007096:	e7f2      	b.n	800707e <roundf+0x1e>
 8007098:	2b80      	cmp	r3, #128	; 0x80
 800709a:	d1f0      	bne.n	800707e <roundf+0x1e>
 800709c:	f7f9 fd1a 	bl	8000ad4 <__addsf3>
 80070a0:	4601      	mov	r1, r0
 80070a2:	e7ec      	b.n	800707e <roundf+0x1e>
 80070a4:	007fffff 	.word	0x007fffff

080070a8 <__cvt>:
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ae:	461f      	mov	r7, r3
 80070b0:	bfbb      	ittet	lt
 80070b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80070b6:	461f      	movlt	r7, r3
 80070b8:	2300      	movge	r3, #0
 80070ba:	232d      	movlt	r3, #45	; 0x2d
 80070bc:	b088      	sub	sp, #32
 80070be:	4614      	mov	r4, r2
 80070c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80070c4:	7013      	strb	r3, [r2, #0]
 80070c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80070cc:	f023 0820 	bic.w	r8, r3, #32
 80070d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070d4:	d005      	beq.n	80070e2 <__cvt+0x3a>
 80070d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070da:	d100      	bne.n	80070de <__cvt+0x36>
 80070dc:	3501      	adds	r5, #1
 80070de:	2302      	movs	r3, #2
 80070e0:	e000      	b.n	80070e4 <__cvt+0x3c>
 80070e2:	2303      	movs	r3, #3
 80070e4:	aa07      	add	r2, sp, #28
 80070e6:	9204      	str	r2, [sp, #16]
 80070e8:	aa06      	add	r2, sp, #24
 80070ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80070ee:	e9cd 3500 	strd	r3, r5, [sp]
 80070f2:	4622      	mov	r2, r4
 80070f4:	463b      	mov	r3, r7
 80070f6:	f000 fe7f 	bl	8007df8 <_dtoa_r>
 80070fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070fe:	4606      	mov	r6, r0
 8007100:	d102      	bne.n	8007108 <__cvt+0x60>
 8007102:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007104:	07db      	lsls	r3, r3, #31
 8007106:	d522      	bpl.n	800714e <__cvt+0xa6>
 8007108:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800710c:	eb06 0905 	add.w	r9, r6, r5
 8007110:	d110      	bne.n	8007134 <__cvt+0x8c>
 8007112:	7833      	ldrb	r3, [r6, #0]
 8007114:	2b30      	cmp	r3, #48	; 0x30
 8007116:	d10a      	bne.n	800712e <__cvt+0x86>
 8007118:	2200      	movs	r2, #0
 800711a:	2300      	movs	r3, #0
 800711c:	4620      	mov	r0, r4
 800711e:	4639      	mov	r1, r7
 8007120:	f7f9 fc42 	bl	80009a8 <__aeabi_dcmpeq>
 8007124:	b918      	cbnz	r0, 800712e <__cvt+0x86>
 8007126:	f1c5 0501 	rsb	r5, r5, #1
 800712a:	f8ca 5000 	str.w	r5, [sl]
 800712e:	f8da 3000 	ldr.w	r3, [sl]
 8007132:	4499      	add	r9, r3
 8007134:	2200      	movs	r2, #0
 8007136:	2300      	movs	r3, #0
 8007138:	4620      	mov	r0, r4
 800713a:	4639      	mov	r1, r7
 800713c:	f7f9 fc34 	bl	80009a8 <__aeabi_dcmpeq>
 8007140:	b108      	cbz	r0, 8007146 <__cvt+0x9e>
 8007142:	f8cd 901c 	str.w	r9, [sp, #28]
 8007146:	2230      	movs	r2, #48	; 0x30
 8007148:	9b07      	ldr	r3, [sp, #28]
 800714a:	454b      	cmp	r3, r9
 800714c:	d307      	bcc.n	800715e <__cvt+0xb6>
 800714e:	4630      	mov	r0, r6
 8007150:	9b07      	ldr	r3, [sp, #28]
 8007152:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007154:	1b9b      	subs	r3, r3, r6
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	b008      	add	sp, #32
 800715a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715e:	1c59      	adds	r1, r3, #1
 8007160:	9107      	str	r1, [sp, #28]
 8007162:	701a      	strb	r2, [r3, #0]
 8007164:	e7f0      	b.n	8007148 <__cvt+0xa0>

08007166 <__exponent>:
 8007166:	4603      	mov	r3, r0
 8007168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800716a:	2900      	cmp	r1, #0
 800716c:	f803 2b02 	strb.w	r2, [r3], #2
 8007170:	bfb6      	itet	lt
 8007172:	222d      	movlt	r2, #45	; 0x2d
 8007174:	222b      	movge	r2, #43	; 0x2b
 8007176:	4249      	neglt	r1, r1
 8007178:	2909      	cmp	r1, #9
 800717a:	7042      	strb	r2, [r0, #1]
 800717c:	dd2a      	ble.n	80071d4 <__exponent+0x6e>
 800717e:	f10d 0207 	add.w	r2, sp, #7
 8007182:	4617      	mov	r7, r2
 8007184:	260a      	movs	r6, #10
 8007186:	fb91 f5f6 	sdiv	r5, r1, r6
 800718a:	4694      	mov	ip, r2
 800718c:	fb06 1415 	mls	r4, r6, r5, r1
 8007190:	3430      	adds	r4, #48	; 0x30
 8007192:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007196:	460c      	mov	r4, r1
 8007198:	2c63      	cmp	r4, #99	; 0x63
 800719a:	4629      	mov	r1, r5
 800719c:	f102 32ff 	add.w	r2, r2, #4294967295
 80071a0:	dcf1      	bgt.n	8007186 <__exponent+0x20>
 80071a2:	3130      	adds	r1, #48	; 0x30
 80071a4:	f1ac 0402 	sub.w	r4, ip, #2
 80071a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80071ac:	4622      	mov	r2, r4
 80071ae:	1c41      	adds	r1, r0, #1
 80071b0:	42ba      	cmp	r2, r7
 80071b2:	d30a      	bcc.n	80071ca <__exponent+0x64>
 80071b4:	f10d 0209 	add.w	r2, sp, #9
 80071b8:	eba2 020c 	sub.w	r2, r2, ip
 80071bc:	42bc      	cmp	r4, r7
 80071be:	bf88      	it	hi
 80071c0:	2200      	movhi	r2, #0
 80071c2:	4413      	add	r3, r2
 80071c4:	1a18      	subs	r0, r3, r0
 80071c6:	b003      	add	sp, #12
 80071c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80071ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80071d2:	e7ed      	b.n	80071b0 <__exponent+0x4a>
 80071d4:	2330      	movs	r3, #48	; 0x30
 80071d6:	3130      	adds	r1, #48	; 0x30
 80071d8:	7083      	strb	r3, [r0, #2]
 80071da:	70c1      	strb	r1, [r0, #3]
 80071dc:	1d03      	adds	r3, r0, #4
 80071de:	e7f1      	b.n	80071c4 <__exponent+0x5e>

080071e0 <_printf_float>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	b091      	sub	sp, #68	; 0x44
 80071e6:	460c      	mov	r4, r1
 80071e8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80071ec:	4616      	mov	r6, r2
 80071ee:	461f      	mov	r7, r3
 80071f0:	4605      	mov	r5, r0
 80071f2:	f000 fce5 	bl	8007bc0 <_localeconv_r>
 80071f6:	6803      	ldr	r3, [r0, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	9309      	str	r3, [sp, #36]	; 0x24
 80071fc:	f7f8 ffa8 	bl	8000150 <strlen>
 8007200:	2300      	movs	r3, #0
 8007202:	930e      	str	r3, [sp, #56]	; 0x38
 8007204:	f8d8 3000 	ldr.w	r3, [r8]
 8007208:	900a      	str	r0, [sp, #40]	; 0x28
 800720a:	3307      	adds	r3, #7
 800720c:	f023 0307 	bic.w	r3, r3, #7
 8007210:	f103 0208 	add.w	r2, r3, #8
 8007214:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007218:	f8d4 b000 	ldr.w	fp, [r4]
 800721c:	f8c8 2000 	str.w	r2, [r8]
 8007220:	e9d3 a800 	ldrd	sl, r8, [r3]
 8007224:	4652      	mov	r2, sl
 8007226:	4643      	mov	r3, r8
 8007228:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800722c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007230:	930b      	str	r3, [sp, #44]	; 0x2c
 8007232:	f04f 32ff 	mov.w	r2, #4294967295
 8007236:	4650      	mov	r0, sl
 8007238:	4b9c      	ldr	r3, [pc, #624]	; (80074ac <_printf_float+0x2cc>)
 800723a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800723c:	f7f9 fbe6 	bl	8000a0c <__aeabi_dcmpun>
 8007240:	bb70      	cbnz	r0, 80072a0 <_printf_float+0xc0>
 8007242:	f04f 32ff 	mov.w	r2, #4294967295
 8007246:	4650      	mov	r0, sl
 8007248:	4b98      	ldr	r3, [pc, #608]	; (80074ac <_printf_float+0x2cc>)
 800724a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800724c:	f7f9 fbc0 	bl	80009d0 <__aeabi_dcmple>
 8007250:	bb30      	cbnz	r0, 80072a0 <_printf_float+0xc0>
 8007252:	2200      	movs	r2, #0
 8007254:	2300      	movs	r3, #0
 8007256:	4650      	mov	r0, sl
 8007258:	4641      	mov	r1, r8
 800725a:	f7f9 fbaf 	bl	80009bc <__aeabi_dcmplt>
 800725e:	b110      	cbz	r0, 8007266 <_printf_float+0x86>
 8007260:	232d      	movs	r3, #45	; 0x2d
 8007262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007266:	4a92      	ldr	r2, [pc, #584]	; (80074b0 <_printf_float+0x2d0>)
 8007268:	4b92      	ldr	r3, [pc, #584]	; (80074b4 <_printf_float+0x2d4>)
 800726a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800726e:	bf94      	ite	ls
 8007270:	4690      	movls	r8, r2
 8007272:	4698      	movhi	r8, r3
 8007274:	2303      	movs	r3, #3
 8007276:	f04f 0a00 	mov.w	sl, #0
 800727a:	6123      	str	r3, [r4, #16]
 800727c:	f02b 0304 	bic.w	r3, fp, #4
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	4633      	mov	r3, r6
 8007284:	4621      	mov	r1, r4
 8007286:	4628      	mov	r0, r5
 8007288:	9700      	str	r7, [sp, #0]
 800728a:	aa0f      	add	r2, sp, #60	; 0x3c
 800728c:	f000 f9d6 	bl	800763c <_printf_common>
 8007290:	3001      	adds	r0, #1
 8007292:	f040 8090 	bne.w	80073b6 <_printf_float+0x1d6>
 8007296:	f04f 30ff 	mov.w	r0, #4294967295
 800729a:	b011      	add	sp, #68	; 0x44
 800729c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a0:	4652      	mov	r2, sl
 80072a2:	4643      	mov	r3, r8
 80072a4:	4650      	mov	r0, sl
 80072a6:	4641      	mov	r1, r8
 80072a8:	f7f9 fbb0 	bl	8000a0c <__aeabi_dcmpun>
 80072ac:	b148      	cbz	r0, 80072c2 <_printf_float+0xe2>
 80072ae:	f1b8 0f00 	cmp.w	r8, #0
 80072b2:	bfb8      	it	lt
 80072b4:	232d      	movlt	r3, #45	; 0x2d
 80072b6:	4a80      	ldr	r2, [pc, #512]	; (80074b8 <_printf_float+0x2d8>)
 80072b8:	bfb8      	it	lt
 80072ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072be:	4b7f      	ldr	r3, [pc, #508]	; (80074bc <_printf_float+0x2dc>)
 80072c0:	e7d3      	b.n	800726a <_printf_float+0x8a>
 80072c2:	6863      	ldr	r3, [r4, #4]
 80072c4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	d142      	bne.n	8007352 <_printf_float+0x172>
 80072cc:	2306      	movs	r3, #6
 80072ce:	6063      	str	r3, [r4, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	9206      	str	r2, [sp, #24]
 80072d4:	aa0e      	add	r2, sp, #56	; 0x38
 80072d6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80072da:	aa0d      	add	r2, sp, #52	; 0x34
 80072dc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80072e0:	9203      	str	r2, [sp, #12]
 80072e2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80072e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80072ea:	6023      	str	r3, [r4, #0]
 80072ec:	6863      	ldr	r3, [r4, #4]
 80072ee:	4652      	mov	r2, sl
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	4628      	mov	r0, r5
 80072f4:	4643      	mov	r3, r8
 80072f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80072f8:	f7ff fed6 	bl	80070a8 <__cvt>
 80072fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072fe:	4680      	mov	r8, r0
 8007300:	2947      	cmp	r1, #71	; 0x47
 8007302:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007304:	d108      	bne.n	8007318 <_printf_float+0x138>
 8007306:	1cc8      	adds	r0, r1, #3
 8007308:	db02      	blt.n	8007310 <_printf_float+0x130>
 800730a:	6863      	ldr	r3, [r4, #4]
 800730c:	4299      	cmp	r1, r3
 800730e:	dd40      	ble.n	8007392 <_printf_float+0x1b2>
 8007310:	f1a9 0902 	sub.w	r9, r9, #2
 8007314:	fa5f f989 	uxtb.w	r9, r9
 8007318:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800731c:	d81f      	bhi.n	800735e <_printf_float+0x17e>
 800731e:	464a      	mov	r2, r9
 8007320:	3901      	subs	r1, #1
 8007322:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007326:	910d      	str	r1, [sp, #52]	; 0x34
 8007328:	f7ff ff1d 	bl	8007166 <__exponent>
 800732c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800732e:	4682      	mov	sl, r0
 8007330:	1813      	adds	r3, r2, r0
 8007332:	2a01      	cmp	r2, #1
 8007334:	6123      	str	r3, [r4, #16]
 8007336:	dc02      	bgt.n	800733e <_printf_float+0x15e>
 8007338:	6822      	ldr	r2, [r4, #0]
 800733a:	07d2      	lsls	r2, r2, #31
 800733c:	d501      	bpl.n	8007342 <_printf_float+0x162>
 800733e:	3301      	adds	r3, #1
 8007340:	6123      	str	r3, [r4, #16]
 8007342:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007346:	2b00      	cmp	r3, #0
 8007348:	d09b      	beq.n	8007282 <_printf_float+0xa2>
 800734a:	232d      	movs	r3, #45	; 0x2d
 800734c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007350:	e797      	b.n	8007282 <_printf_float+0xa2>
 8007352:	2947      	cmp	r1, #71	; 0x47
 8007354:	d1bc      	bne.n	80072d0 <_printf_float+0xf0>
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1ba      	bne.n	80072d0 <_printf_float+0xf0>
 800735a:	2301      	movs	r3, #1
 800735c:	e7b7      	b.n	80072ce <_printf_float+0xee>
 800735e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007362:	d118      	bne.n	8007396 <_printf_float+0x1b6>
 8007364:	2900      	cmp	r1, #0
 8007366:	6863      	ldr	r3, [r4, #4]
 8007368:	dd0b      	ble.n	8007382 <_printf_float+0x1a2>
 800736a:	6121      	str	r1, [r4, #16]
 800736c:	b913      	cbnz	r3, 8007374 <_printf_float+0x194>
 800736e:	6822      	ldr	r2, [r4, #0]
 8007370:	07d0      	lsls	r0, r2, #31
 8007372:	d502      	bpl.n	800737a <_printf_float+0x19a>
 8007374:	3301      	adds	r3, #1
 8007376:	440b      	add	r3, r1
 8007378:	6123      	str	r3, [r4, #16]
 800737a:	f04f 0a00 	mov.w	sl, #0
 800737e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007380:	e7df      	b.n	8007342 <_printf_float+0x162>
 8007382:	b913      	cbnz	r3, 800738a <_printf_float+0x1aa>
 8007384:	6822      	ldr	r2, [r4, #0]
 8007386:	07d2      	lsls	r2, r2, #31
 8007388:	d501      	bpl.n	800738e <_printf_float+0x1ae>
 800738a:	3302      	adds	r3, #2
 800738c:	e7f4      	b.n	8007378 <_printf_float+0x198>
 800738e:	2301      	movs	r3, #1
 8007390:	e7f2      	b.n	8007378 <_printf_float+0x198>
 8007392:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007398:	4299      	cmp	r1, r3
 800739a:	db05      	blt.n	80073a8 <_printf_float+0x1c8>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	6121      	str	r1, [r4, #16]
 80073a0:	07d8      	lsls	r0, r3, #31
 80073a2:	d5ea      	bpl.n	800737a <_printf_float+0x19a>
 80073a4:	1c4b      	adds	r3, r1, #1
 80073a6:	e7e7      	b.n	8007378 <_printf_float+0x198>
 80073a8:	2900      	cmp	r1, #0
 80073aa:	bfcc      	ite	gt
 80073ac:	2201      	movgt	r2, #1
 80073ae:	f1c1 0202 	rsble	r2, r1, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	e7e0      	b.n	8007378 <_printf_float+0x198>
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	055a      	lsls	r2, r3, #21
 80073ba:	d407      	bmi.n	80073cc <_printf_float+0x1ec>
 80073bc:	6923      	ldr	r3, [r4, #16]
 80073be:	4642      	mov	r2, r8
 80073c0:	4631      	mov	r1, r6
 80073c2:	4628      	mov	r0, r5
 80073c4:	47b8      	blx	r7
 80073c6:	3001      	adds	r0, #1
 80073c8:	d12b      	bne.n	8007422 <_printf_float+0x242>
 80073ca:	e764      	b.n	8007296 <_printf_float+0xb6>
 80073cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80073d0:	f240 80dd 	bls.w	800758e <_printf_float+0x3ae>
 80073d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073d8:	2200      	movs	r2, #0
 80073da:	2300      	movs	r3, #0
 80073dc:	f7f9 fae4 	bl	80009a8 <__aeabi_dcmpeq>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d033      	beq.n	800744c <_printf_float+0x26c>
 80073e4:	2301      	movs	r3, #1
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	4a35      	ldr	r2, [pc, #212]	; (80074c0 <_printf_float+0x2e0>)
 80073ec:	47b8      	blx	r7
 80073ee:	3001      	adds	r0, #1
 80073f0:	f43f af51 	beq.w	8007296 <_printf_float+0xb6>
 80073f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80073f8:	429a      	cmp	r2, r3
 80073fa:	db02      	blt.n	8007402 <_printf_float+0x222>
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	07d8      	lsls	r0, r3, #31
 8007400:	d50f      	bpl.n	8007422 <_printf_float+0x242>
 8007402:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007406:	4631      	mov	r1, r6
 8007408:	4628      	mov	r0, r5
 800740a:	47b8      	blx	r7
 800740c:	3001      	adds	r0, #1
 800740e:	f43f af42 	beq.w	8007296 <_printf_float+0xb6>
 8007412:	f04f 0800 	mov.w	r8, #0
 8007416:	f104 091a 	add.w	r9, r4, #26
 800741a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800741c:	3b01      	subs	r3, #1
 800741e:	4543      	cmp	r3, r8
 8007420:	dc09      	bgt.n	8007436 <_printf_float+0x256>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	079b      	lsls	r3, r3, #30
 8007426:	f100 8104 	bmi.w	8007632 <_printf_float+0x452>
 800742a:	68e0      	ldr	r0, [r4, #12]
 800742c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800742e:	4298      	cmp	r0, r3
 8007430:	bfb8      	it	lt
 8007432:	4618      	movlt	r0, r3
 8007434:	e731      	b.n	800729a <_printf_float+0xba>
 8007436:	2301      	movs	r3, #1
 8007438:	464a      	mov	r2, r9
 800743a:	4631      	mov	r1, r6
 800743c:	4628      	mov	r0, r5
 800743e:	47b8      	blx	r7
 8007440:	3001      	adds	r0, #1
 8007442:	f43f af28 	beq.w	8007296 <_printf_float+0xb6>
 8007446:	f108 0801 	add.w	r8, r8, #1
 800744a:	e7e6      	b.n	800741a <_printf_float+0x23a>
 800744c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800744e:	2b00      	cmp	r3, #0
 8007450:	dc38      	bgt.n	80074c4 <_printf_float+0x2e4>
 8007452:	2301      	movs	r3, #1
 8007454:	4631      	mov	r1, r6
 8007456:	4628      	mov	r0, r5
 8007458:	4a19      	ldr	r2, [pc, #100]	; (80074c0 <_printf_float+0x2e0>)
 800745a:	47b8      	blx	r7
 800745c:	3001      	adds	r0, #1
 800745e:	f43f af1a 	beq.w	8007296 <_printf_float+0xb6>
 8007462:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007466:	4313      	orrs	r3, r2
 8007468:	d102      	bne.n	8007470 <_printf_float+0x290>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	07d9      	lsls	r1, r3, #31
 800746e:	d5d8      	bpl.n	8007422 <_printf_float+0x242>
 8007470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007474:	4631      	mov	r1, r6
 8007476:	4628      	mov	r0, r5
 8007478:	47b8      	blx	r7
 800747a:	3001      	adds	r0, #1
 800747c:	f43f af0b 	beq.w	8007296 <_printf_float+0xb6>
 8007480:	f04f 0900 	mov.w	r9, #0
 8007484:	f104 0a1a 	add.w	sl, r4, #26
 8007488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800748a:	425b      	negs	r3, r3
 800748c:	454b      	cmp	r3, r9
 800748e:	dc01      	bgt.n	8007494 <_printf_float+0x2b4>
 8007490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007492:	e794      	b.n	80073be <_printf_float+0x1de>
 8007494:	2301      	movs	r3, #1
 8007496:	4652      	mov	r2, sl
 8007498:	4631      	mov	r1, r6
 800749a:	4628      	mov	r0, r5
 800749c:	47b8      	blx	r7
 800749e:	3001      	adds	r0, #1
 80074a0:	f43f aef9 	beq.w	8007296 <_printf_float+0xb6>
 80074a4:	f109 0901 	add.w	r9, r9, #1
 80074a8:	e7ee      	b.n	8007488 <_printf_float+0x2a8>
 80074aa:	bf00      	nop
 80074ac:	7fefffff 	.word	0x7fefffff
 80074b0:	08009e62 	.word	0x08009e62
 80074b4:	08009e66 	.word	0x08009e66
 80074b8:	08009e6a 	.word	0x08009e6a
 80074bc:	08009e6e 	.word	0x08009e6e
 80074c0:	08009e72 	.word	0x08009e72
 80074c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074c8:	429a      	cmp	r2, r3
 80074ca:	bfa8      	it	ge
 80074cc:	461a      	movge	r2, r3
 80074ce:	2a00      	cmp	r2, #0
 80074d0:	4691      	mov	r9, r2
 80074d2:	dc37      	bgt.n	8007544 <_printf_float+0x364>
 80074d4:	f04f 0b00 	mov.w	fp, #0
 80074d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074dc:	f104 021a 	add.w	r2, r4, #26
 80074e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80074e4:	ebaa 0309 	sub.w	r3, sl, r9
 80074e8:	455b      	cmp	r3, fp
 80074ea:	dc33      	bgt.n	8007554 <_printf_float+0x374>
 80074ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80074f0:	429a      	cmp	r2, r3
 80074f2:	db3b      	blt.n	800756c <_printf_float+0x38c>
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	07da      	lsls	r2, r3, #31
 80074f8:	d438      	bmi.n	800756c <_printf_float+0x38c>
 80074fa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80074fe:	eba2 0903 	sub.w	r9, r2, r3
 8007502:	eba2 020a 	sub.w	r2, r2, sl
 8007506:	4591      	cmp	r9, r2
 8007508:	bfa8      	it	ge
 800750a:	4691      	movge	r9, r2
 800750c:	f1b9 0f00 	cmp.w	r9, #0
 8007510:	dc34      	bgt.n	800757c <_printf_float+0x39c>
 8007512:	f04f 0800 	mov.w	r8, #0
 8007516:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800751a:	f104 0a1a 	add.w	sl, r4, #26
 800751e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007522:	1a9b      	subs	r3, r3, r2
 8007524:	eba3 0309 	sub.w	r3, r3, r9
 8007528:	4543      	cmp	r3, r8
 800752a:	f77f af7a 	ble.w	8007422 <_printf_float+0x242>
 800752e:	2301      	movs	r3, #1
 8007530:	4652      	mov	r2, sl
 8007532:	4631      	mov	r1, r6
 8007534:	4628      	mov	r0, r5
 8007536:	47b8      	blx	r7
 8007538:	3001      	adds	r0, #1
 800753a:	f43f aeac 	beq.w	8007296 <_printf_float+0xb6>
 800753e:	f108 0801 	add.w	r8, r8, #1
 8007542:	e7ec      	b.n	800751e <_printf_float+0x33e>
 8007544:	4613      	mov	r3, r2
 8007546:	4631      	mov	r1, r6
 8007548:	4642      	mov	r2, r8
 800754a:	4628      	mov	r0, r5
 800754c:	47b8      	blx	r7
 800754e:	3001      	adds	r0, #1
 8007550:	d1c0      	bne.n	80074d4 <_printf_float+0x2f4>
 8007552:	e6a0      	b.n	8007296 <_printf_float+0xb6>
 8007554:	2301      	movs	r3, #1
 8007556:	4631      	mov	r1, r6
 8007558:	4628      	mov	r0, r5
 800755a:	920b      	str	r2, [sp, #44]	; 0x2c
 800755c:	47b8      	blx	r7
 800755e:	3001      	adds	r0, #1
 8007560:	f43f ae99 	beq.w	8007296 <_printf_float+0xb6>
 8007564:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007566:	f10b 0b01 	add.w	fp, fp, #1
 800756a:	e7b9      	b.n	80074e0 <_printf_float+0x300>
 800756c:	4631      	mov	r1, r6
 800756e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007572:	4628      	mov	r0, r5
 8007574:	47b8      	blx	r7
 8007576:	3001      	adds	r0, #1
 8007578:	d1bf      	bne.n	80074fa <_printf_float+0x31a>
 800757a:	e68c      	b.n	8007296 <_printf_float+0xb6>
 800757c:	464b      	mov	r3, r9
 800757e:	4631      	mov	r1, r6
 8007580:	4628      	mov	r0, r5
 8007582:	eb08 020a 	add.w	r2, r8, sl
 8007586:	47b8      	blx	r7
 8007588:	3001      	adds	r0, #1
 800758a:	d1c2      	bne.n	8007512 <_printf_float+0x332>
 800758c:	e683      	b.n	8007296 <_printf_float+0xb6>
 800758e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007590:	2a01      	cmp	r2, #1
 8007592:	dc01      	bgt.n	8007598 <_printf_float+0x3b8>
 8007594:	07db      	lsls	r3, r3, #31
 8007596:	d539      	bpl.n	800760c <_printf_float+0x42c>
 8007598:	2301      	movs	r3, #1
 800759a:	4642      	mov	r2, r8
 800759c:	4631      	mov	r1, r6
 800759e:	4628      	mov	r0, r5
 80075a0:	47b8      	blx	r7
 80075a2:	3001      	adds	r0, #1
 80075a4:	f43f ae77 	beq.w	8007296 <_printf_float+0xb6>
 80075a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075ac:	4631      	mov	r1, r6
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	f43f ae6f 	beq.w	8007296 <_printf_float+0xb6>
 80075b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075bc:	2200      	movs	r2, #0
 80075be:	2300      	movs	r3, #0
 80075c0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80075c4:	f7f9 f9f0 	bl	80009a8 <__aeabi_dcmpeq>
 80075c8:	b9d8      	cbnz	r0, 8007602 <_printf_float+0x422>
 80075ca:	f109 33ff 	add.w	r3, r9, #4294967295
 80075ce:	f108 0201 	add.w	r2, r8, #1
 80075d2:	4631      	mov	r1, r6
 80075d4:	4628      	mov	r0, r5
 80075d6:	47b8      	blx	r7
 80075d8:	3001      	adds	r0, #1
 80075da:	d10e      	bne.n	80075fa <_printf_float+0x41a>
 80075dc:	e65b      	b.n	8007296 <_printf_float+0xb6>
 80075de:	2301      	movs	r3, #1
 80075e0:	464a      	mov	r2, r9
 80075e2:	4631      	mov	r1, r6
 80075e4:	4628      	mov	r0, r5
 80075e6:	47b8      	blx	r7
 80075e8:	3001      	adds	r0, #1
 80075ea:	f43f ae54 	beq.w	8007296 <_printf_float+0xb6>
 80075ee:	f108 0801 	add.w	r8, r8, #1
 80075f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f4:	3b01      	subs	r3, #1
 80075f6:	4543      	cmp	r3, r8
 80075f8:	dcf1      	bgt.n	80075de <_printf_float+0x3fe>
 80075fa:	4653      	mov	r3, sl
 80075fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007600:	e6de      	b.n	80073c0 <_printf_float+0x1e0>
 8007602:	f04f 0800 	mov.w	r8, #0
 8007606:	f104 091a 	add.w	r9, r4, #26
 800760a:	e7f2      	b.n	80075f2 <_printf_float+0x412>
 800760c:	2301      	movs	r3, #1
 800760e:	4642      	mov	r2, r8
 8007610:	e7df      	b.n	80075d2 <_printf_float+0x3f2>
 8007612:	2301      	movs	r3, #1
 8007614:	464a      	mov	r2, r9
 8007616:	4631      	mov	r1, r6
 8007618:	4628      	mov	r0, r5
 800761a:	47b8      	blx	r7
 800761c:	3001      	adds	r0, #1
 800761e:	f43f ae3a 	beq.w	8007296 <_printf_float+0xb6>
 8007622:	f108 0801 	add.w	r8, r8, #1
 8007626:	68e3      	ldr	r3, [r4, #12]
 8007628:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800762a:	1a5b      	subs	r3, r3, r1
 800762c:	4543      	cmp	r3, r8
 800762e:	dcf0      	bgt.n	8007612 <_printf_float+0x432>
 8007630:	e6fb      	b.n	800742a <_printf_float+0x24a>
 8007632:	f04f 0800 	mov.w	r8, #0
 8007636:	f104 0919 	add.w	r9, r4, #25
 800763a:	e7f4      	b.n	8007626 <_printf_float+0x446>

0800763c <_printf_common>:
 800763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007640:	4616      	mov	r6, r2
 8007642:	4699      	mov	r9, r3
 8007644:	688a      	ldr	r2, [r1, #8]
 8007646:	690b      	ldr	r3, [r1, #16]
 8007648:	4607      	mov	r7, r0
 800764a:	4293      	cmp	r3, r2
 800764c:	bfb8      	it	lt
 800764e:	4613      	movlt	r3, r2
 8007650:	6033      	str	r3, [r6, #0]
 8007652:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007656:	460c      	mov	r4, r1
 8007658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800765c:	b10a      	cbz	r2, 8007662 <_printf_common+0x26>
 800765e:	3301      	adds	r3, #1
 8007660:	6033      	str	r3, [r6, #0]
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	0699      	lsls	r1, r3, #26
 8007666:	bf42      	ittt	mi
 8007668:	6833      	ldrmi	r3, [r6, #0]
 800766a:	3302      	addmi	r3, #2
 800766c:	6033      	strmi	r3, [r6, #0]
 800766e:	6825      	ldr	r5, [r4, #0]
 8007670:	f015 0506 	ands.w	r5, r5, #6
 8007674:	d106      	bne.n	8007684 <_printf_common+0x48>
 8007676:	f104 0a19 	add.w	sl, r4, #25
 800767a:	68e3      	ldr	r3, [r4, #12]
 800767c:	6832      	ldr	r2, [r6, #0]
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	42ab      	cmp	r3, r5
 8007682:	dc2b      	bgt.n	80076dc <_printf_common+0xa0>
 8007684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007688:	1e13      	subs	r3, r2, #0
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	bf18      	it	ne
 800768e:	2301      	movne	r3, #1
 8007690:	0692      	lsls	r2, r2, #26
 8007692:	d430      	bmi.n	80076f6 <_printf_common+0xba>
 8007694:	4649      	mov	r1, r9
 8007696:	4638      	mov	r0, r7
 8007698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800769c:	47c0      	blx	r8
 800769e:	3001      	adds	r0, #1
 80076a0:	d023      	beq.n	80076ea <_printf_common+0xae>
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	6922      	ldr	r2, [r4, #16]
 80076a6:	f003 0306 	and.w	r3, r3, #6
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	bf14      	ite	ne
 80076ae:	2500      	movne	r5, #0
 80076b0:	6833      	ldreq	r3, [r6, #0]
 80076b2:	f04f 0600 	mov.w	r6, #0
 80076b6:	bf08      	it	eq
 80076b8:	68e5      	ldreq	r5, [r4, #12]
 80076ba:	f104 041a 	add.w	r4, r4, #26
 80076be:	bf08      	it	eq
 80076c0:	1aed      	subeq	r5, r5, r3
 80076c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80076c6:	bf08      	it	eq
 80076c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076cc:	4293      	cmp	r3, r2
 80076ce:	bfc4      	itt	gt
 80076d0:	1a9b      	subgt	r3, r3, r2
 80076d2:	18ed      	addgt	r5, r5, r3
 80076d4:	42b5      	cmp	r5, r6
 80076d6:	d11a      	bne.n	800770e <_printf_common+0xd2>
 80076d8:	2000      	movs	r0, #0
 80076da:	e008      	b.n	80076ee <_printf_common+0xb2>
 80076dc:	2301      	movs	r3, #1
 80076de:	4652      	mov	r2, sl
 80076e0:	4649      	mov	r1, r9
 80076e2:	4638      	mov	r0, r7
 80076e4:	47c0      	blx	r8
 80076e6:	3001      	adds	r0, #1
 80076e8:	d103      	bne.n	80076f2 <_printf_common+0xb6>
 80076ea:	f04f 30ff 	mov.w	r0, #4294967295
 80076ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f2:	3501      	adds	r5, #1
 80076f4:	e7c1      	b.n	800767a <_printf_common+0x3e>
 80076f6:	2030      	movs	r0, #48	; 0x30
 80076f8:	18e1      	adds	r1, r4, r3
 80076fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007704:	4422      	add	r2, r4
 8007706:	3302      	adds	r3, #2
 8007708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800770c:	e7c2      	b.n	8007694 <_printf_common+0x58>
 800770e:	2301      	movs	r3, #1
 8007710:	4622      	mov	r2, r4
 8007712:	4649      	mov	r1, r9
 8007714:	4638      	mov	r0, r7
 8007716:	47c0      	blx	r8
 8007718:	3001      	adds	r0, #1
 800771a:	d0e6      	beq.n	80076ea <_printf_common+0xae>
 800771c:	3601      	adds	r6, #1
 800771e:	e7d9      	b.n	80076d4 <_printf_common+0x98>

08007720 <_printf_i>:
 8007720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007724:	7e0f      	ldrb	r7, [r1, #24]
 8007726:	4691      	mov	r9, r2
 8007728:	2f78      	cmp	r7, #120	; 0x78
 800772a:	4680      	mov	r8, r0
 800772c:	460c      	mov	r4, r1
 800772e:	469a      	mov	sl, r3
 8007730:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007736:	d807      	bhi.n	8007748 <_printf_i+0x28>
 8007738:	2f62      	cmp	r7, #98	; 0x62
 800773a:	d80a      	bhi.n	8007752 <_printf_i+0x32>
 800773c:	2f00      	cmp	r7, #0
 800773e:	f000 80d5 	beq.w	80078ec <_printf_i+0x1cc>
 8007742:	2f58      	cmp	r7, #88	; 0x58
 8007744:	f000 80c1 	beq.w	80078ca <_printf_i+0x1aa>
 8007748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800774c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007750:	e03a      	b.n	80077c8 <_printf_i+0xa8>
 8007752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007756:	2b15      	cmp	r3, #21
 8007758:	d8f6      	bhi.n	8007748 <_printf_i+0x28>
 800775a:	a101      	add	r1, pc, #4	; (adr r1, 8007760 <_printf_i+0x40>)
 800775c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007760:	080077b9 	.word	0x080077b9
 8007764:	080077cd 	.word	0x080077cd
 8007768:	08007749 	.word	0x08007749
 800776c:	08007749 	.word	0x08007749
 8007770:	08007749 	.word	0x08007749
 8007774:	08007749 	.word	0x08007749
 8007778:	080077cd 	.word	0x080077cd
 800777c:	08007749 	.word	0x08007749
 8007780:	08007749 	.word	0x08007749
 8007784:	08007749 	.word	0x08007749
 8007788:	08007749 	.word	0x08007749
 800778c:	080078d3 	.word	0x080078d3
 8007790:	080077f9 	.word	0x080077f9
 8007794:	0800788d 	.word	0x0800788d
 8007798:	08007749 	.word	0x08007749
 800779c:	08007749 	.word	0x08007749
 80077a0:	080078f5 	.word	0x080078f5
 80077a4:	08007749 	.word	0x08007749
 80077a8:	080077f9 	.word	0x080077f9
 80077ac:	08007749 	.word	0x08007749
 80077b0:	08007749 	.word	0x08007749
 80077b4:	08007895 	.word	0x08007895
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	1d1a      	adds	r2, r3, #4
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	602a      	str	r2, [r5, #0]
 80077c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077c8:	2301      	movs	r3, #1
 80077ca:	e0a0      	b.n	800790e <_printf_i+0x1ee>
 80077cc:	6820      	ldr	r0, [r4, #0]
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	0607      	lsls	r7, r0, #24
 80077d2:	f103 0104 	add.w	r1, r3, #4
 80077d6:	6029      	str	r1, [r5, #0]
 80077d8:	d501      	bpl.n	80077de <_printf_i+0xbe>
 80077da:	681e      	ldr	r6, [r3, #0]
 80077dc:	e003      	b.n	80077e6 <_printf_i+0xc6>
 80077de:	0646      	lsls	r6, r0, #25
 80077e0:	d5fb      	bpl.n	80077da <_printf_i+0xba>
 80077e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80077e6:	2e00      	cmp	r6, #0
 80077e8:	da03      	bge.n	80077f2 <_printf_i+0xd2>
 80077ea:	232d      	movs	r3, #45	; 0x2d
 80077ec:	4276      	negs	r6, r6
 80077ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f2:	230a      	movs	r3, #10
 80077f4:	4859      	ldr	r0, [pc, #356]	; (800795c <_printf_i+0x23c>)
 80077f6:	e012      	b.n	800781e <_printf_i+0xfe>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	6820      	ldr	r0, [r4, #0]
 80077fc:	1d19      	adds	r1, r3, #4
 80077fe:	6029      	str	r1, [r5, #0]
 8007800:	0605      	lsls	r5, r0, #24
 8007802:	d501      	bpl.n	8007808 <_printf_i+0xe8>
 8007804:	681e      	ldr	r6, [r3, #0]
 8007806:	e002      	b.n	800780e <_printf_i+0xee>
 8007808:	0641      	lsls	r1, r0, #25
 800780a:	d5fb      	bpl.n	8007804 <_printf_i+0xe4>
 800780c:	881e      	ldrh	r6, [r3, #0]
 800780e:	2f6f      	cmp	r7, #111	; 0x6f
 8007810:	bf0c      	ite	eq
 8007812:	2308      	moveq	r3, #8
 8007814:	230a      	movne	r3, #10
 8007816:	4851      	ldr	r0, [pc, #324]	; (800795c <_printf_i+0x23c>)
 8007818:	2100      	movs	r1, #0
 800781a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800781e:	6865      	ldr	r5, [r4, #4]
 8007820:	2d00      	cmp	r5, #0
 8007822:	bfa8      	it	ge
 8007824:	6821      	ldrge	r1, [r4, #0]
 8007826:	60a5      	str	r5, [r4, #8]
 8007828:	bfa4      	itt	ge
 800782a:	f021 0104 	bicge.w	r1, r1, #4
 800782e:	6021      	strge	r1, [r4, #0]
 8007830:	b90e      	cbnz	r6, 8007836 <_printf_i+0x116>
 8007832:	2d00      	cmp	r5, #0
 8007834:	d04b      	beq.n	80078ce <_printf_i+0x1ae>
 8007836:	4615      	mov	r5, r2
 8007838:	fbb6 f1f3 	udiv	r1, r6, r3
 800783c:	fb03 6711 	mls	r7, r3, r1, r6
 8007840:	5dc7      	ldrb	r7, [r0, r7]
 8007842:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007846:	4637      	mov	r7, r6
 8007848:	42bb      	cmp	r3, r7
 800784a:	460e      	mov	r6, r1
 800784c:	d9f4      	bls.n	8007838 <_printf_i+0x118>
 800784e:	2b08      	cmp	r3, #8
 8007850:	d10b      	bne.n	800786a <_printf_i+0x14a>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	07de      	lsls	r6, r3, #31
 8007856:	d508      	bpl.n	800786a <_printf_i+0x14a>
 8007858:	6923      	ldr	r3, [r4, #16]
 800785a:	6861      	ldr	r1, [r4, #4]
 800785c:	4299      	cmp	r1, r3
 800785e:	bfde      	ittt	le
 8007860:	2330      	movle	r3, #48	; 0x30
 8007862:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007866:	f105 35ff 	addle.w	r5, r5, #4294967295
 800786a:	1b52      	subs	r2, r2, r5
 800786c:	6122      	str	r2, [r4, #16]
 800786e:	464b      	mov	r3, r9
 8007870:	4621      	mov	r1, r4
 8007872:	4640      	mov	r0, r8
 8007874:	f8cd a000 	str.w	sl, [sp]
 8007878:	aa03      	add	r2, sp, #12
 800787a:	f7ff fedf 	bl	800763c <_printf_common>
 800787e:	3001      	adds	r0, #1
 8007880:	d14a      	bne.n	8007918 <_printf_i+0x1f8>
 8007882:	f04f 30ff 	mov.w	r0, #4294967295
 8007886:	b004      	add	sp, #16
 8007888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	f043 0320 	orr.w	r3, r3, #32
 8007892:	6023      	str	r3, [r4, #0]
 8007894:	2778      	movs	r7, #120	; 0x78
 8007896:	4832      	ldr	r0, [pc, #200]	; (8007960 <_printf_i+0x240>)
 8007898:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	6829      	ldr	r1, [r5, #0]
 80078a0:	061f      	lsls	r7, r3, #24
 80078a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80078a6:	d402      	bmi.n	80078ae <_printf_i+0x18e>
 80078a8:	065f      	lsls	r7, r3, #25
 80078aa:	bf48      	it	mi
 80078ac:	b2b6      	uxthmi	r6, r6
 80078ae:	07df      	lsls	r7, r3, #31
 80078b0:	bf48      	it	mi
 80078b2:	f043 0320 	orrmi.w	r3, r3, #32
 80078b6:	6029      	str	r1, [r5, #0]
 80078b8:	bf48      	it	mi
 80078ba:	6023      	strmi	r3, [r4, #0]
 80078bc:	b91e      	cbnz	r6, 80078c6 <_printf_i+0x1a6>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	f023 0320 	bic.w	r3, r3, #32
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	2310      	movs	r3, #16
 80078c8:	e7a6      	b.n	8007818 <_printf_i+0xf8>
 80078ca:	4824      	ldr	r0, [pc, #144]	; (800795c <_printf_i+0x23c>)
 80078cc:	e7e4      	b.n	8007898 <_printf_i+0x178>
 80078ce:	4615      	mov	r5, r2
 80078d0:	e7bd      	b.n	800784e <_printf_i+0x12e>
 80078d2:	682b      	ldr	r3, [r5, #0]
 80078d4:	6826      	ldr	r6, [r4, #0]
 80078d6:	1d18      	adds	r0, r3, #4
 80078d8:	6961      	ldr	r1, [r4, #20]
 80078da:	6028      	str	r0, [r5, #0]
 80078dc:	0635      	lsls	r5, r6, #24
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	d501      	bpl.n	80078e6 <_printf_i+0x1c6>
 80078e2:	6019      	str	r1, [r3, #0]
 80078e4:	e002      	b.n	80078ec <_printf_i+0x1cc>
 80078e6:	0670      	lsls	r0, r6, #25
 80078e8:	d5fb      	bpl.n	80078e2 <_printf_i+0x1c2>
 80078ea:	8019      	strh	r1, [r3, #0]
 80078ec:	2300      	movs	r3, #0
 80078ee:	4615      	mov	r5, r2
 80078f0:	6123      	str	r3, [r4, #16]
 80078f2:	e7bc      	b.n	800786e <_printf_i+0x14e>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	2100      	movs	r1, #0
 80078f8:	1d1a      	adds	r2, r3, #4
 80078fa:	602a      	str	r2, [r5, #0]
 80078fc:	681d      	ldr	r5, [r3, #0]
 80078fe:	6862      	ldr	r2, [r4, #4]
 8007900:	4628      	mov	r0, r5
 8007902:	f000 f9d4 	bl	8007cae <memchr>
 8007906:	b108      	cbz	r0, 800790c <_printf_i+0x1ec>
 8007908:	1b40      	subs	r0, r0, r5
 800790a:	6060      	str	r0, [r4, #4]
 800790c:	6863      	ldr	r3, [r4, #4]
 800790e:	6123      	str	r3, [r4, #16]
 8007910:	2300      	movs	r3, #0
 8007912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007916:	e7aa      	b.n	800786e <_printf_i+0x14e>
 8007918:	462a      	mov	r2, r5
 800791a:	4649      	mov	r1, r9
 800791c:	4640      	mov	r0, r8
 800791e:	6923      	ldr	r3, [r4, #16]
 8007920:	47d0      	blx	sl
 8007922:	3001      	adds	r0, #1
 8007924:	d0ad      	beq.n	8007882 <_printf_i+0x162>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	079b      	lsls	r3, r3, #30
 800792a:	d413      	bmi.n	8007954 <_printf_i+0x234>
 800792c:	68e0      	ldr	r0, [r4, #12]
 800792e:	9b03      	ldr	r3, [sp, #12]
 8007930:	4298      	cmp	r0, r3
 8007932:	bfb8      	it	lt
 8007934:	4618      	movlt	r0, r3
 8007936:	e7a6      	b.n	8007886 <_printf_i+0x166>
 8007938:	2301      	movs	r3, #1
 800793a:	4632      	mov	r2, r6
 800793c:	4649      	mov	r1, r9
 800793e:	4640      	mov	r0, r8
 8007940:	47d0      	blx	sl
 8007942:	3001      	adds	r0, #1
 8007944:	d09d      	beq.n	8007882 <_printf_i+0x162>
 8007946:	3501      	adds	r5, #1
 8007948:	68e3      	ldr	r3, [r4, #12]
 800794a:	9903      	ldr	r1, [sp, #12]
 800794c:	1a5b      	subs	r3, r3, r1
 800794e:	42ab      	cmp	r3, r5
 8007950:	dcf2      	bgt.n	8007938 <_printf_i+0x218>
 8007952:	e7eb      	b.n	800792c <_printf_i+0x20c>
 8007954:	2500      	movs	r5, #0
 8007956:	f104 0619 	add.w	r6, r4, #25
 800795a:	e7f5      	b.n	8007948 <_printf_i+0x228>
 800795c:	08009e74 	.word	0x08009e74
 8007960:	08009e85 	.word	0x08009e85

08007964 <std>:
 8007964:	2300      	movs	r3, #0
 8007966:	b510      	push	{r4, lr}
 8007968:	4604      	mov	r4, r0
 800796a:	e9c0 3300 	strd	r3, r3, [r0]
 800796e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007972:	6083      	str	r3, [r0, #8]
 8007974:	8181      	strh	r1, [r0, #12]
 8007976:	6643      	str	r3, [r0, #100]	; 0x64
 8007978:	81c2      	strh	r2, [r0, #14]
 800797a:	6183      	str	r3, [r0, #24]
 800797c:	4619      	mov	r1, r3
 800797e:	2208      	movs	r2, #8
 8007980:	305c      	adds	r0, #92	; 0x5c
 8007982:	f000 f914 	bl	8007bae <memset>
 8007986:	4b0d      	ldr	r3, [pc, #52]	; (80079bc <std+0x58>)
 8007988:	6224      	str	r4, [r4, #32]
 800798a:	6263      	str	r3, [r4, #36]	; 0x24
 800798c:	4b0c      	ldr	r3, [pc, #48]	; (80079c0 <std+0x5c>)
 800798e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007990:	4b0c      	ldr	r3, [pc, #48]	; (80079c4 <std+0x60>)
 8007992:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007994:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <std+0x64>)
 8007996:	6323      	str	r3, [r4, #48]	; 0x30
 8007998:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <std+0x68>)
 800799a:	429c      	cmp	r4, r3
 800799c:	d006      	beq.n	80079ac <std+0x48>
 800799e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80079a2:	4294      	cmp	r4, r2
 80079a4:	d002      	beq.n	80079ac <std+0x48>
 80079a6:	33d0      	adds	r3, #208	; 0xd0
 80079a8:	429c      	cmp	r4, r3
 80079aa:	d105      	bne.n	80079b8 <std+0x54>
 80079ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079b4:	f000 b978 	b.w	8007ca8 <__retarget_lock_init_recursive>
 80079b8:	bd10      	pop	{r4, pc}
 80079ba:	bf00      	nop
 80079bc:	08007b29 	.word	0x08007b29
 80079c0:	08007b4b 	.word	0x08007b4b
 80079c4:	08007b83 	.word	0x08007b83
 80079c8:	08007ba7 	.word	0x08007ba7
 80079cc:	200013a0 	.word	0x200013a0

080079d0 <stdio_exit_handler>:
 80079d0:	4a02      	ldr	r2, [pc, #8]	; (80079dc <stdio_exit_handler+0xc>)
 80079d2:	4903      	ldr	r1, [pc, #12]	; (80079e0 <stdio_exit_handler+0x10>)
 80079d4:	4803      	ldr	r0, [pc, #12]	; (80079e4 <stdio_exit_handler+0x14>)
 80079d6:	f000 b869 	b.w	8007aac <_fwalk_sglue>
 80079da:	bf00      	nop
 80079dc:	20000010 	.word	0x20000010
 80079e0:	0800965d 	.word	0x0800965d
 80079e4:	2000001c 	.word	0x2000001c

080079e8 <cleanup_stdio>:
 80079e8:	6841      	ldr	r1, [r0, #4]
 80079ea:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <cleanup_stdio+0x34>)
 80079ec:	b510      	push	{r4, lr}
 80079ee:	4299      	cmp	r1, r3
 80079f0:	4604      	mov	r4, r0
 80079f2:	d001      	beq.n	80079f8 <cleanup_stdio+0x10>
 80079f4:	f001 fe32 	bl	800965c <_fflush_r>
 80079f8:	68a1      	ldr	r1, [r4, #8]
 80079fa:	4b09      	ldr	r3, [pc, #36]	; (8007a20 <cleanup_stdio+0x38>)
 80079fc:	4299      	cmp	r1, r3
 80079fe:	d002      	beq.n	8007a06 <cleanup_stdio+0x1e>
 8007a00:	4620      	mov	r0, r4
 8007a02:	f001 fe2b 	bl	800965c <_fflush_r>
 8007a06:	68e1      	ldr	r1, [r4, #12]
 8007a08:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <cleanup_stdio+0x3c>)
 8007a0a:	4299      	cmp	r1, r3
 8007a0c:	d004      	beq.n	8007a18 <cleanup_stdio+0x30>
 8007a0e:	4620      	mov	r0, r4
 8007a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a14:	f001 be22 	b.w	800965c <_fflush_r>
 8007a18:	bd10      	pop	{r4, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200013a0 	.word	0x200013a0
 8007a20:	20001408 	.word	0x20001408
 8007a24:	20001470 	.word	0x20001470

08007a28 <global_stdio_init.part.0>:
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	4b0b      	ldr	r3, [pc, #44]	; (8007a58 <global_stdio_init.part.0+0x30>)
 8007a2c:	4c0b      	ldr	r4, [pc, #44]	; (8007a5c <global_stdio_init.part.0+0x34>)
 8007a2e:	4a0c      	ldr	r2, [pc, #48]	; (8007a60 <global_stdio_init.part.0+0x38>)
 8007a30:	4620      	mov	r0, r4
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	2104      	movs	r1, #4
 8007a36:	2200      	movs	r2, #0
 8007a38:	f7ff ff94 	bl	8007964 <std>
 8007a3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007a40:	2201      	movs	r2, #1
 8007a42:	2109      	movs	r1, #9
 8007a44:	f7ff ff8e 	bl	8007964 <std>
 8007a48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a52:	2112      	movs	r1, #18
 8007a54:	f7ff bf86 	b.w	8007964 <std>
 8007a58:	200014d8 	.word	0x200014d8
 8007a5c:	200013a0 	.word	0x200013a0
 8007a60:	080079d1 	.word	0x080079d1

08007a64 <__sfp_lock_acquire>:
 8007a64:	4801      	ldr	r0, [pc, #4]	; (8007a6c <__sfp_lock_acquire+0x8>)
 8007a66:	f000 b920 	b.w	8007caa <__retarget_lock_acquire_recursive>
 8007a6a:	bf00      	nop
 8007a6c:	200014e1 	.word	0x200014e1

08007a70 <__sfp_lock_release>:
 8007a70:	4801      	ldr	r0, [pc, #4]	; (8007a78 <__sfp_lock_release+0x8>)
 8007a72:	f000 b91b 	b.w	8007cac <__retarget_lock_release_recursive>
 8007a76:	bf00      	nop
 8007a78:	200014e1 	.word	0x200014e1

08007a7c <__sinit>:
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	4604      	mov	r4, r0
 8007a80:	f7ff fff0 	bl	8007a64 <__sfp_lock_acquire>
 8007a84:	6a23      	ldr	r3, [r4, #32]
 8007a86:	b11b      	cbz	r3, 8007a90 <__sinit+0x14>
 8007a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a8c:	f7ff bff0 	b.w	8007a70 <__sfp_lock_release>
 8007a90:	4b04      	ldr	r3, [pc, #16]	; (8007aa4 <__sinit+0x28>)
 8007a92:	6223      	str	r3, [r4, #32]
 8007a94:	4b04      	ldr	r3, [pc, #16]	; (8007aa8 <__sinit+0x2c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1f5      	bne.n	8007a88 <__sinit+0xc>
 8007a9c:	f7ff ffc4 	bl	8007a28 <global_stdio_init.part.0>
 8007aa0:	e7f2      	b.n	8007a88 <__sinit+0xc>
 8007aa2:	bf00      	nop
 8007aa4:	080079e9 	.word	0x080079e9
 8007aa8:	200014d8 	.word	0x200014d8

08007aac <_fwalk_sglue>:
 8007aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab0:	4607      	mov	r7, r0
 8007ab2:	4688      	mov	r8, r1
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	2600      	movs	r6, #0
 8007ab8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007abc:	f1b9 0901 	subs.w	r9, r9, #1
 8007ac0:	d505      	bpl.n	8007ace <_fwalk_sglue+0x22>
 8007ac2:	6824      	ldr	r4, [r4, #0]
 8007ac4:	2c00      	cmp	r4, #0
 8007ac6:	d1f7      	bne.n	8007ab8 <_fwalk_sglue+0xc>
 8007ac8:	4630      	mov	r0, r6
 8007aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ace:	89ab      	ldrh	r3, [r5, #12]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d907      	bls.n	8007ae4 <_fwalk_sglue+0x38>
 8007ad4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	d003      	beq.n	8007ae4 <_fwalk_sglue+0x38>
 8007adc:	4629      	mov	r1, r5
 8007ade:	4638      	mov	r0, r7
 8007ae0:	47c0      	blx	r8
 8007ae2:	4306      	orrs	r6, r0
 8007ae4:	3568      	adds	r5, #104	; 0x68
 8007ae6:	e7e9      	b.n	8007abc <_fwalk_sglue+0x10>

08007ae8 <siprintf>:
 8007ae8:	b40e      	push	{r1, r2, r3}
 8007aea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007aee:	b500      	push	{lr}
 8007af0:	b09c      	sub	sp, #112	; 0x70
 8007af2:	ab1d      	add	r3, sp, #116	; 0x74
 8007af4:	9002      	str	r0, [sp, #8]
 8007af6:	9006      	str	r0, [sp, #24]
 8007af8:	9107      	str	r1, [sp, #28]
 8007afa:	9104      	str	r1, [sp, #16]
 8007afc:	4808      	ldr	r0, [pc, #32]	; (8007b20 <siprintf+0x38>)
 8007afe:	4909      	ldr	r1, [pc, #36]	; (8007b24 <siprintf+0x3c>)
 8007b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b04:	9105      	str	r1, [sp, #20]
 8007b06:	6800      	ldr	r0, [r0, #0]
 8007b08:	a902      	add	r1, sp, #8
 8007b0a:	9301      	str	r3, [sp, #4]
 8007b0c:	f001 fc26 	bl	800935c <_svfiprintf_r>
 8007b10:	2200      	movs	r2, #0
 8007b12:	9b02      	ldr	r3, [sp, #8]
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	b01c      	add	sp, #112	; 0x70
 8007b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b1c:	b003      	add	sp, #12
 8007b1e:	4770      	bx	lr
 8007b20:	20000068 	.word	0x20000068
 8007b24:	ffff0208 	.word	0xffff0208

08007b28 <__sread>:
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b30:	f000 f86c 	bl	8007c0c <_read_r>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	bfab      	itete	ge
 8007b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b3c:	181b      	addge	r3, r3, r0
 8007b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b42:	bfac      	ite	ge
 8007b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b46:	81a3      	strhlt	r3, [r4, #12]
 8007b48:	bd10      	pop	{r4, pc}

08007b4a <__swrite>:
 8007b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4e:	461f      	mov	r7, r3
 8007b50:	898b      	ldrh	r3, [r1, #12]
 8007b52:	4605      	mov	r5, r0
 8007b54:	05db      	lsls	r3, r3, #23
 8007b56:	460c      	mov	r4, r1
 8007b58:	4616      	mov	r6, r2
 8007b5a:	d505      	bpl.n	8007b68 <__swrite+0x1e>
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b64:	f000 f840 	bl	8007be8 <_lseek_r>
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	4632      	mov	r2, r6
 8007b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b70:	81a3      	strh	r3, [r4, #12]
 8007b72:	4628      	mov	r0, r5
 8007b74:	463b      	mov	r3, r7
 8007b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7e:	f000 b857 	b.w	8007c30 <_write_r>

08007b82 <__sseek>:
 8007b82:	b510      	push	{r4, lr}
 8007b84:	460c      	mov	r4, r1
 8007b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8a:	f000 f82d 	bl	8007be8 <_lseek_r>
 8007b8e:	1c43      	adds	r3, r0, #1
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	bf15      	itete	ne
 8007b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b9e:	81a3      	strheq	r3, [r4, #12]
 8007ba0:	bf18      	it	ne
 8007ba2:	81a3      	strhne	r3, [r4, #12]
 8007ba4:	bd10      	pop	{r4, pc}

08007ba6 <__sclose>:
 8007ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007baa:	f000 b80d 	b.w	8007bc8 <_close_r>

08007bae <memset>:
 8007bae:	4603      	mov	r3, r0
 8007bb0:	4402      	add	r2, r0
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d100      	bne.n	8007bb8 <memset+0xa>
 8007bb6:	4770      	bx	lr
 8007bb8:	f803 1b01 	strb.w	r1, [r3], #1
 8007bbc:	e7f9      	b.n	8007bb2 <memset+0x4>
	...

08007bc0 <_localeconv_r>:
 8007bc0:	4800      	ldr	r0, [pc, #0]	; (8007bc4 <_localeconv_r+0x4>)
 8007bc2:	4770      	bx	lr
 8007bc4:	2000015c 	.word	0x2000015c

08007bc8 <_close_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	2300      	movs	r3, #0
 8007bcc:	4d05      	ldr	r5, [pc, #20]	; (8007be4 <_close_r+0x1c>)
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	602b      	str	r3, [r5, #0]
 8007bd4:	f7fa fe3e 	bl	8002854 <_close>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d102      	bne.n	8007be2 <_close_r+0x1a>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b103      	cbz	r3, 8007be2 <_close_r+0x1a>
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	200014dc 	.word	0x200014dc

08007be8 <_lseek_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4604      	mov	r4, r0
 8007bec:	4608      	mov	r0, r1
 8007bee:	4611      	mov	r1, r2
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4d05      	ldr	r5, [pc, #20]	; (8007c08 <_lseek_r+0x20>)
 8007bf4:	602a      	str	r2, [r5, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	f7fa fe50 	bl	800289c <_lseek>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d102      	bne.n	8007c06 <_lseek_r+0x1e>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	b103      	cbz	r3, 8007c06 <_lseek_r+0x1e>
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	200014dc 	.word	0x200014dc

08007c0c <_read_r>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4608      	mov	r0, r1
 8007c12:	4611      	mov	r1, r2
 8007c14:	2200      	movs	r2, #0
 8007c16:	4d05      	ldr	r5, [pc, #20]	; (8007c2c <_read_r+0x20>)
 8007c18:	602a      	str	r2, [r5, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f7fa fde1 	bl	80027e2 <_read>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	d102      	bne.n	8007c2a <_read_r+0x1e>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	b103      	cbz	r3, 8007c2a <_read_r+0x1e>
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	200014dc 	.word	0x200014dc

08007c30 <_write_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4604      	mov	r4, r0
 8007c34:	4608      	mov	r0, r1
 8007c36:	4611      	mov	r1, r2
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4d05      	ldr	r5, [pc, #20]	; (8007c50 <_write_r+0x20>)
 8007c3c:	602a      	str	r2, [r5, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f7fa fdec 	bl	800281c <_write>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	d102      	bne.n	8007c4e <_write_r+0x1e>
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	b103      	cbz	r3, 8007c4e <_write_r+0x1e>
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	200014dc 	.word	0x200014dc

08007c54 <__errno>:
 8007c54:	4b01      	ldr	r3, [pc, #4]	; (8007c5c <__errno+0x8>)
 8007c56:	6818      	ldr	r0, [r3, #0]
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	20000068 	.word	0x20000068

08007c60 <__libc_init_array>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	2600      	movs	r6, #0
 8007c64:	4d0c      	ldr	r5, [pc, #48]	; (8007c98 <__libc_init_array+0x38>)
 8007c66:	4c0d      	ldr	r4, [pc, #52]	; (8007c9c <__libc_init_array+0x3c>)
 8007c68:	1b64      	subs	r4, r4, r5
 8007c6a:	10a4      	asrs	r4, r4, #2
 8007c6c:	42a6      	cmp	r6, r4
 8007c6e:	d109      	bne.n	8007c84 <__libc_init_array+0x24>
 8007c70:	f002 f886 	bl	8009d80 <_init>
 8007c74:	2600      	movs	r6, #0
 8007c76:	4d0a      	ldr	r5, [pc, #40]	; (8007ca0 <__libc_init_array+0x40>)
 8007c78:	4c0a      	ldr	r4, [pc, #40]	; (8007ca4 <__libc_init_array+0x44>)
 8007c7a:	1b64      	subs	r4, r4, r5
 8007c7c:	10a4      	asrs	r4, r4, #2
 8007c7e:	42a6      	cmp	r6, r4
 8007c80:	d105      	bne.n	8007c8e <__libc_init_array+0x2e>
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
 8007c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c88:	4798      	blx	r3
 8007c8a:	3601      	adds	r6, #1
 8007c8c:	e7ee      	b.n	8007c6c <__libc_init_array+0xc>
 8007c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c92:	4798      	blx	r3
 8007c94:	3601      	adds	r6, #1
 8007c96:	e7f2      	b.n	8007c7e <__libc_init_array+0x1e>
 8007c98:	0800a1d4 	.word	0x0800a1d4
 8007c9c:	0800a1d4 	.word	0x0800a1d4
 8007ca0:	0800a1d4 	.word	0x0800a1d4
 8007ca4:	0800a1dc 	.word	0x0800a1dc

08007ca8 <__retarget_lock_init_recursive>:
 8007ca8:	4770      	bx	lr

08007caa <__retarget_lock_acquire_recursive>:
 8007caa:	4770      	bx	lr

08007cac <__retarget_lock_release_recursive>:
 8007cac:	4770      	bx	lr

08007cae <memchr>:
 8007cae:	4603      	mov	r3, r0
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	b2c9      	uxtb	r1, r1
 8007cb4:	4402      	add	r2, r0
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	4618      	mov	r0, r3
 8007cba:	d101      	bne.n	8007cc0 <memchr+0x12>
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	e003      	b.n	8007cc8 <memchr+0x1a>
 8007cc0:	7804      	ldrb	r4, [r0, #0]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	428c      	cmp	r4, r1
 8007cc6:	d1f6      	bne.n	8007cb6 <memchr+0x8>
 8007cc8:	bd10      	pop	{r4, pc}

08007cca <memcpy>:
 8007cca:	440a      	add	r2, r1
 8007ccc:	4291      	cmp	r1, r2
 8007cce:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cd2:	d100      	bne.n	8007cd6 <memcpy+0xc>
 8007cd4:	4770      	bx	lr
 8007cd6:	b510      	push	{r4, lr}
 8007cd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cdc:	4291      	cmp	r1, r2
 8007cde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ce2:	d1f9      	bne.n	8007cd8 <memcpy+0xe>
 8007ce4:	bd10      	pop	{r4, pc}

08007ce6 <quorem>:
 8007ce6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cea:	6903      	ldr	r3, [r0, #16]
 8007cec:	690c      	ldr	r4, [r1, #16]
 8007cee:	4607      	mov	r7, r0
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	db7f      	blt.n	8007df4 <quorem+0x10e>
 8007cf4:	3c01      	subs	r4, #1
 8007cf6:	f100 0514 	add.w	r5, r0, #20
 8007cfa:	f101 0814 	add.w	r8, r1, #20
 8007cfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d1c:	d331      	bcc.n	8007d82 <quorem+0x9c>
 8007d1e:	f04f 0e00 	mov.w	lr, #0
 8007d22:	4640      	mov	r0, r8
 8007d24:	46ac      	mov	ip, r5
 8007d26:	46f2      	mov	sl, lr
 8007d28:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d2c:	b293      	uxth	r3, r2
 8007d2e:	fb06 e303 	mla	r3, r6, r3, lr
 8007d32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d36:	0c1a      	lsrs	r2, r3, #16
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	fb06 220e 	mla	r2, r6, lr, r2
 8007d3e:	ebaa 0303 	sub.w	r3, sl, r3
 8007d42:	f8dc a000 	ldr.w	sl, [ip]
 8007d46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d4a:	fa1f fa8a 	uxth.w	sl, sl
 8007d4e:	4453      	add	r3, sl
 8007d50:	f8dc a000 	ldr.w	sl, [ip]
 8007d54:	b292      	uxth	r2, r2
 8007d56:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d64:	4581      	cmp	r9, r0
 8007d66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d6a:	f84c 3b04 	str.w	r3, [ip], #4
 8007d6e:	d2db      	bcs.n	8007d28 <quorem+0x42>
 8007d70:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d74:	b92b      	cbnz	r3, 8007d82 <quorem+0x9c>
 8007d76:	9b01      	ldr	r3, [sp, #4]
 8007d78:	3b04      	subs	r3, #4
 8007d7a:	429d      	cmp	r5, r3
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	d32d      	bcc.n	8007ddc <quorem+0xf6>
 8007d80:	613c      	str	r4, [r7, #16]
 8007d82:	4638      	mov	r0, r7
 8007d84:	f001 f992 	bl	80090ac <__mcmp>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	db23      	blt.n	8007dd4 <quorem+0xee>
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	2000      	movs	r0, #0
 8007d90:	3601      	adds	r6, #1
 8007d92:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d96:	f8d1 c000 	ldr.w	ip, [r1]
 8007d9a:	b293      	uxth	r3, r2
 8007d9c:	1ac3      	subs	r3, r0, r3
 8007d9e:	0c12      	lsrs	r2, r2, #16
 8007da0:	fa1f f08c 	uxth.w	r0, ip
 8007da4:	4403      	add	r3, r0
 8007da6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007daa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007db4:	45c1      	cmp	r9, r8
 8007db6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007dba:	f841 3b04 	str.w	r3, [r1], #4
 8007dbe:	d2e8      	bcs.n	8007d92 <quorem+0xac>
 8007dc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dc8:	b922      	cbnz	r2, 8007dd4 <quorem+0xee>
 8007dca:	3b04      	subs	r3, #4
 8007dcc:	429d      	cmp	r5, r3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	d30a      	bcc.n	8007de8 <quorem+0x102>
 8007dd2:	613c      	str	r4, [r7, #16]
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	b003      	add	sp, #12
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	6812      	ldr	r2, [r2, #0]
 8007dde:	3b04      	subs	r3, #4
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d1cd      	bne.n	8007d80 <quorem+0x9a>
 8007de4:	3c01      	subs	r4, #1
 8007de6:	e7c8      	b.n	8007d7a <quorem+0x94>
 8007de8:	6812      	ldr	r2, [r2, #0]
 8007dea:	3b04      	subs	r3, #4
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	d1f0      	bne.n	8007dd2 <quorem+0xec>
 8007df0:	3c01      	subs	r4, #1
 8007df2:	e7eb      	b.n	8007dcc <quorem+0xe6>
 8007df4:	2000      	movs	r0, #0
 8007df6:	e7ee      	b.n	8007dd6 <quorem+0xf0>

08007df8 <_dtoa_r>:
 8007df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	4616      	mov	r6, r2
 8007dfe:	461f      	mov	r7, r3
 8007e00:	69c4      	ldr	r4, [r0, #28]
 8007e02:	b099      	sub	sp, #100	; 0x64
 8007e04:	4605      	mov	r5, r0
 8007e06:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e0a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007e0e:	b974      	cbnz	r4, 8007e2e <_dtoa_r+0x36>
 8007e10:	2010      	movs	r0, #16
 8007e12:	f000 fe1d 	bl	8008a50 <malloc>
 8007e16:	4602      	mov	r2, r0
 8007e18:	61e8      	str	r0, [r5, #28]
 8007e1a:	b920      	cbnz	r0, 8007e26 <_dtoa_r+0x2e>
 8007e1c:	21ef      	movs	r1, #239	; 0xef
 8007e1e:	4bac      	ldr	r3, [pc, #688]	; (80080d0 <_dtoa_r+0x2d8>)
 8007e20:	48ac      	ldr	r0, [pc, #688]	; (80080d4 <_dtoa_r+0x2dc>)
 8007e22:	f001 fc6d 	bl	8009700 <__assert_func>
 8007e26:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e2a:	6004      	str	r4, [r0, #0]
 8007e2c:	60c4      	str	r4, [r0, #12]
 8007e2e:	69eb      	ldr	r3, [r5, #28]
 8007e30:	6819      	ldr	r1, [r3, #0]
 8007e32:	b151      	cbz	r1, 8007e4a <_dtoa_r+0x52>
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	2301      	movs	r3, #1
 8007e38:	4093      	lsls	r3, r2
 8007e3a:	604a      	str	r2, [r1, #4]
 8007e3c:	608b      	str	r3, [r1, #8]
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 fefa 	bl	8008c38 <_Bfree>
 8007e44:	2200      	movs	r2, #0
 8007e46:	69eb      	ldr	r3, [r5, #28]
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	1e3b      	subs	r3, r7, #0
 8007e4c:	bfaf      	iteee	ge
 8007e4e:	2300      	movge	r3, #0
 8007e50:	2201      	movlt	r2, #1
 8007e52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e56:	9305      	strlt	r3, [sp, #20]
 8007e58:	bfa8      	it	ge
 8007e5a:	f8c8 3000 	strge.w	r3, [r8]
 8007e5e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007e62:	4b9d      	ldr	r3, [pc, #628]	; (80080d8 <_dtoa_r+0x2e0>)
 8007e64:	bfb8      	it	lt
 8007e66:	f8c8 2000 	strlt.w	r2, [r8]
 8007e6a:	ea33 0309 	bics.w	r3, r3, r9
 8007e6e:	d119      	bne.n	8007ea4 <_dtoa_r+0xac>
 8007e70:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e7c:	4333      	orrs	r3, r6
 8007e7e:	f000 8589 	beq.w	8008994 <_dtoa_r+0xb9c>
 8007e82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e84:	b953      	cbnz	r3, 8007e9c <_dtoa_r+0xa4>
 8007e86:	4b95      	ldr	r3, [pc, #596]	; (80080dc <_dtoa_r+0x2e4>)
 8007e88:	e023      	b.n	8007ed2 <_dtoa_r+0xda>
 8007e8a:	4b95      	ldr	r3, [pc, #596]	; (80080e0 <_dtoa_r+0x2e8>)
 8007e8c:	9303      	str	r3, [sp, #12]
 8007e8e:	3308      	adds	r3, #8
 8007e90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	9803      	ldr	r0, [sp, #12]
 8007e96:	b019      	add	sp, #100	; 0x64
 8007e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9c:	4b8f      	ldr	r3, [pc, #572]	; (80080dc <_dtoa_r+0x2e4>)
 8007e9e:	9303      	str	r3, [sp, #12]
 8007ea0:	3303      	adds	r3, #3
 8007ea2:	e7f5      	b.n	8007e90 <_dtoa_r+0x98>
 8007ea4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007ea8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007eac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f7f8 fd78 	bl	80009a8 <__aeabi_dcmpeq>
 8007eb8:	4680      	mov	r8, r0
 8007eba:	b160      	cbz	r0, 8007ed6 <_dtoa_r+0xde>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 8562 	beq.w	800898e <_dtoa_r+0xb96>
 8007eca:	4b86      	ldr	r3, [pc, #536]	; (80080e4 <_dtoa_r+0x2ec>)
 8007ecc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	9303      	str	r3, [sp, #12]
 8007ed4:	e7de      	b.n	8007e94 <_dtoa_r+0x9c>
 8007ed6:	ab16      	add	r3, sp, #88	; 0x58
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	ab17      	add	r3, sp, #92	; 0x5c
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	4628      	mov	r0, r5
 8007ee0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ee4:	f001 f98a 	bl	80091fc <__d2b>
 8007ee8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007eec:	4682      	mov	sl, r0
 8007eee:	2c00      	cmp	r4, #0
 8007ef0:	d07e      	beq.n	8007ff0 <_dtoa_r+0x1f8>
 8007ef2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ef8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f00:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007f04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f08:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	2200      	movs	r2, #0
 8007f10:	4b75      	ldr	r3, [pc, #468]	; (80080e8 <_dtoa_r+0x2f0>)
 8007f12:	f7f8 f929 	bl	8000168 <__aeabi_dsub>
 8007f16:	a368      	add	r3, pc, #416	; (adr r3, 80080b8 <_dtoa_r+0x2c0>)
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f7f8 fadc 	bl	80004d8 <__aeabi_dmul>
 8007f20:	a367      	add	r3, pc, #412	; (adr r3, 80080c0 <_dtoa_r+0x2c8>)
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f7f8 f921 	bl	800016c <__adddf3>
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	460f      	mov	r7, r1
 8007f30:	f7f8 fa68 	bl	8000404 <__aeabi_i2d>
 8007f34:	a364      	add	r3, pc, #400	; (adr r3, 80080c8 <_dtoa_r+0x2d0>)
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	f7f8 facd 	bl	80004d8 <__aeabi_dmul>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4630      	mov	r0, r6
 8007f44:	4639      	mov	r1, r7
 8007f46:	f7f8 f911 	bl	800016c <__adddf3>
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	460f      	mov	r7, r1
 8007f4e:	f7f8 fd73 	bl	8000a38 <__aeabi_d2iz>
 8007f52:	2200      	movs	r2, #0
 8007f54:	4683      	mov	fp, r0
 8007f56:	2300      	movs	r3, #0
 8007f58:	4630      	mov	r0, r6
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	f7f8 fd2e 	bl	80009bc <__aeabi_dcmplt>
 8007f60:	b148      	cbz	r0, 8007f76 <_dtoa_r+0x17e>
 8007f62:	4658      	mov	r0, fp
 8007f64:	f7f8 fa4e 	bl	8000404 <__aeabi_i2d>
 8007f68:	4632      	mov	r2, r6
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	f7f8 fd1c 	bl	80009a8 <__aeabi_dcmpeq>
 8007f70:	b908      	cbnz	r0, 8007f76 <_dtoa_r+0x17e>
 8007f72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f76:	f1bb 0f16 	cmp.w	fp, #22
 8007f7a:	d857      	bhi.n	800802c <_dtoa_r+0x234>
 8007f7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f80:	4b5a      	ldr	r3, [pc, #360]	; (80080ec <_dtoa_r+0x2f4>)
 8007f82:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f7f8 fd17 	bl	80009bc <__aeabi_dcmplt>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d04e      	beq.n	8008030 <_dtoa_r+0x238>
 8007f92:	2300      	movs	r3, #0
 8007f94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f98:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f9c:	1b1b      	subs	r3, r3, r4
 8007f9e:	1e5a      	subs	r2, r3, #1
 8007fa0:	bf46      	itte	mi
 8007fa2:	f1c3 0901 	rsbmi	r9, r3, #1
 8007fa6:	2300      	movmi	r3, #0
 8007fa8:	f04f 0900 	movpl.w	r9, #0
 8007fac:	9209      	str	r2, [sp, #36]	; 0x24
 8007fae:	bf48      	it	mi
 8007fb0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007fb2:	f1bb 0f00 	cmp.w	fp, #0
 8007fb6:	db3d      	blt.n	8008034 <_dtoa_r+0x23c>
 8007fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007fbe:	445b      	add	r3, fp
 8007fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	930a      	str	r3, [sp, #40]	; 0x28
 8007fc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fc8:	2b09      	cmp	r3, #9
 8007fca:	d867      	bhi.n	800809c <_dtoa_r+0x2a4>
 8007fcc:	2b05      	cmp	r3, #5
 8007fce:	bfc4      	itt	gt
 8007fd0:	3b04      	subgt	r3, #4
 8007fd2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007fd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fd6:	bfc8      	it	gt
 8007fd8:	2400      	movgt	r4, #0
 8007fda:	f1a3 0302 	sub.w	r3, r3, #2
 8007fde:	bfd8      	it	le
 8007fe0:	2401      	movle	r4, #1
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	f200 8086 	bhi.w	80080f4 <_dtoa_r+0x2fc>
 8007fe8:	e8df f003 	tbb	[pc, r3]
 8007fec:	5637392c 	.word	0x5637392c
 8007ff0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007ff4:	441c      	add	r4, r3
 8007ff6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007ffa:	2b20      	cmp	r3, #32
 8007ffc:	bfc1      	itttt	gt
 8007ffe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008002:	fa09 f903 	lslgt.w	r9, r9, r3
 8008006:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800800a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800800e:	bfd6      	itet	le
 8008010:	f1c3 0320 	rsble	r3, r3, #32
 8008014:	ea49 0003 	orrgt.w	r0, r9, r3
 8008018:	fa06 f003 	lslle.w	r0, r6, r3
 800801c:	f7f8 f9e2 	bl	80003e4 <__aeabi_ui2d>
 8008020:	2201      	movs	r2, #1
 8008022:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008026:	3c01      	subs	r4, #1
 8008028:	9213      	str	r2, [sp, #76]	; 0x4c
 800802a:	e76f      	b.n	8007f0c <_dtoa_r+0x114>
 800802c:	2301      	movs	r3, #1
 800802e:	e7b3      	b.n	8007f98 <_dtoa_r+0x1a0>
 8008030:	900f      	str	r0, [sp, #60]	; 0x3c
 8008032:	e7b2      	b.n	8007f9a <_dtoa_r+0x1a2>
 8008034:	f1cb 0300 	rsb	r3, fp, #0
 8008038:	930a      	str	r3, [sp, #40]	; 0x28
 800803a:	2300      	movs	r3, #0
 800803c:	eba9 090b 	sub.w	r9, r9, fp
 8008040:	930e      	str	r3, [sp, #56]	; 0x38
 8008042:	e7c0      	b.n	8007fc6 <_dtoa_r+0x1ce>
 8008044:	2300      	movs	r3, #0
 8008046:	930b      	str	r3, [sp, #44]	; 0x2c
 8008048:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800804a:	2b00      	cmp	r3, #0
 800804c:	dc55      	bgt.n	80080fa <_dtoa_r+0x302>
 800804e:	2301      	movs	r3, #1
 8008050:	461a      	mov	r2, r3
 8008052:	9306      	str	r3, [sp, #24]
 8008054:	9308      	str	r3, [sp, #32]
 8008056:	9223      	str	r2, [sp, #140]	; 0x8c
 8008058:	e00b      	b.n	8008072 <_dtoa_r+0x27a>
 800805a:	2301      	movs	r3, #1
 800805c:	e7f3      	b.n	8008046 <_dtoa_r+0x24e>
 800805e:	2300      	movs	r3, #0
 8008060:	930b      	str	r3, [sp, #44]	; 0x2c
 8008062:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008064:	445b      	add	r3, fp
 8008066:	9306      	str	r3, [sp, #24]
 8008068:	3301      	adds	r3, #1
 800806a:	2b01      	cmp	r3, #1
 800806c:	9308      	str	r3, [sp, #32]
 800806e:	bfb8      	it	lt
 8008070:	2301      	movlt	r3, #1
 8008072:	2100      	movs	r1, #0
 8008074:	2204      	movs	r2, #4
 8008076:	69e8      	ldr	r0, [r5, #28]
 8008078:	f102 0614 	add.w	r6, r2, #20
 800807c:	429e      	cmp	r6, r3
 800807e:	d940      	bls.n	8008102 <_dtoa_r+0x30a>
 8008080:	6041      	str	r1, [r0, #4]
 8008082:	4628      	mov	r0, r5
 8008084:	f000 fd98 	bl	8008bb8 <_Balloc>
 8008088:	9003      	str	r0, [sp, #12]
 800808a:	2800      	cmp	r0, #0
 800808c:	d13c      	bne.n	8008108 <_dtoa_r+0x310>
 800808e:	4602      	mov	r2, r0
 8008090:	f240 11af 	movw	r1, #431	; 0x1af
 8008094:	4b16      	ldr	r3, [pc, #88]	; (80080f0 <_dtoa_r+0x2f8>)
 8008096:	e6c3      	b.n	8007e20 <_dtoa_r+0x28>
 8008098:	2301      	movs	r3, #1
 800809a:	e7e1      	b.n	8008060 <_dtoa_r+0x268>
 800809c:	2401      	movs	r4, #1
 800809e:	2300      	movs	r3, #0
 80080a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80080a2:	9322      	str	r3, [sp, #136]	; 0x88
 80080a4:	f04f 33ff 	mov.w	r3, #4294967295
 80080a8:	2200      	movs	r2, #0
 80080aa:	9306      	str	r3, [sp, #24]
 80080ac:	9308      	str	r3, [sp, #32]
 80080ae:	2312      	movs	r3, #18
 80080b0:	e7d1      	b.n	8008056 <_dtoa_r+0x25e>
 80080b2:	bf00      	nop
 80080b4:	f3af 8000 	nop.w
 80080b8:	636f4361 	.word	0x636f4361
 80080bc:	3fd287a7 	.word	0x3fd287a7
 80080c0:	8b60c8b3 	.word	0x8b60c8b3
 80080c4:	3fc68a28 	.word	0x3fc68a28
 80080c8:	509f79fb 	.word	0x509f79fb
 80080cc:	3fd34413 	.word	0x3fd34413
 80080d0:	08009ea3 	.word	0x08009ea3
 80080d4:	08009eba 	.word	0x08009eba
 80080d8:	7ff00000 	.word	0x7ff00000
 80080dc:	08009e9f 	.word	0x08009e9f
 80080e0:	08009e96 	.word	0x08009e96
 80080e4:	08009e73 	.word	0x08009e73
 80080e8:	3ff80000 	.word	0x3ff80000
 80080ec:	08009fa8 	.word	0x08009fa8
 80080f0:	08009f12 	.word	0x08009f12
 80080f4:	2301      	movs	r3, #1
 80080f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80080f8:	e7d4      	b.n	80080a4 <_dtoa_r+0x2ac>
 80080fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080fc:	9306      	str	r3, [sp, #24]
 80080fe:	9308      	str	r3, [sp, #32]
 8008100:	e7b7      	b.n	8008072 <_dtoa_r+0x27a>
 8008102:	3101      	adds	r1, #1
 8008104:	0052      	lsls	r2, r2, #1
 8008106:	e7b7      	b.n	8008078 <_dtoa_r+0x280>
 8008108:	69eb      	ldr	r3, [r5, #28]
 800810a:	9a03      	ldr	r2, [sp, #12]
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	9b08      	ldr	r3, [sp, #32]
 8008110:	2b0e      	cmp	r3, #14
 8008112:	f200 80a8 	bhi.w	8008266 <_dtoa_r+0x46e>
 8008116:	2c00      	cmp	r4, #0
 8008118:	f000 80a5 	beq.w	8008266 <_dtoa_r+0x46e>
 800811c:	f1bb 0f00 	cmp.w	fp, #0
 8008120:	dd34      	ble.n	800818c <_dtoa_r+0x394>
 8008122:	4b9a      	ldr	r3, [pc, #616]	; (800838c <_dtoa_r+0x594>)
 8008124:	f00b 020f 	and.w	r2, fp, #15
 8008128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800812c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008130:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008134:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008138:	ea4f 142b 	mov.w	r4, fp, asr #4
 800813c:	d016      	beq.n	800816c <_dtoa_r+0x374>
 800813e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008142:	4b93      	ldr	r3, [pc, #588]	; (8008390 <_dtoa_r+0x598>)
 8008144:	2703      	movs	r7, #3
 8008146:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800814a:	f7f8 faef 	bl	800072c <__aeabi_ddiv>
 800814e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008152:	f004 040f 	and.w	r4, r4, #15
 8008156:	4e8e      	ldr	r6, [pc, #568]	; (8008390 <_dtoa_r+0x598>)
 8008158:	b954      	cbnz	r4, 8008170 <_dtoa_r+0x378>
 800815a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800815e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008162:	f7f8 fae3 	bl	800072c <__aeabi_ddiv>
 8008166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800816a:	e029      	b.n	80081c0 <_dtoa_r+0x3c8>
 800816c:	2702      	movs	r7, #2
 800816e:	e7f2      	b.n	8008156 <_dtoa_r+0x35e>
 8008170:	07e1      	lsls	r1, r4, #31
 8008172:	d508      	bpl.n	8008186 <_dtoa_r+0x38e>
 8008174:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008178:	e9d6 2300 	ldrd	r2, r3, [r6]
 800817c:	f7f8 f9ac 	bl	80004d8 <__aeabi_dmul>
 8008180:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008184:	3701      	adds	r7, #1
 8008186:	1064      	asrs	r4, r4, #1
 8008188:	3608      	adds	r6, #8
 800818a:	e7e5      	b.n	8008158 <_dtoa_r+0x360>
 800818c:	f000 80a5 	beq.w	80082da <_dtoa_r+0x4e2>
 8008190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008194:	f1cb 0400 	rsb	r4, fp, #0
 8008198:	4b7c      	ldr	r3, [pc, #496]	; (800838c <_dtoa_r+0x594>)
 800819a:	f004 020f 	and.w	r2, r4, #15
 800819e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f7f8 f997 	bl	80004d8 <__aeabi_dmul>
 80081aa:	2702      	movs	r7, #2
 80081ac:	2300      	movs	r3, #0
 80081ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081b2:	4e77      	ldr	r6, [pc, #476]	; (8008390 <_dtoa_r+0x598>)
 80081b4:	1124      	asrs	r4, r4, #4
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	f040 8084 	bne.w	80082c4 <_dtoa_r+0x4cc>
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1d2      	bne.n	8008166 <_dtoa_r+0x36e>
 80081c0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80081c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80081c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 8087 	beq.w	80082de <_dtoa_r+0x4e6>
 80081d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081d4:	2200      	movs	r2, #0
 80081d6:	4b6f      	ldr	r3, [pc, #444]	; (8008394 <_dtoa_r+0x59c>)
 80081d8:	f7f8 fbf0 	bl	80009bc <__aeabi_dcmplt>
 80081dc:	2800      	cmp	r0, #0
 80081de:	d07e      	beq.n	80082de <_dtoa_r+0x4e6>
 80081e0:	9b08      	ldr	r3, [sp, #32]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d07b      	beq.n	80082de <_dtoa_r+0x4e6>
 80081e6:	9b06      	ldr	r3, [sp, #24]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dd38      	ble.n	800825e <_dtoa_r+0x466>
 80081ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081f0:	2200      	movs	r2, #0
 80081f2:	4b69      	ldr	r3, [pc, #420]	; (8008398 <_dtoa_r+0x5a0>)
 80081f4:	f7f8 f970 	bl	80004d8 <__aeabi_dmul>
 80081f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081fc:	9c06      	ldr	r4, [sp, #24]
 80081fe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008202:	3701      	adds	r7, #1
 8008204:	4638      	mov	r0, r7
 8008206:	f7f8 f8fd 	bl	8000404 <__aeabi_i2d>
 800820a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800820e:	f7f8 f963 	bl	80004d8 <__aeabi_dmul>
 8008212:	2200      	movs	r2, #0
 8008214:	4b61      	ldr	r3, [pc, #388]	; (800839c <_dtoa_r+0x5a4>)
 8008216:	f7f7 ffa9 	bl	800016c <__adddf3>
 800821a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800821e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008222:	9611      	str	r6, [sp, #68]	; 0x44
 8008224:	2c00      	cmp	r4, #0
 8008226:	d15d      	bne.n	80082e4 <_dtoa_r+0x4ec>
 8008228:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800822c:	2200      	movs	r2, #0
 800822e:	4b5c      	ldr	r3, [pc, #368]	; (80083a0 <_dtoa_r+0x5a8>)
 8008230:	f7f7 ff9a 	bl	8000168 <__aeabi_dsub>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800823c:	4633      	mov	r3, r6
 800823e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008240:	f7f8 fbda 	bl	80009f8 <__aeabi_dcmpgt>
 8008244:	2800      	cmp	r0, #0
 8008246:	f040 8295 	bne.w	8008774 <_dtoa_r+0x97c>
 800824a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800824e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008250:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008254:	f7f8 fbb2 	bl	80009bc <__aeabi_dcmplt>
 8008258:	2800      	cmp	r0, #0
 800825a:	f040 8289 	bne.w	8008770 <_dtoa_r+0x978>
 800825e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008262:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008266:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008268:	2b00      	cmp	r3, #0
 800826a:	f2c0 8151 	blt.w	8008510 <_dtoa_r+0x718>
 800826e:	f1bb 0f0e 	cmp.w	fp, #14
 8008272:	f300 814d 	bgt.w	8008510 <_dtoa_r+0x718>
 8008276:	4b45      	ldr	r3, [pc, #276]	; (800838c <_dtoa_r+0x594>)
 8008278:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800827c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008280:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008284:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008286:	2b00      	cmp	r3, #0
 8008288:	f280 80da 	bge.w	8008440 <_dtoa_r+0x648>
 800828c:	9b08      	ldr	r3, [sp, #32]
 800828e:	2b00      	cmp	r3, #0
 8008290:	f300 80d6 	bgt.w	8008440 <_dtoa_r+0x648>
 8008294:	f040 826b 	bne.w	800876e <_dtoa_r+0x976>
 8008298:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800829c:	2200      	movs	r2, #0
 800829e:	4b40      	ldr	r3, [pc, #256]	; (80083a0 <_dtoa_r+0x5a8>)
 80082a0:	f7f8 f91a 	bl	80004d8 <__aeabi_dmul>
 80082a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082a8:	f7f8 fb9c 	bl	80009e4 <__aeabi_dcmpge>
 80082ac:	9c08      	ldr	r4, [sp, #32]
 80082ae:	4626      	mov	r6, r4
 80082b0:	2800      	cmp	r0, #0
 80082b2:	f040 8241 	bne.w	8008738 <_dtoa_r+0x940>
 80082b6:	2331      	movs	r3, #49	; 0x31
 80082b8:	9f03      	ldr	r7, [sp, #12]
 80082ba:	f10b 0b01 	add.w	fp, fp, #1
 80082be:	f807 3b01 	strb.w	r3, [r7], #1
 80082c2:	e23d      	b.n	8008740 <_dtoa_r+0x948>
 80082c4:	07e2      	lsls	r2, r4, #31
 80082c6:	d505      	bpl.n	80082d4 <_dtoa_r+0x4dc>
 80082c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082cc:	f7f8 f904 	bl	80004d8 <__aeabi_dmul>
 80082d0:	2301      	movs	r3, #1
 80082d2:	3701      	adds	r7, #1
 80082d4:	1064      	asrs	r4, r4, #1
 80082d6:	3608      	adds	r6, #8
 80082d8:	e76d      	b.n	80081b6 <_dtoa_r+0x3be>
 80082da:	2702      	movs	r7, #2
 80082dc:	e770      	b.n	80081c0 <_dtoa_r+0x3c8>
 80082de:	46d8      	mov	r8, fp
 80082e0:	9c08      	ldr	r4, [sp, #32]
 80082e2:	e78f      	b.n	8008204 <_dtoa_r+0x40c>
 80082e4:	9903      	ldr	r1, [sp, #12]
 80082e6:	4b29      	ldr	r3, [pc, #164]	; (800838c <_dtoa_r+0x594>)
 80082e8:	4421      	add	r1, r4
 80082ea:	9112      	str	r1, [sp, #72]	; 0x48
 80082ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082f2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80082f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082fa:	2900      	cmp	r1, #0
 80082fc:	d054      	beq.n	80083a8 <_dtoa_r+0x5b0>
 80082fe:	2000      	movs	r0, #0
 8008300:	4928      	ldr	r1, [pc, #160]	; (80083a4 <_dtoa_r+0x5ac>)
 8008302:	f7f8 fa13 	bl	800072c <__aeabi_ddiv>
 8008306:	463b      	mov	r3, r7
 8008308:	4632      	mov	r2, r6
 800830a:	f7f7 ff2d 	bl	8000168 <__aeabi_dsub>
 800830e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008312:	9f03      	ldr	r7, [sp, #12]
 8008314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008318:	f7f8 fb8e 	bl	8000a38 <__aeabi_d2iz>
 800831c:	4604      	mov	r4, r0
 800831e:	f7f8 f871 	bl	8000404 <__aeabi_i2d>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800832a:	f7f7 ff1d 	bl	8000168 <__aeabi_dsub>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	3430      	adds	r4, #48	; 0x30
 8008334:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008338:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800833c:	f807 4b01 	strb.w	r4, [r7], #1
 8008340:	f7f8 fb3c 	bl	80009bc <__aeabi_dcmplt>
 8008344:	2800      	cmp	r0, #0
 8008346:	d173      	bne.n	8008430 <_dtoa_r+0x638>
 8008348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800834c:	2000      	movs	r0, #0
 800834e:	4911      	ldr	r1, [pc, #68]	; (8008394 <_dtoa_r+0x59c>)
 8008350:	f7f7 ff0a 	bl	8000168 <__aeabi_dsub>
 8008354:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008358:	f7f8 fb30 	bl	80009bc <__aeabi_dcmplt>
 800835c:	2800      	cmp	r0, #0
 800835e:	f040 80b6 	bne.w	80084ce <_dtoa_r+0x6d6>
 8008362:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008364:	429f      	cmp	r7, r3
 8008366:	f43f af7a 	beq.w	800825e <_dtoa_r+0x466>
 800836a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800836e:	2200      	movs	r2, #0
 8008370:	4b09      	ldr	r3, [pc, #36]	; (8008398 <_dtoa_r+0x5a0>)
 8008372:	f7f8 f8b1 	bl	80004d8 <__aeabi_dmul>
 8008376:	2200      	movs	r2, #0
 8008378:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800837c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008380:	4b05      	ldr	r3, [pc, #20]	; (8008398 <_dtoa_r+0x5a0>)
 8008382:	f7f8 f8a9 	bl	80004d8 <__aeabi_dmul>
 8008386:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800838a:	e7c3      	b.n	8008314 <_dtoa_r+0x51c>
 800838c:	08009fa8 	.word	0x08009fa8
 8008390:	08009f80 	.word	0x08009f80
 8008394:	3ff00000 	.word	0x3ff00000
 8008398:	40240000 	.word	0x40240000
 800839c:	401c0000 	.word	0x401c0000
 80083a0:	40140000 	.word	0x40140000
 80083a4:	3fe00000 	.word	0x3fe00000
 80083a8:	4630      	mov	r0, r6
 80083aa:	4639      	mov	r1, r7
 80083ac:	f7f8 f894 	bl	80004d8 <__aeabi_dmul>
 80083b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80083b6:	9c03      	ldr	r4, [sp, #12]
 80083b8:	9314      	str	r3, [sp, #80]	; 0x50
 80083ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083be:	f7f8 fb3b 	bl	8000a38 <__aeabi_d2iz>
 80083c2:	9015      	str	r0, [sp, #84]	; 0x54
 80083c4:	f7f8 f81e 	bl	8000404 <__aeabi_i2d>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083d0:	f7f7 feca 	bl	8000168 <__aeabi_dsub>
 80083d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083d6:	4606      	mov	r6, r0
 80083d8:	3330      	adds	r3, #48	; 0x30
 80083da:	f804 3b01 	strb.w	r3, [r4], #1
 80083de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083e0:	460f      	mov	r7, r1
 80083e2:	429c      	cmp	r4, r3
 80083e4:	f04f 0200 	mov.w	r2, #0
 80083e8:	d124      	bne.n	8008434 <_dtoa_r+0x63c>
 80083ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083ee:	4baf      	ldr	r3, [pc, #700]	; (80086ac <_dtoa_r+0x8b4>)
 80083f0:	f7f7 febc 	bl	800016c <__adddf3>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4630      	mov	r0, r6
 80083fa:	4639      	mov	r1, r7
 80083fc:	f7f8 fafc 	bl	80009f8 <__aeabi_dcmpgt>
 8008400:	2800      	cmp	r0, #0
 8008402:	d163      	bne.n	80084cc <_dtoa_r+0x6d4>
 8008404:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008408:	2000      	movs	r0, #0
 800840a:	49a8      	ldr	r1, [pc, #672]	; (80086ac <_dtoa_r+0x8b4>)
 800840c:	f7f7 feac 	bl	8000168 <__aeabi_dsub>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4630      	mov	r0, r6
 8008416:	4639      	mov	r1, r7
 8008418:	f7f8 fad0 	bl	80009bc <__aeabi_dcmplt>
 800841c:	2800      	cmp	r0, #0
 800841e:	f43f af1e 	beq.w	800825e <_dtoa_r+0x466>
 8008422:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008424:	1e7b      	subs	r3, r7, #1
 8008426:	9314      	str	r3, [sp, #80]	; 0x50
 8008428:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800842c:	2b30      	cmp	r3, #48	; 0x30
 800842e:	d0f8      	beq.n	8008422 <_dtoa_r+0x62a>
 8008430:	46c3      	mov	fp, r8
 8008432:	e03b      	b.n	80084ac <_dtoa_r+0x6b4>
 8008434:	4b9e      	ldr	r3, [pc, #632]	; (80086b0 <_dtoa_r+0x8b8>)
 8008436:	f7f8 f84f 	bl	80004d8 <__aeabi_dmul>
 800843a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800843e:	e7bc      	b.n	80083ba <_dtoa_r+0x5c2>
 8008440:	9f03      	ldr	r7, [sp, #12]
 8008442:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008446:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800844a:	4640      	mov	r0, r8
 800844c:	4649      	mov	r1, r9
 800844e:	f7f8 f96d 	bl	800072c <__aeabi_ddiv>
 8008452:	f7f8 faf1 	bl	8000a38 <__aeabi_d2iz>
 8008456:	4604      	mov	r4, r0
 8008458:	f7f7 ffd4 	bl	8000404 <__aeabi_i2d>
 800845c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008460:	f7f8 f83a 	bl	80004d8 <__aeabi_dmul>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4640      	mov	r0, r8
 800846a:	4649      	mov	r1, r9
 800846c:	f7f7 fe7c 	bl	8000168 <__aeabi_dsub>
 8008470:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008474:	f807 6b01 	strb.w	r6, [r7], #1
 8008478:	9e03      	ldr	r6, [sp, #12]
 800847a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800847e:	1bbe      	subs	r6, r7, r6
 8008480:	45b4      	cmp	ip, r6
 8008482:	4602      	mov	r2, r0
 8008484:	460b      	mov	r3, r1
 8008486:	d136      	bne.n	80084f6 <_dtoa_r+0x6fe>
 8008488:	f7f7 fe70 	bl	800016c <__adddf3>
 800848c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008490:	4680      	mov	r8, r0
 8008492:	4689      	mov	r9, r1
 8008494:	f7f8 fab0 	bl	80009f8 <__aeabi_dcmpgt>
 8008498:	bb58      	cbnz	r0, 80084f2 <_dtoa_r+0x6fa>
 800849a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800849e:	4640      	mov	r0, r8
 80084a0:	4649      	mov	r1, r9
 80084a2:	f7f8 fa81 	bl	80009a8 <__aeabi_dcmpeq>
 80084a6:	b108      	cbz	r0, 80084ac <_dtoa_r+0x6b4>
 80084a8:	07e3      	lsls	r3, r4, #31
 80084aa:	d422      	bmi.n	80084f2 <_dtoa_r+0x6fa>
 80084ac:	4651      	mov	r1, sl
 80084ae:	4628      	mov	r0, r5
 80084b0:	f000 fbc2 	bl	8008c38 <_Bfree>
 80084b4:	2300      	movs	r3, #0
 80084b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80084b8:	703b      	strb	r3, [r7, #0]
 80084ba:	f10b 0301 	add.w	r3, fp, #1
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f43f ace6 	beq.w	8007e94 <_dtoa_r+0x9c>
 80084c8:	601f      	str	r7, [r3, #0]
 80084ca:	e4e3      	b.n	8007e94 <_dtoa_r+0x9c>
 80084cc:	4627      	mov	r7, r4
 80084ce:	463b      	mov	r3, r7
 80084d0:	461f      	mov	r7, r3
 80084d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084d6:	2a39      	cmp	r2, #57	; 0x39
 80084d8:	d107      	bne.n	80084ea <_dtoa_r+0x6f2>
 80084da:	9a03      	ldr	r2, [sp, #12]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d1f7      	bne.n	80084d0 <_dtoa_r+0x6d8>
 80084e0:	2230      	movs	r2, #48	; 0x30
 80084e2:	9903      	ldr	r1, [sp, #12]
 80084e4:	f108 0801 	add.w	r8, r8, #1
 80084e8:	700a      	strb	r2, [r1, #0]
 80084ea:	781a      	ldrb	r2, [r3, #0]
 80084ec:	3201      	adds	r2, #1
 80084ee:	701a      	strb	r2, [r3, #0]
 80084f0:	e79e      	b.n	8008430 <_dtoa_r+0x638>
 80084f2:	46d8      	mov	r8, fp
 80084f4:	e7eb      	b.n	80084ce <_dtoa_r+0x6d6>
 80084f6:	2200      	movs	r2, #0
 80084f8:	4b6d      	ldr	r3, [pc, #436]	; (80086b0 <_dtoa_r+0x8b8>)
 80084fa:	f7f7 ffed 	bl	80004d8 <__aeabi_dmul>
 80084fe:	2200      	movs	r2, #0
 8008500:	2300      	movs	r3, #0
 8008502:	4680      	mov	r8, r0
 8008504:	4689      	mov	r9, r1
 8008506:	f7f8 fa4f 	bl	80009a8 <__aeabi_dcmpeq>
 800850a:	2800      	cmp	r0, #0
 800850c:	d09b      	beq.n	8008446 <_dtoa_r+0x64e>
 800850e:	e7cd      	b.n	80084ac <_dtoa_r+0x6b4>
 8008510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008512:	2a00      	cmp	r2, #0
 8008514:	f000 80c4 	beq.w	80086a0 <_dtoa_r+0x8a8>
 8008518:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800851a:	2a01      	cmp	r2, #1
 800851c:	f300 80a8 	bgt.w	8008670 <_dtoa_r+0x878>
 8008520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008522:	2a00      	cmp	r2, #0
 8008524:	f000 80a0 	beq.w	8008668 <_dtoa_r+0x870>
 8008528:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800852c:	464f      	mov	r7, r9
 800852e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008532:	2101      	movs	r1, #1
 8008534:	441a      	add	r2, r3
 8008536:	4628      	mov	r0, r5
 8008538:	4499      	add	r9, r3
 800853a:	9209      	str	r2, [sp, #36]	; 0x24
 800853c:	f000 fc32 	bl	8008da4 <__i2b>
 8008540:	4606      	mov	r6, r0
 8008542:	b15f      	cbz	r7, 800855c <_dtoa_r+0x764>
 8008544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008546:	2b00      	cmp	r3, #0
 8008548:	dd08      	ble.n	800855c <_dtoa_r+0x764>
 800854a:	42bb      	cmp	r3, r7
 800854c:	bfa8      	it	ge
 800854e:	463b      	movge	r3, r7
 8008550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008552:	eba9 0903 	sub.w	r9, r9, r3
 8008556:	1aff      	subs	r7, r7, r3
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	9309      	str	r3, [sp, #36]	; 0x24
 800855c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855e:	b1f3      	cbz	r3, 800859e <_dtoa_r+0x7a6>
 8008560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 80a0 	beq.w	80086a8 <_dtoa_r+0x8b0>
 8008568:	2c00      	cmp	r4, #0
 800856a:	dd10      	ble.n	800858e <_dtoa_r+0x796>
 800856c:	4631      	mov	r1, r6
 800856e:	4622      	mov	r2, r4
 8008570:	4628      	mov	r0, r5
 8008572:	f000 fcd5 	bl	8008f20 <__pow5mult>
 8008576:	4652      	mov	r2, sl
 8008578:	4601      	mov	r1, r0
 800857a:	4606      	mov	r6, r0
 800857c:	4628      	mov	r0, r5
 800857e:	f000 fc27 	bl	8008dd0 <__multiply>
 8008582:	4680      	mov	r8, r0
 8008584:	4651      	mov	r1, sl
 8008586:	4628      	mov	r0, r5
 8008588:	f000 fb56 	bl	8008c38 <_Bfree>
 800858c:	46c2      	mov	sl, r8
 800858e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008590:	1b1a      	subs	r2, r3, r4
 8008592:	d004      	beq.n	800859e <_dtoa_r+0x7a6>
 8008594:	4651      	mov	r1, sl
 8008596:	4628      	mov	r0, r5
 8008598:	f000 fcc2 	bl	8008f20 <__pow5mult>
 800859c:	4682      	mov	sl, r0
 800859e:	2101      	movs	r1, #1
 80085a0:	4628      	mov	r0, r5
 80085a2:	f000 fbff 	bl	8008da4 <__i2b>
 80085a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085a8:	4604      	mov	r4, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f340 8082 	ble.w	80086b4 <_dtoa_r+0x8bc>
 80085b0:	461a      	mov	r2, r3
 80085b2:	4601      	mov	r1, r0
 80085b4:	4628      	mov	r0, r5
 80085b6:	f000 fcb3 	bl	8008f20 <__pow5mult>
 80085ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085bc:	4604      	mov	r4, r0
 80085be:	2b01      	cmp	r3, #1
 80085c0:	dd7b      	ble.n	80086ba <_dtoa_r+0x8c2>
 80085c2:	f04f 0800 	mov.w	r8, #0
 80085c6:	6923      	ldr	r3, [r4, #16]
 80085c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085cc:	6918      	ldr	r0, [r3, #16]
 80085ce:	f000 fb9b 	bl	8008d08 <__hi0bits>
 80085d2:	f1c0 0020 	rsb	r0, r0, #32
 80085d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d8:	4418      	add	r0, r3
 80085da:	f010 001f 	ands.w	r0, r0, #31
 80085de:	f000 8092 	beq.w	8008706 <_dtoa_r+0x90e>
 80085e2:	f1c0 0320 	rsb	r3, r0, #32
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	f340 8085 	ble.w	80086f6 <_dtoa_r+0x8fe>
 80085ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ee:	f1c0 001c 	rsb	r0, r0, #28
 80085f2:	4403      	add	r3, r0
 80085f4:	4481      	add	r9, r0
 80085f6:	4407      	add	r7, r0
 80085f8:	9309      	str	r3, [sp, #36]	; 0x24
 80085fa:	f1b9 0f00 	cmp.w	r9, #0
 80085fe:	dd05      	ble.n	800860c <_dtoa_r+0x814>
 8008600:	4651      	mov	r1, sl
 8008602:	464a      	mov	r2, r9
 8008604:	4628      	mov	r0, r5
 8008606:	f000 fce5 	bl	8008fd4 <__lshift>
 800860a:	4682      	mov	sl, r0
 800860c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860e:	2b00      	cmp	r3, #0
 8008610:	dd05      	ble.n	800861e <_dtoa_r+0x826>
 8008612:	4621      	mov	r1, r4
 8008614:	461a      	mov	r2, r3
 8008616:	4628      	mov	r0, r5
 8008618:	f000 fcdc 	bl	8008fd4 <__lshift>
 800861c:	4604      	mov	r4, r0
 800861e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008620:	2b00      	cmp	r3, #0
 8008622:	d072      	beq.n	800870a <_dtoa_r+0x912>
 8008624:	4621      	mov	r1, r4
 8008626:	4650      	mov	r0, sl
 8008628:	f000 fd40 	bl	80090ac <__mcmp>
 800862c:	2800      	cmp	r0, #0
 800862e:	da6c      	bge.n	800870a <_dtoa_r+0x912>
 8008630:	2300      	movs	r3, #0
 8008632:	4651      	mov	r1, sl
 8008634:	220a      	movs	r2, #10
 8008636:	4628      	mov	r0, r5
 8008638:	f000 fb20 	bl	8008c7c <__multadd>
 800863c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800863e:	4682      	mov	sl, r0
 8008640:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 81ac 	beq.w	80089a2 <_dtoa_r+0xbaa>
 800864a:	2300      	movs	r3, #0
 800864c:	4631      	mov	r1, r6
 800864e:	220a      	movs	r2, #10
 8008650:	4628      	mov	r0, r5
 8008652:	f000 fb13 	bl	8008c7c <__multadd>
 8008656:	9b06      	ldr	r3, [sp, #24]
 8008658:	4606      	mov	r6, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	f300 8093 	bgt.w	8008786 <_dtoa_r+0x98e>
 8008660:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008662:	2b02      	cmp	r3, #2
 8008664:	dc59      	bgt.n	800871a <_dtoa_r+0x922>
 8008666:	e08e      	b.n	8008786 <_dtoa_r+0x98e>
 8008668:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800866a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800866e:	e75d      	b.n	800852c <_dtoa_r+0x734>
 8008670:	9b08      	ldr	r3, [sp, #32]
 8008672:	1e5c      	subs	r4, r3, #1
 8008674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008676:	42a3      	cmp	r3, r4
 8008678:	bfbf      	itttt	lt
 800867a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800867c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800867e:	1ae3      	sublt	r3, r4, r3
 8008680:	18d2      	addlt	r2, r2, r3
 8008682:	bfa8      	it	ge
 8008684:	1b1c      	subge	r4, r3, r4
 8008686:	9b08      	ldr	r3, [sp, #32]
 8008688:	bfbe      	ittt	lt
 800868a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800868c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800868e:	2400      	movlt	r4, #0
 8008690:	2b00      	cmp	r3, #0
 8008692:	bfb5      	itete	lt
 8008694:	eba9 0703 	sublt.w	r7, r9, r3
 8008698:	464f      	movge	r7, r9
 800869a:	2300      	movlt	r3, #0
 800869c:	9b08      	ldrge	r3, [sp, #32]
 800869e:	e747      	b.n	8008530 <_dtoa_r+0x738>
 80086a0:	464f      	mov	r7, r9
 80086a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80086a6:	e74c      	b.n	8008542 <_dtoa_r+0x74a>
 80086a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086aa:	e773      	b.n	8008594 <_dtoa_r+0x79c>
 80086ac:	3fe00000 	.word	0x3fe00000
 80086b0:	40240000 	.word	0x40240000
 80086b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	dc18      	bgt.n	80086ec <_dtoa_r+0x8f4>
 80086ba:	9b04      	ldr	r3, [sp, #16]
 80086bc:	b9b3      	cbnz	r3, 80086ec <_dtoa_r+0x8f4>
 80086be:	9b05      	ldr	r3, [sp, #20]
 80086c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086c4:	b993      	cbnz	r3, 80086ec <_dtoa_r+0x8f4>
 80086c6:	9b05      	ldr	r3, [sp, #20]
 80086c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086cc:	0d1b      	lsrs	r3, r3, #20
 80086ce:	051b      	lsls	r3, r3, #20
 80086d0:	b17b      	cbz	r3, 80086f2 <_dtoa_r+0x8fa>
 80086d2:	f04f 0801 	mov.w	r8, #1
 80086d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d8:	f109 0901 	add.w	r9, r9, #1
 80086dc:	3301      	adds	r3, #1
 80086de:	9309      	str	r3, [sp, #36]	; 0x24
 80086e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f47f af6f 	bne.w	80085c6 <_dtoa_r+0x7ce>
 80086e8:	2001      	movs	r0, #1
 80086ea:	e774      	b.n	80085d6 <_dtoa_r+0x7de>
 80086ec:	f04f 0800 	mov.w	r8, #0
 80086f0:	e7f6      	b.n	80086e0 <_dtoa_r+0x8e8>
 80086f2:	4698      	mov	r8, r3
 80086f4:	e7f4      	b.n	80086e0 <_dtoa_r+0x8e8>
 80086f6:	d080      	beq.n	80085fa <_dtoa_r+0x802>
 80086f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086fa:	331c      	adds	r3, #28
 80086fc:	441a      	add	r2, r3
 80086fe:	4499      	add	r9, r3
 8008700:	441f      	add	r7, r3
 8008702:	9209      	str	r2, [sp, #36]	; 0x24
 8008704:	e779      	b.n	80085fa <_dtoa_r+0x802>
 8008706:	4603      	mov	r3, r0
 8008708:	e7f6      	b.n	80086f8 <_dtoa_r+0x900>
 800870a:	9b08      	ldr	r3, [sp, #32]
 800870c:	2b00      	cmp	r3, #0
 800870e:	dc34      	bgt.n	800877a <_dtoa_r+0x982>
 8008710:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008712:	2b02      	cmp	r3, #2
 8008714:	dd31      	ble.n	800877a <_dtoa_r+0x982>
 8008716:	9b08      	ldr	r3, [sp, #32]
 8008718:	9306      	str	r3, [sp, #24]
 800871a:	9b06      	ldr	r3, [sp, #24]
 800871c:	b963      	cbnz	r3, 8008738 <_dtoa_r+0x940>
 800871e:	4621      	mov	r1, r4
 8008720:	2205      	movs	r2, #5
 8008722:	4628      	mov	r0, r5
 8008724:	f000 faaa 	bl	8008c7c <__multadd>
 8008728:	4601      	mov	r1, r0
 800872a:	4604      	mov	r4, r0
 800872c:	4650      	mov	r0, sl
 800872e:	f000 fcbd 	bl	80090ac <__mcmp>
 8008732:	2800      	cmp	r0, #0
 8008734:	f73f adbf 	bgt.w	80082b6 <_dtoa_r+0x4be>
 8008738:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800873a:	9f03      	ldr	r7, [sp, #12]
 800873c:	ea6f 0b03 	mvn.w	fp, r3
 8008740:	f04f 0800 	mov.w	r8, #0
 8008744:	4621      	mov	r1, r4
 8008746:	4628      	mov	r0, r5
 8008748:	f000 fa76 	bl	8008c38 <_Bfree>
 800874c:	2e00      	cmp	r6, #0
 800874e:	f43f aead 	beq.w	80084ac <_dtoa_r+0x6b4>
 8008752:	f1b8 0f00 	cmp.w	r8, #0
 8008756:	d005      	beq.n	8008764 <_dtoa_r+0x96c>
 8008758:	45b0      	cmp	r8, r6
 800875a:	d003      	beq.n	8008764 <_dtoa_r+0x96c>
 800875c:	4641      	mov	r1, r8
 800875e:	4628      	mov	r0, r5
 8008760:	f000 fa6a 	bl	8008c38 <_Bfree>
 8008764:	4631      	mov	r1, r6
 8008766:	4628      	mov	r0, r5
 8008768:	f000 fa66 	bl	8008c38 <_Bfree>
 800876c:	e69e      	b.n	80084ac <_dtoa_r+0x6b4>
 800876e:	2400      	movs	r4, #0
 8008770:	4626      	mov	r6, r4
 8008772:	e7e1      	b.n	8008738 <_dtoa_r+0x940>
 8008774:	46c3      	mov	fp, r8
 8008776:	4626      	mov	r6, r4
 8008778:	e59d      	b.n	80082b6 <_dtoa_r+0x4be>
 800877a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 80c8 	beq.w	8008912 <_dtoa_r+0xb1a>
 8008782:	9b08      	ldr	r3, [sp, #32]
 8008784:	9306      	str	r3, [sp, #24]
 8008786:	2f00      	cmp	r7, #0
 8008788:	dd05      	ble.n	8008796 <_dtoa_r+0x99e>
 800878a:	4631      	mov	r1, r6
 800878c:	463a      	mov	r2, r7
 800878e:	4628      	mov	r0, r5
 8008790:	f000 fc20 	bl	8008fd4 <__lshift>
 8008794:	4606      	mov	r6, r0
 8008796:	f1b8 0f00 	cmp.w	r8, #0
 800879a:	d05b      	beq.n	8008854 <_dtoa_r+0xa5c>
 800879c:	4628      	mov	r0, r5
 800879e:	6871      	ldr	r1, [r6, #4]
 80087a0:	f000 fa0a 	bl	8008bb8 <_Balloc>
 80087a4:	4607      	mov	r7, r0
 80087a6:	b928      	cbnz	r0, 80087b4 <_dtoa_r+0x9bc>
 80087a8:	4602      	mov	r2, r0
 80087aa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80087ae:	4b81      	ldr	r3, [pc, #516]	; (80089b4 <_dtoa_r+0xbbc>)
 80087b0:	f7ff bb36 	b.w	8007e20 <_dtoa_r+0x28>
 80087b4:	6932      	ldr	r2, [r6, #16]
 80087b6:	f106 010c 	add.w	r1, r6, #12
 80087ba:	3202      	adds	r2, #2
 80087bc:	0092      	lsls	r2, r2, #2
 80087be:	300c      	adds	r0, #12
 80087c0:	f7ff fa83 	bl	8007cca <memcpy>
 80087c4:	2201      	movs	r2, #1
 80087c6:	4639      	mov	r1, r7
 80087c8:	4628      	mov	r0, r5
 80087ca:	f000 fc03 	bl	8008fd4 <__lshift>
 80087ce:	46b0      	mov	r8, r6
 80087d0:	4606      	mov	r6, r0
 80087d2:	9b03      	ldr	r3, [sp, #12]
 80087d4:	9a03      	ldr	r2, [sp, #12]
 80087d6:	3301      	adds	r3, #1
 80087d8:	9308      	str	r3, [sp, #32]
 80087da:	9b06      	ldr	r3, [sp, #24]
 80087dc:	4413      	add	r3, r2
 80087de:	930b      	str	r3, [sp, #44]	; 0x2c
 80087e0:	9b04      	ldr	r3, [sp, #16]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	930a      	str	r3, [sp, #40]	; 0x28
 80087e8:	9b08      	ldr	r3, [sp, #32]
 80087ea:	4621      	mov	r1, r4
 80087ec:	3b01      	subs	r3, #1
 80087ee:	4650      	mov	r0, sl
 80087f0:	9304      	str	r3, [sp, #16]
 80087f2:	f7ff fa78 	bl	8007ce6 <quorem>
 80087f6:	4641      	mov	r1, r8
 80087f8:	9006      	str	r0, [sp, #24]
 80087fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80087fe:	4650      	mov	r0, sl
 8008800:	f000 fc54 	bl	80090ac <__mcmp>
 8008804:	4632      	mov	r2, r6
 8008806:	9009      	str	r0, [sp, #36]	; 0x24
 8008808:	4621      	mov	r1, r4
 800880a:	4628      	mov	r0, r5
 800880c:	f000 fc6a 	bl	80090e4 <__mdiff>
 8008810:	68c2      	ldr	r2, [r0, #12]
 8008812:	4607      	mov	r7, r0
 8008814:	bb02      	cbnz	r2, 8008858 <_dtoa_r+0xa60>
 8008816:	4601      	mov	r1, r0
 8008818:	4650      	mov	r0, sl
 800881a:	f000 fc47 	bl	80090ac <__mcmp>
 800881e:	4602      	mov	r2, r0
 8008820:	4639      	mov	r1, r7
 8008822:	4628      	mov	r0, r5
 8008824:	920c      	str	r2, [sp, #48]	; 0x30
 8008826:	f000 fa07 	bl	8008c38 <_Bfree>
 800882a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800882c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800882e:	9f08      	ldr	r7, [sp, #32]
 8008830:	ea43 0102 	orr.w	r1, r3, r2
 8008834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008836:	4319      	orrs	r1, r3
 8008838:	d110      	bne.n	800885c <_dtoa_r+0xa64>
 800883a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800883e:	d029      	beq.n	8008894 <_dtoa_r+0xa9c>
 8008840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008842:	2b00      	cmp	r3, #0
 8008844:	dd02      	ble.n	800884c <_dtoa_r+0xa54>
 8008846:	9b06      	ldr	r3, [sp, #24]
 8008848:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800884c:	9b04      	ldr	r3, [sp, #16]
 800884e:	f883 9000 	strb.w	r9, [r3]
 8008852:	e777      	b.n	8008744 <_dtoa_r+0x94c>
 8008854:	4630      	mov	r0, r6
 8008856:	e7ba      	b.n	80087ce <_dtoa_r+0x9d6>
 8008858:	2201      	movs	r2, #1
 800885a:	e7e1      	b.n	8008820 <_dtoa_r+0xa28>
 800885c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800885e:	2b00      	cmp	r3, #0
 8008860:	db04      	blt.n	800886c <_dtoa_r+0xa74>
 8008862:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008864:	430b      	orrs	r3, r1
 8008866:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008868:	430b      	orrs	r3, r1
 800886a:	d120      	bne.n	80088ae <_dtoa_r+0xab6>
 800886c:	2a00      	cmp	r2, #0
 800886e:	dded      	ble.n	800884c <_dtoa_r+0xa54>
 8008870:	4651      	mov	r1, sl
 8008872:	2201      	movs	r2, #1
 8008874:	4628      	mov	r0, r5
 8008876:	f000 fbad 	bl	8008fd4 <__lshift>
 800887a:	4621      	mov	r1, r4
 800887c:	4682      	mov	sl, r0
 800887e:	f000 fc15 	bl	80090ac <__mcmp>
 8008882:	2800      	cmp	r0, #0
 8008884:	dc03      	bgt.n	800888e <_dtoa_r+0xa96>
 8008886:	d1e1      	bne.n	800884c <_dtoa_r+0xa54>
 8008888:	f019 0f01 	tst.w	r9, #1
 800888c:	d0de      	beq.n	800884c <_dtoa_r+0xa54>
 800888e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008892:	d1d8      	bne.n	8008846 <_dtoa_r+0xa4e>
 8008894:	2339      	movs	r3, #57	; 0x39
 8008896:	9a04      	ldr	r2, [sp, #16]
 8008898:	7013      	strb	r3, [r2, #0]
 800889a:	463b      	mov	r3, r7
 800889c:	461f      	mov	r7, r3
 800889e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	2a39      	cmp	r2, #57	; 0x39
 80088a6:	d06b      	beq.n	8008980 <_dtoa_r+0xb88>
 80088a8:	3201      	adds	r2, #1
 80088aa:	701a      	strb	r2, [r3, #0]
 80088ac:	e74a      	b.n	8008744 <_dtoa_r+0x94c>
 80088ae:	2a00      	cmp	r2, #0
 80088b0:	dd07      	ble.n	80088c2 <_dtoa_r+0xaca>
 80088b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80088b6:	d0ed      	beq.n	8008894 <_dtoa_r+0xa9c>
 80088b8:	9a04      	ldr	r2, [sp, #16]
 80088ba:	f109 0301 	add.w	r3, r9, #1
 80088be:	7013      	strb	r3, [r2, #0]
 80088c0:	e740      	b.n	8008744 <_dtoa_r+0x94c>
 80088c2:	9b08      	ldr	r3, [sp, #32]
 80088c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088c6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d042      	beq.n	8008954 <_dtoa_r+0xb5c>
 80088ce:	4651      	mov	r1, sl
 80088d0:	2300      	movs	r3, #0
 80088d2:	220a      	movs	r2, #10
 80088d4:	4628      	mov	r0, r5
 80088d6:	f000 f9d1 	bl	8008c7c <__multadd>
 80088da:	45b0      	cmp	r8, r6
 80088dc:	4682      	mov	sl, r0
 80088de:	f04f 0300 	mov.w	r3, #0
 80088e2:	f04f 020a 	mov.w	r2, #10
 80088e6:	4641      	mov	r1, r8
 80088e8:	4628      	mov	r0, r5
 80088ea:	d107      	bne.n	80088fc <_dtoa_r+0xb04>
 80088ec:	f000 f9c6 	bl	8008c7c <__multadd>
 80088f0:	4680      	mov	r8, r0
 80088f2:	4606      	mov	r6, r0
 80088f4:	9b08      	ldr	r3, [sp, #32]
 80088f6:	3301      	adds	r3, #1
 80088f8:	9308      	str	r3, [sp, #32]
 80088fa:	e775      	b.n	80087e8 <_dtoa_r+0x9f0>
 80088fc:	f000 f9be 	bl	8008c7c <__multadd>
 8008900:	4631      	mov	r1, r6
 8008902:	4680      	mov	r8, r0
 8008904:	2300      	movs	r3, #0
 8008906:	220a      	movs	r2, #10
 8008908:	4628      	mov	r0, r5
 800890a:	f000 f9b7 	bl	8008c7c <__multadd>
 800890e:	4606      	mov	r6, r0
 8008910:	e7f0      	b.n	80088f4 <_dtoa_r+0xafc>
 8008912:	9b08      	ldr	r3, [sp, #32]
 8008914:	9306      	str	r3, [sp, #24]
 8008916:	9f03      	ldr	r7, [sp, #12]
 8008918:	4621      	mov	r1, r4
 800891a:	4650      	mov	r0, sl
 800891c:	f7ff f9e3 	bl	8007ce6 <quorem>
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008926:	f807 9b01 	strb.w	r9, [r7], #1
 800892a:	1afa      	subs	r2, r7, r3
 800892c:	9b06      	ldr	r3, [sp, #24]
 800892e:	4293      	cmp	r3, r2
 8008930:	dd07      	ble.n	8008942 <_dtoa_r+0xb4a>
 8008932:	4651      	mov	r1, sl
 8008934:	2300      	movs	r3, #0
 8008936:	220a      	movs	r2, #10
 8008938:	4628      	mov	r0, r5
 800893a:	f000 f99f 	bl	8008c7c <__multadd>
 800893e:	4682      	mov	sl, r0
 8008940:	e7ea      	b.n	8008918 <_dtoa_r+0xb20>
 8008942:	9b06      	ldr	r3, [sp, #24]
 8008944:	f04f 0800 	mov.w	r8, #0
 8008948:	2b00      	cmp	r3, #0
 800894a:	bfcc      	ite	gt
 800894c:	461f      	movgt	r7, r3
 800894e:	2701      	movle	r7, #1
 8008950:	9b03      	ldr	r3, [sp, #12]
 8008952:	441f      	add	r7, r3
 8008954:	4651      	mov	r1, sl
 8008956:	2201      	movs	r2, #1
 8008958:	4628      	mov	r0, r5
 800895a:	f000 fb3b 	bl	8008fd4 <__lshift>
 800895e:	4621      	mov	r1, r4
 8008960:	4682      	mov	sl, r0
 8008962:	f000 fba3 	bl	80090ac <__mcmp>
 8008966:	2800      	cmp	r0, #0
 8008968:	dc97      	bgt.n	800889a <_dtoa_r+0xaa2>
 800896a:	d102      	bne.n	8008972 <_dtoa_r+0xb7a>
 800896c:	f019 0f01 	tst.w	r9, #1
 8008970:	d193      	bne.n	800889a <_dtoa_r+0xaa2>
 8008972:	463b      	mov	r3, r7
 8008974:	461f      	mov	r7, r3
 8008976:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800897a:	2a30      	cmp	r2, #48	; 0x30
 800897c:	d0fa      	beq.n	8008974 <_dtoa_r+0xb7c>
 800897e:	e6e1      	b.n	8008744 <_dtoa_r+0x94c>
 8008980:	9a03      	ldr	r2, [sp, #12]
 8008982:	429a      	cmp	r2, r3
 8008984:	d18a      	bne.n	800889c <_dtoa_r+0xaa4>
 8008986:	2331      	movs	r3, #49	; 0x31
 8008988:	f10b 0b01 	add.w	fp, fp, #1
 800898c:	e797      	b.n	80088be <_dtoa_r+0xac6>
 800898e:	4b0a      	ldr	r3, [pc, #40]	; (80089b8 <_dtoa_r+0xbc0>)
 8008990:	f7ff ba9f 	b.w	8007ed2 <_dtoa_r+0xda>
 8008994:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008996:	2b00      	cmp	r3, #0
 8008998:	f47f aa77 	bne.w	8007e8a <_dtoa_r+0x92>
 800899c:	4b07      	ldr	r3, [pc, #28]	; (80089bc <_dtoa_r+0xbc4>)
 800899e:	f7ff ba98 	b.w	8007ed2 <_dtoa_r+0xda>
 80089a2:	9b06      	ldr	r3, [sp, #24]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	dcb6      	bgt.n	8008916 <_dtoa_r+0xb1e>
 80089a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	f73f aeb5 	bgt.w	800871a <_dtoa_r+0x922>
 80089b0:	e7b1      	b.n	8008916 <_dtoa_r+0xb1e>
 80089b2:	bf00      	nop
 80089b4:	08009f12 	.word	0x08009f12
 80089b8:	08009e72 	.word	0x08009e72
 80089bc:	08009e96 	.word	0x08009e96

080089c0 <_free_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4605      	mov	r5, r0
 80089c4:	2900      	cmp	r1, #0
 80089c6:	d040      	beq.n	8008a4a <_free_r+0x8a>
 80089c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089cc:	1f0c      	subs	r4, r1, #4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bfb8      	it	lt
 80089d2:	18e4      	addlt	r4, r4, r3
 80089d4:	f000 f8e4 	bl	8008ba0 <__malloc_lock>
 80089d8:	4a1c      	ldr	r2, [pc, #112]	; (8008a4c <_free_r+0x8c>)
 80089da:	6813      	ldr	r3, [r2, #0]
 80089dc:	b933      	cbnz	r3, 80089ec <_free_r+0x2c>
 80089de:	6063      	str	r3, [r4, #4]
 80089e0:	6014      	str	r4, [r2, #0]
 80089e2:	4628      	mov	r0, r5
 80089e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e8:	f000 b8e0 	b.w	8008bac <__malloc_unlock>
 80089ec:	42a3      	cmp	r3, r4
 80089ee:	d908      	bls.n	8008a02 <_free_r+0x42>
 80089f0:	6820      	ldr	r0, [r4, #0]
 80089f2:	1821      	adds	r1, r4, r0
 80089f4:	428b      	cmp	r3, r1
 80089f6:	bf01      	itttt	eq
 80089f8:	6819      	ldreq	r1, [r3, #0]
 80089fa:	685b      	ldreq	r3, [r3, #4]
 80089fc:	1809      	addeq	r1, r1, r0
 80089fe:	6021      	streq	r1, [r4, #0]
 8008a00:	e7ed      	b.n	80089de <_free_r+0x1e>
 8008a02:	461a      	mov	r2, r3
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	b10b      	cbz	r3, 8008a0c <_free_r+0x4c>
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	d9fa      	bls.n	8008a02 <_free_r+0x42>
 8008a0c:	6811      	ldr	r1, [r2, #0]
 8008a0e:	1850      	adds	r0, r2, r1
 8008a10:	42a0      	cmp	r0, r4
 8008a12:	d10b      	bne.n	8008a2c <_free_r+0x6c>
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	4401      	add	r1, r0
 8008a18:	1850      	adds	r0, r2, r1
 8008a1a:	4283      	cmp	r3, r0
 8008a1c:	6011      	str	r1, [r2, #0]
 8008a1e:	d1e0      	bne.n	80089e2 <_free_r+0x22>
 8008a20:	6818      	ldr	r0, [r3, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	4408      	add	r0, r1
 8008a26:	6010      	str	r0, [r2, #0]
 8008a28:	6053      	str	r3, [r2, #4]
 8008a2a:	e7da      	b.n	80089e2 <_free_r+0x22>
 8008a2c:	d902      	bls.n	8008a34 <_free_r+0x74>
 8008a2e:	230c      	movs	r3, #12
 8008a30:	602b      	str	r3, [r5, #0]
 8008a32:	e7d6      	b.n	80089e2 <_free_r+0x22>
 8008a34:	6820      	ldr	r0, [r4, #0]
 8008a36:	1821      	adds	r1, r4, r0
 8008a38:	428b      	cmp	r3, r1
 8008a3a:	bf01      	itttt	eq
 8008a3c:	6819      	ldreq	r1, [r3, #0]
 8008a3e:	685b      	ldreq	r3, [r3, #4]
 8008a40:	1809      	addeq	r1, r1, r0
 8008a42:	6021      	streq	r1, [r4, #0]
 8008a44:	6063      	str	r3, [r4, #4]
 8008a46:	6054      	str	r4, [r2, #4]
 8008a48:	e7cb      	b.n	80089e2 <_free_r+0x22>
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	200014e4 	.word	0x200014e4

08008a50 <malloc>:
 8008a50:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <malloc+0xc>)
 8008a52:	4601      	mov	r1, r0
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	f000 b823 	b.w	8008aa0 <_malloc_r>
 8008a5a:	bf00      	nop
 8008a5c:	20000068 	.word	0x20000068

08008a60 <sbrk_aligned>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	4e0e      	ldr	r6, [pc, #56]	; (8008a9c <sbrk_aligned+0x3c>)
 8008a64:	460c      	mov	r4, r1
 8008a66:	6831      	ldr	r1, [r6, #0]
 8008a68:	4605      	mov	r5, r0
 8008a6a:	b911      	cbnz	r1, 8008a72 <sbrk_aligned+0x12>
 8008a6c:	f000 fe38 	bl	80096e0 <_sbrk_r>
 8008a70:	6030      	str	r0, [r6, #0]
 8008a72:	4621      	mov	r1, r4
 8008a74:	4628      	mov	r0, r5
 8008a76:	f000 fe33 	bl	80096e0 <_sbrk_r>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	d00a      	beq.n	8008a94 <sbrk_aligned+0x34>
 8008a7e:	1cc4      	adds	r4, r0, #3
 8008a80:	f024 0403 	bic.w	r4, r4, #3
 8008a84:	42a0      	cmp	r0, r4
 8008a86:	d007      	beq.n	8008a98 <sbrk_aligned+0x38>
 8008a88:	1a21      	subs	r1, r4, r0
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f000 fe28 	bl	80096e0 <_sbrk_r>
 8008a90:	3001      	adds	r0, #1
 8008a92:	d101      	bne.n	8008a98 <sbrk_aligned+0x38>
 8008a94:	f04f 34ff 	mov.w	r4, #4294967295
 8008a98:	4620      	mov	r0, r4
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	200014e8 	.word	0x200014e8

08008aa0 <_malloc_r>:
 8008aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa4:	1ccd      	adds	r5, r1, #3
 8008aa6:	f025 0503 	bic.w	r5, r5, #3
 8008aaa:	3508      	adds	r5, #8
 8008aac:	2d0c      	cmp	r5, #12
 8008aae:	bf38      	it	cc
 8008ab0:	250c      	movcc	r5, #12
 8008ab2:	2d00      	cmp	r5, #0
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	db01      	blt.n	8008abc <_malloc_r+0x1c>
 8008ab8:	42a9      	cmp	r1, r5
 8008aba:	d905      	bls.n	8008ac8 <_malloc_r+0x28>
 8008abc:	230c      	movs	r3, #12
 8008abe:	2600      	movs	r6, #0
 8008ac0:	603b      	str	r3, [r7, #0]
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ac8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b9c <_malloc_r+0xfc>
 8008acc:	f000 f868 	bl	8008ba0 <__malloc_lock>
 8008ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ad4:	461c      	mov	r4, r3
 8008ad6:	bb5c      	cbnz	r4, 8008b30 <_malloc_r+0x90>
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4638      	mov	r0, r7
 8008adc:	f7ff ffc0 	bl	8008a60 <sbrk_aligned>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	d155      	bne.n	8008b92 <_malloc_r+0xf2>
 8008ae6:	f8d8 4000 	ldr.w	r4, [r8]
 8008aea:	4626      	mov	r6, r4
 8008aec:	2e00      	cmp	r6, #0
 8008aee:	d145      	bne.n	8008b7c <_malloc_r+0xdc>
 8008af0:	2c00      	cmp	r4, #0
 8008af2:	d048      	beq.n	8008b86 <_malloc_r+0xe6>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	4631      	mov	r1, r6
 8008af8:	4638      	mov	r0, r7
 8008afa:	eb04 0903 	add.w	r9, r4, r3
 8008afe:	f000 fdef 	bl	80096e0 <_sbrk_r>
 8008b02:	4581      	cmp	r9, r0
 8008b04:	d13f      	bne.n	8008b86 <_malloc_r+0xe6>
 8008b06:	6821      	ldr	r1, [r4, #0]
 8008b08:	4638      	mov	r0, r7
 8008b0a:	1a6d      	subs	r5, r5, r1
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	f7ff ffa7 	bl	8008a60 <sbrk_aligned>
 8008b12:	3001      	adds	r0, #1
 8008b14:	d037      	beq.n	8008b86 <_malloc_r+0xe6>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	442b      	add	r3, r5
 8008b1a:	6023      	str	r3, [r4, #0]
 8008b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d038      	beq.n	8008b96 <_malloc_r+0xf6>
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	42a2      	cmp	r2, r4
 8008b28:	d12b      	bne.n	8008b82 <_malloc_r+0xe2>
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	605a      	str	r2, [r3, #4]
 8008b2e:	e00f      	b.n	8008b50 <_malloc_r+0xb0>
 8008b30:	6822      	ldr	r2, [r4, #0]
 8008b32:	1b52      	subs	r2, r2, r5
 8008b34:	d41f      	bmi.n	8008b76 <_malloc_r+0xd6>
 8008b36:	2a0b      	cmp	r2, #11
 8008b38:	d917      	bls.n	8008b6a <_malloc_r+0xca>
 8008b3a:	1961      	adds	r1, r4, r5
 8008b3c:	42a3      	cmp	r3, r4
 8008b3e:	6025      	str	r5, [r4, #0]
 8008b40:	bf18      	it	ne
 8008b42:	6059      	strne	r1, [r3, #4]
 8008b44:	6863      	ldr	r3, [r4, #4]
 8008b46:	bf08      	it	eq
 8008b48:	f8c8 1000 	streq.w	r1, [r8]
 8008b4c:	5162      	str	r2, [r4, r5]
 8008b4e:	604b      	str	r3, [r1, #4]
 8008b50:	4638      	mov	r0, r7
 8008b52:	f104 060b 	add.w	r6, r4, #11
 8008b56:	f000 f829 	bl	8008bac <__malloc_unlock>
 8008b5a:	f026 0607 	bic.w	r6, r6, #7
 8008b5e:	1d23      	adds	r3, r4, #4
 8008b60:	1af2      	subs	r2, r6, r3
 8008b62:	d0ae      	beq.n	8008ac2 <_malloc_r+0x22>
 8008b64:	1b9b      	subs	r3, r3, r6
 8008b66:	50a3      	str	r3, [r4, r2]
 8008b68:	e7ab      	b.n	8008ac2 <_malloc_r+0x22>
 8008b6a:	42a3      	cmp	r3, r4
 8008b6c:	6862      	ldr	r2, [r4, #4]
 8008b6e:	d1dd      	bne.n	8008b2c <_malloc_r+0x8c>
 8008b70:	f8c8 2000 	str.w	r2, [r8]
 8008b74:	e7ec      	b.n	8008b50 <_malloc_r+0xb0>
 8008b76:	4623      	mov	r3, r4
 8008b78:	6864      	ldr	r4, [r4, #4]
 8008b7a:	e7ac      	b.n	8008ad6 <_malloc_r+0x36>
 8008b7c:	4634      	mov	r4, r6
 8008b7e:	6876      	ldr	r6, [r6, #4]
 8008b80:	e7b4      	b.n	8008aec <_malloc_r+0x4c>
 8008b82:	4613      	mov	r3, r2
 8008b84:	e7cc      	b.n	8008b20 <_malloc_r+0x80>
 8008b86:	230c      	movs	r3, #12
 8008b88:	4638      	mov	r0, r7
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	f000 f80e 	bl	8008bac <__malloc_unlock>
 8008b90:	e797      	b.n	8008ac2 <_malloc_r+0x22>
 8008b92:	6025      	str	r5, [r4, #0]
 8008b94:	e7dc      	b.n	8008b50 <_malloc_r+0xb0>
 8008b96:	605b      	str	r3, [r3, #4]
 8008b98:	deff      	udf	#255	; 0xff
 8008b9a:	bf00      	nop
 8008b9c:	200014e4 	.word	0x200014e4

08008ba0 <__malloc_lock>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	; (8008ba8 <__malloc_lock+0x8>)
 8008ba2:	f7ff b882 	b.w	8007caa <__retarget_lock_acquire_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	200014e0 	.word	0x200014e0

08008bac <__malloc_unlock>:
 8008bac:	4801      	ldr	r0, [pc, #4]	; (8008bb4 <__malloc_unlock+0x8>)
 8008bae:	f7ff b87d 	b.w	8007cac <__retarget_lock_release_recursive>
 8008bb2:	bf00      	nop
 8008bb4:	200014e0 	.word	0x200014e0

08008bb8 <_Balloc>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	69c6      	ldr	r6, [r0, #28]
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	460d      	mov	r5, r1
 8008bc0:	b976      	cbnz	r6, 8008be0 <_Balloc+0x28>
 8008bc2:	2010      	movs	r0, #16
 8008bc4:	f7ff ff44 	bl	8008a50 <malloc>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	61e0      	str	r0, [r4, #28]
 8008bcc:	b920      	cbnz	r0, 8008bd8 <_Balloc+0x20>
 8008bce:	216b      	movs	r1, #107	; 0x6b
 8008bd0:	4b17      	ldr	r3, [pc, #92]	; (8008c30 <_Balloc+0x78>)
 8008bd2:	4818      	ldr	r0, [pc, #96]	; (8008c34 <_Balloc+0x7c>)
 8008bd4:	f000 fd94 	bl	8009700 <__assert_func>
 8008bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bdc:	6006      	str	r6, [r0, #0]
 8008bde:	60c6      	str	r6, [r0, #12]
 8008be0:	69e6      	ldr	r6, [r4, #28]
 8008be2:	68f3      	ldr	r3, [r6, #12]
 8008be4:	b183      	cbz	r3, 8008c08 <_Balloc+0x50>
 8008be6:	69e3      	ldr	r3, [r4, #28]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bee:	b9b8      	cbnz	r0, 8008c20 <_Balloc+0x68>
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	fa01 f605 	lsl.w	r6, r1, r5
 8008bf6:	1d72      	adds	r2, r6, #5
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	0092      	lsls	r2, r2, #2
 8008bfc:	f000 fd9e 	bl	800973c <_calloc_r>
 8008c00:	b160      	cbz	r0, 8008c1c <_Balloc+0x64>
 8008c02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c06:	e00e      	b.n	8008c26 <_Balloc+0x6e>
 8008c08:	2221      	movs	r2, #33	; 0x21
 8008c0a:	2104      	movs	r1, #4
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f000 fd95 	bl	800973c <_calloc_r>
 8008c12:	69e3      	ldr	r3, [r4, #28]
 8008c14:	60f0      	str	r0, [r6, #12]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e4      	bne.n	8008be6 <_Balloc+0x2e>
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	6802      	ldr	r2, [r0, #0]
 8008c22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c26:	2300      	movs	r3, #0
 8008c28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c2c:	e7f7      	b.n	8008c1e <_Balloc+0x66>
 8008c2e:	bf00      	nop
 8008c30:	08009ea3 	.word	0x08009ea3
 8008c34:	08009f23 	.word	0x08009f23

08008c38 <_Bfree>:
 8008c38:	b570      	push	{r4, r5, r6, lr}
 8008c3a:	69c6      	ldr	r6, [r0, #28]
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	460c      	mov	r4, r1
 8008c40:	b976      	cbnz	r6, 8008c60 <_Bfree+0x28>
 8008c42:	2010      	movs	r0, #16
 8008c44:	f7ff ff04 	bl	8008a50 <malloc>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	61e8      	str	r0, [r5, #28]
 8008c4c:	b920      	cbnz	r0, 8008c58 <_Bfree+0x20>
 8008c4e:	218f      	movs	r1, #143	; 0x8f
 8008c50:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <_Bfree+0x3c>)
 8008c52:	4809      	ldr	r0, [pc, #36]	; (8008c78 <_Bfree+0x40>)
 8008c54:	f000 fd54 	bl	8009700 <__assert_func>
 8008c58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c5c:	6006      	str	r6, [r0, #0]
 8008c5e:	60c6      	str	r6, [r0, #12]
 8008c60:	b13c      	cbz	r4, 8008c72 <_Bfree+0x3a>
 8008c62:	69eb      	ldr	r3, [r5, #28]
 8008c64:	6862      	ldr	r2, [r4, #4]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c6c:	6021      	str	r1, [r4, #0]
 8008c6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	08009ea3 	.word	0x08009ea3
 8008c78:	08009f23 	.word	0x08009f23

08008c7c <__multadd>:
 8008c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c80:	4607      	mov	r7, r0
 8008c82:	460c      	mov	r4, r1
 8008c84:	461e      	mov	r6, r3
 8008c86:	2000      	movs	r0, #0
 8008c88:	690d      	ldr	r5, [r1, #16]
 8008c8a:	f101 0c14 	add.w	ip, r1, #20
 8008c8e:	f8dc 3000 	ldr.w	r3, [ip]
 8008c92:	3001      	adds	r0, #1
 8008c94:	b299      	uxth	r1, r3
 8008c96:	fb02 6101 	mla	r1, r2, r1, r6
 8008c9a:	0c1e      	lsrs	r6, r3, #16
 8008c9c:	0c0b      	lsrs	r3, r1, #16
 8008c9e:	fb02 3306 	mla	r3, r2, r6, r3
 8008ca2:	b289      	uxth	r1, r1
 8008ca4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ca8:	4285      	cmp	r5, r0
 8008caa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cae:	f84c 1b04 	str.w	r1, [ip], #4
 8008cb2:	dcec      	bgt.n	8008c8e <__multadd+0x12>
 8008cb4:	b30e      	cbz	r6, 8008cfa <__multadd+0x7e>
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	42ab      	cmp	r3, r5
 8008cba:	dc19      	bgt.n	8008cf0 <__multadd+0x74>
 8008cbc:	6861      	ldr	r1, [r4, #4]
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	3101      	adds	r1, #1
 8008cc2:	f7ff ff79 	bl	8008bb8 <_Balloc>
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	b928      	cbnz	r0, 8008cd6 <__multadd+0x5a>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	21ba      	movs	r1, #186	; 0xba
 8008cce:	4b0c      	ldr	r3, [pc, #48]	; (8008d00 <__multadd+0x84>)
 8008cd0:	480c      	ldr	r0, [pc, #48]	; (8008d04 <__multadd+0x88>)
 8008cd2:	f000 fd15 	bl	8009700 <__assert_func>
 8008cd6:	6922      	ldr	r2, [r4, #16]
 8008cd8:	f104 010c 	add.w	r1, r4, #12
 8008cdc:	3202      	adds	r2, #2
 8008cde:	0092      	lsls	r2, r2, #2
 8008ce0:	300c      	adds	r0, #12
 8008ce2:	f7fe fff2 	bl	8007cca <memcpy>
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f7ff ffa5 	bl	8008c38 <_Bfree>
 8008cee:	4644      	mov	r4, r8
 8008cf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cf4:	3501      	adds	r5, #1
 8008cf6:	615e      	str	r6, [r3, #20]
 8008cf8:	6125      	str	r5, [r4, #16]
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d00:	08009f12 	.word	0x08009f12
 8008d04:	08009f23 	.word	0x08009f23

08008d08 <__hi0bits>:
 8008d08:	0c02      	lsrs	r2, r0, #16
 8008d0a:	0412      	lsls	r2, r2, #16
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	b9ca      	cbnz	r2, 8008d44 <__hi0bits+0x3c>
 8008d10:	0403      	lsls	r3, r0, #16
 8008d12:	2010      	movs	r0, #16
 8008d14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008d18:	bf04      	itt	eq
 8008d1a:	021b      	lsleq	r3, r3, #8
 8008d1c:	3008      	addeq	r0, #8
 8008d1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008d22:	bf04      	itt	eq
 8008d24:	011b      	lsleq	r3, r3, #4
 8008d26:	3004      	addeq	r0, #4
 8008d28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008d2c:	bf04      	itt	eq
 8008d2e:	009b      	lsleq	r3, r3, #2
 8008d30:	3002      	addeq	r0, #2
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	db05      	blt.n	8008d42 <__hi0bits+0x3a>
 8008d36:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008d3a:	f100 0001 	add.w	r0, r0, #1
 8008d3e:	bf08      	it	eq
 8008d40:	2020      	moveq	r0, #32
 8008d42:	4770      	bx	lr
 8008d44:	2000      	movs	r0, #0
 8008d46:	e7e5      	b.n	8008d14 <__hi0bits+0xc>

08008d48 <__lo0bits>:
 8008d48:	6803      	ldr	r3, [r0, #0]
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	f013 0007 	ands.w	r0, r3, #7
 8008d50:	d00b      	beq.n	8008d6a <__lo0bits+0x22>
 8008d52:	07d9      	lsls	r1, r3, #31
 8008d54:	d421      	bmi.n	8008d9a <__lo0bits+0x52>
 8008d56:	0798      	lsls	r0, r3, #30
 8008d58:	bf49      	itett	mi
 8008d5a:	085b      	lsrmi	r3, r3, #1
 8008d5c:	089b      	lsrpl	r3, r3, #2
 8008d5e:	2001      	movmi	r0, #1
 8008d60:	6013      	strmi	r3, [r2, #0]
 8008d62:	bf5c      	itt	pl
 8008d64:	2002      	movpl	r0, #2
 8008d66:	6013      	strpl	r3, [r2, #0]
 8008d68:	4770      	bx	lr
 8008d6a:	b299      	uxth	r1, r3
 8008d6c:	b909      	cbnz	r1, 8008d72 <__lo0bits+0x2a>
 8008d6e:	2010      	movs	r0, #16
 8008d70:	0c1b      	lsrs	r3, r3, #16
 8008d72:	b2d9      	uxtb	r1, r3
 8008d74:	b909      	cbnz	r1, 8008d7a <__lo0bits+0x32>
 8008d76:	3008      	adds	r0, #8
 8008d78:	0a1b      	lsrs	r3, r3, #8
 8008d7a:	0719      	lsls	r1, r3, #28
 8008d7c:	bf04      	itt	eq
 8008d7e:	091b      	lsreq	r3, r3, #4
 8008d80:	3004      	addeq	r0, #4
 8008d82:	0799      	lsls	r1, r3, #30
 8008d84:	bf04      	itt	eq
 8008d86:	089b      	lsreq	r3, r3, #2
 8008d88:	3002      	addeq	r0, #2
 8008d8a:	07d9      	lsls	r1, r3, #31
 8008d8c:	d403      	bmi.n	8008d96 <__lo0bits+0x4e>
 8008d8e:	085b      	lsrs	r3, r3, #1
 8008d90:	f100 0001 	add.w	r0, r0, #1
 8008d94:	d003      	beq.n	8008d9e <__lo0bits+0x56>
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	4770      	bx	lr
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	4770      	bx	lr
 8008d9e:	2020      	movs	r0, #32
 8008da0:	4770      	bx	lr
	...

08008da4 <__i2b>:
 8008da4:	b510      	push	{r4, lr}
 8008da6:	460c      	mov	r4, r1
 8008da8:	2101      	movs	r1, #1
 8008daa:	f7ff ff05 	bl	8008bb8 <_Balloc>
 8008dae:	4602      	mov	r2, r0
 8008db0:	b928      	cbnz	r0, 8008dbe <__i2b+0x1a>
 8008db2:	f240 1145 	movw	r1, #325	; 0x145
 8008db6:	4b04      	ldr	r3, [pc, #16]	; (8008dc8 <__i2b+0x24>)
 8008db8:	4804      	ldr	r0, [pc, #16]	; (8008dcc <__i2b+0x28>)
 8008dba:	f000 fca1 	bl	8009700 <__assert_func>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	6144      	str	r4, [r0, #20]
 8008dc2:	6103      	str	r3, [r0, #16]
 8008dc4:	bd10      	pop	{r4, pc}
 8008dc6:	bf00      	nop
 8008dc8:	08009f12 	.word	0x08009f12
 8008dcc:	08009f23 	.word	0x08009f23

08008dd0 <__multiply>:
 8008dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	4691      	mov	r9, r2
 8008dd6:	690a      	ldr	r2, [r1, #16]
 8008dd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ddc:	460c      	mov	r4, r1
 8008dde:	429a      	cmp	r2, r3
 8008de0:	bfbe      	ittt	lt
 8008de2:	460b      	movlt	r3, r1
 8008de4:	464c      	movlt	r4, r9
 8008de6:	4699      	movlt	r9, r3
 8008de8:	6927      	ldr	r7, [r4, #16]
 8008dea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008dee:	68a3      	ldr	r3, [r4, #8]
 8008df0:	6861      	ldr	r1, [r4, #4]
 8008df2:	eb07 060a 	add.w	r6, r7, sl
 8008df6:	42b3      	cmp	r3, r6
 8008df8:	b085      	sub	sp, #20
 8008dfa:	bfb8      	it	lt
 8008dfc:	3101      	addlt	r1, #1
 8008dfe:	f7ff fedb 	bl	8008bb8 <_Balloc>
 8008e02:	b930      	cbnz	r0, 8008e12 <__multiply+0x42>
 8008e04:	4602      	mov	r2, r0
 8008e06:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008e0a:	4b43      	ldr	r3, [pc, #268]	; (8008f18 <__multiply+0x148>)
 8008e0c:	4843      	ldr	r0, [pc, #268]	; (8008f1c <__multiply+0x14c>)
 8008e0e:	f000 fc77 	bl	8009700 <__assert_func>
 8008e12:	f100 0514 	add.w	r5, r0, #20
 8008e16:	462b      	mov	r3, r5
 8008e18:	2200      	movs	r2, #0
 8008e1a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e1e:	4543      	cmp	r3, r8
 8008e20:	d321      	bcc.n	8008e66 <__multiply+0x96>
 8008e22:	f104 0314 	add.w	r3, r4, #20
 8008e26:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e2a:	f109 0314 	add.w	r3, r9, #20
 8008e2e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e32:	9202      	str	r2, [sp, #8]
 8008e34:	1b3a      	subs	r2, r7, r4
 8008e36:	3a15      	subs	r2, #21
 8008e38:	f022 0203 	bic.w	r2, r2, #3
 8008e3c:	3204      	adds	r2, #4
 8008e3e:	f104 0115 	add.w	r1, r4, #21
 8008e42:	428f      	cmp	r7, r1
 8008e44:	bf38      	it	cc
 8008e46:	2204      	movcc	r2, #4
 8008e48:	9201      	str	r2, [sp, #4]
 8008e4a:	9a02      	ldr	r2, [sp, #8]
 8008e4c:	9303      	str	r3, [sp, #12]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d80c      	bhi.n	8008e6c <__multiply+0x9c>
 8008e52:	2e00      	cmp	r6, #0
 8008e54:	dd03      	ble.n	8008e5e <__multiply+0x8e>
 8008e56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d05a      	beq.n	8008f14 <__multiply+0x144>
 8008e5e:	6106      	str	r6, [r0, #16]
 8008e60:	b005      	add	sp, #20
 8008e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e66:	f843 2b04 	str.w	r2, [r3], #4
 8008e6a:	e7d8      	b.n	8008e1e <__multiply+0x4e>
 8008e6c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e70:	f1ba 0f00 	cmp.w	sl, #0
 8008e74:	d023      	beq.n	8008ebe <__multiply+0xee>
 8008e76:	46a9      	mov	r9, r5
 8008e78:	f04f 0c00 	mov.w	ip, #0
 8008e7c:	f104 0e14 	add.w	lr, r4, #20
 8008e80:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008e84:	f8d9 1000 	ldr.w	r1, [r9]
 8008e88:	fa1f fb82 	uxth.w	fp, r2
 8008e8c:	b289      	uxth	r1, r1
 8008e8e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008e92:	4461      	add	r1, ip
 8008e94:	f8d9 c000 	ldr.w	ip, [r9]
 8008e98:	0c12      	lsrs	r2, r2, #16
 8008e9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008e9e:	fb0a c202 	mla	r2, sl, r2, ip
 8008ea2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ea6:	b289      	uxth	r1, r1
 8008ea8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008eac:	4577      	cmp	r7, lr
 8008eae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008eb2:	f849 1b04 	str.w	r1, [r9], #4
 8008eb6:	d8e3      	bhi.n	8008e80 <__multiply+0xb0>
 8008eb8:	9a01      	ldr	r2, [sp, #4]
 8008eba:	f845 c002 	str.w	ip, [r5, r2]
 8008ebe:	9a03      	ldr	r2, [sp, #12]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ec6:	f1b9 0f00 	cmp.w	r9, #0
 8008eca:	d021      	beq.n	8008f10 <__multiply+0x140>
 8008ecc:	46ae      	mov	lr, r5
 8008ece:	f04f 0a00 	mov.w	sl, #0
 8008ed2:	6829      	ldr	r1, [r5, #0]
 8008ed4:	f104 0c14 	add.w	ip, r4, #20
 8008ed8:	f8bc b000 	ldrh.w	fp, [ip]
 8008edc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ee0:	b289      	uxth	r1, r1
 8008ee2:	fb09 220b 	mla	r2, r9, fp, r2
 8008ee6:	4452      	add	r2, sl
 8008ee8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008eec:	f84e 1b04 	str.w	r1, [lr], #4
 8008ef0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ef4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ef8:	f8be 1000 	ldrh.w	r1, [lr]
 8008efc:	4567      	cmp	r7, ip
 8008efe:	fb09 110a 	mla	r1, r9, sl, r1
 8008f02:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008f06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f0a:	d8e5      	bhi.n	8008ed8 <__multiply+0x108>
 8008f0c:	9a01      	ldr	r2, [sp, #4]
 8008f0e:	50a9      	str	r1, [r5, r2]
 8008f10:	3504      	adds	r5, #4
 8008f12:	e79a      	b.n	8008e4a <__multiply+0x7a>
 8008f14:	3e01      	subs	r6, #1
 8008f16:	e79c      	b.n	8008e52 <__multiply+0x82>
 8008f18:	08009f12 	.word	0x08009f12
 8008f1c:	08009f23 	.word	0x08009f23

08008f20 <__pow5mult>:
 8008f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f24:	4615      	mov	r5, r2
 8008f26:	f012 0203 	ands.w	r2, r2, #3
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	460f      	mov	r7, r1
 8008f2e:	d007      	beq.n	8008f40 <__pow5mult+0x20>
 8008f30:	4c25      	ldr	r4, [pc, #148]	; (8008fc8 <__pow5mult+0xa8>)
 8008f32:	3a01      	subs	r2, #1
 8008f34:	2300      	movs	r3, #0
 8008f36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f3a:	f7ff fe9f 	bl	8008c7c <__multadd>
 8008f3e:	4607      	mov	r7, r0
 8008f40:	10ad      	asrs	r5, r5, #2
 8008f42:	d03d      	beq.n	8008fc0 <__pow5mult+0xa0>
 8008f44:	69f4      	ldr	r4, [r6, #28]
 8008f46:	b97c      	cbnz	r4, 8008f68 <__pow5mult+0x48>
 8008f48:	2010      	movs	r0, #16
 8008f4a:	f7ff fd81 	bl	8008a50 <malloc>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	61f0      	str	r0, [r6, #28]
 8008f52:	b928      	cbnz	r0, 8008f60 <__pow5mult+0x40>
 8008f54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008f58:	4b1c      	ldr	r3, [pc, #112]	; (8008fcc <__pow5mult+0xac>)
 8008f5a:	481d      	ldr	r0, [pc, #116]	; (8008fd0 <__pow5mult+0xb0>)
 8008f5c:	f000 fbd0 	bl	8009700 <__assert_func>
 8008f60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f64:	6004      	str	r4, [r0, #0]
 8008f66:	60c4      	str	r4, [r0, #12]
 8008f68:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008f6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f70:	b94c      	cbnz	r4, 8008f86 <__pow5mult+0x66>
 8008f72:	f240 2171 	movw	r1, #625	; 0x271
 8008f76:	4630      	mov	r0, r6
 8008f78:	f7ff ff14 	bl	8008da4 <__i2b>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4604      	mov	r4, r0
 8008f80:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f84:	6003      	str	r3, [r0, #0]
 8008f86:	f04f 0900 	mov.w	r9, #0
 8008f8a:	07eb      	lsls	r3, r5, #31
 8008f8c:	d50a      	bpl.n	8008fa4 <__pow5mult+0x84>
 8008f8e:	4639      	mov	r1, r7
 8008f90:	4622      	mov	r2, r4
 8008f92:	4630      	mov	r0, r6
 8008f94:	f7ff ff1c 	bl	8008dd0 <__multiply>
 8008f98:	4680      	mov	r8, r0
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f7ff fe4b 	bl	8008c38 <_Bfree>
 8008fa2:	4647      	mov	r7, r8
 8008fa4:	106d      	asrs	r5, r5, #1
 8008fa6:	d00b      	beq.n	8008fc0 <__pow5mult+0xa0>
 8008fa8:	6820      	ldr	r0, [r4, #0]
 8008faa:	b938      	cbnz	r0, 8008fbc <__pow5mult+0x9c>
 8008fac:	4622      	mov	r2, r4
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f7ff ff0d 	bl	8008dd0 <__multiply>
 8008fb6:	6020      	str	r0, [r4, #0]
 8008fb8:	f8c0 9000 	str.w	r9, [r0]
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	e7e4      	b.n	8008f8a <__pow5mult+0x6a>
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc6:	bf00      	nop
 8008fc8:	0800a070 	.word	0x0800a070
 8008fcc:	08009ea3 	.word	0x08009ea3
 8008fd0:	08009f23 	.word	0x08009f23

08008fd4 <__lshift>:
 8008fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd8:	460c      	mov	r4, r1
 8008fda:	4607      	mov	r7, r0
 8008fdc:	4691      	mov	r9, r2
 8008fde:	6923      	ldr	r3, [r4, #16]
 8008fe0:	6849      	ldr	r1, [r1, #4]
 8008fe2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fec:	f108 0601 	add.w	r6, r8, #1
 8008ff0:	42b3      	cmp	r3, r6
 8008ff2:	db0b      	blt.n	800900c <__lshift+0x38>
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	f7ff fddf 	bl	8008bb8 <_Balloc>
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	b948      	cbnz	r0, 8009012 <__lshift+0x3e>
 8008ffe:	4602      	mov	r2, r0
 8009000:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009004:	4b27      	ldr	r3, [pc, #156]	; (80090a4 <__lshift+0xd0>)
 8009006:	4828      	ldr	r0, [pc, #160]	; (80090a8 <__lshift+0xd4>)
 8009008:	f000 fb7a 	bl	8009700 <__assert_func>
 800900c:	3101      	adds	r1, #1
 800900e:	005b      	lsls	r3, r3, #1
 8009010:	e7ee      	b.n	8008ff0 <__lshift+0x1c>
 8009012:	2300      	movs	r3, #0
 8009014:	f100 0114 	add.w	r1, r0, #20
 8009018:	f100 0210 	add.w	r2, r0, #16
 800901c:	4618      	mov	r0, r3
 800901e:	4553      	cmp	r3, sl
 8009020:	db33      	blt.n	800908a <__lshift+0xb6>
 8009022:	6920      	ldr	r0, [r4, #16]
 8009024:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009028:	f104 0314 	add.w	r3, r4, #20
 800902c:	f019 091f 	ands.w	r9, r9, #31
 8009030:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009034:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009038:	d02b      	beq.n	8009092 <__lshift+0xbe>
 800903a:	468a      	mov	sl, r1
 800903c:	2200      	movs	r2, #0
 800903e:	f1c9 0e20 	rsb	lr, r9, #32
 8009042:	6818      	ldr	r0, [r3, #0]
 8009044:	fa00 f009 	lsl.w	r0, r0, r9
 8009048:	4310      	orrs	r0, r2
 800904a:	f84a 0b04 	str.w	r0, [sl], #4
 800904e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009052:	459c      	cmp	ip, r3
 8009054:	fa22 f20e 	lsr.w	r2, r2, lr
 8009058:	d8f3      	bhi.n	8009042 <__lshift+0x6e>
 800905a:	ebac 0304 	sub.w	r3, ip, r4
 800905e:	3b15      	subs	r3, #21
 8009060:	f023 0303 	bic.w	r3, r3, #3
 8009064:	3304      	adds	r3, #4
 8009066:	f104 0015 	add.w	r0, r4, #21
 800906a:	4584      	cmp	ip, r0
 800906c:	bf38      	it	cc
 800906e:	2304      	movcc	r3, #4
 8009070:	50ca      	str	r2, [r1, r3]
 8009072:	b10a      	cbz	r2, 8009078 <__lshift+0xa4>
 8009074:	f108 0602 	add.w	r6, r8, #2
 8009078:	3e01      	subs	r6, #1
 800907a:	4638      	mov	r0, r7
 800907c:	4621      	mov	r1, r4
 800907e:	612e      	str	r6, [r5, #16]
 8009080:	f7ff fdda 	bl	8008c38 <_Bfree>
 8009084:	4628      	mov	r0, r5
 8009086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800908a:	f842 0f04 	str.w	r0, [r2, #4]!
 800908e:	3301      	adds	r3, #1
 8009090:	e7c5      	b.n	800901e <__lshift+0x4a>
 8009092:	3904      	subs	r1, #4
 8009094:	f853 2b04 	ldr.w	r2, [r3], #4
 8009098:	459c      	cmp	ip, r3
 800909a:	f841 2f04 	str.w	r2, [r1, #4]!
 800909e:	d8f9      	bhi.n	8009094 <__lshift+0xc0>
 80090a0:	e7ea      	b.n	8009078 <__lshift+0xa4>
 80090a2:	bf00      	nop
 80090a4:	08009f12 	.word	0x08009f12
 80090a8:	08009f23 	.word	0x08009f23

080090ac <__mcmp>:
 80090ac:	4603      	mov	r3, r0
 80090ae:	690a      	ldr	r2, [r1, #16]
 80090b0:	6900      	ldr	r0, [r0, #16]
 80090b2:	b530      	push	{r4, r5, lr}
 80090b4:	1a80      	subs	r0, r0, r2
 80090b6:	d10d      	bne.n	80090d4 <__mcmp+0x28>
 80090b8:	3314      	adds	r3, #20
 80090ba:	3114      	adds	r1, #20
 80090bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80090c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80090c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090cc:	4295      	cmp	r5, r2
 80090ce:	d002      	beq.n	80090d6 <__mcmp+0x2a>
 80090d0:	d304      	bcc.n	80090dc <__mcmp+0x30>
 80090d2:	2001      	movs	r0, #1
 80090d4:	bd30      	pop	{r4, r5, pc}
 80090d6:	42a3      	cmp	r3, r4
 80090d8:	d3f4      	bcc.n	80090c4 <__mcmp+0x18>
 80090da:	e7fb      	b.n	80090d4 <__mcmp+0x28>
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
 80090e0:	e7f8      	b.n	80090d4 <__mcmp+0x28>
	...

080090e4 <__mdiff>:
 80090e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	460d      	mov	r5, r1
 80090ea:	4607      	mov	r7, r0
 80090ec:	4611      	mov	r1, r2
 80090ee:	4628      	mov	r0, r5
 80090f0:	4614      	mov	r4, r2
 80090f2:	f7ff ffdb 	bl	80090ac <__mcmp>
 80090f6:	1e06      	subs	r6, r0, #0
 80090f8:	d111      	bne.n	800911e <__mdiff+0x3a>
 80090fa:	4631      	mov	r1, r6
 80090fc:	4638      	mov	r0, r7
 80090fe:	f7ff fd5b 	bl	8008bb8 <_Balloc>
 8009102:	4602      	mov	r2, r0
 8009104:	b928      	cbnz	r0, 8009112 <__mdiff+0x2e>
 8009106:	f240 2137 	movw	r1, #567	; 0x237
 800910a:	4b3a      	ldr	r3, [pc, #232]	; (80091f4 <__mdiff+0x110>)
 800910c:	483a      	ldr	r0, [pc, #232]	; (80091f8 <__mdiff+0x114>)
 800910e:	f000 faf7 	bl	8009700 <__assert_func>
 8009112:	2301      	movs	r3, #1
 8009114:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009118:	4610      	mov	r0, r2
 800911a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911e:	bfa4      	itt	ge
 8009120:	4623      	movge	r3, r4
 8009122:	462c      	movge	r4, r5
 8009124:	4638      	mov	r0, r7
 8009126:	6861      	ldr	r1, [r4, #4]
 8009128:	bfa6      	itte	ge
 800912a:	461d      	movge	r5, r3
 800912c:	2600      	movge	r6, #0
 800912e:	2601      	movlt	r6, #1
 8009130:	f7ff fd42 	bl	8008bb8 <_Balloc>
 8009134:	4602      	mov	r2, r0
 8009136:	b918      	cbnz	r0, 8009140 <__mdiff+0x5c>
 8009138:	f240 2145 	movw	r1, #581	; 0x245
 800913c:	4b2d      	ldr	r3, [pc, #180]	; (80091f4 <__mdiff+0x110>)
 800913e:	e7e5      	b.n	800910c <__mdiff+0x28>
 8009140:	f102 0814 	add.w	r8, r2, #20
 8009144:	46c2      	mov	sl, r8
 8009146:	f04f 0c00 	mov.w	ip, #0
 800914a:	6927      	ldr	r7, [r4, #16]
 800914c:	60c6      	str	r6, [r0, #12]
 800914e:	692e      	ldr	r6, [r5, #16]
 8009150:	f104 0014 	add.w	r0, r4, #20
 8009154:	f105 0914 	add.w	r9, r5, #20
 8009158:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800915c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009160:	3410      	adds	r4, #16
 8009162:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009166:	f859 3b04 	ldr.w	r3, [r9], #4
 800916a:	fa1f f18b 	uxth.w	r1, fp
 800916e:	4461      	add	r1, ip
 8009170:	fa1f fc83 	uxth.w	ip, r3
 8009174:	0c1b      	lsrs	r3, r3, #16
 8009176:	eba1 010c 	sub.w	r1, r1, ip
 800917a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800917e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009182:	b289      	uxth	r1, r1
 8009184:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009188:	454e      	cmp	r6, r9
 800918a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800918e:	f84a 1b04 	str.w	r1, [sl], #4
 8009192:	d8e6      	bhi.n	8009162 <__mdiff+0x7e>
 8009194:	1b73      	subs	r3, r6, r5
 8009196:	3b15      	subs	r3, #21
 8009198:	f023 0303 	bic.w	r3, r3, #3
 800919c:	3515      	adds	r5, #21
 800919e:	3304      	adds	r3, #4
 80091a0:	42ae      	cmp	r6, r5
 80091a2:	bf38      	it	cc
 80091a4:	2304      	movcc	r3, #4
 80091a6:	4418      	add	r0, r3
 80091a8:	4443      	add	r3, r8
 80091aa:	461e      	mov	r6, r3
 80091ac:	4605      	mov	r5, r0
 80091ae:	4575      	cmp	r5, lr
 80091b0:	d30e      	bcc.n	80091d0 <__mdiff+0xec>
 80091b2:	f10e 0103 	add.w	r1, lr, #3
 80091b6:	1a09      	subs	r1, r1, r0
 80091b8:	f021 0103 	bic.w	r1, r1, #3
 80091bc:	3803      	subs	r0, #3
 80091be:	4586      	cmp	lr, r0
 80091c0:	bf38      	it	cc
 80091c2:	2100      	movcc	r1, #0
 80091c4:	440b      	add	r3, r1
 80091c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091ca:	b189      	cbz	r1, 80091f0 <__mdiff+0x10c>
 80091cc:	6117      	str	r7, [r2, #16]
 80091ce:	e7a3      	b.n	8009118 <__mdiff+0x34>
 80091d0:	f855 8b04 	ldr.w	r8, [r5], #4
 80091d4:	fa1f f188 	uxth.w	r1, r8
 80091d8:	4461      	add	r1, ip
 80091da:	140c      	asrs	r4, r1, #16
 80091dc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80091e0:	b289      	uxth	r1, r1
 80091e2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80091e6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80091ea:	f846 1b04 	str.w	r1, [r6], #4
 80091ee:	e7de      	b.n	80091ae <__mdiff+0xca>
 80091f0:	3f01      	subs	r7, #1
 80091f2:	e7e8      	b.n	80091c6 <__mdiff+0xe2>
 80091f4:	08009f12 	.word	0x08009f12
 80091f8:	08009f23 	.word	0x08009f23

080091fc <__d2b>:
 80091fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091fe:	2101      	movs	r1, #1
 8009200:	4617      	mov	r7, r2
 8009202:	461c      	mov	r4, r3
 8009204:	9e08      	ldr	r6, [sp, #32]
 8009206:	f7ff fcd7 	bl	8008bb8 <_Balloc>
 800920a:	4605      	mov	r5, r0
 800920c:	b930      	cbnz	r0, 800921c <__d2b+0x20>
 800920e:	4602      	mov	r2, r0
 8009210:	f240 310f 	movw	r1, #783	; 0x30f
 8009214:	4b22      	ldr	r3, [pc, #136]	; (80092a0 <__d2b+0xa4>)
 8009216:	4823      	ldr	r0, [pc, #140]	; (80092a4 <__d2b+0xa8>)
 8009218:	f000 fa72 	bl	8009700 <__assert_func>
 800921c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009220:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009224:	bb24      	cbnz	r4, 8009270 <__d2b+0x74>
 8009226:	2f00      	cmp	r7, #0
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	d026      	beq.n	800927a <__d2b+0x7e>
 800922c:	4668      	mov	r0, sp
 800922e:	9700      	str	r7, [sp, #0]
 8009230:	f7ff fd8a 	bl	8008d48 <__lo0bits>
 8009234:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009238:	b1e8      	cbz	r0, 8009276 <__d2b+0x7a>
 800923a:	f1c0 0320 	rsb	r3, r0, #32
 800923e:	fa02 f303 	lsl.w	r3, r2, r3
 8009242:	430b      	orrs	r3, r1
 8009244:	40c2      	lsrs	r2, r0
 8009246:	616b      	str	r3, [r5, #20]
 8009248:	9201      	str	r2, [sp, #4]
 800924a:	9b01      	ldr	r3, [sp, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	bf14      	ite	ne
 8009250:	2102      	movne	r1, #2
 8009252:	2101      	moveq	r1, #1
 8009254:	61ab      	str	r3, [r5, #24]
 8009256:	6129      	str	r1, [r5, #16]
 8009258:	b1bc      	cbz	r4, 800928a <__d2b+0x8e>
 800925a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800925e:	4404      	add	r4, r0
 8009260:	6034      	str	r4, [r6, #0]
 8009262:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009268:	6018      	str	r0, [r3, #0]
 800926a:	4628      	mov	r0, r5
 800926c:	b003      	add	sp, #12
 800926e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009274:	e7d7      	b.n	8009226 <__d2b+0x2a>
 8009276:	6169      	str	r1, [r5, #20]
 8009278:	e7e7      	b.n	800924a <__d2b+0x4e>
 800927a:	a801      	add	r0, sp, #4
 800927c:	f7ff fd64 	bl	8008d48 <__lo0bits>
 8009280:	9b01      	ldr	r3, [sp, #4]
 8009282:	2101      	movs	r1, #1
 8009284:	616b      	str	r3, [r5, #20]
 8009286:	3020      	adds	r0, #32
 8009288:	e7e5      	b.n	8009256 <__d2b+0x5a>
 800928a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800928e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8009292:	6030      	str	r0, [r6, #0]
 8009294:	6918      	ldr	r0, [r3, #16]
 8009296:	f7ff fd37 	bl	8008d08 <__hi0bits>
 800929a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800929e:	e7e2      	b.n	8009266 <__d2b+0x6a>
 80092a0:	08009f12 	.word	0x08009f12
 80092a4:	08009f23 	.word	0x08009f23

080092a8 <__ssputs_r>:
 80092a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ac:	461f      	mov	r7, r3
 80092ae:	688e      	ldr	r6, [r1, #8]
 80092b0:	4682      	mov	sl, r0
 80092b2:	42be      	cmp	r6, r7
 80092b4:	460c      	mov	r4, r1
 80092b6:	4690      	mov	r8, r2
 80092b8:	680b      	ldr	r3, [r1, #0]
 80092ba:	d82c      	bhi.n	8009316 <__ssputs_r+0x6e>
 80092bc:	898a      	ldrh	r2, [r1, #12]
 80092be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092c2:	d026      	beq.n	8009312 <__ssputs_r+0x6a>
 80092c4:	6965      	ldr	r5, [r4, #20]
 80092c6:	6909      	ldr	r1, [r1, #16]
 80092c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092cc:	eba3 0901 	sub.w	r9, r3, r1
 80092d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092d4:	1c7b      	adds	r3, r7, #1
 80092d6:	444b      	add	r3, r9
 80092d8:	106d      	asrs	r5, r5, #1
 80092da:	429d      	cmp	r5, r3
 80092dc:	bf38      	it	cc
 80092de:	461d      	movcc	r5, r3
 80092e0:	0553      	lsls	r3, r2, #21
 80092e2:	d527      	bpl.n	8009334 <__ssputs_r+0x8c>
 80092e4:	4629      	mov	r1, r5
 80092e6:	f7ff fbdb 	bl	8008aa0 <_malloc_r>
 80092ea:	4606      	mov	r6, r0
 80092ec:	b360      	cbz	r0, 8009348 <__ssputs_r+0xa0>
 80092ee:	464a      	mov	r2, r9
 80092f0:	6921      	ldr	r1, [r4, #16]
 80092f2:	f7fe fcea 	bl	8007cca <memcpy>
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009300:	81a3      	strh	r3, [r4, #12]
 8009302:	6126      	str	r6, [r4, #16]
 8009304:	444e      	add	r6, r9
 8009306:	6026      	str	r6, [r4, #0]
 8009308:	463e      	mov	r6, r7
 800930a:	6165      	str	r5, [r4, #20]
 800930c:	eba5 0509 	sub.w	r5, r5, r9
 8009310:	60a5      	str	r5, [r4, #8]
 8009312:	42be      	cmp	r6, r7
 8009314:	d900      	bls.n	8009318 <__ssputs_r+0x70>
 8009316:	463e      	mov	r6, r7
 8009318:	4632      	mov	r2, r6
 800931a:	4641      	mov	r1, r8
 800931c:	6820      	ldr	r0, [r4, #0]
 800931e:	f000 f9c5 	bl	80096ac <memmove>
 8009322:	2000      	movs	r0, #0
 8009324:	68a3      	ldr	r3, [r4, #8]
 8009326:	1b9b      	subs	r3, r3, r6
 8009328:	60a3      	str	r3, [r4, #8]
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	4433      	add	r3, r6
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009334:	462a      	mov	r2, r5
 8009336:	f000 fa27 	bl	8009788 <_realloc_r>
 800933a:	4606      	mov	r6, r0
 800933c:	2800      	cmp	r0, #0
 800933e:	d1e0      	bne.n	8009302 <__ssputs_r+0x5a>
 8009340:	4650      	mov	r0, sl
 8009342:	6921      	ldr	r1, [r4, #16]
 8009344:	f7ff fb3c 	bl	80089c0 <_free_r>
 8009348:	230c      	movs	r3, #12
 800934a:	f8ca 3000 	str.w	r3, [sl]
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	f04f 30ff 	mov.w	r0, #4294967295
 8009354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009358:	81a3      	strh	r3, [r4, #12]
 800935a:	e7e9      	b.n	8009330 <__ssputs_r+0x88>

0800935c <_svfiprintf_r>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	4698      	mov	r8, r3
 8009362:	898b      	ldrh	r3, [r1, #12]
 8009364:	4607      	mov	r7, r0
 8009366:	061b      	lsls	r3, r3, #24
 8009368:	460d      	mov	r5, r1
 800936a:	4614      	mov	r4, r2
 800936c:	b09d      	sub	sp, #116	; 0x74
 800936e:	d50e      	bpl.n	800938e <_svfiprintf_r+0x32>
 8009370:	690b      	ldr	r3, [r1, #16]
 8009372:	b963      	cbnz	r3, 800938e <_svfiprintf_r+0x32>
 8009374:	2140      	movs	r1, #64	; 0x40
 8009376:	f7ff fb93 	bl	8008aa0 <_malloc_r>
 800937a:	6028      	str	r0, [r5, #0]
 800937c:	6128      	str	r0, [r5, #16]
 800937e:	b920      	cbnz	r0, 800938a <_svfiprintf_r+0x2e>
 8009380:	230c      	movs	r3, #12
 8009382:	603b      	str	r3, [r7, #0]
 8009384:	f04f 30ff 	mov.w	r0, #4294967295
 8009388:	e0d0      	b.n	800952c <_svfiprintf_r+0x1d0>
 800938a:	2340      	movs	r3, #64	; 0x40
 800938c:	616b      	str	r3, [r5, #20]
 800938e:	2300      	movs	r3, #0
 8009390:	9309      	str	r3, [sp, #36]	; 0x24
 8009392:	2320      	movs	r3, #32
 8009394:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009398:	2330      	movs	r3, #48	; 0x30
 800939a:	f04f 0901 	mov.w	r9, #1
 800939e:	f8cd 800c 	str.w	r8, [sp, #12]
 80093a2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009544 <_svfiprintf_r+0x1e8>
 80093a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093aa:	4623      	mov	r3, r4
 80093ac:	469a      	mov	sl, r3
 80093ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093b2:	b10a      	cbz	r2, 80093b8 <_svfiprintf_r+0x5c>
 80093b4:	2a25      	cmp	r2, #37	; 0x25
 80093b6:	d1f9      	bne.n	80093ac <_svfiprintf_r+0x50>
 80093b8:	ebba 0b04 	subs.w	fp, sl, r4
 80093bc:	d00b      	beq.n	80093d6 <_svfiprintf_r+0x7a>
 80093be:	465b      	mov	r3, fp
 80093c0:	4622      	mov	r2, r4
 80093c2:	4629      	mov	r1, r5
 80093c4:	4638      	mov	r0, r7
 80093c6:	f7ff ff6f 	bl	80092a8 <__ssputs_r>
 80093ca:	3001      	adds	r0, #1
 80093cc:	f000 80a9 	beq.w	8009522 <_svfiprintf_r+0x1c6>
 80093d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093d2:	445a      	add	r2, fp
 80093d4:	9209      	str	r2, [sp, #36]	; 0x24
 80093d6:	f89a 3000 	ldrb.w	r3, [sl]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 80a1 	beq.w	8009522 <_svfiprintf_r+0x1c6>
 80093e0:	2300      	movs	r3, #0
 80093e2:	f04f 32ff 	mov.w	r2, #4294967295
 80093e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093ea:	f10a 0a01 	add.w	sl, sl, #1
 80093ee:	9304      	str	r3, [sp, #16]
 80093f0:	9307      	str	r3, [sp, #28]
 80093f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093f6:	931a      	str	r3, [sp, #104]	; 0x68
 80093f8:	4654      	mov	r4, sl
 80093fa:	2205      	movs	r2, #5
 80093fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009400:	4850      	ldr	r0, [pc, #320]	; (8009544 <_svfiprintf_r+0x1e8>)
 8009402:	f7fe fc54 	bl	8007cae <memchr>
 8009406:	9a04      	ldr	r2, [sp, #16]
 8009408:	b9d8      	cbnz	r0, 8009442 <_svfiprintf_r+0xe6>
 800940a:	06d0      	lsls	r0, r2, #27
 800940c:	bf44      	itt	mi
 800940e:	2320      	movmi	r3, #32
 8009410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009414:	0711      	lsls	r1, r2, #28
 8009416:	bf44      	itt	mi
 8009418:	232b      	movmi	r3, #43	; 0x2b
 800941a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800941e:	f89a 3000 	ldrb.w	r3, [sl]
 8009422:	2b2a      	cmp	r3, #42	; 0x2a
 8009424:	d015      	beq.n	8009452 <_svfiprintf_r+0xf6>
 8009426:	4654      	mov	r4, sl
 8009428:	2000      	movs	r0, #0
 800942a:	f04f 0c0a 	mov.w	ip, #10
 800942e:	9a07      	ldr	r2, [sp, #28]
 8009430:	4621      	mov	r1, r4
 8009432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009436:	3b30      	subs	r3, #48	; 0x30
 8009438:	2b09      	cmp	r3, #9
 800943a:	d94d      	bls.n	80094d8 <_svfiprintf_r+0x17c>
 800943c:	b1b0      	cbz	r0, 800946c <_svfiprintf_r+0x110>
 800943e:	9207      	str	r2, [sp, #28]
 8009440:	e014      	b.n	800946c <_svfiprintf_r+0x110>
 8009442:	eba0 0308 	sub.w	r3, r0, r8
 8009446:	fa09 f303 	lsl.w	r3, r9, r3
 800944a:	4313      	orrs	r3, r2
 800944c:	46a2      	mov	sl, r4
 800944e:	9304      	str	r3, [sp, #16]
 8009450:	e7d2      	b.n	80093f8 <_svfiprintf_r+0x9c>
 8009452:	9b03      	ldr	r3, [sp, #12]
 8009454:	1d19      	adds	r1, r3, #4
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	9103      	str	r1, [sp, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	bfbb      	ittet	lt
 800945e:	425b      	neglt	r3, r3
 8009460:	f042 0202 	orrlt.w	r2, r2, #2
 8009464:	9307      	strge	r3, [sp, #28]
 8009466:	9307      	strlt	r3, [sp, #28]
 8009468:	bfb8      	it	lt
 800946a:	9204      	strlt	r2, [sp, #16]
 800946c:	7823      	ldrb	r3, [r4, #0]
 800946e:	2b2e      	cmp	r3, #46	; 0x2e
 8009470:	d10c      	bne.n	800948c <_svfiprintf_r+0x130>
 8009472:	7863      	ldrb	r3, [r4, #1]
 8009474:	2b2a      	cmp	r3, #42	; 0x2a
 8009476:	d134      	bne.n	80094e2 <_svfiprintf_r+0x186>
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	3402      	adds	r4, #2
 800947c:	1d1a      	adds	r2, r3, #4
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	9203      	str	r2, [sp, #12]
 8009482:	2b00      	cmp	r3, #0
 8009484:	bfb8      	it	lt
 8009486:	f04f 33ff 	movlt.w	r3, #4294967295
 800948a:	9305      	str	r3, [sp, #20]
 800948c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009548 <_svfiprintf_r+0x1ec>
 8009490:	2203      	movs	r2, #3
 8009492:	4650      	mov	r0, sl
 8009494:	7821      	ldrb	r1, [r4, #0]
 8009496:	f7fe fc0a 	bl	8007cae <memchr>
 800949a:	b138      	cbz	r0, 80094ac <_svfiprintf_r+0x150>
 800949c:	2240      	movs	r2, #64	; 0x40
 800949e:	9b04      	ldr	r3, [sp, #16]
 80094a0:	eba0 000a 	sub.w	r0, r0, sl
 80094a4:	4082      	lsls	r2, r0
 80094a6:	4313      	orrs	r3, r2
 80094a8:	3401      	adds	r4, #1
 80094aa:	9304      	str	r3, [sp, #16]
 80094ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b0:	2206      	movs	r2, #6
 80094b2:	4826      	ldr	r0, [pc, #152]	; (800954c <_svfiprintf_r+0x1f0>)
 80094b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094b8:	f7fe fbf9 	bl	8007cae <memchr>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d038      	beq.n	8009532 <_svfiprintf_r+0x1d6>
 80094c0:	4b23      	ldr	r3, [pc, #140]	; (8009550 <_svfiprintf_r+0x1f4>)
 80094c2:	bb1b      	cbnz	r3, 800950c <_svfiprintf_r+0x1b0>
 80094c4:	9b03      	ldr	r3, [sp, #12]
 80094c6:	3307      	adds	r3, #7
 80094c8:	f023 0307 	bic.w	r3, r3, #7
 80094cc:	3308      	adds	r3, #8
 80094ce:	9303      	str	r3, [sp, #12]
 80094d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d2:	4433      	add	r3, r6
 80094d4:	9309      	str	r3, [sp, #36]	; 0x24
 80094d6:	e768      	b.n	80093aa <_svfiprintf_r+0x4e>
 80094d8:	460c      	mov	r4, r1
 80094da:	2001      	movs	r0, #1
 80094dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80094e0:	e7a6      	b.n	8009430 <_svfiprintf_r+0xd4>
 80094e2:	2300      	movs	r3, #0
 80094e4:	f04f 0c0a 	mov.w	ip, #10
 80094e8:	4619      	mov	r1, r3
 80094ea:	3401      	adds	r4, #1
 80094ec:	9305      	str	r3, [sp, #20]
 80094ee:	4620      	mov	r0, r4
 80094f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094f4:	3a30      	subs	r2, #48	; 0x30
 80094f6:	2a09      	cmp	r2, #9
 80094f8:	d903      	bls.n	8009502 <_svfiprintf_r+0x1a6>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0c6      	beq.n	800948c <_svfiprintf_r+0x130>
 80094fe:	9105      	str	r1, [sp, #20]
 8009500:	e7c4      	b.n	800948c <_svfiprintf_r+0x130>
 8009502:	4604      	mov	r4, r0
 8009504:	2301      	movs	r3, #1
 8009506:	fb0c 2101 	mla	r1, ip, r1, r2
 800950a:	e7f0      	b.n	80094ee <_svfiprintf_r+0x192>
 800950c:	ab03      	add	r3, sp, #12
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	462a      	mov	r2, r5
 8009512:	4638      	mov	r0, r7
 8009514:	4b0f      	ldr	r3, [pc, #60]	; (8009554 <_svfiprintf_r+0x1f8>)
 8009516:	a904      	add	r1, sp, #16
 8009518:	f7fd fe62 	bl	80071e0 <_printf_float>
 800951c:	1c42      	adds	r2, r0, #1
 800951e:	4606      	mov	r6, r0
 8009520:	d1d6      	bne.n	80094d0 <_svfiprintf_r+0x174>
 8009522:	89ab      	ldrh	r3, [r5, #12]
 8009524:	065b      	lsls	r3, r3, #25
 8009526:	f53f af2d 	bmi.w	8009384 <_svfiprintf_r+0x28>
 800952a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800952c:	b01d      	add	sp, #116	; 0x74
 800952e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009532:	ab03      	add	r3, sp, #12
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	462a      	mov	r2, r5
 8009538:	4638      	mov	r0, r7
 800953a:	4b06      	ldr	r3, [pc, #24]	; (8009554 <_svfiprintf_r+0x1f8>)
 800953c:	a904      	add	r1, sp, #16
 800953e:	f7fe f8ef 	bl	8007720 <_printf_i>
 8009542:	e7eb      	b.n	800951c <_svfiprintf_r+0x1c0>
 8009544:	0800a07c 	.word	0x0800a07c
 8009548:	0800a082 	.word	0x0800a082
 800954c:	0800a086 	.word	0x0800a086
 8009550:	080071e1 	.word	0x080071e1
 8009554:	080092a9 	.word	0x080092a9

08009558 <__sflush_r>:
 8009558:	898a      	ldrh	r2, [r1, #12]
 800955a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955c:	4605      	mov	r5, r0
 800955e:	0710      	lsls	r0, r2, #28
 8009560:	460c      	mov	r4, r1
 8009562:	d457      	bmi.n	8009614 <__sflush_r+0xbc>
 8009564:	684b      	ldr	r3, [r1, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	dc04      	bgt.n	8009574 <__sflush_r+0x1c>
 800956a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800956c:	2b00      	cmp	r3, #0
 800956e:	dc01      	bgt.n	8009574 <__sflush_r+0x1c>
 8009570:	2000      	movs	r0, #0
 8009572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009576:	2e00      	cmp	r6, #0
 8009578:	d0fa      	beq.n	8009570 <__sflush_r+0x18>
 800957a:	2300      	movs	r3, #0
 800957c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009580:	682f      	ldr	r7, [r5, #0]
 8009582:	6a21      	ldr	r1, [r4, #32]
 8009584:	602b      	str	r3, [r5, #0]
 8009586:	d032      	beq.n	80095ee <__sflush_r+0x96>
 8009588:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800958a:	89a3      	ldrh	r3, [r4, #12]
 800958c:	075a      	lsls	r2, r3, #29
 800958e:	d505      	bpl.n	800959c <__sflush_r+0x44>
 8009590:	6863      	ldr	r3, [r4, #4]
 8009592:	1ac0      	subs	r0, r0, r3
 8009594:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009596:	b10b      	cbz	r3, 800959c <__sflush_r+0x44>
 8009598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800959a:	1ac0      	subs	r0, r0, r3
 800959c:	2300      	movs	r3, #0
 800959e:	4602      	mov	r2, r0
 80095a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095a2:	4628      	mov	r0, r5
 80095a4:	6a21      	ldr	r1, [r4, #32]
 80095a6:	47b0      	blx	r6
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	d106      	bne.n	80095bc <__sflush_r+0x64>
 80095ae:	6829      	ldr	r1, [r5, #0]
 80095b0:	291d      	cmp	r1, #29
 80095b2:	d82b      	bhi.n	800960c <__sflush_r+0xb4>
 80095b4:	4a28      	ldr	r2, [pc, #160]	; (8009658 <__sflush_r+0x100>)
 80095b6:	410a      	asrs	r2, r1
 80095b8:	07d6      	lsls	r6, r2, #31
 80095ba:	d427      	bmi.n	800960c <__sflush_r+0xb4>
 80095bc:	2200      	movs	r2, #0
 80095be:	6062      	str	r2, [r4, #4]
 80095c0:	6922      	ldr	r2, [r4, #16]
 80095c2:	04d9      	lsls	r1, r3, #19
 80095c4:	6022      	str	r2, [r4, #0]
 80095c6:	d504      	bpl.n	80095d2 <__sflush_r+0x7a>
 80095c8:	1c42      	adds	r2, r0, #1
 80095ca:	d101      	bne.n	80095d0 <__sflush_r+0x78>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b903      	cbnz	r3, 80095d2 <__sflush_r+0x7a>
 80095d0:	6560      	str	r0, [r4, #84]	; 0x54
 80095d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095d4:	602f      	str	r7, [r5, #0]
 80095d6:	2900      	cmp	r1, #0
 80095d8:	d0ca      	beq.n	8009570 <__sflush_r+0x18>
 80095da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095de:	4299      	cmp	r1, r3
 80095e0:	d002      	beq.n	80095e8 <__sflush_r+0x90>
 80095e2:	4628      	mov	r0, r5
 80095e4:	f7ff f9ec 	bl	80089c0 <_free_r>
 80095e8:	2000      	movs	r0, #0
 80095ea:	6360      	str	r0, [r4, #52]	; 0x34
 80095ec:	e7c1      	b.n	8009572 <__sflush_r+0x1a>
 80095ee:	2301      	movs	r3, #1
 80095f0:	4628      	mov	r0, r5
 80095f2:	47b0      	blx	r6
 80095f4:	1c41      	adds	r1, r0, #1
 80095f6:	d1c8      	bne.n	800958a <__sflush_r+0x32>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d0c5      	beq.n	800958a <__sflush_r+0x32>
 80095fe:	2b1d      	cmp	r3, #29
 8009600:	d001      	beq.n	8009606 <__sflush_r+0xae>
 8009602:	2b16      	cmp	r3, #22
 8009604:	d101      	bne.n	800960a <__sflush_r+0xb2>
 8009606:	602f      	str	r7, [r5, #0]
 8009608:	e7b2      	b.n	8009570 <__sflush_r+0x18>
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009610:	81a3      	strh	r3, [r4, #12]
 8009612:	e7ae      	b.n	8009572 <__sflush_r+0x1a>
 8009614:	690f      	ldr	r7, [r1, #16]
 8009616:	2f00      	cmp	r7, #0
 8009618:	d0aa      	beq.n	8009570 <__sflush_r+0x18>
 800961a:	0793      	lsls	r3, r2, #30
 800961c:	bf18      	it	ne
 800961e:	2300      	movne	r3, #0
 8009620:	680e      	ldr	r6, [r1, #0]
 8009622:	bf08      	it	eq
 8009624:	694b      	ldreq	r3, [r1, #20]
 8009626:	1bf6      	subs	r6, r6, r7
 8009628:	600f      	str	r7, [r1, #0]
 800962a:	608b      	str	r3, [r1, #8]
 800962c:	2e00      	cmp	r6, #0
 800962e:	dd9f      	ble.n	8009570 <__sflush_r+0x18>
 8009630:	4633      	mov	r3, r6
 8009632:	463a      	mov	r2, r7
 8009634:	4628      	mov	r0, r5
 8009636:	6a21      	ldr	r1, [r4, #32]
 8009638:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800963c:	47e0      	blx	ip
 800963e:	2800      	cmp	r0, #0
 8009640:	dc06      	bgt.n	8009650 <__sflush_r+0xf8>
 8009642:	89a3      	ldrh	r3, [r4, #12]
 8009644:	f04f 30ff 	mov.w	r0, #4294967295
 8009648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	e790      	b.n	8009572 <__sflush_r+0x1a>
 8009650:	4407      	add	r7, r0
 8009652:	1a36      	subs	r6, r6, r0
 8009654:	e7ea      	b.n	800962c <__sflush_r+0xd4>
 8009656:	bf00      	nop
 8009658:	dfbffffe 	.word	0xdfbffffe

0800965c <_fflush_r>:
 800965c:	b538      	push	{r3, r4, r5, lr}
 800965e:	690b      	ldr	r3, [r1, #16]
 8009660:	4605      	mov	r5, r0
 8009662:	460c      	mov	r4, r1
 8009664:	b913      	cbnz	r3, 800966c <_fflush_r+0x10>
 8009666:	2500      	movs	r5, #0
 8009668:	4628      	mov	r0, r5
 800966a:	bd38      	pop	{r3, r4, r5, pc}
 800966c:	b118      	cbz	r0, 8009676 <_fflush_r+0x1a>
 800966e:	6a03      	ldr	r3, [r0, #32]
 8009670:	b90b      	cbnz	r3, 8009676 <_fflush_r+0x1a>
 8009672:	f7fe fa03 	bl	8007a7c <__sinit>
 8009676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0f3      	beq.n	8009666 <_fflush_r+0xa>
 800967e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009680:	07d0      	lsls	r0, r2, #31
 8009682:	d404      	bmi.n	800968e <_fflush_r+0x32>
 8009684:	0599      	lsls	r1, r3, #22
 8009686:	d402      	bmi.n	800968e <_fflush_r+0x32>
 8009688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800968a:	f7fe fb0e 	bl	8007caa <__retarget_lock_acquire_recursive>
 800968e:	4628      	mov	r0, r5
 8009690:	4621      	mov	r1, r4
 8009692:	f7ff ff61 	bl	8009558 <__sflush_r>
 8009696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009698:	4605      	mov	r5, r0
 800969a:	07da      	lsls	r2, r3, #31
 800969c:	d4e4      	bmi.n	8009668 <_fflush_r+0xc>
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	059b      	lsls	r3, r3, #22
 80096a2:	d4e1      	bmi.n	8009668 <_fflush_r+0xc>
 80096a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096a6:	f7fe fb01 	bl	8007cac <__retarget_lock_release_recursive>
 80096aa:	e7dd      	b.n	8009668 <_fflush_r+0xc>

080096ac <memmove>:
 80096ac:	4288      	cmp	r0, r1
 80096ae:	b510      	push	{r4, lr}
 80096b0:	eb01 0402 	add.w	r4, r1, r2
 80096b4:	d902      	bls.n	80096bc <memmove+0x10>
 80096b6:	4284      	cmp	r4, r0
 80096b8:	4623      	mov	r3, r4
 80096ba:	d807      	bhi.n	80096cc <memmove+0x20>
 80096bc:	1e43      	subs	r3, r0, #1
 80096be:	42a1      	cmp	r1, r4
 80096c0:	d008      	beq.n	80096d4 <memmove+0x28>
 80096c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096ca:	e7f8      	b.n	80096be <memmove+0x12>
 80096cc:	4601      	mov	r1, r0
 80096ce:	4402      	add	r2, r0
 80096d0:	428a      	cmp	r2, r1
 80096d2:	d100      	bne.n	80096d6 <memmove+0x2a>
 80096d4:	bd10      	pop	{r4, pc}
 80096d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096de:	e7f7      	b.n	80096d0 <memmove+0x24>

080096e0 <_sbrk_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	2300      	movs	r3, #0
 80096e4:	4d05      	ldr	r5, [pc, #20]	; (80096fc <_sbrk_r+0x1c>)
 80096e6:	4604      	mov	r4, r0
 80096e8:	4608      	mov	r0, r1
 80096ea:	602b      	str	r3, [r5, #0]
 80096ec:	f7f9 f8e2 	bl	80028b4 <_sbrk>
 80096f0:	1c43      	adds	r3, r0, #1
 80096f2:	d102      	bne.n	80096fa <_sbrk_r+0x1a>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	b103      	cbz	r3, 80096fa <_sbrk_r+0x1a>
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	200014dc 	.word	0x200014dc

08009700 <__assert_func>:
 8009700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009702:	4614      	mov	r4, r2
 8009704:	461a      	mov	r2, r3
 8009706:	4b09      	ldr	r3, [pc, #36]	; (800972c <__assert_func+0x2c>)
 8009708:	4605      	mov	r5, r0
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68d8      	ldr	r0, [r3, #12]
 800970e:	b14c      	cbz	r4, 8009724 <__assert_func+0x24>
 8009710:	4b07      	ldr	r3, [pc, #28]	; (8009730 <__assert_func+0x30>)
 8009712:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009716:	9100      	str	r1, [sp, #0]
 8009718:	462b      	mov	r3, r5
 800971a:	4906      	ldr	r1, [pc, #24]	; (8009734 <__assert_func+0x34>)
 800971c:	f000 f870 	bl	8009800 <fiprintf>
 8009720:	f000 f880 	bl	8009824 <abort>
 8009724:	4b04      	ldr	r3, [pc, #16]	; (8009738 <__assert_func+0x38>)
 8009726:	461c      	mov	r4, r3
 8009728:	e7f3      	b.n	8009712 <__assert_func+0x12>
 800972a:	bf00      	nop
 800972c:	20000068 	.word	0x20000068
 8009730:	0800a097 	.word	0x0800a097
 8009734:	0800a0a4 	.word	0x0800a0a4
 8009738:	0800a0d2 	.word	0x0800a0d2

0800973c <_calloc_r>:
 800973c:	b570      	push	{r4, r5, r6, lr}
 800973e:	fba1 5402 	umull	r5, r4, r1, r2
 8009742:	b934      	cbnz	r4, 8009752 <_calloc_r+0x16>
 8009744:	4629      	mov	r1, r5
 8009746:	f7ff f9ab 	bl	8008aa0 <_malloc_r>
 800974a:	4606      	mov	r6, r0
 800974c:	b928      	cbnz	r0, 800975a <_calloc_r+0x1e>
 800974e:	4630      	mov	r0, r6
 8009750:	bd70      	pop	{r4, r5, r6, pc}
 8009752:	220c      	movs	r2, #12
 8009754:	2600      	movs	r6, #0
 8009756:	6002      	str	r2, [r0, #0]
 8009758:	e7f9      	b.n	800974e <_calloc_r+0x12>
 800975a:	462a      	mov	r2, r5
 800975c:	4621      	mov	r1, r4
 800975e:	f7fe fa26 	bl	8007bae <memset>
 8009762:	e7f4      	b.n	800974e <_calloc_r+0x12>

08009764 <__ascii_mbtowc>:
 8009764:	b082      	sub	sp, #8
 8009766:	b901      	cbnz	r1, 800976a <__ascii_mbtowc+0x6>
 8009768:	a901      	add	r1, sp, #4
 800976a:	b142      	cbz	r2, 800977e <__ascii_mbtowc+0x1a>
 800976c:	b14b      	cbz	r3, 8009782 <__ascii_mbtowc+0x1e>
 800976e:	7813      	ldrb	r3, [r2, #0]
 8009770:	600b      	str	r3, [r1, #0]
 8009772:	7812      	ldrb	r2, [r2, #0]
 8009774:	1e10      	subs	r0, r2, #0
 8009776:	bf18      	it	ne
 8009778:	2001      	movne	r0, #1
 800977a:	b002      	add	sp, #8
 800977c:	4770      	bx	lr
 800977e:	4610      	mov	r0, r2
 8009780:	e7fb      	b.n	800977a <__ascii_mbtowc+0x16>
 8009782:	f06f 0001 	mvn.w	r0, #1
 8009786:	e7f8      	b.n	800977a <__ascii_mbtowc+0x16>

08009788 <_realloc_r>:
 8009788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800978c:	4680      	mov	r8, r0
 800978e:	4614      	mov	r4, r2
 8009790:	460e      	mov	r6, r1
 8009792:	b921      	cbnz	r1, 800979e <_realloc_r+0x16>
 8009794:	4611      	mov	r1, r2
 8009796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800979a:	f7ff b981 	b.w	8008aa0 <_malloc_r>
 800979e:	b92a      	cbnz	r2, 80097ac <_realloc_r+0x24>
 80097a0:	f7ff f90e 	bl	80089c0 <_free_r>
 80097a4:	4625      	mov	r5, r4
 80097a6:	4628      	mov	r0, r5
 80097a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ac:	f000 f841 	bl	8009832 <_malloc_usable_size_r>
 80097b0:	4284      	cmp	r4, r0
 80097b2:	4607      	mov	r7, r0
 80097b4:	d802      	bhi.n	80097bc <_realloc_r+0x34>
 80097b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097ba:	d812      	bhi.n	80097e2 <_realloc_r+0x5a>
 80097bc:	4621      	mov	r1, r4
 80097be:	4640      	mov	r0, r8
 80097c0:	f7ff f96e 	bl	8008aa0 <_malloc_r>
 80097c4:	4605      	mov	r5, r0
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d0ed      	beq.n	80097a6 <_realloc_r+0x1e>
 80097ca:	42bc      	cmp	r4, r7
 80097cc:	4622      	mov	r2, r4
 80097ce:	4631      	mov	r1, r6
 80097d0:	bf28      	it	cs
 80097d2:	463a      	movcs	r2, r7
 80097d4:	f7fe fa79 	bl	8007cca <memcpy>
 80097d8:	4631      	mov	r1, r6
 80097da:	4640      	mov	r0, r8
 80097dc:	f7ff f8f0 	bl	80089c0 <_free_r>
 80097e0:	e7e1      	b.n	80097a6 <_realloc_r+0x1e>
 80097e2:	4635      	mov	r5, r6
 80097e4:	e7df      	b.n	80097a6 <_realloc_r+0x1e>

080097e6 <__ascii_wctomb>:
 80097e6:	4603      	mov	r3, r0
 80097e8:	4608      	mov	r0, r1
 80097ea:	b141      	cbz	r1, 80097fe <__ascii_wctomb+0x18>
 80097ec:	2aff      	cmp	r2, #255	; 0xff
 80097ee:	d904      	bls.n	80097fa <__ascii_wctomb+0x14>
 80097f0:	228a      	movs	r2, #138	; 0x8a
 80097f2:	f04f 30ff 	mov.w	r0, #4294967295
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	4770      	bx	lr
 80097fa:	2001      	movs	r0, #1
 80097fc:	700a      	strb	r2, [r1, #0]
 80097fe:	4770      	bx	lr

08009800 <fiprintf>:
 8009800:	b40e      	push	{r1, r2, r3}
 8009802:	b503      	push	{r0, r1, lr}
 8009804:	4601      	mov	r1, r0
 8009806:	ab03      	add	r3, sp, #12
 8009808:	4805      	ldr	r0, [pc, #20]	; (8009820 <fiprintf+0x20>)
 800980a:	f853 2b04 	ldr.w	r2, [r3], #4
 800980e:	6800      	ldr	r0, [r0, #0]
 8009810:	9301      	str	r3, [sp, #4]
 8009812:	f000 f83d 	bl	8009890 <_vfiprintf_r>
 8009816:	b002      	add	sp, #8
 8009818:	f85d eb04 	ldr.w	lr, [sp], #4
 800981c:	b003      	add	sp, #12
 800981e:	4770      	bx	lr
 8009820:	20000068 	.word	0x20000068

08009824 <abort>:
 8009824:	2006      	movs	r0, #6
 8009826:	b508      	push	{r3, lr}
 8009828:	f000 fa0a 	bl	8009c40 <raise>
 800982c:	2001      	movs	r0, #1
 800982e:	f7f8 ffce 	bl	80027ce <_exit>

08009832 <_malloc_usable_size_r>:
 8009832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009836:	1f18      	subs	r0, r3, #4
 8009838:	2b00      	cmp	r3, #0
 800983a:	bfbc      	itt	lt
 800983c:	580b      	ldrlt	r3, [r1, r0]
 800983e:	18c0      	addlt	r0, r0, r3
 8009840:	4770      	bx	lr

08009842 <__sfputc_r>:
 8009842:	6893      	ldr	r3, [r2, #8]
 8009844:	b410      	push	{r4}
 8009846:	3b01      	subs	r3, #1
 8009848:	2b00      	cmp	r3, #0
 800984a:	6093      	str	r3, [r2, #8]
 800984c:	da07      	bge.n	800985e <__sfputc_r+0x1c>
 800984e:	6994      	ldr	r4, [r2, #24]
 8009850:	42a3      	cmp	r3, r4
 8009852:	db01      	blt.n	8009858 <__sfputc_r+0x16>
 8009854:	290a      	cmp	r1, #10
 8009856:	d102      	bne.n	800985e <__sfputc_r+0x1c>
 8009858:	bc10      	pop	{r4}
 800985a:	f000 b933 	b.w	8009ac4 <__swbuf_r>
 800985e:	6813      	ldr	r3, [r2, #0]
 8009860:	1c58      	adds	r0, r3, #1
 8009862:	6010      	str	r0, [r2, #0]
 8009864:	7019      	strb	r1, [r3, #0]
 8009866:	4608      	mov	r0, r1
 8009868:	bc10      	pop	{r4}
 800986a:	4770      	bx	lr

0800986c <__sfputs_r>:
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	4606      	mov	r6, r0
 8009870:	460f      	mov	r7, r1
 8009872:	4614      	mov	r4, r2
 8009874:	18d5      	adds	r5, r2, r3
 8009876:	42ac      	cmp	r4, r5
 8009878:	d101      	bne.n	800987e <__sfputs_r+0x12>
 800987a:	2000      	movs	r0, #0
 800987c:	e007      	b.n	800988e <__sfputs_r+0x22>
 800987e:	463a      	mov	r2, r7
 8009880:	4630      	mov	r0, r6
 8009882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009886:	f7ff ffdc 	bl	8009842 <__sfputc_r>
 800988a:	1c43      	adds	r3, r0, #1
 800988c:	d1f3      	bne.n	8009876 <__sfputs_r+0xa>
 800988e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009890 <_vfiprintf_r>:
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	460d      	mov	r5, r1
 8009896:	4614      	mov	r4, r2
 8009898:	4698      	mov	r8, r3
 800989a:	4606      	mov	r6, r0
 800989c:	b09d      	sub	sp, #116	; 0x74
 800989e:	b118      	cbz	r0, 80098a8 <_vfiprintf_r+0x18>
 80098a0:	6a03      	ldr	r3, [r0, #32]
 80098a2:	b90b      	cbnz	r3, 80098a8 <_vfiprintf_r+0x18>
 80098a4:	f7fe f8ea 	bl	8007a7c <__sinit>
 80098a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098aa:	07d9      	lsls	r1, r3, #31
 80098ac:	d405      	bmi.n	80098ba <_vfiprintf_r+0x2a>
 80098ae:	89ab      	ldrh	r3, [r5, #12]
 80098b0:	059a      	lsls	r2, r3, #22
 80098b2:	d402      	bmi.n	80098ba <_vfiprintf_r+0x2a>
 80098b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098b6:	f7fe f9f8 	bl	8007caa <__retarget_lock_acquire_recursive>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	071b      	lsls	r3, r3, #28
 80098be:	d501      	bpl.n	80098c4 <_vfiprintf_r+0x34>
 80098c0:	692b      	ldr	r3, [r5, #16]
 80098c2:	b99b      	cbnz	r3, 80098ec <_vfiprintf_r+0x5c>
 80098c4:	4629      	mov	r1, r5
 80098c6:	4630      	mov	r0, r6
 80098c8:	f000 f93a 	bl	8009b40 <__swsetup_r>
 80098cc:	b170      	cbz	r0, 80098ec <_vfiprintf_r+0x5c>
 80098ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098d0:	07dc      	lsls	r4, r3, #31
 80098d2:	d504      	bpl.n	80098de <_vfiprintf_r+0x4e>
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	b01d      	add	sp, #116	; 0x74
 80098da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098de:	89ab      	ldrh	r3, [r5, #12]
 80098e0:	0598      	lsls	r0, r3, #22
 80098e2:	d4f7      	bmi.n	80098d4 <_vfiprintf_r+0x44>
 80098e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098e6:	f7fe f9e1 	bl	8007cac <__retarget_lock_release_recursive>
 80098ea:	e7f3      	b.n	80098d4 <_vfiprintf_r+0x44>
 80098ec:	2300      	movs	r3, #0
 80098ee:	9309      	str	r3, [sp, #36]	; 0x24
 80098f0:	2320      	movs	r3, #32
 80098f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098f6:	2330      	movs	r3, #48	; 0x30
 80098f8:	f04f 0901 	mov.w	r9, #1
 80098fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009900:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009ab0 <_vfiprintf_r+0x220>
 8009904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009908:	4623      	mov	r3, r4
 800990a:	469a      	mov	sl, r3
 800990c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009910:	b10a      	cbz	r2, 8009916 <_vfiprintf_r+0x86>
 8009912:	2a25      	cmp	r2, #37	; 0x25
 8009914:	d1f9      	bne.n	800990a <_vfiprintf_r+0x7a>
 8009916:	ebba 0b04 	subs.w	fp, sl, r4
 800991a:	d00b      	beq.n	8009934 <_vfiprintf_r+0xa4>
 800991c:	465b      	mov	r3, fp
 800991e:	4622      	mov	r2, r4
 8009920:	4629      	mov	r1, r5
 8009922:	4630      	mov	r0, r6
 8009924:	f7ff ffa2 	bl	800986c <__sfputs_r>
 8009928:	3001      	adds	r0, #1
 800992a:	f000 80a9 	beq.w	8009a80 <_vfiprintf_r+0x1f0>
 800992e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009930:	445a      	add	r2, fp
 8009932:	9209      	str	r2, [sp, #36]	; 0x24
 8009934:	f89a 3000 	ldrb.w	r3, [sl]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 80a1 	beq.w	8009a80 <_vfiprintf_r+0x1f0>
 800993e:	2300      	movs	r3, #0
 8009940:	f04f 32ff 	mov.w	r2, #4294967295
 8009944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009948:	f10a 0a01 	add.w	sl, sl, #1
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	9307      	str	r3, [sp, #28]
 8009950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009954:	931a      	str	r3, [sp, #104]	; 0x68
 8009956:	4654      	mov	r4, sl
 8009958:	2205      	movs	r2, #5
 800995a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995e:	4854      	ldr	r0, [pc, #336]	; (8009ab0 <_vfiprintf_r+0x220>)
 8009960:	f7fe f9a5 	bl	8007cae <memchr>
 8009964:	9a04      	ldr	r2, [sp, #16]
 8009966:	b9d8      	cbnz	r0, 80099a0 <_vfiprintf_r+0x110>
 8009968:	06d1      	lsls	r1, r2, #27
 800996a:	bf44      	itt	mi
 800996c:	2320      	movmi	r3, #32
 800996e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009972:	0713      	lsls	r3, r2, #28
 8009974:	bf44      	itt	mi
 8009976:	232b      	movmi	r3, #43	; 0x2b
 8009978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997c:	f89a 3000 	ldrb.w	r3, [sl]
 8009980:	2b2a      	cmp	r3, #42	; 0x2a
 8009982:	d015      	beq.n	80099b0 <_vfiprintf_r+0x120>
 8009984:	4654      	mov	r4, sl
 8009986:	2000      	movs	r0, #0
 8009988:	f04f 0c0a 	mov.w	ip, #10
 800998c:	9a07      	ldr	r2, [sp, #28]
 800998e:	4621      	mov	r1, r4
 8009990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009994:	3b30      	subs	r3, #48	; 0x30
 8009996:	2b09      	cmp	r3, #9
 8009998:	d94d      	bls.n	8009a36 <_vfiprintf_r+0x1a6>
 800999a:	b1b0      	cbz	r0, 80099ca <_vfiprintf_r+0x13a>
 800999c:	9207      	str	r2, [sp, #28]
 800999e:	e014      	b.n	80099ca <_vfiprintf_r+0x13a>
 80099a0:	eba0 0308 	sub.w	r3, r0, r8
 80099a4:	fa09 f303 	lsl.w	r3, r9, r3
 80099a8:	4313      	orrs	r3, r2
 80099aa:	46a2      	mov	sl, r4
 80099ac:	9304      	str	r3, [sp, #16]
 80099ae:	e7d2      	b.n	8009956 <_vfiprintf_r+0xc6>
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	1d19      	adds	r1, r3, #4
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	9103      	str	r1, [sp, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bfbb      	ittet	lt
 80099bc:	425b      	neglt	r3, r3
 80099be:	f042 0202 	orrlt.w	r2, r2, #2
 80099c2:	9307      	strge	r3, [sp, #28]
 80099c4:	9307      	strlt	r3, [sp, #28]
 80099c6:	bfb8      	it	lt
 80099c8:	9204      	strlt	r2, [sp, #16]
 80099ca:	7823      	ldrb	r3, [r4, #0]
 80099cc:	2b2e      	cmp	r3, #46	; 0x2e
 80099ce:	d10c      	bne.n	80099ea <_vfiprintf_r+0x15a>
 80099d0:	7863      	ldrb	r3, [r4, #1]
 80099d2:	2b2a      	cmp	r3, #42	; 0x2a
 80099d4:	d134      	bne.n	8009a40 <_vfiprintf_r+0x1b0>
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	3402      	adds	r4, #2
 80099da:	1d1a      	adds	r2, r3, #4
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	9203      	str	r2, [sp, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	bfb8      	it	lt
 80099e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80099e8:	9305      	str	r3, [sp, #20]
 80099ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ab4 <_vfiprintf_r+0x224>
 80099ee:	2203      	movs	r2, #3
 80099f0:	4650      	mov	r0, sl
 80099f2:	7821      	ldrb	r1, [r4, #0]
 80099f4:	f7fe f95b 	bl	8007cae <memchr>
 80099f8:	b138      	cbz	r0, 8009a0a <_vfiprintf_r+0x17a>
 80099fa:	2240      	movs	r2, #64	; 0x40
 80099fc:	9b04      	ldr	r3, [sp, #16]
 80099fe:	eba0 000a 	sub.w	r0, r0, sl
 8009a02:	4082      	lsls	r2, r0
 8009a04:	4313      	orrs	r3, r2
 8009a06:	3401      	adds	r4, #1
 8009a08:	9304      	str	r3, [sp, #16]
 8009a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a0e:	2206      	movs	r2, #6
 8009a10:	4829      	ldr	r0, [pc, #164]	; (8009ab8 <_vfiprintf_r+0x228>)
 8009a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a16:	f7fe f94a 	bl	8007cae <memchr>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d03f      	beq.n	8009a9e <_vfiprintf_r+0x20e>
 8009a1e:	4b27      	ldr	r3, [pc, #156]	; (8009abc <_vfiprintf_r+0x22c>)
 8009a20:	bb1b      	cbnz	r3, 8009a6a <_vfiprintf_r+0x1da>
 8009a22:	9b03      	ldr	r3, [sp, #12]
 8009a24:	3307      	adds	r3, #7
 8009a26:	f023 0307 	bic.w	r3, r3, #7
 8009a2a:	3308      	adds	r3, #8
 8009a2c:	9303      	str	r3, [sp, #12]
 8009a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a30:	443b      	add	r3, r7
 8009a32:	9309      	str	r3, [sp, #36]	; 0x24
 8009a34:	e768      	b.n	8009908 <_vfiprintf_r+0x78>
 8009a36:	460c      	mov	r4, r1
 8009a38:	2001      	movs	r0, #1
 8009a3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a3e:	e7a6      	b.n	800998e <_vfiprintf_r+0xfe>
 8009a40:	2300      	movs	r3, #0
 8009a42:	f04f 0c0a 	mov.w	ip, #10
 8009a46:	4619      	mov	r1, r3
 8009a48:	3401      	adds	r4, #1
 8009a4a:	9305      	str	r3, [sp, #20]
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a52:	3a30      	subs	r2, #48	; 0x30
 8009a54:	2a09      	cmp	r2, #9
 8009a56:	d903      	bls.n	8009a60 <_vfiprintf_r+0x1d0>
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d0c6      	beq.n	80099ea <_vfiprintf_r+0x15a>
 8009a5c:	9105      	str	r1, [sp, #20]
 8009a5e:	e7c4      	b.n	80099ea <_vfiprintf_r+0x15a>
 8009a60:	4604      	mov	r4, r0
 8009a62:	2301      	movs	r3, #1
 8009a64:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a68:	e7f0      	b.n	8009a4c <_vfiprintf_r+0x1bc>
 8009a6a:	ab03      	add	r3, sp, #12
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	462a      	mov	r2, r5
 8009a70:	4630      	mov	r0, r6
 8009a72:	4b13      	ldr	r3, [pc, #76]	; (8009ac0 <_vfiprintf_r+0x230>)
 8009a74:	a904      	add	r1, sp, #16
 8009a76:	f7fd fbb3 	bl	80071e0 <_printf_float>
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	1c78      	adds	r0, r7, #1
 8009a7e:	d1d6      	bne.n	8009a2e <_vfiprintf_r+0x19e>
 8009a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a82:	07d9      	lsls	r1, r3, #31
 8009a84:	d405      	bmi.n	8009a92 <_vfiprintf_r+0x202>
 8009a86:	89ab      	ldrh	r3, [r5, #12]
 8009a88:	059a      	lsls	r2, r3, #22
 8009a8a:	d402      	bmi.n	8009a92 <_vfiprintf_r+0x202>
 8009a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a8e:	f7fe f90d 	bl	8007cac <__retarget_lock_release_recursive>
 8009a92:	89ab      	ldrh	r3, [r5, #12]
 8009a94:	065b      	lsls	r3, r3, #25
 8009a96:	f53f af1d 	bmi.w	80098d4 <_vfiprintf_r+0x44>
 8009a9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9c:	e71c      	b.n	80098d8 <_vfiprintf_r+0x48>
 8009a9e:	ab03      	add	r3, sp, #12
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	462a      	mov	r2, r5
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	4b06      	ldr	r3, [pc, #24]	; (8009ac0 <_vfiprintf_r+0x230>)
 8009aa8:	a904      	add	r1, sp, #16
 8009aaa:	f7fd fe39 	bl	8007720 <_printf_i>
 8009aae:	e7e4      	b.n	8009a7a <_vfiprintf_r+0x1ea>
 8009ab0:	0800a07c 	.word	0x0800a07c
 8009ab4:	0800a082 	.word	0x0800a082
 8009ab8:	0800a086 	.word	0x0800a086
 8009abc:	080071e1 	.word	0x080071e1
 8009ac0:	0800986d 	.word	0x0800986d

08009ac4 <__swbuf_r>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	460e      	mov	r6, r1
 8009ac8:	4614      	mov	r4, r2
 8009aca:	4605      	mov	r5, r0
 8009acc:	b118      	cbz	r0, 8009ad6 <__swbuf_r+0x12>
 8009ace:	6a03      	ldr	r3, [r0, #32]
 8009ad0:	b90b      	cbnz	r3, 8009ad6 <__swbuf_r+0x12>
 8009ad2:	f7fd ffd3 	bl	8007a7c <__sinit>
 8009ad6:	69a3      	ldr	r3, [r4, #24]
 8009ad8:	60a3      	str	r3, [r4, #8]
 8009ada:	89a3      	ldrh	r3, [r4, #12]
 8009adc:	071a      	lsls	r2, r3, #28
 8009ade:	d525      	bpl.n	8009b2c <__swbuf_r+0x68>
 8009ae0:	6923      	ldr	r3, [r4, #16]
 8009ae2:	b31b      	cbz	r3, 8009b2c <__swbuf_r+0x68>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	6922      	ldr	r2, [r4, #16]
 8009ae8:	b2f6      	uxtb	r6, r6
 8009aea:	1a98      	subs	r0, r3, r2
 8009aec:	6963      	ldr	r3, [r4, #20]
 8009aee:	4637      	mov	r7, r6
 8009af0:	4283      	cmp	r3, r0
 8009af2:	dc04      	bgt.n	8009afe <__swbuf_r+0x3a>
 8009af4:	4621      	mov	r1, r4
 8009af6:	4628      	mov	r0, r5
 8009af8:	f7ff fdb0 	bl	800965c <_fflush_r>
 8009afc:	b9e0      	cbnz	r0, 8009b38 <__swbuf_r+0x74>
 8009afe:	68a3      	ldr	r3, [r4, #8]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	60a3      	str	r3, [r4, #8]
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	6022      	str	r2, [r4, #0]
 8009b0a:	701e      	strb	r6, [r3, #0]
 8009b0c:	6962      	ldr	r2, [r4, #20]
 8009b0e:	1c43      	adds	r3, r0, #1
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d004      	beq.n	8009b1e <__swbuf_r+0x5a>
 8009b14:	89a3      	ldrh	r3, [r4, #12]
 8009b16:	07db      	lsls	r3, r3, #31
 8009b18:	d506      	bpl.n	8009b28 <__swbuf_r+0x64>
 8009b1a:	2e0a      	cmp	r6, #10
 8009b1c:	d104      	bne.n	8009b28 <__swbuf_r+0x64>
 8009b1e:	4621      	mov	r1, r4
 8009b20:	4628      	mov	r0, r5
 8009b22:	f7ff fd9b 	bl	800965c <_fflush_r>
 8009b26:	b938      	cbnz	r0, 8009b38 <__swbuf_r+0x74>
 8009b28:	4638      	mov	r0, r7
 8009b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f000 f806 	bl	8009b40 <__swsetup_r>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d0d5      	beq.n	8009ae4 <__swbuf_r+0x20>
 8009b38:	f04f 37ff 	mov.w	r7, #4294967295
 8009b3c:	e7f4      	b.n	8009b28 <__swbuf_r+0x64>
	...

08009b40 <__swsetup_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4b2a      	ldr	r3, [pc, #168]	; (8009bec <__swsetup_r+0xac>)
 8009b44:	4605      	mov	r5, r0
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	460c      	mov	r4, r1
 8009b4a:	b118      	cbz	r0, 8009b54 <__swsetup_r+0x14>
 8009b4c:	6a03      	ldr	r3, [r0, #32]
 8009b4e:	b90b      	cbnz	r3, 8009b54 <__swsetup_r+0x14>
 8009b50:	f7fd ff94 	bl	8007a7c <__sinit>
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b5a:	0718      	lsls	r0, r3, #28
 8009b5c:	d422      	bmi.n	8009ba4 <__swsetup_r+0x64>
 8009b5e:	06d9      	lsls	r1, r3, #27
 8009b60:	d407      	bmi.n	8009b72 <__swsetup_r+0x32>
 8009b62:	2309      	movs	r3, #9
 8009b64:	602b      	str	r3, [r5, #0]
 8009b66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6e:	81a3      	strh	r3, [r4, #12]
 8009b70:	e034      	b.n	8009bdc <__swsetup_r+0x9c>
 8009b72:	0758      	lsls	r0, r3, #29
 8009b74:	d512      	bpl.n	8009b9c <__swsetup_r+0x5c>
 8009b76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b78:	b141      	cbz	r1, 8009b8c <__swsetup_r+0x4c>
 8009b7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b7e:	4299      	cmp	r1, r3
 8009b80:	d002      	beq.n	8009b88 <__swsetup_r+0x48>
 8009b82:	4628      	mov	r0, r5
 8009b84:	f7fe ff1c 	bl	80089c0 <_free_r>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	6363      	str	r3, [r4, #52]	; 0x34
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b92:	81a3      	strh	r3, [r4, #12]
 8009b94:	2300      	movs	r3, #0
 8009b96:	6063      	str	r3, [r4, #4]
 8009b98:	6923      	ldr	r3, [r4, #16]
 8009b9a:	6023      	str	r3, [r4, #0]
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	f043 0308 	orr.w	r3, r3, #8
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	6923      	ldr	r3, [r4, #16]
 8009ba6:	b94b      	cbnz	r3, 8009bbc <__swsetup_r+0x7c>
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bb2:	d003      	beq.n	8009bbc <__swsetup_r+0x7c>
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f000 f883 	bl	8009cc2 <__smakebuf_r>
 8009bbc:	89a0      	ldrh	r0, [r4, #12]
 8009bbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bc2:	f010 0301 	ands.w	r3, r0, #1
 8009bc6:	d00a      	beq.n	8009bde <__swsetup_r+0x9e>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60a3      	str	r3, [r4, #8]
 8009bcc:	6963      	ldr	r3, [r4, #20]
 8009bce:	425b      	negs	r3, r3
 8009bd0:	61a3      	str	r3, [r4, #24]
 8009bd2:	6923      	ldr	r3, [r4, #16]
 8009bd4:	b943      	cbnz	r3, 8009be8 <__swsetup_r+0xa8>
 8009bd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bda:	d1c4      	bne.n	8009b66 <__swsetup_r+0x26>
 8009bdc:	bd38      	pop	{r3, r4, r5, pc}
 8009bde:	0781      	lsls	r1, r0, #30
 8009be0:	bf58      	it	pl
 8009be2:	6963      	ldrpl	r3, [r4, #20]
 8009be4:	60a3      	str	r3, [r4, #8]
 8009be6:	e7f4      	b.n	8009bd2 <__swsetup_r+0x92>
 8009be8:	2000      	movs	r0, #0
 8009bea:	e7f7      	b.n	8009bdc <__swsetup_r+0x9c>
 8009bec:	20000068 	.word	0x20000068

08009bf0 <_raise_r>:
 8009bf0:	291f      	cmp	r1, #31
 8009bf2:	b538      	push	{r3, r4, r5, lr}
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	460d      	mov	r5, r1
 8009bf8:	d904      	bls.n	8009c04 <_raise_r+0x14>
 8009bfa:	2316      	movs	r3, #22
 8009bfc:	6003      	str	r3, [r0, #0]
 8009bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009c06:	b112      	cbz	r2, 8009c0e <_raise_r+0x1e>
 8009c08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c0c:	b94b      	cbnz	r3, 8009c22 <_raise_r+0x32>
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f000 f830 	bl	8009c74 <_getpid_r>
 8009c14:	462a      	mov	r2, r5
 8009c16:	4601      	mov	r1, r0
 8009c18:	4620      	mov	r0, r4
 8009c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c1e:	f000 b817 	b.w	8009c50 <_kill_r>
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d00a      	beq.n	8009c3c <_raise_r+0x4c>
 8009c26:	1c59      	adds	r1, r3, #1
 8009c28:	d103      	bne.n	8009c32 <_raise_r+0x42>
 8009c2a:	2316      	movs	r3, #22
 8009c2c:	6003      	str	r3, [r0, #0]
 8009c2e:	2001      	movs	r0, #1
 8009c30:	e7e7      	b.n	8009c02 <_raise_r+0x12>
 8009c32:	2400      	movs	r4, #0
 8009c34:	4628      	mov	r0, r5
 8009c36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c3a:	4798      	blx	r3
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	e7e0      	b.n	8009c02 <_raise_r+0x12>

08009c40 <raise>:
 8009c40:	4b02      	ldr	r3, [pc, #8]	; (8009c4c <raise+0xc>)
 8009c42:	4601      	mov	r1, r0
 8009c44:	6818      	ldr	r0, [r3, #0]
 8009c46:	f7ff bfd3 	b.w	8009bf0 <_raise_r>
 8009c4a:	bf00      	nop
 8009c4c:	20000068 	.word	0x20000068

08009c50 <_kill_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	2300      	movs	r3, #0
 8009c54:	4d06      	ldr	r5, [pc, #24]	; (8009c70 <_kill_r+0x20>)
 8009c56:	4604      	mov	r4, r0
 8009c58:	4608      	mov	r0, r1
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	602b      	str	r3, [r5, #0]
 8009c5e:	f7f8 fda6 	bl	80027ae <_kill>
 8009c62:	1c43      	adds	r3, r0, #1
 8009c64:	d102      	bne.n	8009c6c <_kill_r+0x1c>
 8009c66:	682b      	ldr	r3, [r5, #0]
 8009c68:	b103      	cbz	r3, 8009c6c <_kill_r+0x1c>
 8009c6a:	6023      	str	r3, [r4, #0]
 8009c6c:	bd38      	pop	{r3, r4, r5, pc}
 8009c6e:	bf00      	nop
 8009c70:	200014dc 	.word	0x200014dc

08009c74 <_getpid_r>:
 8009c74:	f7f8 bd94 	b.w	80027a0 <_getpid>

08009c78 <__swhatbuf_r>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c80:	4615      	mov	r5, r2
 8009c82:	2900      	cmp	r1, #0
 8009c84:	461e      	mov	r6, r3
 8009c86:	b096      	sub	sp, #88	; 0x58
 8009c88:	da0c      	bge.n	8009ca4 <__swhatbuf_r+0x2c>
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009c92:	bf0c      	ite	eq
 8009c94:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009c98:	2340      	movne	r3, #64	; 0x40
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	6031      	str	r1, [r6, #0]
 8009c9e:	602b      	str	r3, [r5, #0]
 8009ca0:	b016      	add	sp, #88	; 0x58
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}
 8009ca4:	466a      	mov	r2, sp
 8009ca6:	f000 f849 	bl	8009d3c <_fstat_r>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	dbed      	blt.n	8009c8a <__swhatbuf_r+0x12>
 8009cae:	9901      	ldr	r1, [sp, #4]
 8009cb0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009cb4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009cb8:	4259      	negs	r1, r3
 8009cba:	4159      	adcs	r1, r3
 8009cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cc0:	e7eb      	b.n	8009c9a <__swhatbuf_r+0x22>

08009cc2 <__smakebuf_r>:
 8009cc2:	898b      	ldrh	r3, [r1, #12]
 8009cc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cc6:	079d      	lsls	r5, r3, #30
 8009cc8:	4606      	mov	r6, r0
 8009cca:	460c      	mov	r4, r1
 8009ccc:	d507      	bpl.n	8009cde <__smakebuf_r+0x1c>
 8009cce:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cd2:	6023      	str	r3, [r4, #0]
 8009cd4:	6123      	str	r3, [r4, #16]
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	6163      	str	r3, [r4, #20]
 8009cda:	b002      	add	sp, #8
 8009cdc:	bd70      	pop	{r4, r5, r6, pc}
 8009cde:	466a      	mov	r2, sp
 8009ce0:	ab01      	add	r3, sp, #4
 8009ce2:	f7ff ffc9 	bl	8009c78 <__swhatbuf_r>
 8009ce6:	9900      	ldr	r1, [sp, #0]
 8009ce8:	4605      	mov	r5, r0
 8009cea:	4630      	mov	r0, r6
 8009cec:	f7fe fed8 	bl	8008aa0 <_malloc_r>
 8009cf0:	b948      	cbnz	r0, 8009d06 <__smakebuf_r+0x44>
 8009cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf6:	059a      	lsls	r2, r3, #22
 8009cf8:	d4ef      	bmi.n	8009cda <__smakebuf_r+0x18>
 8009cfa:	f023 0303 	bic.w	r3, r3, #3
 8009cfe:	f043 0302 	orr.w	r3, r3, #2
 8009d02:	81a3      	strh	r3, [r4, #12]
 8009d04:	e7e3      	b.n	8009cce <__smakebuf_r+0xc>
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	6020      	str	r0, [r4, #0]
 8009d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d0e:	81a3      	strh	r3, [r4, #12]
 8009d10:	9b00      	ldr	r3, [sp, #0]
 8009d12:	6120      	str	r0, [r4, #16]
 8009d14:	6163      	str	r3, [r4, #20]
 8009d16:	9b01      	ldr	r3, [sp, #4]
 8009d18:	b15b      	cbz	r3, 8009d32 <__smakebuf_r+0x70>
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d20:	f000 f81e 	bl	8009d60 <_isatty_r>
 8009d24:	b128      	cbz	r0, 8009d32 <__smakebuf_r+0x70>
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	f023 0303 	bic.w	r3, r3, #3
 8009d2c:	f043 0301 	orr.w	r3, r3, #1
 8009d30:	81a3      	strh	r3, [r4, #12]
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	431d      	orrs	r5, r3
 8009d36:	81a5      	strh	r5, [r4, #12]
 8009d38:	e7cf      	b.n	8009cda <__smakebuf_r+0x18>
	...

08009d3c <_fstat_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	2300      	movs	r3, #0
 8009d40:	4d06      	ldr	r5, [pc, #24]	; (8009d5c <_fstat_r+0x20>)
 8009d42:	4604      	mov	r4, r0
 8009d44:	4608      	mov	r0, r1
 8009d46:	4611      	mov	r1, r2
 8009d48:	602b      	str	r3, [r5, #0]
 8009d4a:	f7f8 fd8e 	bl	800286a <_fstat>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	d102      	bne.n	8009d58 <_fstat_r+0x1c>
 8009d52:	682b      	ldr	r3, [r5, #0]
 8009d54:	b103      	cbz	r3, 8009d58 <_fstat_r+0x1c>
 8009d56:	6023      	str	r3, [r4, #0]
 8009d58:	bd38      	pop	{r3, r4, r5, pc}
 8009d5a:	bf00      	nop
 8009d5c:	200014dc 	.word	0x200014dc

08009d60 <_isatty_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	2300      	movs	r3, #0
 8009d64:	4d05      	ldr	r5, [pc, #20]	; (8009d7c <_isatty_r+0x1c>)
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	602b      	str	r3, [r5, #0]
 8009d6c:	f7f8 fd8c 	bl	8002888 <_isatty>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_isatty_r+0x1a>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_isatty_r+0x1a>
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	200014dc 	.word	0x200014dc

08009d80 <_init>:
 8009d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d82:	bf00      	nop
 8009d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d86:	bc08      	pop	{r3}
 8009d88:	469e      	mov	lr, r3
 8009d8a:	4770      	bx	lr

08009d8c <_fini>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	bf00      	nop
 8009d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d92:	bc08      	pop	{r3}
 8009d94:	469e      	mov	lr, r3
 8009d96:	4770      	bx	lr
