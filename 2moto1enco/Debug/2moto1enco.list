
2moto1enco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008840  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08008950  08008950  00018950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d6c  08008d6c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008d6c  08008d6c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d6c  08008d6c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012bc  200001d8  08008f4c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001494  08008f4c  00021494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016151  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ed  00000000  00000000  00036395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  00039788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb3  00000000  00000000  0003abc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007f9a  00000000  00000000  0003bb7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016aaa  00000000  00000000  00043b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099e15  00000000  00000000  0005a5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000065d8  00000000  00000000  000f43d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000fa9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008938 	.word	0x08008938

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08008938 	.word	0x08008938

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <__aeabi_f2uiz>:
 800107c:	0042      	lsls	r2, r0, #1
 800107e:	d20e      	bcs.n	800109e <__aeabi_f2uiz+0x22>
 8001080:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001084:	d30b      	bcc.n	800109e <__aeabi_f2uiz+0x22>
 8001086:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800108e:	d409      	bmi.n	80010a4 <__aeabi_f2uiz+0x28>
 8001090:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001098:	fa23 f002 	lsr.w	r0, r3, r2
 800109c:	4770      	bx	lr
 800109e:	f04f 0000 	mov.w	r0, #0
 80010a2:	4770      	bx	lr
 80010a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a8:	d101      	bne.n	80010ae <__aeabi_f2uiz+0x32>
 80010aa:	0242      	lsls	r2, r0, #9
 80010ac:	d102      	bne.n	80010b4 <__aeabi_f2uiz+0x38>
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295
 80010b2:	4770      	bx	lr
 80010b4:	f04f 0000 	mov.w	r0, #0
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <_ZN7RoboArmC1Ev>:
 */

#include "RoboArm.h"


RoboArm::RoboArm() {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <_ZN7RoboArmC1Ev+0x1c>)
 80010c8:	605a      	str	r2, [r3, #4]
	// TODO Auto-generated constructor stub
}
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	42b00000 	.word	0x42b00000

080010dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4a06      	ldr	r2, [pc, #24]	; (8001104 <vApplicationGetIdleTaskMemory+0x28>)
 80010ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	4a05      	ldr	r2, [pc, #20]	; (8001108 <vApplicationGetIdleTaskMemory+0x2c>)
 80010f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	200001f4 	.word	0x200001f4
 8001108:	20000248 	.word	0x20000248

0800110c <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f004 ff2b 	bl	8005f70 <ceilf>
 800111a:	4603      	mov	r3, r0
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_Z21steppingyakkazavmaximff>:
int steppingyaktreba(float stepM1, float stepM2) {

	return 0;
}

int steppingyakkazavmaxim(float stepM1, float stepM2) {
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]

	step1 = stepM1;
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff7e 	bl	8001030 <__aeabi_f2iz>
 8001134:	4603      	mov	r3, r0
 8001136:	4a5f      	ldr	r2, [pc, #380]	; (80012b4 <_Z21steppingyakkazavmaximff+0x190>)
 8001138:	6013      	str	r3, [r2, #0]
	step2 = stepM2;
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f7ff ff78 	bl	8001030 <__aeabi_f2iz>
 8001140:	4603      	mov	r3, r0
 8001142:	4a5d      	ldr	r2, [pc, #372]	; (80012b8 <_Z21steppingyakkazavmaximff+0x194>)
 8001144:	6013      	str	r3, [r2, #0]

	//числа 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001146:	2108      	movs	r1, #8
 8001148:	485c      	ldr	r0, [pc, #368]	; (80012bc <_Z21steppingyakkazavmaximff+0x198>)
 800114a:	f002 fa91 	bl	8003670 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800114e:	2108      	movs	r1, #8
 8001150:	485b      	ldr	r0, [pc, #364]	; (80012c0 <_Z21steppingyakkazavmaximff+0x19c>)
 8001152:	f002 fa8d 	bl	8003670 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 8001156:	4859      	ldr	r0, [pc, #356]	; (80012bc <_Z21steppingyakkazavmaximff+0x198>)
 8001158:	f002 f96a 	bl	8003430 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 800115c:	4858      	ldr	r0, [pc, #352]	; (80012c0 <_Z21steppingyakkazavmaximff+0x19c>)
 800115e:	f002 f967 	bl	8003430 <HAL_TIM_Base_Stop_IT>

	//  частота шим = входящая частота / период (arr)
	//  125 000 (125 килогерц)  = 16 000 000 / 128
	// (1/60)*1000 = частота 16 (герц);
	float periodM1 = 1200; //мікросекунд
 8001162:	4b58      	ldr	r3, [pc, #352]	; (80012c4 <_Z21steppingyakkazavmaximff+0x1a0>)
 8001164:	61fb      	str	r3, [r7, #28]
	uint32_t psc = 144;
 8001166:	2390      	movs	r3, #144	; 0x90
 8001168:	61bb      	str	r3, [r7, #24]

	if (stepM1 > stepM2) {
 800116a:	6839      	ldr	r1, [r7, #0]
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff55 	bl	800101c <__aeabi_fcmpgt>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d041      	beq.n	80011fc <_Z21steppingyakkazavmaximff+0xd8>

		htim1.Instance->PSC = psc;
 8001178:	4b50      	ldr	r3, [pc, #320]	; (80012bc <_Z21steppingyakkazavmaximff+0x198>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
		htim1.Instance->ARR = periodM1;
 8001180:	4b4e      	ldr	r3, [pc, #312]	; (80012bc <_Z21steppingyakkazavmaximff+0x198>)
 8001182:	681c      	ldr	r4, [r3, #0]
 8001184:	69f8      	ldr	r0, [r7, #28]
 8001186:	f7ff ff79 	bl	800107c <__aeabi_f2uiz>
 800118a:	4603      	mov	r3, r0
 800118c:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1.Instance->CCR3 = periodM1 / 2;
 800118e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001192:	69f8      	ldr	r0, [r7, #28]
 8001194:	f7ff fe3a 	bl	8000e0c <__aeabi_fdiv>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <_Z21steppingyakkazavmaximff+0x198>)
 800119e:	681c      	ldr	r4, [r3, #0]
 80011a0:	4610      	mov	r0, r2
 80011a2:	f7ff ff6b 	bl	800107c <__aeabi_f2uiz>
 80011a6:	4603      	mov	r3, r0
 80011a8:	63e3      	str	r3, [r4, #60]	; 0x3c

		float delimiter = stepM1 / stepM2;
 80011aa:	6839      	ldr	r1, [r7, #0]
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff fe2d 	bl	8000e0c <__aeabi_fdiv>
 80011b2:	4603      	mov	r3, r0
 80011b4:	60fb      	str	r3, [r7, #12]
		float mnoj = ceil(periodM1 * delimiter);
 80011b6:	68f9      	ldr	r1, [r7, #12]
 80011b8:	69f8      	ldr	r0, [r7, #28]
 80011ba:	f7ff fd73 	bl	8000ca4 <__aeabi_fmul>
 80011be:	4603      	mov	r3, r0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ffa3 	bl	800110c <_ZSt4ceilf>
 80011c6:	60b8      	str	r0, [r7, #8]

		htim2.Instance->PSC = psc;
 80011c8:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <_Z21steppingyakkazavmaximff+0x19c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
		htim2.Instance->ARR = mnoj;
 80011d0:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <_Z21steppingyakkazavmaximff+0x19c>)
 80011d2:	681c      	ldr	r4, [r3, #0]
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f7ff ff51 	bl	800107c <__aeabi_f2uiz>
 80011da:	4603      	mov	r3, r0
 80011dc:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2.Instance->CCR3 = mnoj / 2;
 80011de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011e2:	68b8      	ldr	r0, [r7, #8]
 80011e4:	f7ff fe12 	bl	8000e0c <__aeabi_fdiv>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <_Z21steppingyakkazavmaximff+0x19c>)
 80011ee:	681c      	ldr	r4, [r3, #0]
 80011f0:	4610      	mov	r0, r2
 80011f2:	f7ff ff43 	bl	800107c <__aeabi_f2uiz>
 80011f6:	4603      	mov	r3, r0
 80011f8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80011fa:	e047      	b.n	800128c <_Z21steppingyakkazavmaximff+0x168>

	} else if (stepM1 < stepM2) {
 80011fc:	6839      	ldr	r1, [r7, #0]
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff feee 	bl	8000fe0 <__aeabi_fcmplt>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d040      	beq.n	800128c <_Z21steppingyakkazavmaximff+0x168>
//	uint16_t impMore = (72000000/psc_max)/1000; 						//імпульсів кроків за секунду для мотора з більшої кількістю кроків  КРОКІВ НА СЕКУНДУ
//	uint16_t allSecMore = (stepM2/impMore)*1000;		 				//загальний час роботи мотора із більшої кількістю кроків  мілісекунд
//	uint16_t stepSecM1 =  (stepM1/allSecMore)*1000; 					//кроків на секунду на двигуна LESS  250
//	uint16_t PSCmLess= 72000000 / (stepSecM1 * 1000); 					//дільник для мотора LESS

		htim2.Instance->PSC = psc;
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <_Z21steppingyakkazavmaximff+0x19c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
		htim2.Instance->ARR = periodM1;
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <_Z21steppingyakkazavmaximff+0x19c>)
 8001214:	681c      	ldr	r4, [r3, #0]
 8001216:	69f8      	ldr	r0, [r7, #28]
 8001218:	f7ff ff30 	bl	800107c <__aeabi_f2uiz>
 800121c:	4603      	mov	r3, r0
 800121e:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2.Instance->CCR3 = periodM1 / 2;
 8001220:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001224:	69f8      	ldr	r0, [r7, #28]
 8001226:	f7ff fdf1 	bl	8000e0c <__aeabi_fdiv>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <_Z21steppingyakkazavmaximff+0x19c>)
 8001230:	681c      	ldr	r4, [r3, #0]
 8001232:	4610      	mov	r0, r2
 8001234:	f7ff ff22 	bl	800107c <__aeabi_f2uiz>
 8001238:	4603      	mov	r3, r0
 800123a:	63e3      	str	r3, [r4, #60]	; 0x3c

		float delimiter = stepM2 / stepM1;
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f7ff fde4 	bl	8000e0c <__aeabi_fdiv>
 8001244:	4603      	mov	r3, r0
 8001246:	617b      	str	r3, [r7, #20]
		float mnoj = ceil(periodM1 * delimiter);
 8001248:	6979      	ldr	r1, [r7, #20]
 800124a:	69f8      	ldr	r0, [r7, #28]
 800124c:	f7ff fd2a 	bl	8000ca4 <__aeabi_fmul>
 8001250:	4603      	mov	r3, r0
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff5a 	bl	800110c <_ZSt4ceilf>
 8001258:	6138      	str	r0, [r7, #16]

		htim1.Instance->PSC = psc;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <_Z21steppingyakkazavmaximff+0x198>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	629a      	str	r2, [r3, #40]	; 0x28
		htim1.Instance->ARR = mnoj;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <_Z21steppingyakkazavmaximff+0x198>)
 8001264:	681c      	ldr	r4, [r3, #0]
 8001266:	6938      	ldr	r0, [r7, #16]
 8001268:	f7ff ff08 	bl	800107c <__aeabi_f2uiz>
 800126c:	4603      	mov	r3, r0
 800126e:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1.Instance->CCR3 = mnoj / 2;
 8001270:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001274:	6938      	ldr	r0, [r7, #16]
 8001276:	f7ff fdc9 	bl	8000e0c <__aeabi_fdiv>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <_Z21steppingyakkazavmaximff+0x198>)
 8001280:	681c      	ldr	r4, [r3, #0]
 8001282:	4610      	mov	r0, r2
 8001284:	f7ff fefa 	bl	800107c <__aeabi_f2uiz>
 8001288:	4603      	mov	r3, r0
 800128a:	63e3      	str	r3, [r4, #60]	; 0x3c

	}

	//Старт таймера та переривань

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800128c:	2108      	movs	r1, #8
 800128e:	480b      	ldr	r0, [pc, #44]	; (80012bc <_Z21steppingyakkazavmaximff+0x198>)
 8001290:	f002 f94c 	bl	800352c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001294:	2108      	movs	r1, #8
 8001296:	480a      	ldr	r0, [pc, #40]	; (80012c0 <_Z21steppingyakkazavmaximff+0x19c>)
 8001298:	f002 f948 	bl	800352c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <_Z21steppingyakkazavmaximff+0x198>)
 800129e:	f002 f875 	bl	800338c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80012a2:	4807      	ldr	r0, [pc, #28]	; (80012c0 <_Z21steppingyakkazavmaximff+0x19c>)
 80012a4:	f002 f872 	bl	800338c <HAL_TIM_Base_Start_IT>

	return 0;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd90      	pop	{r4, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200005a4 	.word	0x200005a4
 80012b8:	200005a8 	.word	0x200005a8
 80012bc:	200004a0 	.word	0x200004a0
 80012c0:	200004e8 	.word	0x200004e8
 80012c4:	44960000 	.word	0x44960000

080012c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b0be      	sub	sp, #248	; 0xf8
 80012cc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012ce:	f000 febf 	bl	8002050 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012d2:	f000 f87b 	bl	80013cc <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012d6:	f000 fa35 	bl	8001744 <_ZL12MX_GPIO_Initv>
	MX_TIM1_Init();
 80012da:	f000 f905 	bl	80014e8 <_ZL12MX_TIM1_Initv>
	MX_TIM2_Init();
 80012de:	f000 f99b 	bl	8001618 <_ZL12MX_TIM2_Initv>
	MX_SPI1_Init();
 80012e2:	f000 f8c5 	bl	8001470 <_ZL12MX_SPI1_Initv>
	MX_USART1_UART_Init();
 80012e6:	f000 f9ff 	bl	80016e8 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Init(&htim1);
 80012ea:	482e      	ldr	r0, [pc, #184]	; (80013a4 <main+0xdc>)
 80012ec:	f001 fff5 	bl	80032da <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 80012f0:	482d      	ldr	r0, [pc, #180]	; (80013a8 <main+0xe0>)
 80012f2:	f001 fff2 	bl	80032da <HAL_TIM_Base_Init>

	char buf[4];
	char bufAngle[8];
	uint16_t posnow = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	float angle = 0;
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

	HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2120      	movs	r1, #32
 8001308:	4828      	ldr	r0, [pc, #160]	; (80013ac <main+0xe4>)
 800130a:	f001 f9e9 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	4826      	ldr	r0, [pc, #152]	; (80013ac <main+0xe4>)
 8001314:	f001 f9e4 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Dir2_GPIO_Port, Dir2_Pin, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131e:	4824      	ldr	r0, [pc, #144]	; (80013b0 <main+0xe8>)
 8001320:	f001 f9de 	bl	80026e0 <HAL_GPIO_WritePin>

	RoboArm arm1;
 8001324:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fec7 	bl	80010bc <_ZN7RoboArmC1Ev>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <main+0xec>)
 8001330:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001334:	461d      	mov	r5, r3
 8001336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800133e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001342:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f003 fc57 	bl	8004bfc <osThreadCreate>
 800134e:	4603      	mov	r3, r0
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <main+0xf0>)
 8001352:	6013      	str	r3, [r2, #0]

	/* definition and creation of myAMT22Task */
	osThreadDef(myAMT22Task, StartAMT22Data, osPriorityIdle, 0, 128);
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <main+0xf4>)
 8001356:	f107 0420 	add.w	r4, r7, #32
 800135a:	461d      	mov	r5, r3
 800135c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001360:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myAMT22TaskHandle = osThreadCreate(osThread(myAMT22Task), NULL);
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f003 fc44 	bl	8004bfc <osThreadCreate>
 8001374:	4603      	mov	r3, r0
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <main+0xf8>)
 8001378:	6013      	str	r3, [r2, #0]

	/* definition and creation of myUARTTask */
	osThreadDef(myUARTTask, StartUARTData, osPriorityIdle, 0, 128);
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <main+0xfc>)
 800137c:	1d3c      	adds	r4, r7, #4
 800137e:	461d      	mov	r5, r3
 8001380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001388:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myUARTTaskHandle = osThreadCreate(osThread(myUARTTask), NULL);
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f003 fc33 	bl	8004bfc <osThreadCreate>
 8001396:	4603      	mov	r3, r0
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <main+0x100>)
 800139a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800139c:	f003 fc27 	bl	8004bee <osKernelStart>





	while (1) {
 80013a0:	e7fe      	b.n	80013a0 <main+0xd8>
 80013a2:	bf00      	nop
 80013a4:	200004a0 	.word	0x200004a0
 80013a8:	200004e8 	.word	0x200004e8
 80013ac:	40010800 	.word	0x40010800
 80013b0:	40010c00 	.word	0x40010c00
 80013b4:	0800895c 	.word	0x0800895c
 80013b8:	20000578 	.word	0x20000578
 80013bc:	08008984 	.word	0x08008984
 80013c0:	2000057c 	.word	0x2000057c
 80013c4:	080089ac 	.word	0x080089ac
 80013c8:	20000580 	.word	0x20000580

080013cc <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b090      	sub	sp, #64	; 0x40
 80013d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	2228      	movs	r2, #40	; 0x28
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f005 fb6b 	bl	8006ab6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fc:	2301      	movs	r3, #1
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001400:	2302      	movs	r3, #2
 8001402:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001408:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800140a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	4618      	mov	r0, r3
 8001416:	f001 f97b 	bl	8002710 <HAL_RCC_OscConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	bf14      	ite	ne
 8001420:	2301      	movne	r3, #1
 8001422:	2300      	moveq	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 800142a:	f000 fabb 	bl	80019a4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800142e:	230f      	movs	r3, #15
 8001430:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001432:	2302      	movs	r3, #2
 8001434:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800143a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2102      	movs	r1, #2
 8001448:	4618      	mov	r0, r3
 800144a:	f001 fbe3 	bl	8002c14 <HAL_RCC_ClockConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf14      	ite	ne
 8001454:	2301      	movne	r3, #1
 8001456:	2300      	moveq	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 800145e:	f000 faa1 	bl	80019a4 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8001462:	f001 fcc1 	bl	8002de8 <HAL_RCC_EnableCSS>
}
 8001466:	bf00      	nop
 8001468:	3740      	adds	r7, #64	; 0x40
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 8001476:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <_ZL12MX_SPI1_Initv+0x74>)
 8001478:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 800147c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001480:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 800149c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 80014a4:	2218      	movs	r2, #24
 80014a6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 80014bc:	220a      	movs	r2, #10
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80014c0:	4807      	ldr	r0, [pc, #28]	; (80014e0 <_ZL12MX_SPI1_Initv+0x70>)
 80014c2:	f001 fd8b 	bl	8002fdc <HAL_SPI_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf14      	ite	ne
 80014cc:	2301      	movne	r3, #1
 80014ce:	2300      	moveq	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 80014d6:	f000 fa65 	bl	80019a4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000448 	.word	0x20000448
 80014e4:	40013000 	.word	0x40013000

080014e8 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b092      	sub	sp, #72	; 0x48
 80014ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80014f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	615a      	str	r2, [r3, #20]
 800150a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2220      	movs	r2, #32
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f005 facf 	bl	8006ab6 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001518:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <_ZL12MX_TIM1_Initv+0x128>)
 800151a:	4a3e      	ldr	r2, [pc, #248]	; (8001614 <_ZL12MX_TIM1_Initv+0x12c>)
 800151c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 8000 - 1;
 800151e:	4b3c      	ldr	r3, [pc, #240]	; (8001610 <_ZL12MX_TIM1_Initv+0x128>)
 8001520:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001524:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <_ZL12MX_TIM1_Initv+0x128>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 800152c:	4b38      	ldr	r3, [pc, #224]	; (8001610 <_ZL12MX_TIM1_Initv+0x128>)
 800152e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001532:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b36      	ldr	r3, [pc, #216]	; (8001610 <_ZL12MX_TIM1_Initv+0x128>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800153a:	4b35      	ldr	r3, [pc, #212]	; (8001610 <_ZL12MX_TIM1_Initv+0x128>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001540:	4b33      	ldr	r3, [pc, #204]	; (8001610 <_ZL12MX_TIM1_Initv+0x128>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001546:	4832      	ldr	r0, [pc, #200]	; (8001610 <_ZL12MX_TIM1_Initv+0x128>)
 8001548:	f001 ffa0 	bl	800348c <HAL_TIM_PWM_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	bf14      	ite	ne
 8001552:	2301      	movne	r3, #1
 8001554:	2300      	moveq	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <_ZL12MX_TIM1_Initv+0x78>
		Error_Handler();
 800155c:	f000 fa22 	bl	80019a4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001568:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800156c:	4619      	mov	r1, r3
 800156e:	4828      	ldr	r0, [pc, #160]	; (8001610 <_ZL12MX_TIM1_Initv+0x128>)
 8001570:	f002 fcde 	bl	8003f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <_ZL12MX_TIM1_Initv+0xa0>
		Error_Handler();
 8001584:	f000 fa0e 	bl	80019a4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001588:	2360      	movs	r3, #96	; 0x60
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001594:	2300      	movs	r3, #0
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 80015a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a8:	2208      	movs	r2, #8
 80015aa:	4619      	mov	r1, r3
 80015ac:	4818      	ldr	r0, [pc, #96]	; (8001610 <_ZL12MX_TIM1_Initv+0x128>)
 80015ae:	f002 f9cb 	bl	8003948 <HAL_TIM_PWM_ConfigChannel>
 80015b2:	4603      	mov	r3, r0
			!= HAL_OK) {
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf14      	ite	ne
 80015b8:	2301      	movne	r3, #1
 80015ba:	2300      	moveq	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <_ZL12MX_TIM1_Initv+0xde>
		Error_Handler();
 80015c2:	f000 f9ef 	bl	80019a4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015de:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <_ZL12MX_TIM1_Initv+0x128>)
 80015ea:	f002 fcff 	bl	8003fec <HAL_TIMEx_ConfigBreakDeadTime>
 80015ee:	4603      	mov	r3, r0
			!= HAL_OK) {
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf14      	ite	ne
 80015f4:	2301      	movne	r3, #1
 80015f6:	2300      	moveq	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <_ZL12MX_TIM1_Initv+0x11a>
		Error_Handler();
 80015fe:	f000 f9d1 	bl	80019a4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <_ZL12MX_TIM1_Initv+0x128>)
 8001604:	f000 fab6 	bl	8001b74 <HAL_TIM_MspPostInit>

}
 8001608:	bf00      	nop
 800160a:	3748      	adds	r7, #72	; 0x48
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200004a0 	.word	0x200004a0
 8001614:	40012c00 	.word	0x40012c00

08001618 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800161e:	f107 0320 	add.w	r3, r7, #32
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	615a      	str	r2, [r3, #20]
 8001638:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <_ZL12MX_TIM2_Initv+0xcc>)
 800163c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001640:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8000 - 1;
 8001642:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <_ZL12MX_TIM2_Initv+0xcc>)
 8001644:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001648:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <_ZL12MX_TIM2_Initv+0xcc>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <_ZL12MX_TIM2_Initv+0xcc>)
 8001652:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001656:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <_ZL12MX_TIM2_Initv+0xcc>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <_ZL12MX_TIM2_Initv+0xcc>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001664:	481f      	ldr	r0, [pc, #124]	; (80016e4 <_ZL12MX_TIM2_Initv+0xcc>)
 8001666:	f001 ff11 	bl	800348c <HAL_TIM_PWM_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf14      	ite	ne
 8001670:	2301      	movne	r3, #1
 8001672:	2300      	moveq	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <_ZL12MX_TIM2_Initv+0x66>
		Error_Handler();
 800167a:	f000 f993 	bl	80019a4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001686:	f107 0320 	add.w	r3, r7, #32
 800168a:	4619      	mov	r1, r3
 800168c:	4815      	ldr	r0, [pc, #84]	; (80016e4 <_ZL12MX_TIM2_Initv+0xcc>)
 800168e:	f002 fc4f 	bl	8003f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001692:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <_ZL12MX_TIM2_Initv+0x8e>
		Error_Handler();
 80016a2:	f000 f97f 	bl	80019a4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a6:	2360      	movs	r3, #96	; 0x60
 80016a8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2208      	movs	r2, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <_ZL12MX_TIM2_Initv+0xcc>)
 80016be:	f002 f943 	bl	8003948 <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
			!= HAL_OK) {
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf14      	ite	ne
 80016c8:	2301      	movne	r3, #1
 80016ca:	2300      	moveq	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <_ZL12MX_TIM2_Initv+0xbe>
		Error_Handler();
 80016d2:	f000 f967 	bl	80019a4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80016d6:	4803      	ldr	r0, [pc, #12]	; (80016e4 <_ZL12MX_TIM2_Initv+0xcc>)
 80016d8:	f000 fa4c 	bl	8001b74 <HAL_TIM_MspPostInit>

}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200004e8 	.word	0x200004e8

080016e8 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <_ZL19MX_USART1_UART_Initv+0x54>)
 80016ee:	4a14      	ldr	r2, [pc, #80]	; (8001740 <_ZL19MX_USART1_UART_Initv+0x58>)
 80016f0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <_ZL19MX_USART1_UART_Initv+0x54>)
 80016f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <_ZL19MX_USART1_UART_Initv+0x54>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <_ZL19MX_USART1_UART_Initv+0x54>)
 800170e:	220c      	movs	r2, #12
 8001710:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <_ZL19MX_USART1_UART_Initv+0x54>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001720:	f002 fcc7 	bl	80040b2 <HAL_UART_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	bf14      	ite	ne
 800172a:	2301      	movne	r3, #1
 800172c:	2300      	moveq	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8001734:	f000 f936 	bl	80019a4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000530 	.word	0x20000530
 8001740:	40013800 	.word	0x40013800

08001744 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001758:	4b38      	ldr	r3, [pc, #224]	; (800183c <_ZL12MX_GPIO_Initv+0xf8>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a37      	ldr	r2, [pc, #220]	; (800183c <_ZL12MX_GPIO_Initv+0xf8>)
 800175e:	f043 0310 	orr.w	r3, r3, #16
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b35      	ldr	r3, [pc, #212]	; (800183c <_ZL12MX_GPIO_Initv+0xf8>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <_ZL12MX_GPIO_Initv+0xf8>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a31      	ldr	r2, [pc, #196]	; (800183c <_ZL12MX_GPIO_Initv+0xf8>)
 8001776:	f043 0320 	orr.w	r3, r3, #32
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b2f      	ldr	r3, [pc, #188]	; (800183c <_ZL12MX_GPIO_Initv+0xf8>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0320 	and.w	r3, r3, #32
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	4b2c      	ldr	r3, [pc, #176]	; (800183c <_ZL12MX_GPIO_Initv+0xf8>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a2b      	ldr	r2, [pc, #172]	; (800183c <_ZL12MX_GPIO_Initv+0xf8>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <_ZL12MX_GPIO_Initv+0xf8>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <_ZL12MX_GPIO_Initv+0xf8>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a25      	ldr	r2, [pc, #148]	; (800183c <_ZL12MX_GPIO_Initv+0xf8>)
 80017a6:	f043 0308 	orr.w	r3, r3, #8
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <_ZL12MX_GPIO_Initv+0xf8>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017be:	4820      	ldr	r0, [pc, #128]	; (8001840 <_ZL12MX_GPIO_Initv+0xfc>)
 80017c0:	f000 ff8e 	bl	80026e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, En_Pin | Dir_Pin, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2160      	movs	r1, #96	; 0x60
 80017c8:	481e      	ldr	r0, [pc, #120]	; (8001844 <_ZL12MX_GPIO_Initv+0x100>)
 80017ca:	f000 ff89 	bl	80026e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CS_Pin | CS2_Pin | Dir2_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f240 4103 	movw	r1, #1027	; 0x403
 80017d4:	481c      	ldr	r0, [pc, #112]	; (8001848 <_ZL12MX_GPIO_Initv+0x104>)
 80017d6:	f000 ff83 	bl	80026e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Led_Pin */
	GPIO_InitStruct.Pin = Led_Pin;
 80017da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	4619      	mov	r1, r3
 80017f2:	4813      	ldr	r0, [pc, #76]	; (8001840 <_ZL12MX_GPIO_Initv+0xfc>)
 80017f4:	f000 fdf0 	bl	80023d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : En_Pin Dir_Pin */
	GPIO_InitStruct.Pin = En_Pin | Dir_Pin;
 80017f8:	2360      	movs	r3, #96	; 0x60
 80017fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2302      	movs	r3, #2
 8001806:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	480d      	ldr	r0, [pc, #52]	; (8001844 <_ZL12MX_GPIO_Initv+0x100>)
 8001810:	f000 fde2 	bl	80023d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_Pin CS2_Pin Dir2_Pin */
	GPIO_InitStruct.Pin = CS_Pin | CS2_Pin | Dir2_Pin;
 8001814:	f240 4303 	movw	r3, #1027	; 0x403
 8001818:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2302      	movs	r3, #2
 8001824:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	4619      	mov	r1, r3
 800182c:	4806      	ldr	r0, [pc, #24]	; (8001848 <_ZL12MX_GPIO_Initv+0x104>)
 800182e:	f000 fdd3 	bl	80023d8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */

}
 8001832:	bf00      	nop
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	40011000 	.word	0x40011000
 8001844:	40010800 	.word	0x40010800
 8001848:	40010c00 	.word	0x40010c00

0800184c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	if (huart == &huart1) {
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <HAL_UART_RxCpltCallback+0x54>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d11d      	bne.n	8001898 <HAL_UART_RxCpltCallback+0x4c>
		//		HAL_UART_Transmit(&huart1, rx_buffer, sizeof(rx_buffer), 200);
		if (rx_buffer[0] == 1) {
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_UART_RxCpltCallback+0x58>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d106      	bne.n	8001872 <HAL_UART_RxCpltCallback+0x26>
			flagReadEnc = 1;
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_UART_RxCpltCallback+0x5c>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
			steppingyakkazavmaxim(5000, 10000);
 800186a:	4910      	ldr	r1, [pc, #64]	; (80018ac <HAL_UART_RxCpltCallback+0x60>)
 800186c:	4810      	ldr	r0, [pc, #64]	; (80018b0 <HAL_UART_RxCpltCallback+0x64>)
 800186e:	f7ff fc59 	bl	8001124 <_Z21steppingyakkazavmaximff>
		}
		for (int i = 0; i <= sizeof(rx_buffer); i++) {
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	e007      	b.n	8001888 <HAL_UART_RxCpltCallback+0x3c>
			rx_buffer[i] = 0;
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_UART_RxCpltCallback+0x58>)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4413      	add	r3, r2
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i <= sizeof(rx_buffer); i++) {
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3301      	adds	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b14      	cmp	r3, #20
 800188c:	d9f4      	bls.n	8001878 <HAL_UART_RxCpltCallback+0x2c>
		}
//	} else {
//
//		HAL_UART_Transmit(&huart1,"NO EBAT", 6, HAL_MAX_DELAY);
//	}
		HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 800188e:	2214      	movs	r2, #20
 8001890:	4904      	ldr	r1, [pc, #16]	; (80018a4 <HAL_UART_RxCpltCallback+0x58>)
 8001892:	4803      	ldr	r0, [pc, #12]	; (80018a0 <HAL_UART_RxCpltCallback+0x54>)
 8001894:	f002 fc5d 	bl	8004152 <HAL_UART_Receive_IT>
	}
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000530 	.word	0x20000530
 80018a4:	20000584 	.word	0x20000584
 80018a8:	20000598 	.word	0x20000598
 80018ac:	461c4000 	.word	0x461c4000
 80018b0:	459c4000 	.word	0x459c4000

080018b4 <_Z16StartDefaultTaskPKv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osDelay(1);
 80018bc:	2001      	movs	r0, #1
 80018be:	f003 f9e9 	bl	8004c94 <osDelay>
 80018c2:	e7fb      	b.n	80018bc <_Z16StartDefaultTaskPKv+0x8>

080018c4 <_Z14StartAMT22DataPKv>:
 * @brief Function implementing the myAMT22Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAMT22Data */
void StartAMT22Data(void const *argument) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartAMT22Data */

	flagReadEnc = 1;
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <_Z14StartAMT22DataPKv+0x18>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
//			// Отправляем строку через HAL_UART_Transmit()
//			HAL_UART_Transmit(&huart1, str2, strlen(str2), HAL_MAX_DELAY);
//
//		}

		osDelay(600);
 80018d2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80018d6:	f003 f9dd 	bl	8004c94 <osDelay>
 80018da:	e7fa      	b.n	80018d2 <_Z14StartAMT22DataPKv+0xe>
 80018dc:	20000598 	.word	0x20000598

080018e0 <_Z13StartUARTDataPKv>:
 * @brief Function implementing the myUARTTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUARTData */
void StartUARTData(void const *argument) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUARTData */

	/* Infinite loop */
	for (;;) {

		HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80018e8:	2214      	movs	r2, #20
 80018ea:	4904      	ldr	r1, [pc, #16]	; (80018fc <_Z13StartUARTDataPKv+0x1c>)
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <_Z13StartUARTDataPKv+0x20>)
 80018ee:	f002 fc30 	bl	8004152 <HAL_UART_Receive_IT>

		osDelay(1);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f003 f9ce 	bl	8004c94 <osDelay>
		HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80018f8:	e7f6      	b.n	80018e8 <_Z13StartUARTDataPKv+0x8>
 80018fa:	bf00      	nop
 80018fc:	20000584 	.word	0x20000584
 8001900:	20000530 	.word	0x20000530

08001904 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d112      	bne.n	800193c <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		++cntImpulse1;
 8001916:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	4a1a      	ldr	r2, [pc, #104]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800191e:	6013      	str	r3, [r2, #0]

		if (cntImpulse1 >= step1) {
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	db26      	blt.n	800197a <HAL_TIM_PeriodElapsedCallback+0x76>
			//	HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800192c:	2108      	movs	r1, #8
 800192e:	4818      	ldr	r0, [pc, #96]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001930:	f001 fe9e 	bl	8003670 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 8001934:	4816      	ldr	r0, [pc, #88]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001936:	f001 fd7b 	bl	8003430 <HAL_TIM_Base_Stop_IT>
	/* USER CODE END Callback 0 */

	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800193a:	e01e      	b.n	800197a <HAL_TIM_PeriodElapsedCallback+0x76>
	} else if (htim->Instance == TIM2) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001944:	d112      	bne.n	800196c <HAL_TIM_PeriodElapsedCallback+0x68>
		++cntImpulse2;
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	3301      	adds	r3, #1
 800194c:	4a11      	ldr	r2, [pc, #68]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800194e:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= step2) {
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	db0e      	blt.n	800197a <HAL_TIM_PeriodElapsedCallback+0x76>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800195c:	2108      	movs	r1, #8
 800195e:	480f      	ldr	r0, [pc, #60]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001960:	f001 fe86 	bl	8003670 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001964:	480d      	ldr	r0, [pc, #52]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001966:	f001 fd63 	bl	8003430 <HAL_TIM_Base_Stop_IT>
}
 800196a:	e006      	b.n	800197a <HAL_TIM_PeriodElapsedCallback+0x76>
	} else if (htim->Instance == TIM4) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_TIM_PeriodElapsedCallback+0x76>
		HAL_IncTick();
 8001976:	f000 fb81 	bl	800207c <HAL_IncTick>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40012c00 	.word	0x40012c00
 8001988:	2000059c 	.word	0x2000059c
 800198c:	200005a4 	.word	0x200005a4
 8001990:	200004a0 	.word	0x200004a0
 8001994:	200005a0 	.word	0x200005a0
 8001998:	200005a8 	.word	0x200005a8
 800199c:	200004e8 	.word	0x200004e8
 80019a0:	40000800 	.word	0x40000800

080019a4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019ac:	e7fe      	b.n	80019ac <Error_Handler+0x8>
	...

080019b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <HAL_MspInit+0x78>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <HAL_MspInit+0x78>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6193      	str	r3, [r2, #24]
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_MspInit+0x78>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <HAL_MspInit+0x78>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <HAL_MspInit+0x78>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d8:	61d3      	str	r3, [r2, #28]
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <HAL_MspInit+0x78>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	210f      	movs	r1, #15
 80019ea:	f06f 0001 	mvn.w	r0, #1
 80019ee:	f000 fc16 	bl	800221e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2105      	movs	r1, #5
 80019f6:	2005      	movs	r0, #5
 80019f8:	f000 fc11 	bl	800221e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80019fc:	2005      	movs	r0, #5
 80019fe:	f000 fc2a 	bl	8002256 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_MspInit+0x7c>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <HAL_MspInit+0x7c>)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010000 	.word	0x40010000

08001a30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <HAL_SPI_MspInit+0xb4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d145      	bne.n	8001adc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a24      	ldr	r2, [pc, #144]	; (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a6e:	f043 0308 	orr.w	r3, r3, #8
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001a80:	2328      	movs	r3, #40	; 0x28
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4816      	ldr	r0, [pc, #88]	; (8001aec <HAL_SPI_MspInit+0xbc>)
 8001a94:	f000 fca0 	bl	80023d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a98:	2310      	movs	r3, #16
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4810      	ldr	r0, [pc, #64]	; (8001aec <HAL_SPI_MspInit+0xbc>)
 8001aac:	f000 fc94 	bl	80023d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_SPI_MspInit+0xc0>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_SPI_MspInit+0xc0>)
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2105      	movs	r1, #5
 8001ad0:	2023      	movs	r0, #35	; 0x23
 8001ad2:	f000 fba4 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ad6:	2023      	movs	r0, #35	; 0x23
 8001ad8:	f000 fbbd 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	; 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40013000 	.word	0x40013000
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010c00 	.word	0x40010c00
 8001af0:	40010000 	.word	0x40010000

08001af4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1a      	ldr	r2, [pc, #104]	; (8001b6c <HAL_TIM_PWM_MspInit+0x78>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d114      	bne.n	8001b30 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <HAL_TIM_PWM_MspInit+0x7c>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	4a19      	ldr	r2, [pc, #100]	; (8001b70 <HAL_TIM_PWM_MspInit+0x7c>)
 8001b0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b10:	6193      	str	r3, [r2, #24]
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_TIM_PWM_MspInit+0x7c>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2105      	movs	r1, #5
 8001b22:	2019      	movs	r0, #25
 8001b24:	f000 fb7b 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b28:	2019      	movs	r0, #25
 8001b2a:	f000 fb94 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b2e:	e018      	b.n	8001b62 <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b38:	d113      	bne.n	8001b62 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_TIM_PWM_MspInit+0x7c>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <HAL_TIM_PWM_MspInit+0x7c>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	61d3      	str	r3, [r2, #28]
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_TIM_PWM_MspInit+0x7c>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2105      	movs	r1, #5
 8001b56:	201c      	movs	r0, #28
 8001b58:	f000 fb61 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b5c:	201c      	movs	r0, #28
 8001b5e:	f000 fb7a 	bl	8002256 <HAL_NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40012c00 	.word	0x40012c00
 8001b70:	40021000 	.word	0x40021000

08001b74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <HAL_TIM_MspPostInit+0x98>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d119      	bne.n	8001bc8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_TIM_MspPostInit+0x9c>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <HAL_TIM_MspPostInit+0x9c>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_TIM_MspPostInit+0x9c>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4814      	ldr	r0, [pc, #80]	; (8001c14 <HAL_TIM_MspPostInit+0xa0>)
 8001bc2:	f000 fc09 	bl	80023d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bc6:	e01c      	b.n	8001c02 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d117      	bne.n	8001c02 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <HAL_TIM_MspPostInit+0x9c>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <HAL_TIM_MspPostInit+0x9c>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	6193      	str	r3, [r2, #24]
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <HAL_TIM_MspPostInit+0x9c>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bea:	2304      	movs	r3, #4
 8001bec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	; (8001c14 <HAL_TIM_MspPostInit+0xa0>)
 8001bfe:	f000 fbeb 	bl	80023d8 <HAL_GPIO_Init>
}
 8001c02:	bf00      	nop
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40012c00 	.word	0x40012c00
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40010800 	.word	0x40010800

08001c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_UART_MspInit+0xb4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d145      	bne.n	8001cc4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_UART_MspInit+0xb8>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a24      	ldr	r2, [pc, #144]	; (8001cd0 <HAL_UART_MspInit+0xb8>)
 8001c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_UART_MspInit+0xb8>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_UART_MspInit+0xb8>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <HAL_UART_MspInit+0xb8>)
 8001c56:	f043 0308 	orr.w	r3, r3, #8
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <HAL_UART_MspInit+0xb8>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c68:	2340      	movs	r3, #64	; 0x40
 8001c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4816      	ldr	r0, [pc, #88]	; (8001cd4 <HAL_UART_MspInit+0xbc>)
 8001c7c:	f000 fbac 	bl	80023d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	4810      	ldr	r0, [pc, #64]	; (8001cd4 <HAL_UART_MspInit+0xbc>)
 8001c94:	f000 fba0 	bl	80023d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_UART_MspInit+0xc0>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_UART_MspInit+0xc0>)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2105      	movs	r1, #5
 8001cb8:	2025      	movs	r0, #37	; 0x25
 8001cba:	f000 fab0 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cbe:	2025      	movs	r0, #37	; 0x25
 8001cc0:	f000 fac9 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cc4:	bf00      	nop
 8001cc6:	3728      	adds	r7, #40	; 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40013800 	.word	0x40013800
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40010c00 	.word	0x40010c00
 8001cd8:	40010000 	.word	0x40010000

08001cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08e      	sub	sp, #56	; 0x38
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cf2:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <HAL_InitTick+0xe8>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a33      	ldr	r2, [pc, #204]	; (8001dc4 <HAL_InitTick+0xe8>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	61d3      	str	r3, [r2, #28]
 8001cfe:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <HAL_InitTick+0xe8>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d0a:	f107 0210 	add.w	r2, r7, #16
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f001 f8f9 	bl	8002f0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d24:	f001 f8ca 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8001d28:	6378      	str	r0, [r7, #52]	; 0x34
 8001d2a:	e004      	b.n	8001d36 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d2c:	f001 f8c6 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8001d30:	4603      	mov	r3, r0
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d38:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <HAL_InitTick+0xec>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9b      	lsrs	r3, r3, #18
 8001d40:	3b01      	subs	r3, #1
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_InitTick+0xf0>)
 8001d46:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <HAL_InitTick+0xf4>)
 8001d48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_InitTick+0xf0>)
 8001d4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d50:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001d52:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <HAL_InitTick+0xf0>)
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d56:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001d58:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <HAL_InitTick+0xf0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_InitTick+0xf0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_InitTick+0xf0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001d6a:	4818      	ldr	r0, [pc, #96]	; (8001dcc <HAL_InitTick+0xf0>)
 8001d6c:	f001 fab5 	bl	80032da <HAL_TIM_Base_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d11b      	bne.n	8001db6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001d7e:	4813      	ldr	r0, [pc, #76]	; (8001dcc <HAL_InitTick+0xf0>)
 8001d80:	f001 fb04 	bl	800338c <HAL_TIM_Base_Start_IT>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001d8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d111      	bne.n	8001db6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d92:	201e      	movs	r0, #30
 8001d94:	f000 fa5f 	bl	8002256 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	d808      	bhi.n	8001db0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	201e      	movs	r0, #30
 8001da4:	f000 fa3b 	bl	800221e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_InitTick+0xf8>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e002      	b.n	8001db6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001db6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3738      	adds	r7, #56	; 0x38
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	431bde83 	.word	0x431bde83
 8001dcc:	200005ac 	.word	0x200005ac
 8001dd0:	40000800 	.word	0x40000800
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001ddc:	f001 f8c6 	bl	8002f6c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <NMI_Handler+0x8>

08001de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <HardFault_Handler+0x4>

08001de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <MemManage_Handler+0x4>

08001dee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
	...

08001e14 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <TIM1_UP_IRQHandler+0x10>)
 8001e1a:	f001 fc8d 	bl	8003738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200004a0 	.word	0x200004a0

08001e28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <TIM2_IRQHandler+0x10>)
 8001e2e:	f001 fc83 	bl	8003738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200004e8 	.word	0x200004e8

08001e3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <TIM4_IRQHandler+0x10>)
 8001e42:	f001 fc79 	bl	8003738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200005ac 	.word	0x200005ac

08001e50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <SPI1_IRQHandler+0x10>)
 8001e56:	f001 f945 	bl	80030e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000448 	.word	0x20000448

08001e64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <USART1_IRQHandler+0x10>)
 8001e6a:	f002 f997 	bl	800419c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000530 	.word	0x20000530

08001e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return 1;
 8001e7c:	2301      	movs	r3, #1
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <_kill>:

int _kill(int pid, int sig)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e90:	f004 fe64 	bl	8006b5c <__errno>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2216      	movs	r2, #22
 8001e98:	601a      	str	r2, [r3, #0]
  return -1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_exit>:

void _exit (int status)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eae:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffe7 	bl	8001e86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eb8:	e7fe      	b.n	8001eb8 <_exit+0x12>

08001eba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e00a      	b.n	8001ee2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ecc:	f3af 8000 	nop.w
 8001ed0:	4601      	mov	r1, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	60ba      	str	r2, [r7, #8]
 8001ed8:	b2ca      	uxtb	r2, r1
 8001eda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	dbf0      	blt.n	8001ecc <_read+0x12>
  }

  return len;
 8001eea:	687b      	ldr	r3, [r7, #4]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e009      	b.n	8001f1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	60ba      	str	r2, [r7, #8]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	3301      	adds	r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	dbf1      	blt.n	8001f06 <_write+0x12>
  }
  return len;
 8001f22:	687b      	ldr	r3, [r7, #4]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_close>:

int _close(int file)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f52:	605a      	str	r2, [r3, #4]
  return 0;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <_isatty>:

int _isatty(int file)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f68:	2301      	movs	r3, #1
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f94:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <_sbrk+0x5c>)
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <_sbrk+0x60>)
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <_sbrk+0x64>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <_sbrk+0x68>)
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d207      	bcs.n	8001fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fbc:	f004 fdce 	bl	8006b5c <__errno>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	e009      	b.n	8001fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <_sbrk+0x64>)
 8001fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fde:	68fb      	ldr	r3, [r7, #12]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20005000 	.word	0x20005000
 8001fec:	00000400 	.word	0x00000400
 8001ff0:	200005f4 	.word	0x200005f4
 8001ff4:	20001498 	.word	0x20001498

08001ff8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002004:	f7ff fff8 	bl	8001ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800200a:	490c      	ldr	r1, [pc, #48]	; (800203c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800200c:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <LoopFillZerobss+0x16>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002010:	e002      	b.n	8002018 <LoopCopyDataInit>

08002012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002016:	3304      	adds	r3, #4

08002018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800201c:	d3f9      	bcc.n	8002012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002020:	4c09      	ldr	r4, [pc, #36]	; (8002048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002024:	e001      	b.n	800202a <LoopFillZerobss>

08002026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002028:	3204      	adds	r2, #4

0800202a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800202c:	d3fb      	bcc.n	8002026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800202e:	f004 fd9b 	bl	8006b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002032:	f7ff f949 	bl	80012c8 <main>
  bx lr
 8002036:	4770      	bx	lr
  ldr r0, =_sdata
 8002038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800203c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002040:	08008d74 	.word	0x08008d74
  ldr r2, =_sbss
 8002044:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002048:	20001494 	.word	0x20001494

0800204c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800204c:	e7fe      	b.n	800204c <ADC1_2_IRQHandler>
	...

08002050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_Init+0x28>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_Init+0x28>)
 800205a:	f043 0310 	orr.w	r3, r3, #16
 800205e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002060:	2003      	movs	r0, #3
 8002062:	f000 f8d1 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002066:	200f      	movs	r0, #15
 8002068:	f7ff fe38 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800206c:	f7ff fca0 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40022000 	.word	0x40022000

0800207c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_IncTick+0x1c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_IncTick+0x20>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4413      	add	r3, r2
 800208c:	4a03      	ldr	r2, [pc, #12]	; (800209c <HAL_IncTick+0x20>)
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	20000008 	.word	0x20000008
 800209c:	200005f8 	.word	0x200005f8

080020a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <HAL_GetTick+0x10>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	200005f8 	.word	0x200005f8

080020b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d0:	4013      	ands	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	60d3      	str	r3, [r2, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <__NVIC_GetPriorityGrouping+0x18>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	f003 0307 	and.w	r3, r3, #7
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db0b      	blt.n	8002142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	4906      	ldr	r1, [pc, #24]	; (800214c <__NVIC_EnableIRQ+0x34>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2001      	movs	r0, #1
 800213a:	fa00 f202 	lsl.w	r2, r0, r2
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff4f 	bl	80020b4 <__NVIC_SetPriorityGrouping>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002230:	f7ff ff64 	bl	80020fc <__NVIC_GetPriorityGrouping>
 8002234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f7ff ffb2 	bl	80021a4 <NVIC_EncodePriority>
 8002240:	4602      	mov	r2, r0
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff81 	bl	8002150 <__NVIC_SetPriority>
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff57 	bl	8002118 <__NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002272:	b480      	push	{r7}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d008      	beq.n	800229c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2204      	movs	r2, #4
 800228e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e020      	b.n	80022de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 020e 	bic.w	r2, r2, #14
 80022aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	2101      	movs	r1, #1
 80022c6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d005      	beq.n	800230c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2204      	movs	r2, #4
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	e051      	b.n	80023b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 020e 	bic.w	r2, r2, #14
 800231a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a22      	ldr	r2, [pc, #136]	; (80023bc <HAL_DMA_Abort_IT+0xd4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d029      	beq.n	800238a <HAL_DMA_Abort_IT+0xa2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a21      	ldr	r2, [pc, #132]	; (80023c0 <HAL_DMA_Abort_IT+0xd8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d022      	beq.n	8002386 <HAL_DMA_Abort_IT+0x9e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a1f      	ldr	r2, [pc, #124]	; (80023c4 <HAL_DMA_Abort_IT+0xdc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01a      	beq.n	8002380 <HAL_DMA_Abort_IT+0x98>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <HAL_DMA_Abort_IT+0xe0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d012      	beq.n	800237a <HAL_DMA_Abort_IT+0x92>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_DMA_Abort_IT+0xe4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00a      	beq.n	8002374 <HAL_DMA_Abort_IT+0x8c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <HAL_DMA_Abort_IT+0xe8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d102      	bne.n	800236e <HAL_DMA_Abort_IT+0x86>
 8002368:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800236c:	e00e      	b.n	800238c <HAL_DMA_Abort_IT+0xa4>
 800236e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002372:	e00b      	b.n	800238c <HAL_DMA_Abort_IT+0xa4>
 8002374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002378:	e008      	b.n	800238c <HAL_DMA_Abort_IT+0xa4>
 800237a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800237e:	e005      	b.n	800238c <HAL_DMA_Abort_IT+0xa4>
 8002380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002384:	e002      	b.n	800238c <HAL_DMA_Abort_IT+0xa4>
 8002386:	2310      	movs	r3, #16
 8002388:	e000      	b.n	800238c <HAL_DMA_Abort_IT+0xa4>
 800238a:	2301      	movs	r3, #1
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <HAL_DMA_Abort_IT+0xec>)
 800238e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
    } 
  }
  return status;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40020008 	.word	0x40020008
 80023c0:	4002001c 	.word	0x4002001c
 80023c4:	40020030 	.word	0x40020030
 80023c8:	40020044 	.word	0x40020044
 80023cc:	40020058 	.word	0x40020058
 80023d0:	4002006c 	.word	0x4002006c
 80023d4:	40020000 	.word	0x40020000

080023d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d8:	b480      	push	{r7}
 80023da:	b08b      	sub	sp, #44	; 0x2c
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023e2:	2300      	movs	r3, #0
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ea:	e169      	b.n	80026c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023ec:	2201      	movs	r2, #1
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	429a      	cmp	r2, r3
 8002406:	f040 8158 	bne.w	80026ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4a9a      	ldr	r2, [pc, #616]	; (8002678 <HAL_GPIO_Init+0x2a0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d05e      	beq.n	80024d2 <HAL_GPIO_Init+0xfa>
 8002414:	4a98      	ldr	r2, [pc, #608]	; (8002678 <HAL_GPIO_Init+0x2a0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d875      	bhi.n	8002506 <HAL_GPIO_Init+0x12e>
 800241a:	4a98      	ldr	r2, [pc, #608]	; (800267c <HAL_GPIO_Init+0x2a4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d058      	beq.n	80024d2 <HAL_GPIO_Init+0xfa>
 8002420:	4a96      	ldr	r2, [pc, #600]	; (800267c <HAL_GPIO_Init+0x2a4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d86f      	bhi.n	8002506 <HAL_GPIO_Init+0x12e>
 8002426:	4a96      	ldr	r2, [pc, #600]	; (8002680 <HAL_GPIO_Init+0x2a8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d052      	beq.n	80024d2 <HAL_GPIO_Init+0xfa>
 800242c:	4a94      	ldr	r2, [pc, #592]	; (8002680 <HAL_GPIO_Init+0x2a8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d869      	bhi.n	8002506 <HAL_GPIO_Init+0x12e>
 8002432:	4a94      	ldr	r2, [pc, #592]	; (8002684 <HAL_GPIO_Init+0x2ac>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d04c      	beq.n	80024d2 <HAL_GPIO_Init+0xfa>
 8002438:	4a92      	ldr	r2, [pc, #584]	; (8002684 <HAL_GPIO_Init+0x2ac>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d863      	bhi.n	8002506 <HAL_GPIO_Init+0x12e>
 800243e:	4a92      	ldr	r2, [pc, #584]	; (8002688 <HAL_GPIO_Init+0x2b0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d046      	beq.n	80024d2 <HAL_GPIO_Init+0xfa>
 8002444:	4a90      	ldr	r2, [pc, #576]	; (8002688 <HAL_GPIO_Init+0x2b0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d85d      	bhi.n	8002506 <HAL_GPIO_Init+0x12e>
 800244a:	2b12      	cmp	r3, #18
 800244c:	d82a      	bhi.n	80024a4 <HAL_GPIO_Init+0xcc>
 800244e:	2b12      	cmp	r3, #18
 8002450:	d859      	bhi.n	8002506 <HAL_GPIO_Init+0x12e>
 8002452:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <HAL_GPIO_Init+0x80>)
 8002454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002458:	080024d3 	.word	0x080024d3
 800245c:	080024ad 	.word	0x080024ad
 8002460:	080024bf 	.word	0x080024bf
 8002464:	08002501 	.word	0x08002501
 8002468:	08002507 	.word	0x08002507
 800246c:	08002507 	.word	0x08002507
 8002470:	08002507 	.word	0x08002507
 8002474:	08002507 	.word	0x08002507
 8002478:	08002507 	.word	0x08002507
 800247c:	08002507 	.word	0x08002507
 8002480:	08002507 	.word	0x08002507
 8002484:	08002507 	.word	0x08002507
 8002488:	08002507 	.word	0x08002507
 800248c:	08002507 	.word	0x08002507
 8002490:	08002507 	.word	0x08002507
 8002494:	08002507 	.word	0x08002507
 8002498:	08002507 	.word	0x08002507
 800249c:	080024b5 	.word	0x080024b5
 80024a0:	080024c9 	.word	0x080024c9
 80024a4:	4a79      	ldr	r2, [pc, #484]	; (800268c <HAL_GPIO_Init+0x2b4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024aa:	e02c      	b.n	8002506 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	623b      	str	r3, [r7, #32]
          break;
 80024b2:	e029      	b.n	8002508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	3304      	adds	r3, #4
 80024ba:	623b      	str	r3, [r7, #32]
          break;
 80024bc:	e024      	b.n	8002508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	3308      	adds	r3, #8
 80024c4:	623b      	str	r3, [r7, #32]
          break;
 80024c6:	e01f      	b.n	8002508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	330c      	adds	r3, #12
 80024ce:	623b      	str	r3, [r7, #32]
          break;
 80024d0:	e01a      	b.n	8002508 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024da:	2304      	movs	r3, #4
 80024dc:	623b      	str	r3, [r7, #32]
          break;
 80024de:	e013      	b.n	8002508 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024e8:	2308      	movs	r3, #8
 80024ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	611a      	str	r2, [r3, #16]
          break;
 80024f2:	e009      	b.n	8002508 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024f4:	2308      	movs	r3, #8
 80024f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	615a      	str	r2, [r3, #20]
          break;
 80024fe:	e003      	b.n	8002508 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
          break;
 8002504:	e000      	b.n	8002508 <HAL_GPIO_Init+0x130>
          break;
 8002506:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2bff      	cmp	r3, #255	; 0xff
 800250c:	d801      	bhi.n	8002512 <HAL_GPIO_Init+0x13a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	e001      	b.n	8002516 <HAL_GPIO_Init+0x13e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3304      	adds	r3, #4
 8002516:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2bff      	cmp	r3, #255	; 0xff
 800251c:	d802      	bhi.n	8002524 <HAL_GPIO_Init+0x14c>
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	e002      	b.n	800252a <HAL_GPIO_Init+0x152>
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	3b08      	subs	r3, #8
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	210f      	movs	r1, #15
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	fa01 f303 	lsl.w	r3, r1, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	401a      	ands	r2, r3
 800253c:	6a39      	ldr	r1, [r7, #32]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	fa01 f303 	lsl.w	r3, r1, r3
 8002544:	431a      	orrs	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80b1 	beq.w	80026ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002558:	4b4d      	ldr	r3, [pc, #308]	; (8002690 <HAL_GPIO_Init+0x2b8>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	4a4c      	ldr	r2, [pc, #304]	; (8002690 <HAL_GPIO_Init+0x2b8>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6193      	str	r3, [r2, #24]
 8002564:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <HAL_GPIO_Init+0x2b8>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002570:	4a48      	ldr	r2, [pc, #288]	; (8002694 <HAL_GPIO_Init+0x2bc>)
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4013      	ands	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a40      	ldr	r2, [pc, #256]	; (8002698 <HAL_GPIO_Init+0x2c0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d013      	beq.n	80025c4 <HAL_GPIO_Init+0x1ec>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a3f      	ldr	r2, [pc, #252]	; (800269c <HAL_GPIO_Init+0x2c4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00d      	beq.n	80025c0 <HAL_GPIO_Init+0x1e8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a3e      	ldr	r2, [pc, #248]	; (80026a0 <HAL_GPIO_Init+0x2c8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d007      	beq.n	80025bc <HAL_GPIO_Init+0x1e4>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a3d      	ldr	r2, [pc, #244]	; (80026a4 <HAL_GPIO_Init+0x2cc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <HAL_GPIO_Init+0x1e0>
 80025b4:	2303      	movs	r3, #3
 80025b6:	e006      	b.n	80025c6 <HAL_GPIO_Init+0x1ee>
 80025b8:	2304      	movs	r3, #4
 80025ba:	e004      	b.n	80025c6 <HAL_GPIO_Init+0x1ee>
 80025bc:	2302      	movs	r3, #2
 80025be:	e002      	b.n	80025c6 <HAL_GPIO_Init+0x1ee>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <HAL_GPIO_Init+0x1ee>
 80025c4:	2300      	movs	r3, #0
 80025c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c8:	f002 0203 	and.w	r2, r2, #3
 80025cc:	0092      	lsls	r2, r2, #2
 80025ce:	4093      	lsls	r3, r2
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025d6:	492f      	ldr	r1, [pc, #188]	; (8002694 <HAL_GPIO_Init+0x2bc>)
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3302      	adds	r3, #2
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d006      	beq.n	80025fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025f0:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	492c      	ldr	r1, [pc, #176]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	608b      	str	r3, [r1, #8]
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025fe:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	43db      	mvns	r3, r3
 8002606:	4928      	ldr	r1, [pc, #160]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002608:	4013      	ands	r3, r2
 800260a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d006      	beq.n	8002626 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002618:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	4922      	ldr	r1, [pc, #136]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	60cb      	str	r3, [r1, #12]
 8002624:	e006      	b.n	8002634 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	43db      	mvns	r3, r3
 800262e:	491e      	ldr	r1, [pc, #120]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002630:	4013      	ands	r3, r2
 8002632:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d006      	beq.n	800264e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4918      	ldr	r1, [pc, #96]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	43db      	mvns	r3, r3
 8002656:	4914      	ldr	r1, [pc, #80]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002658:	4013      	ands	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d021      	beq.n	80026ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	490e      	ldr	r1, [pc, #56]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	600b      	str	r3, [r1, #0]
 8002674:	e021      	b.n	80026ba <HAL_GPIO_Init+0x2e2>
 8002676:	bf00      	nop
 8002678:	10320000 	.word	0x10320000
 800267c:	10310000 	.word	0x10310000
 8002680:	10220000 	.word	0x10220000
 8002684:	10210000 	.word	0x10210000
 8002688:	10120000 	.word	0x10120000
 800268c:	10110000 	.word	0x10110000
 8002690:	40021000 	.word	0x40021000
 8002694:	40010000 	.word	0x40010000
 8002698:	40010800 	.word	0x40010800
 800269c:	40010c00 	.word	0x40010c00
 80026a0:	40011000 	.word	0x40011000
 80026a4:	40011400 	.word	0x40011400
 80026a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_GPIO_Init+0x304>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	4909      	ldr	r1, [pc, #36]	; (80026dc <HAL_GPIO_Init+0x304>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	3301      	adds	r3, #1
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f47f ae8e 	bne.w	80023ec <HAL_GPIO_Init+0x14>
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	372c      	adds	r7, #44	; 0x2c
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	40010400 	.word	0x40010400

080026e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
 80026ec:	4613      	mov	r3, r2
 80026ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026f0:	787b      	ldrb	r3, [r7, #1]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026fc:	e003      	b.n	8002706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026fe:	887b      	ldrh	r3, [r7, #2]
 8002700:	041a      	lsls	r2, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	611a      	str	r2, [r3, #16]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e272      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8087 	beq.w	800283e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002730:	4b92      	ldr	r3, [pc, #584]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b04      	cmp	r3, #4
 800273a:	d00c      	beq.n	8002756 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800273c:	4b8f      	ldr	r3, [pc, #572]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d112      	bne.n	800276e <HAL_RCC_OscConfig+0x5e>
 8002748:	4b8c      	ldr	r3, [pc, #560]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002754:	d10b      	bne.n	800276e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002756:	4b89      	ldr	r3, [pc, #548]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d06c      	beq.n	800283c <HAL_RCC_OscConfig+0x12c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d168      	bne.n	800283c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e24c      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x76>
 8002778:	4b80      	ldr	r3, [pc, #512]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a7f      	ldr	r2, [pc, #508]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 800277e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	e02e      	b.n	80027e4 <HAL_RCC_OscConfig+0xd4>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x98>
 800278e:	4b7b      	ldr	r3, [pc, #492]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a7a      	ldr	r2, [pc, #488]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 8002794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	4b78      	ldr	r3, [pc, #480]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a77      	ldr	r2, [pc, #476]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 80027a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e01d      	b.n	80027e4 <HAL_RCC_OscConfig+0xd4>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0xbc>
 80027b2:	4b72      	ldr	r3, [pc, #456]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a71      	ldr	r2, [pc, #452]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b6f      	ldr	r3, [pc, #444]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a6e      	ldr	r2, [pc, #440]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0xd4>
 80027cc:	4b6b      	ldr	r3, [pc, #428]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a6a      	ldr	r2, [pc, #424]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 80027d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b68      	ldr	r3, [pc, #416]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a67      	ldr	r2, [pc, #412]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 80027de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7ff fc58 	bl	80020a0 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f4:	f7ff fc54 	bl	80020a0 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e200      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b5d      	ldr	r3, [pc, #372]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0xe4>
 8002812:	e014      	b.n	800283e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7ff fc44 	bl	80020a0 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7ff fc40 	bl	80020a0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1ec      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	4b53      	ldr	r3, [pc, #332]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x10c>
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d063      	beq.n	8002912 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800284a:	4b4c      	ldr	r3, [pc, #304]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002856:	4b49      	ldr	r3, [pc, #292]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b08      	cmp	r3, #8
 8002860:	d11c      	bne.n	800289c <HAL_RCC_OscConfig+0x18c>
 8002862:	4b46      	ldr	r3, [pc, #280]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d116      	bne.n	800289c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	4b43      	ldr	r3, [pc, #268]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x176>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1c0      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	4b3d      	ldr	r3, [pc, #244]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4939      	ldr	r1, [pc, #228]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	e03a      	b.n	8002912 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a4:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_RCC_OscConfig+0x270>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7ff fbf9 	bl	80020a0 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b2:	f7ff fbf5 	bl	80020a0 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1a1      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b2a      	ldr	r3, [pc, #168]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4927      	ldr	r1, [pc, #156]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
 80028e4:	e015      	b.n	8002912 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e6:	4b26      	ldr	r3, [pc, #152]	; (8002980 <HAL_RCC_OscConfig+0x270>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7ff fbd8 	bl	80020a0 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f4:	f7ff fbd4 	bl	80020a0 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e180      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d03a      	beq.n	8002994 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d019      	beq.n	800295a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002926:	4b17      	ldr	r3, [pc, #92]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292c:	f7ff fbb8 	bl	80020a0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002934:	f7ff fbb4 	bl	80020a0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e160      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <HAL_RCC_OscConfig+0x26c>)
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002952:	2001      	movs	r0, #1
 8002954:	f000 fb1e 	bl	8002f94 <RCC_Delay>
 8002958:	e01c      	b.n	8002994 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_RCC_OscConfig+0x274>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7ff fb9e 	bl	80020a0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002966:	e00f      	b.n	8002988 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002968:	f7ff fb9a 	bl	80020a0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d908      	bls.n	8002988 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e146      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	42420000 	.word	0x42420000
 8002984:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002988:	4b92      	ldr	r3, [pc, #584]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e9      	bne.n	8002968 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80a6 	beq.w	8002aee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a6:	4b8b      	ldr	r3, [pc, #556]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10d      	bne.n	80029ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	4b88      	ldr	r3, [pc, #544]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4a87      	ldr	r2, [pc, #540]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029bc:	61d3      	str	r3, [r2, #28]
 80029be:	4b85      	ldr	r3, [pc, #532]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ca:	2301      	movs	r3, #1
 80029cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ce:	4b82      	ldr	r3, [pc, #520]	; (8002bd8 <HAL_RCC_OscConfig+0x4c8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d118      	bne.n	8002a0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029da:	4b7f      	ldr	r3, [pc, #508]	; (8002bd8 <HAL_RCC_OscConfig+0x4c8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a7e      	ldr	r2, [pc, #504]	; (8002bd8 <HAL_RCC_OscConfig+0x4c8>)
 80029e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e6:	f7ff fb5b 	bl	80020a0 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ee:	f7ff fb57 	bl	80020a0 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b64      	cmp	r3, #100	; 0x64
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e103      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	4b75      	ldr	r3, [pc, #468]	; (8002bd8 <HAL_RCC_OscConfig+0x4c8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_OscConfig+0x312>
 8002a14:	4b6f      	ldr	r3, [pc, #444]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	4a6e      	ldr	r2, [pc, #440]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6213      	str	r3, [r2, #32]
 8002a20:	e02d      	b.n	8002a7e <HAL_RCC_OscConfig+0x36e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x334>
 8002a2a:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a69      	ldr	r2, [pc, #420]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6213      	str	r3, [r2, #32]
 8002a36:	4b67      	ldr	r3, [pc, #412]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a66      	ldr	r2, [pc, #408]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	e01c      	b.n	8002a7e <HAL_RCC_OscConfig+0x36e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b05      	cmp	r3, #5
 8002a4a:	d10c      	bne.n	8002a66 <HAL_RCC_OscConfig+0x356>
 8002a4c:	4b61      	ldr	r3, [pc, #388]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4a60      	ldr	r2, [pc, #384]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	f043 0304 	orr.w	r3, r3, #4
 8002a56:	6213      	str	r3, [r2, #32]
 8002a58:	4b5e      	ldr	r3, [pc, #376]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4a5d      	ldr	r2, [pc, #372]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6213      	str	r3, [r2, #32]
 8002a64:	e00b      	b.n	8002a7e <HAL_RCC_OscConfig+0x36e>
 8002a66:	4b5b      	ldr	r3, [pc, #364]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a5a      	ldr	r2, [pc, #360]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	6213      	str	r3, [r2, #32]
 8002a72:	4b58      	ldr	r3, [pc, #352]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4a57      	ldr	r2, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d015      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a86:	f7ff fb0b 	bl	80020a0 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7ff fb07 	bl	80020a0 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0b1      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa4:	4b4b      	ldr	r3, [pc, #300]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ee      	beq.n	8002a8e <HAL_RCC_OscConfig+0x37e>
 8002ab0:	e014      	b.n	8002adc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7ff faf5 	bl	80020a0 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7ff faf1 	bl	80020a0 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e09b      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad0:	4b40      	ldr	r3, [pc, #256]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ee      	bne.n	8002aba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d105      	bne.n	8002aee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae2:	4b3c      	ldr	r3, [pc, #240]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	4a3b      	ldr	r2, [pc, #236]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 8087 	beq.w	8002c06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af8:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d061      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d146      	bne.n	8002b9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b33      	ldr	r3, [pc, #204]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7ff fac5 	bl	80020a0 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7ff fac1 	bl	80020a0 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e06d      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2c:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b40:	d108      	bne.n	8002b54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	4921      	ldr	r1, [pc, #132]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a19      	ldr	r1, [r3, #32]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	430b      	orrs	r3, r1
 8002b66:	491b      	ldr	r1, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7ff fa95 	bl	80020a0 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7ff fa91 	bl	80020a0 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e03d      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x46a>
 8002b98:	e035      	b.n	8002c06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7ff fa7e 	bl	80020a0 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7ff fa7a 	bl	80020a0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e026      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x498>
 8002bc6:	e01e      	b.n	8002c06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e019      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_OscConfig+0x500>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000

08002c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0d0      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c28:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d910      	bls.n	8002c58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b67      	ldr	r3, [pc, #412]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 0207 	bic.w	r2, r3, #7
 8002c3e:	4965      	ldr	r1, [pc, #404]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b63      	ldr	r3, [pc, #396]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0b8      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c70:	4b59      	ldr	r3, [pc, #356]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a58      	ldr	r2, [pc, #352]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c88:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a52      	ldr	r2, [pc, #328]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c94:	4b50      	ldr	r3, [pc, #320]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	494d      	ldr	r1, [pc, #308]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d040      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d115      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e07f      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e073      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06b      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf2:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f023 0203 	bic.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4936      	ldr	r1, [pc, #216]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d04:	f7ff f9cc 	bl	80020a0 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0c:	f7ff f9c8 	bl	80020a0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e053      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 020c 	and.w	r2, r3, #12
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1eb      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d210      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 0207 	bic.w	r2, r3, #7
 8002d4a:	4922      	ldr	r1, [pc, #136]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e032      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4916      	ldr	r1, [pc, #88]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d8e:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	490e      	ldr	r1, [pc, #56]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002da2:	f000 f82d 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 8002da6:	4602      	mov	r2, r0
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	490a      	ldr	r1, [pc, #40]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	5ccb      	ldrb	r3, [r1, r3]
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <HAL_RCC_ClockConfig+0x1cc>)
 8002dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_RCC_ClockConfig+0x1d0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe ff8a 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	080089d0 	.word	0x080089d0
 8002de0:	20000000 	.word	0x20000000
 8002de4:	20000004 	.word	0x20000004

08002de8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_RCC_EnableCSS+0x14>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	4242004c 	.word	0x4242004c

08002e00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d002      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x30>
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x36>
 8002e2e:	e027      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e30:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e32:	613b      	str	r3, [r7, #16]
      break;
 8002e34:	e027      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	0c9b      	lsrs	r3, r3, #18
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e40:	5cd3      	ldrb	r3, [r2, r3]
 8002e42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d010      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	0c5b      	lsrs	r3, r3, #17
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	4a11      	ldr	r2, [pc, #68]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e5a:	5cd3      	ldrb	r3, [r2, r3]
 8002e5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a0d      	ldr	r2, [pc, #52]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e62:	fb03 f202 	mul.w	r2, r3, r2
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	e004      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a0c      	ldr	r2, [pc, #48]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	613b      	str	r3, [r7, #16]
      break;
 8002e7e:	e002      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e82:	613b      	str	r3, [r7, #16]
      break;
 8002e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e86:	693b      	ldr	r3, [r7, #16]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000
 8002e98:	007a1200 	.word	0x007a1200
 8002e9c:	080089e8 	.word	0x080089e8
 8002ea0:	080089f8 	.word	0x080089f8
 8002ea4:	003d0900 	.word	0x003d0900

08002ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eac:	4b02      	ldr	r3, [pc, #8]	; (8002eb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr
 8002eb8:	20000000 	.word	0x20000000

08002ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ec0:	f7ff fff2 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4903      	ldr	r1, [pc, #12]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	080089e0 	.word	0x080089e0

08002ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ee8:	f7ff ffde 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	0adb      	lsrs	r3, r3, #11
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4903      	ldr	r1, [pc, #12]	; (8002f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	080089e0 	.word	0x080089e0

08002f0c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	220f      	movs	r2, #15
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_RCC_GetClockConfig+0x58>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0203 	and.w	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_RCC_GetClockConfig+0x58>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_GetClockConfig+0x58>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_RCC_GetClockConfig+0x58>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	08db      	lsrs	r3, r3, #3
 8002f46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0207 	and.w	r2, r3, #7
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40022000 	.word	0x40022000

08002f6c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_RCC_NMI_IRQHandler+0x20>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	2b80      	cmp	r3, #128	; 0x80
 8002f7a:	d104      	bne.n	8002f86 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002f7c:	f000 f828 	bl	8002fd0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002f82:	2280      	movs	r2, #128	; 0x80
 8002f84:	701a      	strb	r2, [r3, #0]
  }
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	4002100a 	.word	0x4002100a

08002f94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <RCC_Delay+0x34>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <RCC_Delay+0x38>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	0a5b      	lsrs	r3, r3, #9
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fb0:	bf00      	nop
  }
  while (Delay --);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1e5a      	subs	r2, r3, #1
 8002fb6:	60fa      	str	r2, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f9      	bne.n	8002fb0 <RCC_Delay+0x1c>
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	20000000 	.word	0x20000000
 8002fcc:	10624dd3 	.word	0x10624dd3

08002fd0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e076      	b.n	80030dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d108      	bne.n	8003008 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffe:	d009      	beq.n	8003014 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
 8003006:	e005      	b.n	8003014 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fe fcfe 	bl	8001a30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800304a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003098:	ea42 0103 	orr.w	r1, r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	0c1a      	lsrs	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f002 0204 	and.w	r2, r2, #4
 80030ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10e      	bne.n	8003124 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800310c:	2b00      	cmp	r3, #0
 800310e:	d009      	beq.n	8003124 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
    return;
 8003122:	e0b7      	b.n	8003294 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_SPI_IRQHandler+0x5e>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003134:	2b00      	cmp	r3, #0
 8003136:	d004      	beq.n	8003142 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4798      	blx	r3
    return;
 8003140:	e0a8      	b.n	8003294 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_SPI_IRQHandler+0x74>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 809e 	beq.w	8003294 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8098 	beq.w	8003294 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d023      	beq.n	80031b6 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b03      	cmp	r3, #3
 8003178:	d011      	beq.n	800319e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317e:	f043 0204 	orr.w	r2, r3, #4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	e00b      	b.n	80031b6 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	693b      	ldr	r3, [r7, #16]
        return;
 80031b4:	e06e      	b.n	8003294 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d014      	beq.n	80031ea <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d04f      	beq.n	8003292 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003200:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d104      	bne.n	800321e <HAL_SPI_IRQHandler+0x13a>
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d034      	beq.n	8003288 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0203 	bic.w	r2, r2, #3
 800322c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d011      	beq.n	800325a <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323a:	4a18      	ldr	r2, [pc, #96]	; (800329c <HAL_SPI_IRQHandler+0x1b8>)
 800323c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff f850 	bl	80022e8 <HAL_DMA_Abort_IT>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325e:	2b00      	cmp	r3, #0
 8003260:	d016      	beq.n	8003290 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003266:	4a0d      	ldr	r2, [pc, #52]	; (800329c <HAL_SPI_IRQHandler+0x1b8>)
 8003268:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff f83a 	bl	80022e8 <HAL_DMA_Abort_IT>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003286:	e003      	b.n	8003290 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f809 	bl	80032a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800328e:	e000      	b.n	8003292 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8003290:	bf00      	nop
    return;
 8003292:	bf00      	nop
  }
}
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	080032b3 	.word	0x080032b3

080032a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7ff ffe7 	bl	80032a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e041      	b.n	8003370 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d106      	bne.n	8003306 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f839 	bl	8003378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2202      	movs	r2, #2
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	4619      	mov	r1, r3
 8003318:	4610      	mov	r0, r2
 800331a:	f000 fbfb 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
	...

0800338c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d001      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e03a      	b.n	800341a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a18      	ldr	r2, [pc, #96]	; (8003424 <HAL_TIM_Base_Start_IT+0x98>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00e      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x58>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d009      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x58>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <HAL_TIM_Base_Start_IT+0x9c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x58>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a13      	ldr	r2, [pc, #76]	; (800342c <HAL_TIM_Base_Start_IT+0xa0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d111      	bne.n	8003408 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b06      	cmp	r3, #6
 80033f4:	d010      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003406:	e007      	b.n	8003418 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800

08003430 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0201 	bic.w	r2, r2, #1
 8003446:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6a1a      	ldr	r2, [r3, #32]
 800344e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10f      	bne.n	8003478 <HAL_TIM_Base_Stop_IT+0x48>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6a1a      	ldr	r2, [r3, #32]
 800345e:	f240 4344 	movw	r3, #1092	; 0x444
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d107      	bne.n	8003478 <HAL_TIM_Base_Stop_IT+0x48>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0201 	bic.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e041      	b.n	8003522 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe fb1e 	bl	8001af4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f000 fb22 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <HAL_TIM_PWM_Start+0x24>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e022      	b.n	8003596 <HAL_TIM_PWM_Start+0x6a>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b04      	cmp	r3, #4
 8003554:	d109      	bne.n	800356a <HAL_TIM_PWM_Start+0x3e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b01      	cmp	r3, #1
 8003560:	bf14      	ite	ne
 8003562:	2301      	movne	r3, #1
 8003564:	2300      	moveq	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	e015      	b.n	8003596 <HAL_TIM_PWM_Start+0x6a>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d109      	bne.n	8003584 <HAL_TIM_PWM_Start+0x58>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	e008      	b.n	8003596 <HAL_TIM_PWM_Start+0x6a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e05e      	b.n	800365c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d104      	bne.n	80035ae <HAL_TIM_PWM_Start+0x82>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ac:	e013      	b.n	80035d6 <HAL_TIM_PWM_Start+0xaa>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d104      	bne.n	80035be <HAL_TIM_PWM_Start+0x92>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035bc:	e00b      	b.n	80035d6 <HAL_TIM_PWM_Start+0xaa>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_PWM_Start+0xa2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035cc:	e003      	b.n	80035d6 <HAL_TIM_PWM_Start+0xaa>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2201      	movs	r2, #1
 80035dc:	6839      	ldr	r1, [r7, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fc82 	bl	8003ee8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <HAL_TIM_PWM_Start+0x138>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d107      	bne.n	80035fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_TIM_PWM_Start+0x138>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_TIM_PWM_Start+0xfa>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003610:	d009      	beq.n	8003626 <HAL_TIM_PWM_Start+0xfa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a14      	ldr	r2, [pc, #80]	; (8003668 <HAL_TIM_PWM_Start+0x13c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_TIM_PWM_Start+0xfa>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a12      	ldr	r2, [pc, #72]	; (800366c <HAL_TIM_PWM_Start+0x140>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d111      	bne.n	800364a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b06      	cmp	r3, #6
 8003636:	d010      	beq.n	800365a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003648:	e007      	b.n	800365a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800

08003670 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2200      	movs	r2, #0
 8003680:	6839      	ldr	r1, [r7, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fc30 	bl	8003ee8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a29      	ldr	r2, [pc, #164]	; (8003734 <HAL_TIM_PWM_Stop+0xc4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d117      	bne.n	80036c2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a1a      	ldr	r2, [r3, #32]
 8003698:	f241 1311 	movw	r3, #4369	; 0x1111
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <HAL_TIM_PWM_Stop+0x52>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a1a      	ldr	r2, [r3, #32]
 80036a8:	f240 4344 	movw	r3, #1092	; 0x444
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d107      	bne.n	80036c2 <HAL_TIM_PWM_Stop+0x52>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6a1a      	ldr	r2, [r3, #32]
 80036c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10f      	bne.n	80036f2 <HAL_TIM_PWM_Stop+0x82>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	f240 4344 	movw	r3, #1092	; 0x444
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <HAL_TIM_PWM_Stop+0x82>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <HAL_TIM_PWM_Stop+0x92>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003700:	e013      	b.n	800372a <HAL_TIM_PWM_Stop+0xba>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d104      	bne.n	8003712 <HAL_TIM_PWM_Stop+0xa2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003710:	e00b      	b.n	800372a <HAL_TIM_PWM_Stop+0xba>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b08      	cmp	r3, #8
 8003716:	d104      	bne.n	8003722 <HAL_TIM_PWM_Stop+0xb2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003720:	e003      	b.n	800372a <HAL_TIM_PWM_Stop+0xba>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40012c00 	.word	0x40012c00

08003738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b02      	cmp	r3, #2
 800374c:	d122      	bne.n	8003794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b02      	cmp	r3, #2
 800375a:	d11b      	bne.n	8003794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0202 	mvn.w	r2, #2
 8003764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f9af 	bl	8003ade <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9a2 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f9b1 	bl	8003af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d122      	bne.n	80037e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0204 	mvn.w	r2, #4
 80037b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2202      	movs	r2, #2
 80037be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f985 	bl	8003ade <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f978 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f987 	bl	8003af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d122      	bne.n	800383c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b08      	cmp	r3, #8
 8003802:	d11b      	bne.n	800383c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0208 	mvn.w	r2, #8
 800380c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2204      	movs	r2, #4
 8003812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f95b 	bl	8003ade <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f94e 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f95d 	bl	8003af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	2b10      	cmp	r3, #16
 8003848:	d122      	bne.n	8003890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b10      	cmp	r3, #16
 8003856:	d11b      	bne.n	8003890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0210 	mvn.w	r2, #16
 8003860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2208      	movs	r2, #8
 8003866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f931 	bl	8003ade <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f924 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f933 	bl	8003af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d10e      	bne.n	80038bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d107      	bne.n	80038bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0201 	mvn.w	r2, #1
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe f824 	bl	8001904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b80      	cmp	r3, #128	; 0x80
 80038c8:	d10e      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d107      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fbdc 	bl	80040a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f2:	2b40      	cmp	r3, #64	; 0x40
 80038f4:	d10e      	bne.n	8003914 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d107      	bne.n	8003914 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800390c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f8f7 	bl	8003b02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b20      	cmp	r3, #32
 8003920:	d10e      	bne.n	8003940 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b20      	cmp	r3, #32
 800392e:	d107      	bne.n	8003940 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0220 	mvn.w	r2, #32
 8003938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fba7 	bl	800408e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003962:	2302      	movs	r3, #2
 8003964:	e0ae      	b.n	8003ac4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	f200 809f 	bhi.w	8003ab4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003976:	a201      	add	r2, pc, #4	; (adr r2, 800397c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	080039b1 	.word	0x080039b1
 8003980:	08003ab5 	.word	0x08003ab5
 8003984:	08003ab5 	.word	0x08003ab5
 8003988:	08003ab5 	.word	0x08003ab5
 800398c:	080039f1 	.word	0x080039f1
 8003990:	08003ab5 	.word	0x08003ab5
 8003994:	08003ab5 	.word	0x08003ab5
 8003998:	08003ab5 	.word	0x08003ab5
 800399c:	08003a33 	.word	0x08003a33
 80039a0:	08003ab5 	.word	0x08003ab5
 80039a4:	08003ab5 	.word	0x08003ab5
 80039a8:	08003ab5 	.word	0x08003ab5
 80039ac:	08003a73 	.word	0x08003a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f90e 	bl	8003bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0208 	orr.w	r2, r2, #8
 80039ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6999      	ldr	r1, [r3, #24]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	619a      	str	r2, [r3, #24]
      break;
 80039ee:	e064      	b.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f954 	bl	8003ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6999      	ldr	r1, [r3, #24]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	021a      	lsls	r2, r3, #8
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	619a      	str	r2, [r3, #24]
      break;
 8003a30:	e043      	b.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 f99d 	bl	8003d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0208 	orr.w	r2, r2, #8
 8003a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0204 	bic.w	r2, r2, #4
 8003a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69d9      	ldr	r1, [r3, #28]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	61da      	str	r2, [r3, #28]
      break;
 8003a70:	e023      	b.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 f9e7 	bl	8003e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69d9      	ldr	r1, [r3, #28]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	021a      	lsls	r2, r3, #8
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	61da      	str	r2, [r3, #28]
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr

08003b02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a29      	ldr	r2, [pc, #164]	; (8003bcc <TIM_Base_SetConfig+0xb8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00b      	beq.n	8003b44 <TIM_Base_SetConfig+0x30>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b32:	d007      	beq.n	8003b44 <TIM_Base_SetConfig+0x30>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <TIM_Base_SetConfig+0xbc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_Base_SetConfig+0x30>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <TIM_Base_SetConfig+0xc0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d108      	bne.n	8003b56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a1c      	ldr	r2, [pc, #112]	; (8003bcc <TIM_Base_SetConfig+0xb8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00b      	beq.n	8003b76 <TIM_Base_SetConfig+0x62>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b64:	d007      	beq.n	8003b76 <TIM_Base_SetConfig+0x62>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <TIM_Base_SetConfig+0xbc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <TIM_Base_SetConfig+0x62>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <TIM_Base_SetConfig+0xc0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d108      	bne.n	8003b88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a07      	ldr	r2, [pc, #28]	; (8003bcc <TIM_Base_SetConfig+0xb8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d103      	bne.n	8003bbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	615a      	str	r2, [r3, #20]
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	40000400 	.word	0x40000400
 8003bd4:	40000800 	.word	0x40000800

08003bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f023 0201 	bic.w	r2, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f023 0302 	bic.w	r3, r3, #2
 8003c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ca0 <TIM_OC1_SetConfig+0xc8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d10c      	bne.n	8003c4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 0308 	bic.w	r3, r3, #8
 8003c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f023 0304 	bic.w	r3, r3, #4
 8003c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <TIM_OC1_SetConfig+0xc8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d111      	bne.n	8003c7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	621a      	str	r2, [r3, #32]
}
 8003c94:	bf00      	nop
 8003c96:	371c      	adds	r7, #28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40012c00 	.word	0x40012c00

08003ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f023 0210 	bic.w	r2, r3, #16
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0320 	bic.w	r3, r3, #32
 8003cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <TIM_OC2_SetConfig+0xd0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d10d      	bne.n	8003d20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a14      	ldr	r2, [pc, #80]	; (8003d74 <TIM_OC2_SetConfig+0xd0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d113      	bne.n	8003d50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	621a      	str	r2, [r3, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	40012c00 	.word	0x40012c00

08003d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <TIM_OC3_SetConfig+0xd0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d10d      	bne.n	8003df2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <TIM_OC3_SetConfig+0xd0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d113      	bne.n	8003e22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	621a      	str	r2, [r3, #32]
}
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40012c00 	.word	0x40012c00

08003e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	031b      	lsls	r3, r3, #12
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a0f      	ldr	r2, [pc, #60]	; (8003ee4 <TIM_OC4_SetConfig+0x98>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d109      	bne.n	8003ec0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	019b      	lsls	r3, r3, #6
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	40012c00 	.word	0x40012c00

08003ee8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f003 031f 	and.w	r3, r3, #31
 8003efa:	2201      	movs	r2, #1
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a1a      	ldr	r2, [r3, #32]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1a      	ldr	r2, [r3, #32]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	431a      	orrs	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	621a      	str	r2, [r3, #32]
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e046      	b.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a16      	ldr	r2, [pc, #88]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00e      	beq.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d009      	beq.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a10      	ldr	r2, [pc, #64]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40000800 	.word	0x40000800

08003fec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004004:	2302      	movs	r3, #2
 8004006:	e03d      	b.n	8004084 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e042      	b.n	800414a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7fd fd9d 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2224      	movs	r2, #36	; 0x24
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fcd4 	bl	8004aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800410a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800411a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800412a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	4613      	mov	r3, r2
 800415e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b20      	cmp	r3, #32
 800416a:	d112      	bne.n	8004192 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_UART_Receive_IT+0x26>
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e00b      	b.n	8004194 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	461a      	mov	r2, r3
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fab6 	bl	80046fa <UART_Start_Receive_IT>
 800418e:	4603      	mov	r3, r0
 8004190:	e000      	b.n	8004194 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004192:	2302      	movs	r3, #2
  }
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b0ba      	sub	sp, #232	; 0xe8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80041da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10f      	bne.n	8004202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <HAL_UART_IRQHandler+0x66>
 80041ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fb93 	bl	8004926 <UART_Receive_IT>
      return;
 8004200:	e25b      	b.n	80046ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 80de 	beq.w	80043c8 <HAL_UART_IRQHandler+0x22c>
 800420c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d106      	bne.n	8004226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800421c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80d1 	beq.w	80043c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00b      	beq.n	800424a <HAL_UART_IRQHandler+0xae>
 8004232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800424a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <HAL_UART_IRQHandler+0xd2>
 8004256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	f043 0202 	orr.w	r2, r3, #2
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800426e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_UART_IRQHandler+0xf6>
 800427a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	f043 0204 	orr.w	r2, r3, #4
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d011      	beq.n	80042c2 <HAL_UART_IRQHandler+0x126>
 800429e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d105      	bne.n	80042b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	f043 0208 	orr.w	r2, r3, #8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 81f2 	beq.w	80046b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_UART_IRQHandler+0x14e>
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fb1e 	bl	8004926 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf14      	ite	ne
 80042f8:	2301      	movne	r3, #1
 80042fa:	2300      	moveq	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d103      	bne.n	8004316 <HAL_UART_IRQHandler+0x17a>
 800430e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d04f      	beq.n	80043b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fa28 	bl	800476c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d041      	beq.n	80043ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3314      	adds	r3, #20
 8004330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3314      	adds	r3, #20
 8004352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800435a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004366:	e841 2300 	strex	r3, r2, [r1]
 800436a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800436e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1d9      	bne.n	800432a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d013      	beq.n	80043a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	4a7e      	ldr	r2, [pc, #504]	; (800457c <HAL_UART_IRQHandler+0x3e0>)
 8004384:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd ffac 	bl	80022e8 <HAL_DMA_Abort_IT>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d016      	beq.n	80043c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043a0:	4610      	mov	r0, r2
 80043a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	e00e      	b.n	80043c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f993 	bl	80046d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ac:	e00a      	b.n	80043c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f98f 	bl	80046d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	e006      	b.n	80043c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f98b 	bl	80046d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80043c2:	e175      	b.n	80046b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c4:	bf00      	nop
    return;
 80043c6:	e173      	b.n	80046b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	f040 814f 	bne.w	8004670 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 8148 	beq.w	8004670 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8141 	beq.w	8004670 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ee:	2300      	movs	r3, #0
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60bb      	str	r3, [r7, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60bb      	str	r3, [r7, #8]
 8004402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80b6 	beq.w	8004580 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8145 	beq.w	80046b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800442e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004432:	429a      	cmp	r2, r3
 8004434:	f080 813e 	bcs.w	80046b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800443e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2b20      	cmp	r3, #32
 8004448:	f000 8088 	beq.w	800455c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004462:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800446a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004478:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800447c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004484:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1d9      	bne.n	800444c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3314      	adds	r3, #20
 800449e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3314      	adds	r3, #20
 80044b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e1      	bne.n	8004498 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3314      	adds	r3, #20
 80044da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e3      	bne.n	80044d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800452a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	330c      	adds	r3, #12
 800453a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800453e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004540:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004544:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800454c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e3      	bne.n	800451a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004556:	4618      	mov	r0, r3
 8004558:	f7fd fe8b 	bl	8002272 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800456a:	b29b      	uxth	r3, r3
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	b29b      	uxth	r3, r3
 8004570:	4619      	mov	r1, r3
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f8b6 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004578:	e09c      	b.n	80046b4 <HAL_UART_IRQHandler+0x518>
 800457a:	bf00      	nop
 800457c:	08004831 	.word	0x08004831
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004588:	b29b      	uxth	r3, r3
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 808e 	beq.w	80046b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800459c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8089 	beq.w	80046b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045ca:	647a      	str	r2, [r7, #68]	; 0x44
 80045cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e3      	bne.n	80045a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3314      	adds	r3, #20
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	623b      	str	r3, [r7, #32]
   return(result);
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3314      	adds	r3, #20
 80045fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004602:	633a      	str	r2, [r7, #48]	; 0x30
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e3      	bne.n	80045de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	60fb      	str	r3, [r7, #12]
   return(result);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0310 	bic.w	r3, r3, #16
 800463a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	330c      	adds	r3, #12
 8004644:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004648:	61fa      	str	r2, [r7, #28]
 800464a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	69b9      	ldr	r1, [r7, #24]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	617b      	str	r3, [r7, #20]
   return(result);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e3      	bne.n	8004624 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004662:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004666:	4619      	mov	r1, r3
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f83b 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800466e:	e023      	b.n	80046b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004678:	2b00      	cmp	r3, #0
 800467a:	d009      	beq.n	8004690 <HAL_UART_IRQHandler+0x4f4>
 800467c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f8e5 	bl	8004858 <UART_Transmit_IT>
    return;
 800468e:	e014      	b.n	80046ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00e      	beq.n	80046ba <HAL_UART_IRQHandler+0x51e>
 800469c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f924 	bl	80048f6 <UART_EndTransmit_IT>
    return;
 80046ae:	e004      	b.n	80046ba <HAL_UART_IRQHandler+0x51e>
    return;
 80046b0:	bf00      	nop
 80046b2:	e002      	b.n	80046ba <HAL_UART_IRQHandler+0x51e>
      return;
 80046b4:	bf00      	nop
 80046b6:	e000      	b.n	80046ba <HAL_UART_IRQHandler+0x51e>
      return;
 80046b8:	bf00      	nop
  }
}
 80046ba:	37e8      	adds	r7, #232	; 0xe8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	4770      	bx	lr

080046d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr

080046e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr

080046fa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	4613      	mov	r3, r2
 8004706:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	88fa      	ldrh	r2, [r7, #6]
 8004712:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2222      	movs	r2, #34	; 0x22
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800473e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0220 	orr.w	r2, r2, #32
 800475e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800476c:	b480      	push	{r7}
 800476e:	b095      	sub	sp, #84	; 0x54
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800478a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	330c      	adds	r3, #12
 8004792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004794:	643a      	str	r2, [r7, #64]	; 0x40
 8004796:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800479a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e5      	bne.n	8004774 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3314      	adds	r3, #20
 80047ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3314      	adds	r3, #20
 80047c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e5      	bne.n	80047a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d119      	bne.n	8004818 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f023 0310 	bic.w	r3, r3, #16
 80047fa:	647b      	str	r3, [r7, #68]	; 0x44
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004804:	61ba      	str	r2, [r7, #24]
 8004806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	6979      	ldr	r1, [r7, #20]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	613b      	str	r3, [r7, #16]
   return(result);
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e5      	bne.n	80047e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004826:	bf00      	nop
 8004828:	3754      	adds	r7, #84	; 0x54
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff ff41 	bl	80046d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b21      	cmp	r3, #33	; 0x21
 800486a:	d13e      	bne.n	80048ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004874:	d114      	bne.n	80048a0 <UART_Transmit_IT+0x48>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d110      	bne.n	80048a0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004892:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	1c9a      	adds	r2, r3, #2
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	621a      	str	r2, [r3, #32]
 800489e:	e008      	b.n	80048b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	1c59      	adds	r1, r3, #1
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6211      	str	r1, [r2, #32]
 80048aa:	781a      	ldrb	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	4619      	mov	r1, r3
 80048c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10f      	bne.n	80048e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e000      	b.n	80048ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048ea:	2302      	movs	r3, #2
  }
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fed2 	bl	80046c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b08c      	sub	sp, #48	; 0x30
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b22      	cmp	r3, #34	; 0x22
 8004938:	f040 80ae 	bne.w	8004a98 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004944:	d117      	bne.n	8004976 <UART_Receive_IT+0x50>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d113      	bne.n	8004976 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	b29b      	uxth	r3, r3
 8004960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004964:	b29a      	uxth	r2, r3
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	1c9a      	adds	r2, r3, #2
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28
 8004974:	e026      	b.n	80049c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004988:	d007      	beq.n	800499a <UART_Receive_IT+0x74>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10a      	bne.n	80049a8 <UART_Receive_IT+0x82>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	e008      	b.n	80049ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4619      	mov	r1, r3
 80049d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d15d      	bne.n	8004a94 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0220 	bic.w	r2, r2, #32
 80049e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d135      	bne.n	8004a8a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	613b      	str	r3, [r7, #16]
   return(result);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f023 0310 	bic.w	r3, r3, #16
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	330c      	adds	r3, #12
 8004a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a44:	623a      	str	r2, [r7, #32]
 8004a46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	69f9      	ldr	r1, [r7, #28]
 8004a4a:	6a3a      	ldr	r2, [r7, #32]
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e5      	bne.n	8004a24 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b10      	cmp	r3, #16
 8004a64:	d10a      	bne.n	8004a7c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fe2e 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
 8004a88:	e002      	b.n	8004a90 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fc fede 	bl	800184c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e002      	b.n	8004a9a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
  }
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3730      	adds	r7, #48	; 0x30
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ade:	f023 030c 	bic.w	r3, r3, #12
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a2c      	ldr	r2, [pc, #176]	; (8004bb8 <UART_SetConfig+0x114>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d103      	bne.n	8004b14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b0c:	f7fe f9ea 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	e002      	b.n	8004b1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b14:	f7fe f9d2 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8004b18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009a      	lsls	r2, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	4a22      	ldr	r2, [pc, #136]	; (8004bbc <UART_SetConfig+0x118>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	0119      	lsls	r1, r3, #4
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009a      	lsls	r2, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b50:	4b1a      	ldr	r3, [pc, #104]	; (8004bbc <UART_SetConfig+0x118>)
 8004b52:	fba3 0302 	umull	r0, r3, r3, r2
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2064      	movs	r0, #100	; 0x64
 8004b5a:	fb00 f303 	mul.w	r3, r0, r3
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	3332      	adds	r3, #50	; 0x32
 8004b64:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <UART_SetConfig+0x118>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b70:	4419      	add	r1, r3
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	009a      	lsls	r2, r3, #2
 8004b7c:	441a      	add	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <UART_SetConfig+0x118>)
 8004b8a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	2064      	movs	r0, #100	; 0x64
 8004b92:	fb00 f303 	mul.w	r3, r0, r3
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	3332      	adds	r3, #50	; 0x32
 8004b9c:	4a07      	ldr	r2, [pc, #28]	; (8004bbc <UART_SetConfig+0x118>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	f003 020f 	and.w	r2, r3, #15
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	440a      	add	r2, r1
 8004bae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40013800 	.word	0x40013800
 8004bbc:	51eb851f 	.word	0x51eb851f

08004bc0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bd2:	2b84      	cmp	r3, #132	; 0x84
 8004bd4:	d005      	beq.n	8004be2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004bd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	3303      	adds	r3, #3
 8004be0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004be2:	68fb      	ldr	r3, [r7, #12]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr

08004bee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004bf2:	f000 fad1 	bl	8005198 <vTaskStartScheduler>
  
  return osOK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bfe:	b089      	sub	sp, #36	; 0x24
 8004c00:	af04      	add	r7, sp, #16
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d020      	beq.n	8004c50 <osThreadCreate+0x54>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d01c      	beq.n	8004c50 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685c      	ldr	r4, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691e      	ldr	r6, [r3, #16]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff ffc9 	bl	8004bc0 <makeFreeRtosPriority>
 8004c2e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c38:	9202      	str	r2, [sp, #8]
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	9100      	str	r1, [sp, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	4632      	mov	r2, r6
 8004c42:	4629      	mov	r1, r5
 8004c44:	4620      	mov	r0, r4
 8004c46:	f000 f8e8 	bl	8004e1a <xTaskCreateStatic>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	e01c      	b.n	8004c8a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685c      	ldr	r4, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c5c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff ffab 	bl	8004bc0 <makeFreeRtosPriority>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	f107 030c 	add.w	r3, r7, #12
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	9200      	str	r2, [sp, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	4632      	mov	r2, r6
 8004c78:	4629      	mov	r1, r5
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f000 f929 	bl	8004ed2 <xTaskCreate>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d001      	beq.n	8004c8a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e000      	b.n	8004c8c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c94 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <osDelay+0x16>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	e000      	b.n	8004cac <osDelay+0x18>
 8004caa:	2301      	movs	r3, #1
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fa3f 	bl	8005130 <vTaskDelay>
  
  return osOK;
 8004cb2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f103 0208 	add.w	r2, r3, #8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f103 0208 	add.w	r2, r3, #8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f103 0208 	add.w	r2, r3, #8
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr

08004cfa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr

08004d12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	601a      	str	r2, [r3, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr

08004d58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6e:	d103      	bne.n	8004d78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	e00c      	b.n	8004d92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e002      	b.n	8004d86 <vListInsert+0x2e>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d2f6      	bcs.n	8004d80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	601a      	str	r2, [r3, #0]
}
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6892      	ldr	r2, [r2, #8]
 8004dde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6852      	ldr	r2, [r2, #4]
 8004de8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d103      	bne.n	8004dfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	1e5a      	subs	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr

08004e1a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b08e      	sub	sp, #56	; 0x38
 8004e1e:	af04      	add	r7, sp, #16
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
 8004e26:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <xTaskCreateStatic+0x46>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	61fb      	str	r3, [r7, #28]
}
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e60:	2354      	movs	r3, #84	; 0x54
 8004e62:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	2b54      	cmp	r3, #84	; 0x54
 8004e68:	d00a      	beq.n	8004e80 <xTaskCreateStatic+0x66>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	61bb      	str	r3, [r7, #24]
}
 8004e7c:	bf00      	nop
 8004e7e:	e7fe      	b.n	8004e7e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01e      	beq.n	8004ec4 <xTaskCreateStatic+0xaa>
 8004e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01b      	beq.n	8004ec4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9303      	str	r3, [sp, #12]
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	9302      	str	r3, [sp, #8]
 8004ea6:	f107 0314 	add.w	r3, r7, #20
 8004eaa:	9301      	str	r3, [sp, #4]
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f850 	bl	8004f5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ebe:	f000 f8cd 	bl	800505c <prvAddNewTaskToReadyList>
 8004ec2:	e001      	b.n	8004ec8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ec8:	697b      	ldr	r3, [r7, #20]
	}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3728      	adds	r7, #40	; 0x28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b08c      	sub	sp, #48	; 0x30
 8004ed6:	af04      	add	r7, sp, #16
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fe6a 	bl	8005bc0 <pvPortMalloc>
 8004eec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00e      	beq.n	8004f12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004ef4:	2054      	movs	r0, #84	; 0x54
 8004ef6:	f000 fe63 	bl	8005bc0 <pvPortMalloc>
 8004efa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
 8004f08:	e005      	b.n	8004f16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f0a:	6978      	ldr	r0, [r7, #20]
 8004f0c:	f000 ff1c 	bl	8005d48 <vPortFree>
 8004f10:	e001      	b.n	8004f16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d017      	beq.n	8004f4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f24:	88fa      	ldrh	r2, [r7, #6]
 8004f26:	2300      	movs	r3, #0
 8004f28:	9303      	str	r3, [sp, #12]
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	9302      	str	r3, [sp, #8]
 8004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 f80e 	bl	8004f5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f40:	69f8      	ldr	r0, [r7, #28]
 8004f42:	f000 f88b 	bl	800505c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f46:	2301      	movs	r3, #1
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	e002      	b.n	8004f52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f52:	69bb      	ldr	r3, [r7, #24]
	}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3720      	adds	r7, #32
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f74:	3b01      	subs	r3, #1
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f023 0307 	bic.w	r3, r3, #7
 8004f82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	617b      	str	r3, [r7, #20]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61fb      	str	r3, [r7, #28]
 8004fa8:	e012      	b.n	8004fd0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	4413      	add	r3, r2
 8004fb0:	7819      	ldrb	r1, [r3, #0]
 8004fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3334      	adds	r3, #52	; 0x34
 8004fba:	460a      	mov	r2, r1
 8004fbc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d006      	beq.n	8004fd8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b0f      	cmp	r3, #15
 8004fd4:	d9e9      	bls.n	8004faa <prvInitialiseNewTask+0x4e>
 8004fd6:	e000      	b.n	8004fda <prvInitialiseNewTask+0x7e>
		{
			break;
 8004fd8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe4:	2b06      	cmp	r3, #6
 8004fe6:	d901      	bls.n	8004fec <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fe8:	2306      	movs	r3, #6
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	3304      	adds	r3, #4
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff fe79 	bl	8004cfa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	3318      	adds	r3, #24
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fe74 	bl	8004cfa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005016:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	f1c3 0207 	rsb	r2, r3, #7
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005026:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	2200      	movs	r2, #0
 800502c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	68f9      	ldr	r1, [r7, #12]
 800503a:	69b8      	ldr	r0, [r7, #24]
 800503c:	f000 fc0e 	bl	800585c <pxPortInitialiseStack>
 8005040:	4602      	mov	r2, r0
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005052:	bf00      	nop
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005064:	f000 fcea 	bl	8005a3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005068:	4b2a      	ldr	r3, [pc, #168]	; (8005114 <prvAddNewTaskToReadyList+0xb8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3301      	adds	r3, #1
 800506e:	4a29      	ldr	r2, [pc, #164]	; (8005114 <prvAddNewTaskToReadyList+0xb8>)
 8005070:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005072:	4b29      	ldr	r3, [pc, #164]	; (8005118 <prvAddNewTaskToReadyList+0xbc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d109      	bne.n	800508e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800507a:	4a27      	ldr	r2, [pc, #156]	; (8005118 <prvAddNewTaskToReadyList+0xbc>)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005080:	4b24      	ldr	r3, [pc, #144]	; (8005114 <prvAddNewTaskToReadyList+0xb8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d110      	bne.n	80050aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005088:	f000 fac0 	bl	800560c <prvInitialiseTaskLists>
 800508c:	e00d      	b.n	80050aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800508e:	4b23      	ldr	r3, [pc, #140]	; (800511c <prvAddNewTaskToReadyList+0xc0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005096:	4b20      	ldr	r3, [pc, #128]	; (8005118 <prvAddNewTaskToReadyList+0xbc>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d802      	bhi.n	80050aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050a4:	4a1c      	ldr	r2, [pc, #112]	; (8005118 <prvAddNewTaskToReadyList+0xbc>)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050aa:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <prvAddNewTaskToReadyList+0xc4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3301      	adds	r3, #1
 80050b0:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <prvAddNewTaskToReadyList+0xc4>)
 80050b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	2201      	movs	r2, #1
 80050ba:	409a      	lsls	r2, r3
 80050bc:	4b19      	ldr	r3, [pc, #100]	; (8005124 <prvAddNewTaskToReadyList+0xc8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	4a18      	ldr	r2, [pc, #96]	; (8005124 <prvAddNewTaskToReadyList+0xc8>)
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4a15      	ldr	r2, [pc, #84]	; (8005128 <prvAddNewTaskToReadyList+0xcc>)
 80050d4:	441a      	add	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f7ff fe18 	bl	8004d12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050e2:	f000 fcdb 	bl	8005a9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <prvAddNewTaskToReadyList+0xc0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00e      	beq.n	800510c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050ee:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <prvAddNewTaskToReadyList+0xbc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d207      	bcs.n	800510c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050fc:	4b0b      	ldr	r3, [pc, #44]	; (800512c <prvAddNewTaskToReadyList+0xd0>)
 80050fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	200006fc 	.word	0x200006fc
 8005118:	200005fc 	.word	0x200005fc
 800511c:	20000708 	.word	0x20000708
 8005120:	20000718 	.word	0x20000718
 8005124:	20000704 	.word	0x20000704
 8005128:	20000600 	.word	0x20000600
 800512c:	e000ed04 	.word	0xe000ed04

08005130 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d017      	beq.n	8005172 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005142:	4b13      	ldr	r3, [pc, #76]	; (8005190 <vTaskDelay+0x60>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <vTaskDelay+0x30>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	60bb      	str	r3, [r7, #8]
}
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005160:	f000 f87a 	bl	8005258 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005164:	2100      	movs	r1, #0
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fb12 	bl	8005790 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800516c:	f000 f882 	bl	8005274 <xTaskResumeAll>
 8005170:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d107      	bne.n	8005188 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005178:	4b06      	ldr	r3, [pc, #24]	; (8005194 <vTaskDelay+0x64>)
 800517a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000724 	.word	0x20000724
 8005194:	e000ed04 	.word	0xe000ed04

08005198 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	; 0x28
 800519c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051a6:	463a      	mov	r2, r7
 80051a8:	1d39      	adds	r1, r7, #4
 80051aa:	f107 0308 	add.w	r3, r7, #8
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fb ff94 	bl	80010dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	9202      	str	r2, [sp, #8]
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	2300      	movs	r3, #0
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	2300      	movs	r3, #0
 80051c4:	460a      	mov	r2, r1
 80051c6:	491e      	ldr	r1, [pc, #120]	; (8005240 <vTaskStartScheduler+0xa8>)
 80051c8:	481e      	ldr	r0, [pc, #120]	; (8005244 <vTaskStartScheduler+0xac>)
 80051ca:	f7ff fe26 	bl	8004e1a <xTaskCreateStatic>
 80051ce:	4603      	mov	r3, r0
 80051d0:	4a1d      	ldr	r2, [pc, #116]	; (8005248 <vTaskStartScheduler+0xb0>)
 80051d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051d4:	4b1c      	ldr	r3, [pc, #112]	; (8005248 <vTaskStartScheduler+0xb0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051dc:	2301      	movs	r3, #1
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	e001      	b.n	80051e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d116      	bne.n	800521a <vTaskStartScheduler+0x82>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	613b      	str	r3, [r7, #16]
}
 80051fe:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005200:	4b12      	ldr	r3, [pc, #72]	; (800524c <vTaskStartScheduler+0xb4>)
 8005202:	f04f 32ff 	mov.w	r2, #4294967295
 8005206:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005208:	4b11      	ldr	r3, [pc, #68]	; (8005250 <vTaskStartScheduler+0xb8>)
 800520a:	2201      	movs	r2, #1
 800520c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800520e:	4b11      	ldr	r3, [pc, #68]	; (8005254 <vTaskStartScheduler+0xbc>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005214:	f000 fba0 	bl	8005958 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005218:	e00e      	b.n	8005238 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005220:	d10a      	bne.n	8005238 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	60fb      	str	r3, [r7, #12]
}
 8005234:	bf00      	nop
 8005236:	e7fe      	b.n	8005236 <vTaskStartScheduler+0x9e>
}
 8005238:	bf00      	nop
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	080089c8 	.word	0x080089c8
 8005244:	080055dd 	.word	0x080055dd
 8005248:	20000720 	.word	0x20000720
 800524c:	2000071c 	.word	0x2000071c
 8005250:	20000708 	.word	0x20000708
 8005254:	20000700 	.word	0x20000700

08005258 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800525c:	4b04      	ldr	r3, [pc, #16]	; (8005270 <vTaskSuspendAll+0x18>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	4a03      	ldr	r2, [pc, #12]	; (8005270 <vTaskSuspendAll+0x18>)
 8005264:	6013      	str	r3, [r2, #0]
}
 8005266:	bf00      	nop
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000724 	.word	0x20000724

08005274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800527e:	2300      	movs	r3, #0
 8005280:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005282:	4b41      	ldr	r3, [pc, #260]	; (8005388 <xTaskResumeAll+0x114>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	603b      	str	r3, [r7, #0]
}
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052a0:	f000 fbcc 	bl	8005a3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052a4:	4b38      	ldr	r3, [pc, #224]	; (8005388 <xTaskResumeAll+0x114>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	4a37      	ldr	r2, [pc, #220]	; (8005388 <xTaskResumeAll+0x114>)
 80052ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ae:	4b36      	ldr	r3, [pc, #216]	; (8005388 <xTaskResumeAll+0x114>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d161      	bne.n	800537a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052b6:	4b35      	ldr	r3, [pc, #212]	; (800538c <xTaskResumeAll+0x118>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d05d      	beq.n	800537a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052be:	e02e      	b.n	800531e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80052c0:	4b33      	ldr	r3, [pc, #204]	; (8005390 <xTaskResumeAll+0x11c>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3318      	adds	r3, #24
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff fd7b 	bl	8004dc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fd76 	bl	8004dc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	2201      	movs	r2, #1
 80052e2:	409a      	lsls	r2, r3
 80052e4:	4b2b      	ldr	r3, [pc, #172]	; (8005394 <xTaskResumeAll+0x120>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	4a2a      	ldr	r2, [pc, #168]	; (8005394 <xTaskResumeAll+0x120>)
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4a27      	ldr	r2, [pc, #156]	; (8005398 <xTaskResumeAll+0x124>)
 80052fc:	441a      	add	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3304      	adds	r3, #4
 8005302:	4619      	mov	r1, r3
 8005304:	4610      	mov	r0, r2
 8005306:	f7ff fd04 	bl	8004d12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530e:	4b23      	ldr	r3, [pc, #140]	; (800539c <xTaskResumeAll+0x128>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	429a      	cmp	r2, r3
 8005316:	d302      	bcc.n	800531e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005318:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <xTaskResumeAll+0x12c>)
 800531a:	2201      	movs	r2, #1
 800531c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800531e:	4b1c      	ldr	r3, [pc, #112]	; (8005390 <xTaskResumeAll+0x11c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1cc      	bne.n	80052c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800532c:	f000 fa0c 	bl	8005748 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005330:	4b1c      	ldr	r3, [pc, #112]	; (80053a4 <xTaskResumeAll+0x130>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d010      	beq.n	800535e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800533c:	f000 f836 	bl	80053ac <xTaskIncrementTick>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005346:	4b16      	ldr	r3, [pc, #88]	; (80053a0 <xTaskResumeAll+0x12c>)
 8005348:	2201      	movs	r2, #1
 800534a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3b01      	subs	r3, #1
 8005350:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1f1      	bne.n	800533c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005358:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <xTaskResumeAll+0x130>)
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <xTaskResumeAll+0x12c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005366:	2301      	movs	r3, #1
 8005368:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800536a:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <xTaskResumeAll+0x134>)
 800536c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800537a:	f000 fb8f 	bl	8005a9c <vPortExitCritical>

	return xAlreadyYielded;
 800537e:	68bb      	ldr	r3, [r7, #8]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000724 	.word	0x20000724
 800538c:	200006fc 	.word	0x200006fc
 8005390:	200006bc 	.word	0x200006bc
 8005394:	20000704 	.word	0x20000704
 8005398:	20000600 	.word	0x20000600
 800539c:	200005fc 	.word	0x200005fc
 80053a0:	20000710 	.word	0x20000710
 80053a4:	2000070c 	.word	0x2000070c
 80053a8:	e000ed04 	.word	0xe000ed04

080053ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053b6:	4b51      	ldr	r3, [pc, #324]	; (80054fc <xTaskIncrementTick+0x150>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f040 808d 	bne.w	80054da <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053c0:	4b4f      	ldr	r3, [pc, #316]	; (8005500 <xTaskIncrementTick+0x154>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053c8:	4a4d      	ldr	r2, [pc, #308]	; (8005500 <xTaskIncrementTick+0x154>)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d120      	bne.n	8005416 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80053d4:	4b4b      	ldr	r3, [pc, #300]	; (8005504 <xTaskIncrementTick+0x158>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	603b      	str	r3, [r7, #0]
}
 80053f0:	bf00      	nop
 80053f2:	e7fe      	b.n	80053f2 <xTaskIncrementTick+0x46>
 80053f4:	4b43      	ldr	r3, [pc, #268]	; (8005504 <xTaskIncrementTick+0x158>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	4b43      	ldr	r3, [pc, #268]	; (8005508 <xTaskIncrementTick+0x15c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a41      	ldr	r2, [pc, #260]	; (8005504 <xTaskIncrementTick+0x158>)
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	4a41      	ldr	r2, [pc, #260]	; (8005508 <xTaskIncrementTick+0x15c>)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	4b40      	ldr	r3, [pc, #256]	; (800550c <xTaskIncrementTick+0x160>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3301      	adds	r3, #1
 800540e:	4a3f      	ldr	r2, [pc, #252]	; (800550c <xTaskIncrementTick+0x160>)
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	f000 f999 	bl	8005748 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005416:	4b3e      	ldr	r3, [pc, #248]	; (8005510 <xTaskIncrementTick+0x164>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	429a      	cmp	r2, r3
 800541e:	d34d      	bcc.n	80054bc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005420:	4b38      	ldr	r3, [pc, #224]	; (8005504 <xTaskIncrementTick+0x158>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <xTaskIncrementTick+0x82>
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <xTaskIncrementTick+0x84>
 800542e:	2300      	movs	r3, #0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005434:	4b36      	ldr	r3, [pc, #216]	; (8005510 <xTaskIncrementTick+0x164>)
 8005436:	f04f 32ff 	mov.w	r2, #4294967295
 800543a:	601a      	str	r2, [r3, #0]
					break;
 800543c:	e03e      	b.n	80054bc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800543e:	4b31      	ldr	r3, [pc, #196]	; (8005504 <xTaskIncrementTick+0x158>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	429a      	cmp	r2, r3
 8005454:	d203      	bcs.n	800545e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005456:	4a2e      	ldr	r2, [pc, #184]	; (8005510 <xTaskIncrementTick+0x164>)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6013      	str	r3, [r2, #0]
						break;
 800545c:	e02e      	b.n	80054bc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	3304      	adds	r3, #4
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fcb0 	bl	8004dc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	3318      	adds	r3, #24
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff fca7 	bl	8004dc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	2201      	movs	r2, #1
 8005480:	409a      	lsls	r2, r3
 8005482:	4b24      	ldr	r3, [pc, #144]	; (8005514 <xTaskIncrementTick+0x168>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4313      	orrs	r3, r2
 8005488:	4a22      	ldr	r2, [pc, #136]	; (8005514 <xTaskIncrementTick+0x168>)
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4a1f      	ldr	r2, [pc, #124]	; (8005518 <xTaskIncrementTick+0x16c>)
 800549a:	441a      	add	r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	3304      	adds	r3, #4
 80054a0:	4619      	mov	r1, r3
 80054a2:	4610      	mov	r0, r2
 80054a4:	f7ff fc35 	bl	8004d12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ac:	4b1b      	ldr	r3, [pc, #108]	; (800551c <xTaskIncrementTick+0x170>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d3b4      	bcc.n	8005420 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80054b6:	2301      	movs	r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054ba:	e7b1      	b.n	8005420 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054bc:	4b17      	ldr	r3, [pc, #92]	; (800551c <xTaskIncrementTick+0x170>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c2:	4915      	ldr	r1, [pc, #84]	; (8005518 <xTaskIncrementTick+0x16c>)
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d907      	bls.n	80054e4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80054d4:	2301      	movs	r3, #1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e004      	b.n	80054e4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80054da:	4b11      	ldr	r3, [pc, #68]	; (8005520 <xTaskIncrementTick+0x174>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3301      	adds	r3, #1
 80054e0:	4a0f      	ldr	r2, [pc, #60]	; (8005520 <xTaskIncrementTick+0x174>)
 80054e2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80054e4:	4b0f      	ldr	r3, [pc, #60]	; (8005524 <xTaskIncrementTick+0x178>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80054ec:	2301      	movs	r3, #1
 80054ee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054f0:	697b      	ldr	r3, [r7, #20]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000724 	.word	0x20000724
 8005500:	20000700 	.word	0x20000700
 8005504:	200006b4 	.word	0x200006b4
 8005508:	200006b8 	.word	0x200006b8
 800550c:	20000714 	.word	0x20000714
 8005510:	2000071c 	.word	0x2000071c
 8005514:	20000704 	.word	0x20000704
 8005518:	20000600 	.word	0x20000600
 800551c:	200005fc 	.word	0x200005fc
 8005520:	2000070c 	.word	0x2000070c
 8005524:	20000710 	.word	0x20000710

08005528 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800552e:	4b26      	ldr	r3, [pc, #152]	; (80055c8 <vTaskSwitchContext+0xa0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005536:	4b25      	ldr	r3, [pc, #148]	; (80055cc <vTaskSwitchContext+0xa4>)
 8005538:	2201      	movs	r2, #1
 800553a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800553c:	e03f      	b.n	80055be <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800553e:	4b23      	ldr	r3, [pc, #140]	; (80055cc <vTaskSwitchContext+0xa4>)
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005544:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <vTaskSwitchContext+0xa8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	fab3 f383 	clz	r3, r3
 8005550:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005552:	7afb      	ldrb	r3, [r7, #11]
 8005554:	f1c3 031f 	rsb	r3, r3, #31
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	491e      	ldr	r1, [pc, #120]	; (80055d4 <vTaskSwitchContext+0xac>)
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	440b      	add	r3, r1
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <vTaskSwitchContext+0x5c>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	607b      	str	r3, [r7, #4]
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <vTaskSwitchContext+0x5a>
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4a11      	ldr	r2, [pc, #68]	; (80055d4 <vTaskSwitchContext+0xac>)
 8005590:	4413      	add	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	3308      	adds	r3, #8
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d104      	bne.n	80055b4 <vTaskSwitchContext+0x8c>
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	605a      	str	r2, [r3, #4]
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	4a07      	ldr	r2, [pc, #28]	; (80055d8 <vTaskSwitchContext+0xb0>)
 80055bc:	6013      	str	r3, [r2, #0]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr
 80055c8:	20000724 	.word	0x20000724
 80055cc:	20000710 	.word	0x20000710
 80055d0:	20000704 	.word	0x20000704
 80055d4:	20000600 	.word	0x20000600
 80055d8:	200005fc 	.word	0x200005fc

080055dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055e4:	f000 f852 	bl	800568c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055e8:	4b06      	ldr	r3, [pc, #24]	; (8005604 <prvIdleTask+0x28>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d9f9      	bls.n	80055e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055f0:	4b05      	ldr	r3, [pc, #20]	; (8005608 <prvIdleTask+0x2c>)
 80055f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005600:	e7f0      	b.n	80055e4 <prvIdleTask+0x8>
 8005602:	bf00      	nop
 8005604:	20000600 	.word	0x20000600
 8005608:	e000ed04 	.word	0xe000ed04

0800560c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005612:	2300      	movs	r3, #0
 8005614:	607b      	str	r3, [r7, #4]
 8005616:	e00c      	b.n	8005632 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4a12      	ldr	r2, [pc, #72]	; (800566c <prvInitialiseTaskLists+0x60>)
 8005624:	4413      	add	r3, r2
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fb48 	bl	8004cbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3301      	adds	r3, #1
 8005630:	607b      	str	r3, [r7, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b06      	cmp	r3, #6
 8005636:	d9ef      	bls.n	8005618 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005638:	480d      	ldr	r0, [pc, #52]	; (8005670 <prvInitialiseTaskLists+0x64>)
 800563a:	f7ff fb3f 	bl	8004cbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800563e:	480d      	ldr	r0, [pc, #52]	; (8005674 <prvInitialiseTaskLists+0x68>)
 8005640:	f7ff fb3c 	bl	8004cbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005644:	480c      	ldr	r0, [pc, #48]	; (8005678 <prvInitialiseTaskLists+0x6c>)
 8005646:	f7ff fb39 	bl	8004cbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800564a:	480c      	ldr	r0, [pc, #48]	; (800567c <prvInitialiseTaskLists+0x70>)
 800564c:	f7ff fb36 	bl	8004cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005650:	480b      	ldr	r0, [pc, #44]	; (8005680 <prvInitialiseTaskLists+0x74>)
 8005652:	f7ff fb33 	bl	8004cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <prvInitialiseTaskLists+0x78>)
 8005658:	4a05      	ldr	r2, [pc, #20]	; (8005670 <prvInitialiseTaskLists+0x64>)
 800565a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <prvInitialiseTaskLists+0x7c>)
 800565e:	4a05      	ldr	r2, [pc, #20]	; (8005674 <prvInitialiseTaskLists+0x68>)
 8005660:	601a      	str	r2, [r3, #0]
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20000600 	.word	0x20000600
 8005670:	2000068c 	.word	0x2000068c
 8005674:	200006a0 	.word	0x200006a0
 8005678:	200006bc 	.word	0x200006bc
 800567c:	200006d0 	.word	0x200006d0
 8005680:	200006e8 	.word	0x200006e8
 8005684:	200006b4 	.word	0x200006b4
 8005688:	200006b8 	.word	0x200006b8

0800568c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005692:	e019      	b.n	80056c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005694:	f000 f9d2 	bl	8005a3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005698:	4b10      	ldr	r3, [pc, #64]	; (80056dc <prvCheckTasksWaitingTermination+0x50>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff fb8f 	bl	8004dc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056aa:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <prvCheckTasksWaitingTermination+0x54>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	4a0b      	ldr	r2, [pc, #44]	; (80056e0 <prvCheckTasksWaitingTermination+0x54>)
 80056b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056b4:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <prvCheckTasksWaitingTermination+0x58>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	4a0a      	ldr	r2, [pc, #40]	; (80056e4 <prvCheckTasksWaitingTermination+0x58>)
 80056bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056be:	f000 f9ed 	bl	8005a9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f810 	bl	80056e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <prvCheckTasksWaitingTermination+0x58>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e1      	bne.n	8005694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	200006d0 	.word	0x200006d0
 80056e0:	200006fc 	.word	0x200006fc
 80056e4:	200006e4 	.word	0x200006e4

080056e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d108      	bne.n	800570c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fb22 	bl	8005d48 <vPortFree>
				vPortFree( pxTCB );
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fb1f 	bl	8005d48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800570a:	e018      	b.n	800573e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005712:	2b01      	cmp	r3, #1
 8005714:	d103      	bne.n	800571e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fb16 	bl	8005d48 <vPortFree>
	}
 800571c:	e00f      	b.n	800573e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005724:	2b02      	cmp	r3, #2
 8005726:	d00a      	beq.n	800573e <prvDeleteTCB+0x56>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	60fb      	str	r3, [r7, #12]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <prvDeleteTCB+0x54>
	}
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800574e:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <prvResetNextTaskUnblockTime+0x40>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <prvResetNextTaskUnblockTime+0x14>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <prvResetNextTaskUnblockTime+0x16>
 800575c:	2300      	movs	r3, #0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d004      	beq.n	800576c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005762:	4b0a      	ldr	r3, [pc, #40]	; (800578c <prvResetNextTaskUnblockTime+0x44>)
 8005764:	f04f 32ff 	mov.w	r2, #4294967295
 8005768:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800576a:	e008      	b.n	800577e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <prvResetNextTaskUnblockTime+0x40>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	4a04      	ldr	r2, [pc, #16]	; (800578c <prvResetNextTaskUnblockTime+0x44>)
 800577c:	6013      	str	r3, [r2, #0]
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr
 8005788:	200006b4 	.word	0x200006b4
 800578c:	2000071c 	.word	0x2000071c

08005790 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800579a:	4b29      	ldr	r3, [pc, #164]	; (8005840 <prvAddCurrentTaskToDelayedList+0xb0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057a0:	4b28      	ldr	r3, [pc, #160]	; (8005844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3304      	adds	r3, #4
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fb0e 	bl	8004dc8 <uxListRemove>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10b      	bne.n	80057ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80057b2:	4b24      	ldr	r3, [pc, #144]	; (8005844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	2201      	movs	r2, #1
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	43da      	mvns	r2, r3
 80057c0:	4b21      	ldr	r3, [pc, #132]	; (8005848 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4013      	ands	r3, r2
 80057c6:	4a20      	ldr	r2, [pc, #128]	; (8005848 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	d10a      	bne.n	80057e8 <prvAddCurrentTaskToDelayedList+0x58>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057d8:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3304      	adds	r3, #4
 80057de:	4619      	mov	r1, r3
 80057e0:	481a      	ldr	r0, [pc, #104]	; (800584c <prvAddCurrentTaskToDelayedList+0xbc>)
 80057e2:	f7ff fa96 	bl	8004d12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057e6:	e026      	b.n	8005836 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057f0:	4b14      	ldr	r3, [pc, #80]	; (8005844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d209      	bcs.n	8005814 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005800:	4b13      	ldr	r3, [pc, #76]	; (8005850 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3304      	adds	r3, #4
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f7ff faa3 	bl	8004d58 <vListInsert>
}
 8005812:	e010      	b.n	8005836 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <prvAddCurrentTaskToDelayedList+0xb4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3304      	adds	r3, #4
 800581e:	4619      	mov	r1, r3
 8005820:	4610      	mov	r0, r2
 8005822:	f7ff fa99 	bl	8004d58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	d202      	bcs.n	8005836 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005830:	4a09      	ldr	r2, [pc, #36]	; (8005858 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6013      	str	r3, [r2, #0]
}
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000700 	.word	0x20000700
 8005844:	200005fc 	.word	0x200005fc
 8005848:	20000704 	.word	0x20000704
 800584c:	200006e8 	.word	0x200006e8
 8005850:	200006b8 	.word	0x200006b8
 8005854:	200006b4 	.word	0x200006b4
 8005858:	2000071c 	.word	0x2000071c

0800585c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3b04      	subs	r3, #4
 800586c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3b04      	subs	r3, #4
 800587a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f023 0201 	bic.w	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3b04      	subs	r3, #4
 800588a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800588c:	4a08      	ldr	r2, [pc, #32]	; (80058b0 <pxPortInitialiseStack+0x54>)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3b14      	subs	r3, #20
 8005896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3b20      	subs	r3, #32
 80058a2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058a4:	68fb      	ldr	r3, [r7, #12]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bc80      	pop	{r7}
 80058ae:	4770      	bx	lr
 80058b0:	080058b5 	.word	0x080058b5

080058b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <prvTaskExitError+0x54>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c6:	d00a      	beq.n	80058de <prvTaskExitError+0x2a>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	60fb      	str	r3, [r7, #12]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <prvTaskExitError+0x28>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	60bb      	str	r3, [r7, #8]
}
 80058f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058f2:	bf00      	nop
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0fc      	beq.n	80058f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	2000000c 	.word	0x2000000c
 800590c:	00000000 	.word	0x00000000

08005910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <pxCurrentTCBConst2>)
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	6808      	ldr	r0, [r1, #0]
 8005916:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800591a:	f380 8809 	msr	PSP, r0
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f380 8811 	msr	BASEPRI, r0
 800592a:	f04e 0e0d 	orr.w	lr, lr, #13
 800592e:	4770      	bx	lr

08005930 <pxCurrentTCBConst2>:
 8005930:	200005fc 	.word	0x200005fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop

08005938 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005938:	4806      	ldr	r0, [pc, #24]	; (8005954 <prvPortStartFirstTask+0x1c>)
 800593a:	6800      	ldr	r0, [r0, #0]
 800593c:	6800      	ldr	r0, [r0, #0]
 800593e:	f380 8808 	msr	MSP, r0
 8005942:	b662      	cpsie	i
 8005944:	b661      	cpsie	f
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	df00      	svc	0
 8005950:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005952:	bf00      	nop
 8005954:	e000ed08 	.word	0xe000ed08

08005958 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800595e:	4b32      	ldr	r3, [pc, #200]	; (8005a28 <xPortStartScheduler+0xd0>)
 8005960:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	22ff      	movs	r2, #255	; 0xff
 800596e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005980:	b2da      	uxtb	r2, r3
 8005982:	4b2a      	ldr	r3, [pc, #168]	; (8005a2c <xPortStartScheduler+0xd4>)
 8005984:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005986:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <xPortStartScheduler+0xd8>)
 8005988:	2207      	movs	r2, #7
 800598a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800598c:	e009      	b.n	80059a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800598e:	4b28      	ldr	r3, [pc, #160]	; (8005a30 <xPortStartScheduler+0xd8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3b01      	subs	r3, #1
 8005994:	4a26      	ldr	r2, [pc, #152]	; (8005a30 <xPortStartScheduler+0xd8>)
 8005996:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d0ef      	beq.n	800598e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059ae:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <xPortStartScheduler+0xd8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f1c3 0307 	rsb	r3, r3, #7
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d00a      	beq.n	80059d0 <xPortStartScheduler+0x78>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	60bb      	str	r3, [r7, #8]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059d0:	4b17      	ldr	r3, [pc, #92]	; (8005a30 <xPortStartScheduler+0xd8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	021b      	lsls	r3, r3, #8
 80059d6:	4a16      	ldr	r2, [pc, #88]	; (8005a30 <xPortStartScheduler+0xd8>)
 80059d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059da:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <xPortStartScheduler+0xd8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059e2:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <xPortStartScheduler+0xd8>)
 80059e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059ee:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <xPortStartScheduler+0xdc>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a10      	ldr	r2, [pc, #64]	; (8005a34 <xPortStartScheduler+0xdc>)
 80059f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059fa:	4b0e      	ldr	r3, [pc, #56]	; (8005a34 <xPortStartScheduler+0xdc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a0d      	ldr	r2, [pc, #52]	; (8005a34 <xPortStartScheduler+0xdc>)
 8005a00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a06:	f000 f8b9 	bl	8005b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <xPortStartScheduler+0xe0>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a10:	f7ff ff92 	bl	8005938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a14:	f7ff fd88 	bl	8005528 <vTaskSwitchContext>
	prvTaskExitError();
 8005a18:	f7ff ff4c 	bl	80058b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	e000e400 	.word	0xe000e400
 8005a2c:	20000728 	.word	0x20000728
 8005a30:	2000072c 	.word	0x2000072c
 8005a34:	e000ed20 	.word	0xe000ed20
 8005a38:	2000000c 	.word	0x2000000c

08005a3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	607b      	str	r3, [r7, #4]
}
 8005a54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a56:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <vPortEnterCritical+0x58>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	4a0d      	ldr	r2, [pc, #52]	; (8005a94 <vPortEnterCritical+0x58>)
 8005a5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a60:	4b0c      	ldr	r3, [pc, #48]	; (8005a94 <vPortEnterCritical+0x58>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d10f      	bne.n	8005a88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a68:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <vPortEnterCritical+0x5c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	603b      	str	r3, [r7, #0]
}
 8005a84:	bf00      	nop
 8005a86:	e7fe      	b.n	8005a86 <vPortEnterCritical+0x4a>
	}
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	2000000c 	.word	0x2000000c
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005aa2:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <vPortExitCritical+0x4c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <vPortExitCritical+0x24>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	607b      	str	r3, [r7, #4]
}
 8005abc:	bf00      	nop
 8005abe:	e7fe      	b.n	8005abe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ac0:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <vPortExitCritical+0x4c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	4a08      	ldr	r2, [pc, #32]	; (8005ae8 <vPortExitCritical+0x4c>)
 8005ac8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005aca:	4b07      	ldr	r3, [pc, #28]	; (8005ae8 <vPortExitCritical+0x4c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d105      	bne.n	8005ade <vPortExitCritical+0x42>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005adc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr
 8005ae8:	2000000c 	.word	0x2000000c
 8005aec:	00000000 	.word	0x00000000

08005af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005af0:	f3ef 8009 	mrs	r0, PSP
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <pxCurrentTCBConst>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b00:	6010      	str	r0, [r2, #0]
 8005b02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005b06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b0a:	f380 8811 	msr	BASEPRI, r0
 8005b0e:	f7ff fd0b 	bl	8005528 <vTaskSwitchContext>
 8005b12:	f04f 0000 	mov.w	r0, #0
 8005b16:	f380 8811 	msr	BASEPRI, r0
 8005b1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005b1e:	6819      	ldr	r1, [r3, #0]
 8005b20:	6808      	ldr	r0, [r1, #0]
 8005b22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b26:	f380 8809 	msr	PSP, r0
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	4770      	bx	lr

08005b30 <pxCurrentTCBConst>:
 8005b30:	200005fc 	.word	0x200005fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop

08005b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	607b      	str	r3, [r7, #4]
}
 8005b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b52:	f7ff fc2b 	bl	80053ac <xTaskIncrementTick>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b5c:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <SysTick_Handler+0x40>)
 8005b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	2300      	movs	r3, #0
 8005b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f383 8811 	msr	BASEPRI, r3
}
 8005b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b80:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <vPortSetupTimerInterrupt+0x30>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b86:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <vPortSetupTimerInterrupt+0x34>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b8c:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <vPortSetupTimerInterrupt+0x38>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a09      	ldr	r2, [pc, #36]	; (8005bb8 <vPortSetupTimerInterrupt+0x3c>)
 8005b92:	fba2 2303 	umull	r2, r3, r2, r3
 8005b96:	099b      	lsrs	r3, r3, #6
 8005b98:	4a08      	ldr	r2, [pc, #32]	; (8005bbc <vPortSetupTimerInterrupt+0x40>)
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b9e:	4b03      	ldr	r3, [pc, #12]	; (8005bac <vPortSetupTimerInterrupt+0x30>)
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	601a      	str	r2, [r3, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr
 8005bac:	e000e010 	.word	0xe000e010
 8005bb0:	e000e018 	.word	0xe000e018
 8005bb4:	20000000 	.word	0x20000000
 8005bb8:	10624dd3 	.word	0x10624dd3
 8005bbc:	e000e014 	.word	0xe000e014

08005bc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005bcc:	f7ff fb44 	bl	8005258 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005bd0:	4b58      	ldr	r3, [pc, #352]	; (8005d34 <pvPortMalloc+0x174>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005bd8:	f000 f910 	bl	8005dfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bdc:	4b56      	ldr	r3, [pc, #344]	; (8005d38 <pvPortMalloc+0x178>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f040 808e 	bne.w	8005d06 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01d      	beq.n	8005c2c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005bf0:	2208      	movs	r2, #8
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d014      	beq.n	8005c2c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f023 0307 	bic.w	r3, r3, #7
 8005c08:	3308      	adds	r3, #8
 8005c0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <pvPortMalloc+0x6c>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	617b      	str	r3, [r7, #20]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d069      	beq.n	8005d06 <pvPortMalloc+0x146>
 8005c32:	4b42      	ldr	r3, [pc, #264]	; (8005d3c <pvPortMalloc+0x17c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d864      	bhi.n	8005d06 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c3c:	4b40      	ldr	r3, [pc, #256]	; (8005d40 <pvPortMalloc+0x180>)
 8005c3e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c40:	4b3f      	ldr	r3, [pc, #252]	; (8005d40 <pvPortMalloc+0x180>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c46:	e004      	b.n	8005c52 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d903      	bls.n	8005c64 <pvPortMalloc+0xa4>
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f1      	bne.n	8005c48 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c64:	4b33      	ldr	r3, [pc, #204]	; (8005d34 <pvPortMalloc+0x174>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d04b      	beq.n	8005d06 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2208      	movs	r2, #8
 8005c74:	4413      	add	r3, r2
 8005c76:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	1ad2      	subs	r2, r2, r3
 8005c88:	2308      	movs	r3, #8
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d91f      	bls.n	8005cd0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4413      	add	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <pvPortMalloc+0xf8>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	613b      	str	r3, [r7, #16]
}
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cca:	69b8      	ldr	r0, [r7, #24]
 8005ccc:	f000 f8f8 	bl	8005ec0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	; (8005d3c <pvPortMalloc+0x17c>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <pvPortMalloc+0x17c>)
 8005cdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cde:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <pvPortMalloc+0x17c>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b18      	ldr	r3, [pc, #96]	; (8005d44 <pvPortMalloc+0x184>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d203      	bcs.n	8005cf2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cea:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <pvPortMalloc+0x17c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a15      	ldr	r2, [pc, #84]	; (8005d44 <pvPortMalloc+0x184>)
 8005cf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	4b10      	ldr	r3, [pc, #64]	; (8005d38 <pvPortMalloc+0x178>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d06:	f7ff fab5 	bl	8005274 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <pvPortMalloc+0x16a>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	60fb      	str	r3, [r7, #12]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <pvPortMalloc+0x168>
	return pvReturn;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3728      	adds	r7, #40	; 0x28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20001338 	.word	0x20001338
 8005d38:	20001344 	.word	0x20001344
 8005d3c:	2000133c 	.word	0x2000133c
 8005d40:	20001330 	.word	0x20001330
 8005d44:	20001340 	.word	0x20001340

08005d48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d048      	beq.n	8005dec <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d5a:	2308      	movs	r3, #8
 8005d5c:	425b      	negs	r3, r3
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4413      	add	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	4b21      	ldr	r3, [pc, #132]	; (8005df4 <vPortFree+0xac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4013      	ands	r3, r2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10a      	bne.n	8005d8c <vPortFree+0x44>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	60fb      	str	r3, [r7, #12]
}
 8005d88:	bf00      	nop
 8005d8a:	e7fe      	b.n	8005d8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <vPortFree+0x62>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	60bb      	str	r3, [r7, #8]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <vPortFree+0xac>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4013      	ands	r3, r2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d019      	beq.n	8005dec <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d115      	bne.n	8005dec <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <vPortFree+0xac>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	401a      	ands	r2, r3
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005dd0:	f7ff fa42 	bl	8005258 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	4b07      	ldr	r3, [pc, #28]	; (8005df8 <vPortFree+0xb0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4413      	add	r3, r2
 8005dde:	4a06      	ldr	r2, [pc, #24]	; (8005df8 <vPortFree+0xb0>)
 8005de0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005de2:	6938      	ldr	r0, [r7, #16]
 8005de4:	f000 f86c 	bl	8005ec0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005de8:	f7ff fa44 	bl	8005274 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dec:	bf00      	nop
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	20001344 	.word	0x20001344
 8005df8:	2000133c 	.word	0x2000133c

08005dfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005e06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e08:	4b27      	ldr	r3, [pc, #156]	; (8005ea8 <prvHeapInit+0xac>)
 8005e0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00c      	beq.n	8005e30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3307      	adds	r3, #7
 8005e1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0307 	bic.w	r3, r3, #7
 8005e22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	4a1f      	ldr	r2, [pc, #124]	; (8005ea8 <prvHeapInit+0xac>)
 8005e2c:	4413      	add	r3, r2
 8005e2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e34:	4a1d      	ldr	r2, [pc, #116]	; (8005eac <prvHeapInit+0xb0>)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e3a:	4b1c      	ldr	r3, [pc, #112]	; (8005eac <prvHeapInit+0xb0>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	4413      	add	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e48:	2208      	movs	r2, #8
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	1a9b      	subs	r3, r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0307 	bic.w	r3, r3, #7
 8005e56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <prvHeapInit+0xb4>)
 8005e5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e5e:	4b14      	ldr	r3, [pc, #80]	; (8005eb0 <prvHeapInit+0xb4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2200      	movs	r2, #0
 8005e64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e66:	4b12      	ldr	r3, [pc, #72]	; (8005eb0 <prvHeapInit+0xb4>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	1ad2      	subs	r2, r2, r3
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <prvHeapInit+0xb4>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4a0a      	ldr	r2, [pc, #40]	; (8005eb4 <prvHeapInit+0xb8>)
 8005e8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	4a09      	ldr	r2, [pc, #36]	; (8005eb8 <prvHeapInit+0xbc>)
 8005e92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e94:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <prvHeapInit+0xc0>)
 8005e96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e9a:	601a      	str	r2, [r3, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20000730 	.word	0x20000730
 8005eac:	20001330 	.word	0x20001330
 8005eb0:	20001338 	.word	0x20001338
 8005eb4:	20001340 	.word	0x20001340
 8005eb8:	2000133c 	.word	0x2000133c
 8005ebc:	20001344 	.word	0x20001344

08005ec0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ec8:	4b27      	ldr	r3, [pc, #156]	; (8005f68 <prvInsertBlockIntoFreeList+0xa8>)
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	e002      	b.n	8005ed4 <prvInsertBlockIntoFreeList+0x14>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d8f7      	bhi.n	8005ece <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	4413      	add	r3, r2
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d108      	bne.n	8005f02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	441a      	add	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	441a      	add	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d118      	bne.n	8005f48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <prvInsertBlockIntoFreeList+0xac>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d00d      	beq.n	8005f3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	441a      	add	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	e008      	b.n	8005f50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <prvInsertBlockIntoFreeList+0xac>)
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	e003      	b.n	8005f50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d002      	beq.n	8005f5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f5e:	bf00      	nop
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr
 8005f68:	20001330 	.word	0x20001330
 8005f6c:	20001338 	.word	0x20001338

08005f70 <ceilf>:
 8005f70:	b570      	push	{r4, r5, r6, lr}
 8005f72:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8005f76:	3d7f      	subs	r5, #127	; 0x7f
 8005f78:	2d16      	cmp	r5, #22
 8005f7a:	4601      	mov	r1, r0
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8005f82:	dc25      	bgt.n	8005fd0 <ceilf+0x60>
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	da0e      	bge.n	8005fa6 <ceilf+0x36>
 8005f88:	4917      	ldr	r1, [pc, #92]	; (8005fe8 <ceilf+0x78>)
 8005f8a:	f7fa fd83 	bl	8000a94 <__addsf3>
 8005f8e:	2100      	movs	r1, #0
 8005f90:	f7fb f844 	bl	800101c <__aeabi_fcmpgt>
 8005f94:	b128      	cbz	r0, 8005fa2 <ceilf+0x32>
 8005f96:	2c00      	cmp	r4, #0
 8005f98:	db22      	blt.n	8005fe0 <ceilf+0x70>
 8005f9a:	2e00      	cmp	r6, #0
 8005f9c:	bf18      	it	ne
 8005f9e:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	e01a      	b.n	8005fdc <ceilf+0x6c>
 8005fa6:	4e11      	ldr	r6, [pc, #68]	; (8005fec <ceilf+0x7c>)
 8005fa8:	412e      	asrs	r6, r5
 8005faa:	4230      	tst	r0, r6
 8005fac:	d016      	beq.n	8005fdc <ceilf+0x6c>
 8005fae:	490e      	ldr	r1, [pc, #56]	; (8005fe8 <ceilf+0x78>)
 8005fb0:	f7fa fd70 	bl	8000a94 <__addsf3>
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	f7fb f831 	bl	800101c <__aeabi_fcmpgt>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d0f1      	beq.n	8005fa2 <ceilf+0x32>
 8005fbe:	2c00      	cmp	r4, #0
 8005fc0:	bfc2      	ittt	gt
 8005fc2:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8005fc6:	412b      	asrgt	r3, r5
 8005fc8:	18e4      	addgt	r4, r4, r3
 8005fca:	ea24 0406 	bic.w	r4, r4, r6
 8005fce:	e7e8      	b.n	8005fa2 <ceilf+0x32>
 8005fd0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005fd4:	d302      	bcc.n	8005fdc <ceilf+0x6c>
 8005fd6:	f7fa fd5d 	bl	8000a94 <__addsf3>
 8005fda:	4601      	mov	r1, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005fe4:	e7dd      	b.n	8005fa2 <ceilf+0x32>
 8005fe6:	bf00      	nop
 8005fe8:	7149f2ca 	.word	0x7149f2ca
 8005fec:	007fffff 	.word	0x007fffff

08005ff0 <__cvt>:
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff6:	461f      	mov	r7, r3
 8005ff8:	bfbb      	ittet	lt
 8005ffa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005ffe:	461f      	movlt	r7, r3
 8006000:	2300      	movge	r3, #0
 8006002:	232d      	movlt	r3, #45	; 0x2d
 8006004:	b088      	sub	sp, #32
 8006006:	4614      	mov	r4, r2
 8006008:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800600a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800600c:	7013      	strb	r3, [r2, #0]
 800600e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006010:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006014:	f023 0820 	bic.w	r8, r3, #32
 8006018:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800601c:	d005      	beq.n	800602a <__cvt+0x3a>
 800601e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006022:	d100      	bne.n	8006026 <__cvt+0x36>
 8006024:	3501      	adds	r5, #1
 8006026:	2302      	movs	r3, #2
 8006028:	e000      	b.n	800602c <__cvt+0x3c>
 800602a:	2303      	movs	r3, #3
 800602c:	aa07      	add	r2, sp, #28
 800602e:	9204      	str	r2, [sp, #16]
 8006030:	aa06      	add	r2, sp, #24
 8006032:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006036:	e9cd 3500 	strd	r3, r5, [sp]
 800603a:	4622      	mov	r2, r4
 800603c:	463b      	mov	r3, r7
 800603e:	f000 fe5f 	bl	8006d00 <_dtoa_r>
 8006042:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006046:	4606      	mov	r6, r0
 8006048:	d102      	bne.n	8006050 <__cvt+0x60>
 800604a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800604c:	07db      	lsls	r3, r3, #31
 800604e:	d522      	bpl.n	8006096 <__cvt+0xa6>
 8006050:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006054:	eb06 0905 	add.w	r9, r6, r5
 8006058:	d110      	bne.n	800607c <__cvt+0x8c>
 800605a:	7833      	ldrb	r3, [r6, #0]
 800605c:	2b30      	cmp	r3, #48	; 0x30
 800605e:	d10a      	bne.n	8006076 <__cvt+0x86>
 8006060:	2200      	movs	r2, #0
 8006062:	2300      	movs	r3, #0
 8006064:	4620      	mov	r0, r4
 8006066:	4639      	mov	r1, r7
 8006068:	f7fa fc9e 	bl	80009a8 <__aeabi_dcmpeq>
 800606c:	b918      	cbnz	r0, 8006076 <__cvt+0x86>
 800606e:	f1c5 0501 	rsb	r5, r5, #1
 8006072:	f8ca 5000 	str.w	r5, [sl]
 8006076:	f8da 3000 	ldr.w	r3, [sl]
 800607a:	4499      	add	r9, r3
 800607c:	2200      	movs	r2, #0
 800607e:	2300      	movs	r3, #0
 8006080:	4620      	mov	r0, r4
 8006082:	4639      	mov	r1, r7
 8006084:	f7fa fc90 	bl	80009a8 <__aeabi_dcmpeq>
 8006088:	b108      	cbz	r0, 800608e <__cvt+0x9e>
 800608a:	f8cd 901c 	str.w	r9, [sp, #28]
 800608e:	2230      	movs	r2, #48	; 0x30
 8006090:	9b07      	ldr	r3, [sp, #28]
 8006092:	454b      	cmp	r3, r9
 8006094:	d307      	bcc.n	80060a6 <__cvt+0xb6>
 8006096:	4630      	mov	r0, r6
 8006098:	9b07      	ldr	r3, [sp, #28]
 800609a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800609c:	1b9b      	subs	r3, r3, r6
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	b008      	add	sp, #32
 80060a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a6:	1c59      	adds	r1, r3, #1
 80060a8:	9107      	str	r1, [sp, #28]
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	e7f0      	b.n	8006090 <__cvt+0xa0>

080060ae <__exponent>:
 80060ae:	4603      	mov	r3, r0
 80060b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060b2:	2900      	cmp	r1, #0
 80060b4:	f803 2b02 	strb.w	r2, [r3], #2
 80060b8:	bfb6      	itet	lt
 80060ba:	222d      	movlt	r2, #45	; 0x2d
 80060bc:	222b      	movge	r2, #43	; 0x2b
 80060be:	4249      	neglt	r1, r1
 80060c0:	2909      	cmp	r1, #9
 80060c2:	7042      	strb	r2, [r0, #1]
 80060c4:	dd2a      	ble.n	800611c <__exponent+0x6e>
 80060c6:	f10d 0207 	add.w	r2, sp, #7
 80060ca:	4617      	mov	r7, r2
 80060cc:	260a      	movs	r6, #10
 80060ce:	fb91 f5f6 	sdiv	r5, r1, r6
 80060d2:	4694      	mov	ip, r2
 80060d4:	fb06 1415 	mls	r4, r6, r5, r1
 80060d8:	3430      	adds	r4, #48	; 0x30
 80060da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80060de:	460c      	mov	r4, r1
 80060e0:	2c63      	cmp	r4, #99	; 0x63
 80060e2:	4629      	mov	r1, r5
 80060e4:	f102 32ff 	add.w	r2, r2, #4294967295
 80060e8:	dcf1      	bgt.n	80060ce <__exponent+0x20>
 80060ea:	3130      	adds	r1, #48	; 0x30
 80060ec:	f1ac 0402 	sub.w	r4, ip, #2
 80060f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80060f4:	4622      	mov	r2, r4
 80060f6:	1c41      	adds	r1, r0, #1
 80060f8:	42ba      	cmp	r2, r7
 80060fa:	d30a      	bcc.n	8006112 <__exponent+0x64>
 80060fc:	f10d 0209 	add.w	r2, sp, #9
 8006100:	eba2 020c 	sub.w	r2, r2, ip
 8006104:	42bc      	cmp	r4, r7
 8006106:	bf88      	it	hi
 8006108:	2200      	movhi	r2, #0
 800610a:	4413      	add	r3, r2
 800610c:	1a18      	subs	r0, r3, r0
 800610e:	b003      	add	sp, #12
 8006110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006112:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006116:	f801 5f01 	strb.w	r5, [r1, #1]!
 800611a:	e7ed      	b.n	80060f8 <__exponent+0x4a>
 800611c:	2330      	movs	r3, #48	; 0x30
 800611e:	3130      	adds	r1, #48	; 0x30
 8006120:	7083      	strb	r3, [r0, #2]
 8006122:	70c1      	strb	r1, [r0, #3]
 8006124:	1d03      	adds	r3, r0, #4
 8006126:	e7f1      	b.n	800610c <__exponent+0x5e>

08006128 <_printf_float>:
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	b091      	sub	sp, #68	; 0x44
 800612e:	460c      	mov	r4, r1
 8006130:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006134:	4616      	mov	r6, r2
 8006136:	461f      	mov	r7, r3
 8006138:	4605      	mov	r5, r0
 800613a:	f000 fcc5 	bl	8006ac8 <_localeconv_r>
 800613e:	6803      	ldr	r3, [r0, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	9309      	str	r3, [sp, #36]	; 0x24
 8006144:	f7fa f804 	bl	8000150 <strlen>
 8006148:	2300      	movs	r3, #0
 800614a:	930e      	str	r3, [sp, #56]	; 0x38
 800614c:	f8d8 3000 	ldr.w	r3, [r8]
 8006150:	900a      	str	r0, [sp, #40]	; 0x28
 8006152:	3307      	adds	r3, #7
 8006154:	f023 0307 	bic.w	r3, r3, #7
 8006158:	f103 0208 	add.w	r2, r3, #8
 800615c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006160:	f8d4 b000 	ldr.w	fp, [r4]
 8006164:	f8c8 2000 	str.w	r2, [r8]
 8006168:	e9d3 a800 	ldrd	sl, r8, [r3]
 800616c:	4652      	mov	r2, sl
 800616e:	4643      	mov	r3, r8
 8006170:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006174:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006178:	930b      	str	r3, [sp, #44]	; 0x2c
 800617a:	f04f 32ff 	mov.w	r2, #4294967295
 800617e:	4650      	mov	r0, sl
 8006180:	4b9c      	ldr	r3, [pc, #624]	; (80063f4 <_printf_float+0x2cc>)
 8006182:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006184:	f7fa fc42 	bl	8000a0c <__aeabi_dcmpun>
 8006188:	bb70      	cbnz	r0, 80061e8 <_printf_float+0xc0>
 800618a:	f04f 32ff 	mov.w	r2, #4294967295
 800618e:	4650      	mov	r0, sl
 8006190:	4b98      	ldr	r3, [pc, #608]	; (80063f4 <_printf_float+0x2cc>)
 8006192:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006194:	f7fa fc1c 	bl	80009d0 <__aeabi_dcmple>
 8006198:	bb30      	cbnz	r0, 80061e8 <_printf_float+0xc0>
 800619a:	2200      	movs	r2, #0
 800619c:	2300      	movs	r3, #0
 800619e:	4650      	mov	r0, sl
 80061a0:	4641      	mov	r1, r8
 80061a2:	f7fa fc0b 	bl	80009bc <__aeabi_dcmplt>
 80061a6:	b110      	cbz	r0, 80061ae <_printf_float+0x86>
 80061a8:	232d      	movs	r3, #45	; 0x2d
 80061aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ae:	4a92      	ldr	r2, [pc, #584]	; (80063f8 <_printf_float+0x2d0>)
 80061b0:	4b92      	ldr	r3, [pc, #584]	; (80063fc <_printf_float+0x2d4>)
 80061b2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80061b6:	bf94      	ite	ls
 80061b8:	4690      	movls	r8, r2
 80061ba:	4698      	movhi	r8, r3
 80061bc:	2303      	movs	r3, #3
 80061be:	f04f 0a00 	mov.w	sl, #0
 80061c2:	6123      	str	r3, [r4, #16]
 80061c4:	f02b 0304 	bic.w	r3, fp, #4
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	4633      	mov	r3, r6
 80061cc:	4621      	mov	r1, r4
 80061ce:	4628      	mov	r0, r5
 80061d0:	9700      	str	r7, [sp, #0]
 80061d2:	aa0f      	add	r2, sp, #60	; 0x3c
 80061d4:	f000 f9d6 	bl	8006584 <_printf_common>
 80061d8:	3001      	adds	r0, #1
 80061da:	f040 8090 	bne.w	80062fe <_printf_float+0x1d6>
 80061de:	f04f 30ff 	mov.w	r0, #4294967295
 80061e2:	b011      	add	sp, #68	; 0x44
 80061e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e8:	4652      	mov	r2, sl
 80061ea:	4643      	mov	r3, r8
 80061ec:	4650      	mov	r0, sl
 80061ee:	4641      	mov	r1, r8
 80061f0:	f7fa fc0c 	bl	8000a0c <__aeabi_dcmpun>
 80061f4:	b148      	cbz	r0, 800620a <_printf_float+0xe2>
 80061f6:	f1b8 0f00 	cmp.w	r8, #0
 80061fa:	bfb8      	it	lt
 80061fc:	232d      	movlt	r3, #45	; 0x2d
 80061fe:	4a80      	ldr	r2, [pc, #512]	; (8006400 <_printf_float+0x2d8>)
 8006200:	bfb8      	it	lt
 8006202:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006206:	4b7f      	ldr	r3, [pc, #508]	; (8006404 <_printf_float+0x2dc>)
 8006208:	e7d3      	b.n	80061b2 <_printf_float+0x8a>
 800620a:	6863      	ldr	r3, [r4, #4]
 800620c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	d142      	bne.n	800629a <_printf_float+0x172>
 8006214:	2306      	movs	r3, #6
 8006216:	6063      	str	r3, [r4, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	9206      	str	r2, [sp, #24]
 800621c:	aa0e      	add	r2, sp, #56	; 0x38
 800621e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006222:	aa0d      	add	r2, sp, #52	; 0x34
 8006224:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006228:	9203      	str	r2, [sp, #12]
 800622a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800622e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006232:	6023      	str	r3, [r4, #0]
 8006234:	6863      	ldr	r3, [r4, #4]
 8006236:	4652      	mov	r2, sl
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	4628      	mov	r0, r5
 800623c:	4643      	mov	r3, r8
 800623e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006240:	f7ff fed6 	bl	8005ff0 <__cvt>
 8006244:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006246:	4680      	mov	r8, r0
 8006248:	2947      	cmp	r1, #71	; 0x47
 800624a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800624c:	d108      	bne.n	8006260 <_printf_float+0x138>
 800624e:	1cc8      	adds	r0, r1, #3
 8006250:	db02      	blt.n	8006258 <_printf_float+0x130>
 8006252:	6863      	ldr	r3, [r4, #4]
 8006254:	4299      	cmp	r1, r3
 8006256:	dd40      	ble.n	80062da <_printf_float+0x1b2>
 8006258:	f1a9 0902 	sub.w	r9, r9, #2
 800625c:	fa5f f989 	uxtb.w	r9, r9
 8006260:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006264:	d81f      	bhi.n	80062a6 <_printf_float+0x17e>
 8006266:	464a      	mov	r2, r9
 8006268:	3901      	subs	r1, #1
 800626a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800626e:	910d      	str	r1, [sp, #52]	; 0x34
 8006270:	f7ff ff1d 	bl	80060ae <__exponent>
 8006274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006276:	4682      	mov	sl, r0
 8006278:	1813      	adds	r3, r2, r0
 800627a:	2a01      	cmp	r2, #1
 800627c:	6123      	str	r3, [r4, #16]
 800627e:	dc02      	bgt.n	8006286 <_printf_float+0x15e>
 8006280:	6822      	ldr	r2, [r4, #0]
 8006282:	07d2      	lsls	r2, r2, #31
 8006284:	d501      	bpl.n	800628a <_printf_float+0x162>
 8006286:	3301      	adds	r3, #1
 8006288:	6123      	str	r3, [r4, #16]
 800628a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800628e:	2b00      	cmp	r3, #0
 8006290:	d09b      	beq.n	80061ca <_printf_float+0xa2>
 8006292:	232d      	movs	r3, #45	; 0x2d
 8006294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006298:	e797      	b.n	80061ca <_printf_float+0xa2>
 800629a:	2947      	cmp	r1, #71	; 0x47
 800629c:	d1bc      	bne.n	8006218 <_printf_float+0xf0>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1ba      	bne.n	8006218 <_printf_float+0xf0>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e7b7      	b.n	8006216 <_printf_float+0xee>
 80062a6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80062aa:	d118      	bne.n	80062de <_printf_float+0x1b6>
 80062ac:	2900      	cmp	r1, #0
 80062ae:	6863      	ldr	r3, [r4, #4]
 80062b0:	dd0b      	ble.n	80062ca <_printf_float+0x1a2>
 80062b2:	6121      	str	r1, [r4, #16]
 80062b4:	b913      	cbnz	r3, 80062bc <_printf_float+0x194>
 80062b6:	6822      	ldr	r2, [r4, #0]
 80062b8:	07d0      	lsls	r0, r2, #31
 80062ba:	d502      	bpl.n	80062c2 <_printf_float+0x19a>
 80062bc:	3301      	adds	r3, #1
 80062be:	440b      	add	r3, r1
 80062c0:	6123      	str	r3, [r4, #16]
 80062c2:	f04f 0a00 	mov.w	sl, #0
 80062c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80062c8:	e7df      	b.n	800628a <_printf_float+0x162>
 80062ca:	b913      	cbnz	r3, 80062d2 <_printf_float+0x1aa>
 80062cc:	6822      	ldr	r2, [r4, #0]
 80062ce:	07d2      	lsls	r2, r2, #31
 80062d0:	d501      	bpl.n	80062d6 <_printf_float+0x1ae>
 80062d2:	3302      	adds	r3, #2
 80062d4:	e7f4      	b.n	80062c0 <_printf_float+0x198>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e7f2      	b.n	80062c0 <_printf_float+0x198>
 80062da:	f04f 0967 	mov.w	r9, #103	; 0x67
 80062de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062e0:	4299      	cmp	r1, r3
 80062e2:	db05      	blt.n	80062f0 <_printf_float+0x1c8>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	6121      	str	r1, [r4, #16]
 80062e8:	07d8      	lsls	r0, r3, #31
 80062ea:	d5ea      	bpl.n	80062c2 <_printf_float+0x19a>
 80062ec:	1c4b      	adds	r3, r1, #1
 80062ee:	e7e7      	b.n	80062c0 <_printf_float+0x198>
 80062f0:	2900      	cmp	r1, #0
 80062f2:	bfcc      	ite	gt
 80062f4:	2201      	movgt	r2, #1
 80062f6:	f1c1 0202 	rsble	r2, r1, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	e7e0      	b.n	80062c0 <_printf_float+0x198>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	055a      	lsls	r2, r3, #21
 8006302:	d407      	bmi.n	8006314 <_printf_float+0x1ec>
 8006304:	6923      	ldr	r3, [r4, #16]
 8006306:	4642      	mov	r2, r8
 8006308:	4631      	mov	r1, r6
 800630a:	4628      	mov	r0, r5
 800630c:	47b8      	blx	r7
 800630e:	3001      	adds	r0, #1
 8006310:	d12b      	bne.n	800636a <_printf_float+0x242>
 8006312:	e764      	b.n	80061de <_printf_float+0xb6>
 8006314:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006318:	f240 80dd 	bls.w	80064d6 <_printf_float+0x3ae>
 800631c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006320:	2200      	movs	r2, #0
 8006322:	2300      	movs	r3, #0
 8006324:	f7fa fb40 	bl	80009a8 <__aeabi_dcmpeq>
 8006328:	2800      	cmp	r0, #0
 800632a:	d033      	beq.n	8006394 <_printf_float+0x26c>
 800632c:	2301      	movs	r3, #1
 800632e:	4631      	mov	r1, r6
 8006330:	4628      	mov	r0, r5
 8006332:	4a35      	ldr	r2, [pc, #212]	; (8006408 <_printf_float+0x2e0>)
 8006334:	47b8      	blx	r7
 8006336:	3001      	adds	r0, #1
 8006338:	f43f af51 	beq.w	80061de <_printf_float+0xb6>
 800633c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006340:	429a      	cmp	r2, r3
 8006342:	db02      	blt.n	800634a <_printf_float+0x222>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	07d8      	lsls	r0, r3, #31
 8006348:	d50f      	bpl.n	800636a <_printf_float+0x242>
 800634a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800634e:	4631      	mov	r1, r6
 8006350:	4628      	mov	r0, r5
 8006352:	47b8      	blx	r7
 8006354:	3001      	adds	r0, #1
 8006356:	f43f af42 	beq.w	80061de <_printf_float+0xb6>
 800635a:	f04f 0800 	mov.w	r8, #0
 800635e:	f104 091a 	add.w	r9, r4, #26
 8006362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006364:	3b01      	subs	r3, #1
 8006366:	4543      	cmp	r3, r8
 8006368:	dc09      	bgt.n	800637e <_printf_float+0x256>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	079b      	lsls	r3, r3, #30
 800636e:	f100 8104 	bmi.w	800657a <_printf_float+0x452>
 8006372:	68e0      	ldr	r0, [r4, #12]
 8006374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006376:	4298      	cmp	r0, r3
 8006378:	bfb8      	it	lt
 800637a:	4618      	movlt	r0, r3
 800637c:	e731      	b.n	80061e2 <_printf_float+0xba>
 800637e:	2301      	movs	r3, #1
 8006380:	464a      	mov	r2, r9
 8006382:	4631      	mov	r1, r6
 8006384:	4628      	mov	r0, r5
 8006386:	47b8      	blx	r7
 8006388:	3001      	adds	r0, #1
 800638a:	f43f af28 	beq.w	80061de <_printf_float+0xb6>
 800638e:	f108 0801 	add.w	r8, r8, #1
 8006392:	e7e6      	b.n	8006362 <_printf_float+0x23a>
 8006394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006396:	2b00      	cmp	r3, #0
 8006398:	dc38      	bgt.n	800640c <_printf_float+0x2e4>
 800639a:	2301      	movs	r3, #1
 800639c:	4631      	mov	r1, r6
 800639e:	4628      	mov	r0, r5
 80063a0:	4a19      	ldr	r2, [pc, #100]	; (8006408 <_printf_float+0x2e0>)
 80063a2:	47b8      	blx	r7
 80063a4:	3001      	adds	r0, #1
 80063a6:	f43f af1a 	beq.w	80061de <_printf_float+0xb6>
 80063aa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80063ae:	4313      	orrs	r3, r2
 80063b0:	d102      	bne.n	80063b8 <_printf_float+0x290>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	07d9      	lsls	r1, r3, #31
 80063b6:	d5d8      	bpl.n	800636a <_printf_float+0x242>
 80063b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063bc:	4631      	mov	r1, r6
 80063be:	4628      	mov	r0, r5
 80063c0:	47b8      	blx	r7
 80063c2:	3001      	adds	r0, #1
 80063c4:	f43f af0b 	beq.w	80061de <_printf_float+0xb6>
 80063c8:	f04f 0900 	mov.w	r9, #0
 80063cc:	f104 0a1a 	add.w	sl, r4, #26
 80063d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063d2:	425b      	negs	r3, r3
 80063d4:	454b      	cmp	r3, r9
 80063d6:	dc01      	bgt.n	80063dc <_printf_float+0x2b4>
 80063d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063da:	e794      	b.n	8006306 <_printf_float+0x1de>
 80063dc:	2301      	movs	r3, #1
 80063de:	4652      	mov	r2, sl
 80063e0:	4631      	mov	r1, r6
 80063e2:	4628      	mov	r0, r5
 80063e4:	47b8      	blx	r7
 80063e6:	3001      	adds	r0, #1
 80063e8:	f43f aef9 	beq.w	80061de <_printf_float+0xb6>
 80063ec:	f109 0901 	add.w	r9, r9, #1
 80063f0:	e7ee      	b.n	80063d0 <_printf_float+0x2a8>
 80063f2:	bf00      	nop
 80063f4:	7fefffff 	.word	0x7fefffff
 80063f8:	080089fa 	.word	0x080089fa
 80063fc:	080089fe 	.word	0x080089fe
 8006400:	08008a02 	.word	0x08008a02
 8006404:	08008a06 	.word	0x08008a06
 8006408:	08008a0a 	.word	0x08008a0a
 800640c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800640e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006410:	429a      	cmp	r2, r3
 8006412:	bfa8      	it	ge
 8006414:	461a      	movge	r2, r3
 8006416:	2a00      	cmp	r2, #0
 8006418:	4691      	mov	r9, r2
 800641a:	dc37      	bgt.n	800648c <_printf_float+0x364>
 800641c:	f04f 0b00 	mov.w	fp, #0
 8006420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006424:	f104 021a 	add.w	r2, r4, #26
 8006428:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800642c:	ebaa 0309 	sub.w	r3, sl, r9
 8006430:	455b      	cmp	r3, fp
 8006432:	dc33      	bgt.n	800649c <_printf_float+0x374>
 8006434:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006438:	429a      	cmp	r2, r3
 800643a:	db3b      	blt.n	80064b4 <_printf_float+0x38c>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	07da      	lsls	r2, r3, #31
 8006440:	d438      	bmi.n	80064b4 <_printf_float+0x38c>
 8006442:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006446:	eba2 0903 	sub.w	r9, r2, r3
 800644a:	eba2 020a 	sub.w	r2, r2, sl
 800644e:	4591      	cmp	r9, r2
 8006450:	bfa8      	it	ge
 8006452:	4691      	movge	r9, r2
 8006454:	f1b9 0f00 	cmp.w	r9, #0
 8006458:	dc34      	bgt.n	80064c4 <_printf_float+0x39c>
 800645a:	f04f 0800 	mov.w	r8, #0
 800645e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006462:	f104 0a1a 	add.w	sl, r4, #26
 8006466:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800646a:	1a9b      	subs	r3, r3, r2
 800646c:	eba3 0309 	sub.w	r3, r3, r9
 8006470:	4543      	cmp	r3, r8
 8006472:	f77f af7a 	ble.w	800636a <_printf_float+0x242>
 8006476:	2301      	movs	r3, #1
 8006478:	4652      	mov	r2, sl
 800647a:	4631      	mov	r1, r6
 800647c:	4628      	mov	r0, r5
 800647e:	47b8      	blx	r7
 8006480:	3001      	adds	r0, #1
 8006482:	f43f aeac 	beq.w	80061de <_printf_float+0xb6>
 8006486:	f108 0801 	add.w	r8, r8, #1
 800648a:	e7ec      	b.n	8006466 <_printf_float+0x33e>
 800648c:	4613      	mov	r3, r2
 800648e:	4631      	mov	r1, r6
 8006490:	4642      	mov	r2, r8
 8006492:	4628      	mov	r0, r5
 8006494:	47b8      	blx	r7
 8006496:	3001      	adds	r0, #1
 8006498:	d1c0      	bne.n	800641c <_printf_float+0x2f4>
 800649a:	e6a0      	b.n	80061de <_printf_float+0xb6>
 800649c:	2301      	movs	r3, #1
 800649e:	4631      	mov	r1, r6
 80064a0:	4628      	mov	r0, r5
 80064a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80064a4:	47b8      	blx	r7
 80064a6:	3001      	adds	r0, #1
 80064a8:	f43f ae99 	beq.w	80061de <_printf_float+0xb6>
 80064ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064ae:	f10b 0b01 	add.w	fp, fp, #1
 80064b2:	e7b9      	b.n	8006428 <_printf_float+0x300>
 80064b4:	4631      	mov	r1, r6
 80064b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064ba:	4628      	mov	r0, r5
 80064bc:	47b8      	blx	r7
 80064be:	3001      	adds	r0, #1
 80064c0:	d1bf      	bne.n	8006442 <_printf_float+0x31a>
 80064c2:	e68c      	b.n	80061de <_printf_float+0xb6>
 80064c4:	464b      	mov	r3, r9
 80064c6:	4631      	mov	r1, r6
 80064c8:	4628      	mov	r0, r5
 80064ca:	eb08 020a 	add.w	r2, r8, sl
 80064ce:	47b8      	blx	r7
 80064d0:	3001      	adds	r0, #1
 80064d2:	d1c2      	bne.n	800645a <_printf_float+0x332>
 80064d4:	e683      	b.n	80061de <_printf_float+0xb6>
 80064d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064d8:	2a01      	cmp	r2, #1
 80064da:	dc01      	bgt.n	80064e0 <_printf_float+0x3b8>
 80064dc:	07db      	lsls	r3, r3, #31
 80064de:	d539      	bpl.n	8006554 <_printf_float+0x42c>
 80064e0:	2301      	movs	r3, #1
 80064e2:	4642      	mov	r2, r8
 80064e4:	4631      	mov	r1, r6
 80064e6:	4628      	mov	r0, r5
 80064e8:	47b8      	blx	r7
 80064ea:	3001      	adds	r0, #1
 80064ec:	f43f ae77 	beq.w	80061de <_printf_float+0xb6>
 80064f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064f4:	4631      	mov	r1, r6
 80064f6:	4628      	mov	r0, r5
 80064f8:	47b8      	blx	r7
 80064fa:	3001      	adds	r0, #1
 80064fc:	f43f ae6f 	beq.w	80061de <_printf_float+0xb6>
 8006500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006504:	2200      	movs	r2, #0
 8006506:	2300      	movs	r3, #0
 8006508:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800650c:	f7fa fa4c 	bl	80009a8 <__aeabi_dcmpeq>
 8006510:	b9d8      	cbnz	r0, 800654a <_printf_float+0x422>
 8006512:	f109 33ff 	add.w	r3, r9, #4294967295
 8006516:	f108 0201 	add.w	r2, r8, #1
 800651a:	4631      	mov	r1, r6
 800651c:	4628      	mov	r0, r5
 800651e:	47b8      	blx	r7
 8006520:	3001      	adds	r0, #1
 8006522:	d10e      	bne.n	8006542 <_printf_float+0x41a>
 8006524:	e65b      	b.n	80061de <_printf_float+0xb6>
 8006526:	2301      	movs	r3, #1
 8006528:	464a      	mov	r2, r9
 800652a:	4631      	mov	r1, r6
 800652c:	4628      	mov	r0, r5
 800652e:	47b8      	blx	r7
 8006530:	3001      	adds	r0, #1
 8006532:	f43f ae54 	beq.w	80061de <_printf_float+0xb6>
 8006536:	f108 0801 	add.w	r8, r8, #1
 800653a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800653c:	3b01      	subs	r3, #1
 800653e:	4543      	cmp	r3, r8
 8006540:	dcf1      	bgt.n	8006526 <_printf_float+0x3fe>
 8006542:	4653      	mov	r3, sl
 8006544:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006548:	e6de      	b.n	8006308 <_printf_float+0x1e0>
 800654a:	f04f 0800 	mov.w	r8, #0
 800654e:	f104 091a 	add.w	r9, r4, #26
 8006552:	e7f2      	b.n	800653a <_printf_float+0x412>
 8006554:	2301      	movs	r3, #1
 8006556:	4642      	mov	r2, r8
 8006558:	e7df      	b.n	800651a <_printf_float+0x3f2>
 800655a:	2301      	movs	r3, #1
 800655c:	464a      	mov	r2, r9
 800655e:	4631      	mov	r1, r6
 8006560:	4628      	mov	r0, r5
 8006562:	47b8      	blx	r7
 8006564:	3001      	adds	r0, #1
 8006566:	f43f ae3a 	beq.w	80061de <_printf_float+0xb6>
 800656a:	f108 0801 	add.w	r8, r8, #1
 800656e:	68e3      	ldr	r3, [r4, #12]
 8006570:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006572:	1a5b      	subs	r3, r3, r1
 8006574:	4543      	cmp	r3, r8
 8006576:	dcf0      	bgt.n	800655a <_printf_float+0x432>
 8006578:	e6fb      	b.n	8006372 <_printf_float+0x24a>
 800657a:	f04f 0800 	mov.w	r8, #0
 800657e:	f104 0919 	add.w	r9, r4, #25
 8006582:	e7f4      	b.n	800656e <_printf_float+0x446>

08006584 <_printf_common>:
 8006584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006588:	4616      	mov	r6, r2
 800658a:	4699      	mov	r9, r3
 800658c:	688a      	ldr	r2, [r1, #8]
 800658e:	690b      	ldr	r3, [r1, #16]
 8006590:	4607      	mov	r7, r0
 8006592:	4293      	cmp	r3, r2
 8006594:	bfb8      	it	lt
 8006596:	4613      	movlt	r3, r2
 8006598:	6033      	str	r3, [r6, #0]
 800659a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800659e:	460c      	mov	r4, r1
 80065a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065a4:	b10a      	cbz	r2, 80065aa <_printf_common+0x26>
 80065a6:	3301      	adds	r3, #1
 80065a8:	6033      	str	r3, [r6, #0]
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	0699      	lsls	r1, r3, #26
 80065ae:	bf42      	ittt	mi
 80065b0:	6833      	ldrmi	r3, [r6, #0]
 80065b2:	3302      	addmi	r3, #2
 80065b4:	6033      	strmi	r3, [r6, #0]
 80065b6:	6825      	ldr	r5, [r4, #0]
 80065b8:	f015 0506 	ands.w	r5, r5, #6
 80065bc:	d106      	bne.n	80065cc <_printf_common+0x48>
 80065be:	f104 0a19 	add.w	sl, r4, #25
 80065c2:	68e3      	ldr	r3, [r4, #12]
 80065c4:	6832      	ldr	r2, [r6, #0]
 80065c6:	1a9b      	subs	r3, r3, r2
 80065c8:	42ab      	cmp	r3, r5
 80065ca:	dc2b      	bgt.n	8006624 <_printf_common+0xa0>
 80065cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065d0:	1e13      	subs	r3, r2, #0
 80065d2:	6822      	ldr	r2, [r4, #0]
 80065d4:	bf18      	it	ne
 80065d6:	2301      	movne	r3, #1
 80065d8:	0692      	lsls	r2, r2, #26
 80065da:	d430      	bmi.n	800663e <_printf_common+0xba>
 80065dc:	4649      	mov	r1, r9
 80065de:	4638      	mov	r0, r7
 80065e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065e4:	47c0      	blx	r8
 80065e6:	3001      	adds	r0, #1
 80065e8:	d023      	beq.n	8006632 <_printf_common+0xae>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	6922      	ldr	r2, [r4, #16]
 80065ee:	f003 0306 	and.w	r3, r3, #6
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	bf14      	ite	ne
 80065f6:	2500      	movne	r5, #0
 80065f8:	6833      	ldreq	r3, [r6, #0]
 80065fa:	f04f 0600 	mov.w	r6, #0
 80065fe:	bf08      	it	eq
 8006600:	68e5      	ldreq	r5, [r4, #12]
 8006602:	f104 041a 	add.w	r4, r4, #26
 8006606:	bf08      	it	eq
 8006608:	1aed      	subeq	r5, r5, r3
 800660a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800660e:	bf08      	it	eq
 8006610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006614:	4293      	cmp	r3, r2
 8006616:	bfc4      	itt	gt
 8006618:	1a9b      	subgt	r3, r3, r2
 800661a:	18ed      	addgt	r5, r5, r3
 800661c:	42b5      	cmp	r5, r6
 800661e:	d11a      	bne.n	8006656 <_printf_common+0xd2>
 8006620:	2000      	movs	r0, #0
 8006622:	e008      	b.n	8006636 <_printf_common+0xb2>
 8006624:	2301      	movs	r3, #1
 8006626:	4652      	mov	r2, sl
 8006628:	4649      	mov	r1, r9
 800662a:	4638      	mov	r0, r7
 800662c:	47c0      	blx	r8
 800662e:	3001      	adds	r0, #1
 8006630:	d103      	bne.n	800663a <_printf_common+0xb6>
 8006632:	f04f 30ff 	mov.w	r0, #4294967295
 8006636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663a:	3501      	adds	r5, #1
 800663c:	e7c1      	b.n	80065c2 <_printf_common+0x3e>
 800663e:	2030      	movs	r0, #48	; 0x30
 8006640:	18e1      	adds	r1, r4, r3
 8006642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800664c:	4422      	add	r2, r4
 800664e:	3302      	adds	r3, #2
 8006650:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006654:	e7c2      	b.n	80065dc <_printf_common+0x58>
 8006656:	2301      	movs	r3, #1
 8006658:	4622      	mov	r2, r4
 800665a:	4649      	mov	r1, r9
 800665c:	4638      	mov	r0, r7
 800665e:	47c0      	blx	r8
 8006660:	3001      	adds	r0, #1
 8006662:	d0e6      	beq.n	8006632 <_printf_common+0xae>
 8006664:	3601      	adds	r6, #1
 8006666:	e7d9      	b.n	800661c <_printf_common+0x98>

08006668 <_printf_i>:
 8006668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800666c:	7e0f      	ldrb	r7, [r1, #24]
 800666e:	4691      	mov	r9, r2
 8006670:	2f78      	cmp	r7, #120	; 0x78
 8006672:	4680      	mov	r8, r0
 8006674:	460c      	mov	r4, r1
 8006676:	469a      	mov	sl, r3
 8006678:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800667a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800667e:	d807      	bhi.n	8006690 <_printf_i+0x28>
 8006680:	2f62      	cmp	r7, #98	; 0x62
 8006682:	d80a      	bhi.n	800669a <_printf_i+0x32>
 8006684:	2f00      	cmp	r7, #0
 8006686:	f000 80d5 	beq.w	8006834 <_printf_i+0x1cc>
 800668a:	2f58      	cmp	r7, #88	; 0x58
 800668c:	f000 80c1 	beq.w	8006812 <_printf_i+0x1aa>
 8006690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006698:	e03a      	b.n	8006710 <_printf_i+0xa8>
 800669a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800669e:	2b15      	cmp	r3, #21
 80066a0:	d8f6      	bhi.n	8006690 <_printf_i+0x28>
 80066a2:	a101      	add	r1, pc, #4	; (adr r1, 80066a8 <_printf_i+0x40>)
 80066a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066a8:	08006701 	.word	0x08006701
 80066ac:	08006715 	.word	0x08006715
 80066b0:	08006691 	.word	0x08006691
 80066b4:	08006691 	.word	0x08006691
 80066b8:	08006691 	.word	0x08006691
 80066bc:	08006691 	.word	0x08006691
 80066c0:	08006715 	.word	0x08006715
 80066c4:	08006691 	.word	0x08006691
 80066c8:	08006691 	.word	0x08006691
 80066cc:	08006691 	.word	0x08006691
 80066d0:	08006691 	.word	0x08006691
 80066d4:	0800681b 	.word	0x0800681b
 80066d8:	08006741 	.word	0x08006741
 80066dc:	080067d5 	.word	0x080067d5
 80066e0:	08006691 	.word	0x08006691
 80066e4:	08006691 	.word	0x08006691
 80066e8:	0800683d 	.word	0x0800683d
 80066ec:	08006691 	.word	0x08006691
 80066f0:	08006741 	.word	0x08006741
 80066f4:	08006691 	.word	0x08006691
 80066f8:	08006691 	.word	0x08006691
 80066fc:	080067dd 	.word	0x080067dd
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	1d1a      	adds	r2, r3, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	602a      	str	r2, [r5, #0]
 8006708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800670c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006710:	2301      	movs	r3, #1
 8006712:	e0a0      	b.n	8006856 <_printf_i+0x1ee>
 8006714:	6820      	ldr	r0, [r4, #0]
 8006716:	682b      	ldr	r3, [r5, #0]
 8006718:	0607      	lsls	r7, r0, #24
 800671a:	f103 0104 	add.w	r1, r3, #4
 800671e:	6029      	str	r1, [r5, #0]
 8006720:	d501      	bpl.n	8006726 <_printf_i+0xbe>
 8006722:	681e      	ldr	r6, [r3, #0]
 8006724:	e003      	b.n	800672e <_printf_i+0xc6>
 8006726:	0646      	lsls	r6, r0, #25
 8006728:	d5fb      	bpl.n	8006722 <_printf_i+0xba>
 800672a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800672e:	2e00      	cmp	r6, #0
 8006730:	da03      	bge.n	800673a <_printf_i+0xd2>
 8006732:	232d      	movs	r3, #45	; 0x2d
 8006734:	4276      	negs	r6, r6
 8006736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800673a:	230a      	movs	r3, #10
 800673c:	4859      	ldr	r0, [pc, #356]	; (80068a4 <_printf_i+0x23c>)
 800673e:	e012      	b.n	8006766 <_printf_i+0xfe>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	6820      	ldr	r0, [r4, #0]
 8006744:	1d19      	adds	r1, r3, #4
 8006746:	6029      	str	r1, [r5, #0]
 8006748:	0605      	lsls	r5, r0, #24
 800674a:	d501      	bpl.n	8006750 <_printf_i+0xe8>
 800674c:	681e      	ldr	r6, [r3, #0]
 800674e:	e002      	b.n	8006756 <_printf_i+0xee>
 8006750:	0641      	lsls	r1, r0, #25
 8006752:	d5fb      	bpl.n	800674c <_printf_i+0xe4>
 8006754:	881e      	ldrh	r6, [r3, #0]
 8006756:	2f6f      	cmp	r7, #111	; 0x6f
 8006758:	bf0c      	ite	eq
 800675a:	2308      	moveq	r3, #8
 800675c:	230a      	movne	r3, #10
 800675e:	4851      	ldr	r0, [pc, #324]	; (80068a4 <_printf_i+0x23c>)
 8006760:	2100      	movs	r1, #0
 8006762:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006766:	6865      	ldr	r5, [r4, #4]
 8006768:	2d00      	cmp	r5, #0
 800676a:	bfa8      	it	ge
 800676c:	6821      	ldrge	r1, [r4, #0]
 800676e:	60a5      	str	r5, [r4, #8]
 8006770:	bfa4      	itt	ge
 8006772:	f021 0104 	bicge.w	r1, r1, #4
 8006776:	6021      	strge	r1, [r4, #0]
 8006778:	b90e      	cbnz	r6, 800677e <_printf_i+0x116>
 800677a:	2d00      	cmp	r5, #0
 800677c:	d04b      	beq.n	8006816 <_printf_i+0x1ae>
 800677e:	4615      	mov	r5, r2
 8006780:	fbb6 f1f3 	udiv	r1, r6, r3
 8006784:	fb03 6711 	mls	r7, r3, r1, r6
 8006788:	5dc7      	ldrb	r7, [r0, r7]
 800678a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800678e:	4637      	mov	r7, r6
 8006790:	42bb      	cmp	r3, r7
 8006792:	460e      	mov	r6, r1
 8006794:	d9f4      	bls.n	8006780 <_printf_i+0x118>
 8006796:	2b08      	cmp	r3, #8
 8006798:	d10b      	bne.n	80067b2 <_printf_i+0x14a>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	07de      	lsls	r6, r3, #31
 800679e:	d508      	bpl.n	80067b2 <_printf_i+0x14a>
 80067a0:	6923      	ldr	r3, [r4, #16]
 80067a2:	6861      	ldr	r1, [r4, #4]
 80067a4:	4299      	cmp	r1, r3
 80067a6:	bfde      	ittt	le
 80067a8:	2330      	movle	r3, #48	; 0x30
 80067aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067b2:	1b52      	subs	r2, r2, r5
 80067b4:	6122      	str	r2, [r4, #16]
 80067b6:	464b      	mov	r3, r9
 80067b8:	4621      	mov	r1, r4
 80067ba:	4640      	mov	r0, r8
 80067bc:	f8cd a000 	str.w	sl, [sp]
 80067c0:	aa03      	add	r2, sp, #12
 80067c2:	f7ff fedf 	bl	8006584 <_printf_common>
 80067c6:	3001      	adds	r0, #1
 80067c8:	d14a      	bne.n	8006860 <_printf_i+0x1f8>
 80067ca:	f04f 30ff 	mov.w	r0, #4294967295
 80067ce:	b004      	add	sp, #16
 80067d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	f043 0320 	orr.w	r3, r3, #32
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	2778      	movs	r7, #120	; 0x78
 80067de:	4832      	ldr	r0, [pc, #200]	; (80068a8 <_printf_i+0x240>)
 80067e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	6829      	ldr	r1, [r5, #0]
 80067e8:	061f      	lsls	r7, r3, #24
 80067ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80067ee:	d402      	bmi.n	80067f6 <_printf_i+0x18e>
 80067f0:	065f      	lsls	r7, r3, #25
 80067f2:	bf48      	it	mi
 80067f4:	b2b6      	uxthmi	r6, r6
 80067f6:	07df      	lsls	r7, r3, #31
 80067f8:	bf48      	it	mi
 80067fa:	f043 0320 	orrmi.w	r3, r3, #32
 80067fe:	6029      	str	r1, [r5, #0]
 8006800:	bf48      	it	mi
 8006802:	6023      	strmi	r3, [r4, #0]
 8006804:	b91e      	cbnz	r6, 800680e <_printf_i+0x1a6>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	f023 0320 	bic.w	r3, r3, #32
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	2310      	movs	r3, #16
 8006810:	e7a6      	b.n	8006760 <_printf_i+0xf8>
 8006812:	4824      	ldr	r0, [pc, #144]	; (80068a4 <_printf_i+0x23c>)
 8006814:	e7e4      	b.n	80067e0 <_printf_i+0x178>
 8006816:	4615      	mov	r5, r2
 8006818:	e7bd      	b.n	8006796 <_printf_i+0x12e>
 800681a:	682b      	ldr	r3, [r5, #0]
 800681c:	6826      	ldr	r6, [r4, #0]
 800681e:	1d18      	adds	r0, r3, #4
 8006820:	6961      	ldr	r1, [r4, #20]
 8006822:	6028      	str	r0, [r5, #0]
 8006824:	0635      	lsls	r5, r6, #24
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	d501      	bpl.n	800682e <_printf_i+0x1c6>
 800682a:	6019      	str	r1, [r3, #0]
 800682c:	e002      	b.n	8006834 <_printf_i+0x1cc>
 800682e:	0670      	lsls	r0, r6, #25
 8006830:	d5fb      	bpl.n	800682a <_printf_i+0x1c2>
 8006832:	8019      	strh	r1, [r3, #0]
 8006834:	2300      	movs	r3, #0
 8006836:	4615      	mov	r5, r2
 8006838:	6123      	str	r3, [r4, #16]
 800683a:	e7bc      	b.n	80067b6 <_printf_i+0x14e>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	2100      	movs	r1, #0
 8006840:	1d1a      	adds	r2, r3, #4
 8006842:	602a      	str	r2, [r5, #0]
 8006844:	681d      	ldr	r5, [r3, #0]
 8006846:	6862      	ldr	r2, [r4, #4]
 8006848:	4628      	mov	r0, r5
 800684a:	f000 f9b4 	bl	8006bb6 <memchr>
 800684e:	b108      	cbz	r0, 8006854 <_printf_i+0x1ec>
 8006850:	1b40      	subs	r0, r0, r5
 8006852:	6060      	str	r0, [r4, #4]
 8006854:	6863      	ldr	r3, [r4, #4]
 8006856:	6123      	str	r3, [r4, #16]
 8006858:	2300      	movs	r3, #0
 800685a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685e:	e7aa      	b.n	80067b6 <_printf_i+0x14e>
 8006860:	462a      	mov	r2, r5
 8006862:	4649      	mov	r1, r9
 8006864:	4640      	mov	r0, r8
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	47d0      	blx	sl
 800686a:	3001      	adds	r0, #1
 800686c:	d0ad      	beq.n	80067ca <_printf_i+0x162>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	079b      	lsls	r3, r3, #30
 8006872:	d413      	bmi.n	800689c <_printf_i+0x234>
 8006874:	68e0      	ldr	r0, [r4, #12]
 8006876:	9b03      	ldr	r3, [sp, #12]
 8006878:	4298      	cmp	r0, r3
 800687a:	bfb8      	it	lt
 800687c:	4618      	movlt	r0, r3
 800687e:	e7a6      	b.n	80067ce <_printf_i+0x166>
 8006880:	2301      	movs	r3, #1
 8006882:	4632      	mov	r2, r6
 8006884:	4649      	mov	r1, r9
 8006886:	4640      	mov	r0, r8
 8006888:	47d0      	blx	sl
 800688a:	3001      	adds	r0, #1
 800688c:	d09d      	beq.n	80067ca <_printf_i+0x162>
 800688e:	3501      	adds	r5, #1
 8006890:	68e3      	ldr	r3, [r4, #12]
 8006892:	9903      	ldr	r1, [sp, #12]
 8006894:	1a5b      	subs	r3, r3, r1
 8006896:	42ab      	cmp	r3, r5
 8006898:	dcf2      	bgt.n	8006880 <_printf_i+0x218>
 800689a:	e7eb      	b.n	8006874 <_printf_i+0x20c>
 800689c:	2500      	movs	r5, #0
 800689e:	f104 0619 	add.w	r6, r4, #25
 80068a2:	e7f5      	b.n	8006890 <_printf_i+0x228>
 80068a4:	08008a0c 	.word	0x08008a0c
 80068a8:	08008a1d 	.word	0x08008a1d

080068ac <std>:
 80068ac:	2300      	movs	r3, #0
 80068ae:	b510      	push	{r4, lr}
 80068b0:	4604      	mov	r4, r0
 80068b2:	e9c0 3300 	strd	r3, r3, [r0]
 80068b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ba:	6083      	str	r3, [r0, #8]
 80068bc:	8181      	strh	r1, [r0, #12]
 80068be:	6643      	str	r3, [r0, #100]	; 0x64
 80068c0:	81c2      	strh	r2, [r0, #14]
 80068c2:	6183      	str	r3, [r0, #24]
 80068c4:	4619      	mov	r1, r3
 80068c6:	2208      	movs	r2, #8
 80068c8:	305c      	adds	r0, #92	; 0x5c
 80068ca:	f000 f8f4 	bl	8006ab6 <memset>
 80068ce:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <std+0x58>)
 80068d0:	6224      	str	r4, [r4, #32]
 80068d2:	6263      	str	r3, [r4, #36]	; 0x24
 80068d4:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <std+0x5c>)
 80068d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80068d8:	4b0c      	ldr	r3, [pc, #48]	; (800690c <std+0x60>)
 80068da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068dc:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <std+0x64>)
 80068de:	6323      	str	r3, [r4, #48]	; 0x30
 80068e0:	4b0c      	ldr	r3, [pc, #48]	; (8006914 <std+0x68>)
 80068e2:	429c      	cmp	r4, r3
 80068e4:	d006      	beq.n	80068f4 <std+0x48>
 80068e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80068ea:	4294      	cmp	r4, r2
 80068ec:	d002      	beq.n	80068f4 <std+0x48>
 80068ee:	33d0      	adds	r3, #208	; 0xd0
 80068f0:	429c      	cmp	r4, r3
 80068f2:	d105      	bne.n	8006900 <std+0x54>
 80068f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068fc:	f000 b958 	b.w	8006bb0 <__retarget_lock_init_recursive>
 8006900:	bd10      	pop	{r4, pc}
 8006902:	bf00      	nop
 8006904:	08006a31 	.word	0x08006a31
 8006908:	08006a53 	.word	0x08006a53
 800690c:	08006a8b 	.word	0x08006a8b
 8006910:	08006aaf 	.word	0x08006aaf
 8006914:	20001348 	.word	0x20001348

08006918 <stdio_exit_handler>:
 8006918:	4a02      	ldr	r2, [pc, #8]	; (8006924 <stdio_exit_handler+0xc>)
 800691a:	4903      	ldr	r1, [pc, #12]	; (8006928 <stdio_exit_handler+0x10>)
 800691c:	4803      	ldr	r0, [pc, #12]	; (800692c <stdio_exit_handler+0x14>)
 800691e:	f000 b869 	b.w	80069f4 <_fwalk_sglue>
 8006922:	bf00      	nop
 8006924:	20000010 	.word	0x20000010
 8006928:	080082b5 	.word	0x080082b5
 800692c:	2000001c 	.word	0x2000001c

08006930 <cleanup_stdio>:
 8006930:	6841      	ldr	r1, [r0, #4]
 8006932:	4b0c      	ldr	r3, [pc, #48]	; (8006964 <cleanup_stdio+0x34>)
 8006934:	b510      	push	{r4, lr}
 8006936:	4299      	cmp	r1, r3
 8006938:	4604      	mov	r4, r0
 800693a:	d001      	beq.n	8006940 <cleanup_stdio+0x10>
 800693c:	f001 fcba 	bl	80082b4 <_fflush_r>
 8006940:	68a1      	ldr	r1, [r4, #8]
 8006942:	4b09      	ldr	r3, [pc, #36]	; (8006968 <cleanup_stdio+0x38>)
 8006944:	4299      	cmp	r1, r3
 8006946:	d002      	beq.n	800694e <cleanup_stdio+0x1e>
 8006948:	4620      	mov	r0, r4
 800694a:	f001 fcb3 	bl	80082b4 <_fflush_r>
 800694e:	68e1      	ldr	r1, [r4, #12]
 8006950:	4b06      	ldr	r3, [pc, #24]	; (800696c <cleanup_stdio+0x3c>)
 8006952:	4299      	cmp	r1, r3
 8006954:	d004      	beq.n	8006960 <cleanup_stdio+0x30>
 8006956:	4620      	mov	r0, r4
 8006958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800695c:	f001 bcaa 	b.w	80082b4 <_fflush_r>
 8006960:	bd10      	pop	{r4, pc}
 8006962:	bf00      	nop
 8006964:	20001348 	.word	0x20001348
 8006968:	200013b0 	.word	0x200013b0
 800696c:	20001418 	.word	0x20001418

08006970 <global_stdio_init.part.0>:
 8006970:	b510      	push	{r4, lr}
 8006972:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <global_stdio_init.part.0+0x30>)
 8006974:	4c0b      	ldr	r4, [pc, #44]	; (80069a4 <global_stdio_init.part.0+0x34>)
 8006976:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <global_stdio_init.part.0+0x38>)
 8006978:	4620      	mov	r0, r4
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	2104      	movs	r1, #4
 800697e:	2200      	movs	r2, #0
 8006980:	f7ff ff94 	bl	80068ac <std>
 8006984:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006988:	2201      	movs	r2, #1
 800698a:	2109      	movs	r1, #9
 800698c:	f7ff ff8e 	bl	80068ac <std>
 8006990:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006994:	2202      	movs	r2, #2
 8006996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800699a:	2112      	movs	r1, #18
 800699c:	f7ff bf86 	b.w	80068ac <std>
 80069a0:	20001480 	.word	0x20001480
 80069a4:	20001348 	.word	0x20001348
 80069a8:	08006919 	.word	0x08006919

080069ac <__sfp_lock_acquire>:
 80069ac:	4801      	ldr	r0, [pc, #4]	; (80069b4 <__sfp_lock_acquire+0x8>)
 80069ae:	f000 b900 	b.w	8006bb2 <__retarget_lock_acquire_recursive>
 80069b2:	bf00      	nop
 80069b4:	20001489 	.word	0x20001489

080069b8 <__sfp_lock_release>:
 80069b8:	4801      	ldr	r0, [pc, #4]	; (80069c0 <__sfp_lock_release+0x8>)
 80069ba:	f000 b8fb 	b.w	8006bb4 <__retarget_lock_release_recursive>
 80069be:	bf00      	nop
 80069c0:	20001489 	.word	0x20001489

080069c4 <__sinit>:
 80069c4:	b510      	push	{r4, lr}
 80069c6:	4604      	mov	r4, r0
 80069c8:	f7ff fff0 	bl	80069ac <__sfp_lock_acquire>
 80069cc:	6a23      	ldr	r3, [r4, #32]
 80069ce:	b11b      	cbz	r3, 80069d8 <__sinit+0x14>
 80069d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069d4:	f7ff bff0 	b.w	80069b8 <__sfp_lock_release>
 80069d8:	4b04      	ldr	r3, [pc, #16]	; (80069ec <__sinit+0x28>)
 80069da:	6223      	str	r3, [r4, #32]
 80069dc:	4b04      	ldr	r3, [pc, #16]	; (80069f0 <__sinit+0x2c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1f5      	bne.n	80069d0 <__sinit+0xc>
 80069e4:	f7ff ffc4 	bl	8006970 <global_stdio_init.part.0>
 80069e8:	e7f2      	b.n	80069d0 <__sinit+0xc>
 80069ea:	bf00      	nop
 80069ec:	08006931 	.word	0x08006931
 80069f0:	20001480 	.word	0x20001480

080069f4 <_fwalk_sglue>:
 80069f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069f8:	4607      	mov	r7, r0
 80069fa:	4688      	mov	r8, r1
 80069fc:	4614      	mov	r4, r2
 80069fe:	2600      	movs	r6, #0
 8006a00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a04:	f1b9 0901 	subs.w	r9, r9, #1
 8006a08:	d505      	bpl.n	8006a16 <_fwalk_sglue+0x22>
 8006a0a:	6824      	ldr	r4, [r4, #0]
 8006a0c:	2c00      	cmp	r4, #0
 8006a0e:	d1f7      	bne.n	8006a00 <_fwalk_sglue+0xc>
 8006a10:	4630      	mov	r0, r6
 8006a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d907      	bls.n	8006a2c <_fwalk_sglue+0x38>
 8006a1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a20:	3301      	adds	r3, #1
 8006a22:	d003      	beq.n	8006a2c <_fwalk_sglue+0x38>
 8006a24:	4629      	mov	r1, r5
 8006a26:	4638      	mov	r0, r7
 8006a28:	47c0      	blx	r8
 8006a2a:	4306      	orrs	r6, r0
 8006a2c:	3568      	adds	r5, #104	; 0x68
 8006a2e:	e7e9      	b.n	8006a04 <_fwalk_sglue+0x10>

08006a30 <__sread>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	460c      	mov	r4, r1
 8006a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a38:	f000 f86c 	bl	8006b14 <_read_r>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	bfab      	itete	ge
 8006a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a42:	89a3      	ldrhlt	r3, [r4, #12]
 8006a44:	181b      	addge	r3, r3, r0
 8006a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a4a:	bfac      	ite	ge
 8006a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a4e:	81a3      	strhlt	r3, [r4, #12]
 8006a50:	bd10      	pop	{r4, pc}

08006a52 <__swrite>:
 8006a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a56:	461f      	mov	r7, r3
 8006a58:	898b      	ldrh	r3, [r1, #12]
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	05db      	lsls	r3, r3, #23
 8006a5e:	460c      	mov	r4, r1
 8006a60:	4616      	mov	r6, r2
 8006a62:	d505      	bpl.n	8006a70 <__swrite+0x1e>
 8006a64:	2302      	movs	r3, #2
 8006a66:	2200      	movs	r2, #0
 8006a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a6c:	f000 f840 	bl	8006af0 <_lseek_r>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	4632      	mov	r2, r6
 8006a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a78:	81a3      	strh	r3, [r4, #12]
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	463b      	mov	r3, r7
 8006a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a86:	f000 b857 	b.w	8006b38 <_write_r>

08006a8a <__sseek>:
 8006a8a:	b510      	push	{r4, lr}
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a92:	f000 f82d 	bl	8006af0 <_lseek_r>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	bf15      	itete	ne
 8006a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aa6:	81a3      	strheq	r3, [r4, #12]
 8006aa8:	bf18      	it	ne
 8006aaa:	81a3      	strhne	r3, [r4, #12]
 8006aac:	bd10      	pop	{r4, pc}

08006aae <__sclose>:
 8006aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab2:	f000 b80d 	b.w	8006ad0 <_close_r>

08006ab6 <memset>:
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	4402      	add	r2, r0
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d100      	bne.n	8006ac0 <memset+0xa>
 8006abe:	4770      	bx	lr
 8006ac0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac4:	e7f9      	b.n	8006aba <memset+0x4>
	...

08006ac8 <_localeconv_r>:
 8006ac8:	4800      	ldr	r0, [pc, #0]	; (8006acc <_localeconv_r+0x4>)
 8006aca:	4770      	bx	lr
 8006acc:	2000015c 	.word	0x2000015c

08006ad0 <_close_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	4d05      	ldr	r5, [pc, #20]	; (8006aec <_close_r+0x1c>)
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	4608      	mov	r0, r1
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	f7fb fa26 	bl	8001f2c <_close>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <_close_r+0x1a>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b103      	cbz	r3, 8006aea <_close_r+0x1a>
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	20001484 	.word	0x20001484

08006af0 <_lseek_r>:
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4604      	mov	r4, r0
 8006af4:	4608      	mov	r0, r1
 8006af6:	4611      	mov	r1, r2
 8006af8:	2200      	movs	r2, #0
 8006afa:	4d05      	ldr	r5, [pc, #20]	; (8006b10 <_lseek_r+0x20>)
 8006afc:	602a      	str	r2, [r5, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	f7fb fa38 	bl	8001f74 <_lseek>
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	d102      	bne.n	8006b0e <_lseek_r+0x1e>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	b103      	cbz	r3, 8006b0e <_lseek_r+0x1e>
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	bd38      	pop	{r3, r4, r5, pc}
 8006b10:	20001484 	.word	0x20001484

08006b14 <_read_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	4d05      	ldr	r5, [pc, #20]	; (8006b34 <_read_r+0x20>)
 8006b20:	602a      	str	r2, [r5, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	f7fb f9c9 	bl	8001eba <_read>
 8006b28:	1c43      	adds	r3, r0, #1
 8006b2a:	d102      	bne.n	8006b32 <_read_r+0x1e>
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	b103      	cbz	r3, 8006b32 <_read_r+0x1e>
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	20001484 	.word	0x20001484

08006b38 <_write_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	4611      	mov	r1, r2
 8006b40:	2200      	movs	r2, #0
 8006b42:	4d05      	ldr	r5, [pc, #20]	; (8006b58 <_write_r+0x20>)
 8006b44:	602a      	str	r2, [r5, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f7fb f9d4 	bl	8001ef4 <_write>
 8006b4c:	1c43      	adds	r3, r0, #1
 8006b4e:	d102      	bne.n	8006b56 <_write_r+0x1e>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	b103      	cbz	r3, 8006b56 <_write_r+0x1e>
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	20001484 	.word	0x20001484

08006b5c <__errno>:
 8006b5c:	4b01      	ldr	r3, [pc, #4]	; (8006b64 <__errno+0x8>)
 8006b5e:	6818      	ldr	r0, [r3, #0]
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	20000068 	.word	0x20000068

08006b68 <__libc_init_array>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	2600      	movs	r6, #0
 8006b6c:	4d0c      	ldr	r5, [pc, #48]	; (8006ba0 <__libc_init_array+0x38>)
 8006b6e:	4c0d      	ldr	r4, [pc, #52]	; (8006ba4 <__libc_init_array+0x3c>)
 8006b70:	1b64      	subs	r4, r4, r5
 8006b72:	10a4      	asrs	r4, r4, #2
 8006b74:	42a6      	cmp	r6, r4
 8006b76:	d109      	bne.n	8006b8c <__libc_init_array+0x24>
 8006b78:	f001 fede 	bl	8008938 <_init>
 8006b7c:	2600      	movs	r6, #0
 8006b7e:	4d0a      	ldr	r5, [pc, #40]	; (8006ba8 <__libc_init_array+0x40>)
 8006b80:	4c0a      	ldr	r4, [pc, #40]	; (8006bac <__libc_init_array+0x44>)
 8006b82:	1b64      	subs	r4, r4, r5
 8006b84:	10a4      	asrs	r4, r4, #2
 8006b86:	42a6      	cmp	r6, r4
 8006b88:	d105      	bne.n	8006b96 <__libc_init_array+0x2e>
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}
 8006b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b90:	4798      	blx	r3
 8006b92:	3601      	adds	r6, #1
 8006b94:	e7ee      	b.n	8006b74 <__libc_init_array+0xc>
 8006b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b9a:	4798      	blx	r3
 8006b9c:	3601      	adds	r6, #1
 8006b9e:	e7f2      	b.n	8006b86 <__libc_init_array+0x1e>
 8006ba0:	08008d6c 	.word	0x08008d6c
 8006ba4:	08008d6c 	.word	0x08008d6c
 8006ba8:	08008d6c 	.word	0x08008d6c
 8006bac:	08008d70 	.word	0x08008d70

08006bb0 <__retarget_lock_init_recursive>:
 8006bb0:	4770      	bx	lr

08006bb2 <__retarget_lock_acquire_recursive>:
 8006bb2:	4770      	bx	lr

08006bb4 <__retarget_lock_release_recursive>:
 8006bb4:	4770      	bx	lr

08006bb6 <memchr>:
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	b2c9      	uxtb	r1, r1
 8006bbc:	4402      	add	r2, r0
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	d101      	bne.n	8006bc8 <memchr+0x12>
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	e003      	b.n	8006bd0 <memchr+0x1a>
 8006bc8:	7804      	ldrb	r4, [r0, #0]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	428c      	cmp	r4, r1
 8006bce:	d1f6      	bne.n	8006bbe <memchr+0x8>
 8006bd0:	bd10      	pop	{r4, pc}

08006bd2 <memcpy>:
 8006bd2:	440a      	add	r2, r1
 8006bd4:	4291      	cmp	r1, r2
 8006bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bda:	d100      	bne.n	8006bde <memcpy+0xc>
 8006bdc:	4770      	bx	lr
 8006bde:	b510      	push	{r4, lr}
 8006be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006be4:	4291      	cmp	r1, r2
 8006be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bea:	d1f9      	bne.n	8006be0 <memcpy+0xe>
 8006bec:	bd10      	pop	{r4, pc}

08006bee <quorem>:
 8006bee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf2:	6903      	ldr	r3, [r0, #16]
 8006bf4:	690c      	ldr	r4, [r1, #16]
 8006bf6:	4607      	mov	r7, r0
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	db7f      	blt.n	8006cfc <quorem+0x10e>
 8006bfc:	3c01      	subs	r4, #1
 8006bfe:	f100 0514 	add.w	r5, r0, #20
 8006c02:	f101 0814 	add.w	r8, r1, #20
 8006c06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c14:	3301      	adds	r3, #1
 8006c16:	429a      	cmp	r2, r3
 8006c18:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c24:	d331      	bcc.n	8006c8a <quorem+0x9c>
 8006c26:	f04f 0e00 	mov.w	lr, #0
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	46ac      	mov	ip, r5
 8006c2e:	46f2      	mov	sl, lr
 8006c30:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c34:	b293      	uxth	r3, r2
 8006c36:	fb06 e303 	mla	r3, r6, r3, lr
 8006c3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c3e:	0c1a      	lsrs	r2, r3, #16
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	fb06 220e 	mla	r2, r6, lr, r2
 8006c46:	ebaa 0303 	sub.w	r3, sl, r3
 8006c4a:	f8dc a000 	ldr.w	sl, [ip]
 8006c4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c52:	fa1f fa8a 	uxth.w	sl, sl
 8006c56:	4453      	add	r3, sl
 8006c58:	f8dc a000 	ldr.w	sl, [ip]
 8006c5c:	b292      	uxth	r2, r2
 8006c5e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c6c:	4581      	cmp	r9, r0
 8006c6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c72:	f84c 3b04 	str.w	r3, [ip], #4
 8006c76:	d2db      	bcs.n	8006c30 <quorem+0x42>
 8006c78:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c7c:	b92b      	cbnz	r3, 8006c8a <quorem+0x9c>
 8006c7e:	9b01      	ldr	r3, [sp, #4]
 8006c80:	3b04      	subs	r3, #4
 8006c82:	429d      	cmp	r5, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	d32d      	bcc.n	8006ce4 <quorem+0xf6>
 8006c88:	613c      	str	r4, [r7, #16]
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	f001 f992 	bl	8007fb4 <__mcmp>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	db23      	blt.n	8006cdc <quorem+0xee>
 8006c94:	4629      	mov	r1, r5
 8006c96:	2000      	movs	r0, #0
 8006c98:	3601      	adds	r6, #1
 8006c9a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c9e:	f8d1 c000 	ldr.w	ip, [r1]
 8006ca2:	b293      	uxth	r3, r2
 8006ca4:	1ac3      	subs	r3, r0, r3
 8006ca6:	0c12      	lsrs	r2, r2, #16
 8006ca8:	fa1f f08c 	uxth.w	r0, ip
 8006cac:	4403      	add	r3, r0
 8006cae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006cb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cbc:	45c1      	cmp	r9, r8
 8006cbe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006cc2:	f841 3b04 	str.w	r3, [r1], #4
 8006cc6:	d2e8      	bcs.n	8006c9a <quorem+0xac>
 8006cc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ccc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cd0:	b922      	cbnz	r2, 8006cdc <quorem+0xee>
 8006cd2:	3b04      	subs	r3, #4
 8006cd4:	429d      	cmp	r5, r3
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	d30a      	bcc.n	8006cf0 <quorem+0x102>
 8006cda:	613c      	str	r4, [r7, #16]
 8006cdc:	4630      	mov	r0, r6
 8006cde:	b003      	add	sp, #12
 8006ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce4:	6812      	ldr	r2, [r2, #0]
 8006ce6:	3b04      	subs	r3, #4
 8006ce8:	2a00      	cmp	r2, #0
 8006cea:	d1cd      	bne.n	8006c88 <quorem+0x9a>
 8006cec:	3c01      	subs	r4, #1
 8006cee:	e7c8      	b.n	8006c82 <quorem+0x94>
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	3b04      	subs	r3, #4
 8006cf4:	2a00      	cmp	r2, #0
 8006cf6:	d1f0      	bne.n	8006cda <quorem+0xec>
 8006cf8:	3c01      	subs	r4, #1
 8006cfa:	e7eb      	b.n	8006cd4 <quorem+0xe6>
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	e7ee      	b.n	8006cde <quorem+0xf0>

08006d00 <_dtoa_r>:
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	4616      	mov	r6, r2
 8006d06:	461f      	mov	r7, r3
 8006d08:	69c4      	ldr	r4, [r0, #28]
 8006d0a:	b099      	sub	sp, #100	; 0x64
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006d12:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006d16:	b974      	cbnz	r4, 8006d36 <_dtoa_r+0x36>
 8006d18:	2010      	movs	r0, #16
 8006d1a:	f000 fe1d 	bl	8007958 <malloc>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	61e8      	str	r0, [r5, #28]
 8006d22:	b920      	cbnz	r0, 8006d2e <_dtoa_r+0x2e>
 8006d24:	21ef      	movs	r1, #239	; 0xef
 8006d26:	4bac      	ldr	r3, [pc, #688]	; (8006fd8 <_dtoa_r+0x2d8>)
 8006d28:	48ac      	ldr	r0, [pc, #688]	; (8006fdc <_dtoa_r+0x2dc>)
 8006d2a:	f001 fafb 	bl	8008324 <__assert_func>
 8006d2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d32:	6004      	str	r4, [r0, #0]
 8006d34:	60c4      	str	r4, [r0, #12]
 8006d36:	69eb      	ldr	r3, [r5, #28]
 8006d38:	6819      	ldr	r1, [r3, #0]
 8006d3a:	b151      	cbz	r1, 8006d52 <_dtoa_r+0x52>
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4093      	lsls	r3, r2
 8006d42:	604a      	str	r2, [r1, #4]
 8006d44:	608b      	str	r3, [r1, #8]
 8006d46:	4628      	mov	r0, r5
 8006d48:	f000 fefa 	bl	8007b40 <_Bfree>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	69eb      	ldr	r3, [r5, #28]
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	1e3b      	subs	r3, r7, #0
 8006d54:	bfaf      	iteee	ge
 8006d56:	2300      	movge	r3, #0
 8006d58:	2201      	movlt	r2, #1
 8006d5a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d5e:	9305      	strlt	r3, [sp, #20]
 8006d60:	bfa8      	it	ge
 8006d62:	f8c8 3000 	strge.w	r3, [r8]
 8006d66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006d6a:	4b9d      	ldr	r3, [pc, #628]	; (8006fe0 <_dtoa_r+0x2e0>)
 8006d6c:	bfb8      	it	lt
 8006d6e:	f8c8 2000 	strlt.w	r2, [r8]
 8006d72:	ea33 0309 	bics.w	r3, r3, r9
 8006d76:	d119      	bne.n	8006dac <_dtoa_r+0xac>
 8006d78:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d84:	4333      	orrs	r3, r6
 8006d86:	f000 8589 	beq.w	800789c <_dtoa_r+0xb9c>
 8006d8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d8c:	b953      	cbnz	r3, 8006da4 <_dtoa_r+0xa4>
 8006d8e:	4b95      	ldr	r3, [pc, #596]	; (8006fe4 <_dtoa_r+0x2e4>)
 8006d90:	e023      	b.n	8006dda <_dtoa_r+0xda>
 8006d92:	4b95      	ldr	r3, [pc, #596]	; (8006fe8 <_dtoa_r+0x2e8>)
 8006d94:	9303      	str	r3, [sp, #12]
 8006d96:	3308      	adds	r3, #8
 8006d98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	9803      	ldr	r0, [sp, #12]
 8006d9e:	b019      	add	sp, #100	; 0x64
 8006da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da4:	4b8f      	ldr	r3, [pc, #572]	; (8006fe4 <_dtoa_r+0x2e4>)
 8006da6:	9303      	str	r3, [sp, #12]
 8006da8:	3303      	adds	r3, #3
 8006daa:	e7f5      	b.n	8006d98 <_dtoa_r+0x98>
 8006dac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006db0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006db4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006db8:	2200      	movs	r2, #0
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f7f9 fdf4 	bl	80009a8 <__aeabi_dcmpeq>
 8006dc0:	4680      	mov	r8, r0
 8006dc2:	b160      	cbz	r0, 8006dde <_dtoa_r+0xde>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 8562 	beq.w	8007896 <_dtoa_r+0xb96>
 8006dd2:	4b86      	ldr	r3, [pc, #536]	; (8006fec <_dtoa_r+0x2ec>)
 8006dd4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	9303      	str	r3, [sp, #12]
 8006ddc:	e7de      	b.n	8006d9c <_dtoa_r+0x9c>
 8006dde:	ab16      	add	r3, sp, #88	; 0x58
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	ab17      	add	r3, sp, #92	; 0x5c
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	4628      	mov	r0, r5
 8006de8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006dec:	f001 f98a 	bl	8008104 <__d2b>
 8006df0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006df4:	4682      	mov	sl, r0
 8006df6:	2c00      	cmp	r4, #0
 8006df8:	d07e      	beq.n	8006ef8 <_dtoa_r+0x1f8>
 8006dfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e00:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e08:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006e0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006e10:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006e14:	4619      	mov	r1, r3
 8006e16:	2200      	movs	r2, #0
 8006e18:	4b75      	ldr	r3, [pc, #468]	; (8006ff0 <_dtoa_r+0x2f0>)
 8006e1a:	f7f9 f9a5 	bl	8000168 <__aeabi_dsub>
 8006e1e:	a368      	add	r3, pc, #416	; (adr r3, 8006fc0 <_dtoa_r+0x2c0>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f7f9 fb58 	bl	80004d8 <__aeabi_dmul>
 8006e28:	a367      	add	r3, pc, #412	; (adr r3, 8006fc8 <_dtoa_r+0x2c8>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 f99d 	bl	800016c <__adddf3>
 8006e32:	4606      	mov	r6, r0
 8006e34:	4620      	mov	r0, r4
 8006e36:	460f      	mov	r7, r1
 8006e38:	f7f9 fae4 	bl	8000404 <__aeabi_i2d>
 8006e3c:	a364      	add	r3, pc, #400	; (adr r3, 8006fd0 <_dtoa_r+0x2d0>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f7f9 fb49 	bl	80004d8 <__aeabi_dmul>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	f7f9 f98d 	bl	800016c <__adddf3>
 8006e52:	4606      	mov	r6, r0
 8006e54:	460f      	mov	r7, r1
 8006e56:	f7f9 fdef 	bl	8000a38 <__aeabi_d2iz>
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	4683      	mov	fp, r0
 8006e5e:	2300      	movs	r3, #0
 8006e60:	4630      	mov	r0, r6
 8006e62:	4639      	mov	r1, r7
 8006e64:	f7f9 fdaa 	bl	80009bc <__aeabi_dcmplt>
 8006e68:	b148      	cbz	r0, 8006e7e <_dtoa_r+0x17e>
 8006e6a:	4658      	mov	r0, fp
 8006e6c:	f7f9 faca 	bl	8000404 <__aeabi_i2d>
 8006e70:	4632      	mov	r2, r6
 8006e72:	463b      	mov	r3, r7
 8006e74:	f7f9 fd98 	bl	80009a8 <__aeabi_dcmpeq>
 8006e78:	b908      	cbnz	r0, 8006e7e <_dtoa_r+0x17e>
 8006e7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e7e:	f1bb 0f16 	cmp.w	fp, #22
 8006e82:	d857      	bhi.n	8006f34 <_dtoa_r+0x234>
 8006e84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e88:	4b5a      	ldr	r3, [pc, #360]	; (8006ff4 <_dtoa_r+0x2f4>)
 8006e8a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	f7f9 fd93 	bl	80009bc <__aeabi_dcmplt>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d04e      	beq.n	8006f38 <_dtoa_r+0x238>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ea0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ea2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006ea4:	1b1b      	subs	r3, r3, r4
 8006ea6:	1e5a      	subs	r2, r3, #1
 8006ea8:	bf46      	itte	mi
 8006eaa:	f1c3 0901 	rsbmi	r9, r3, #1
 8006eae:	2300      	movmi	r3, #0
 8006eb0:	f04f 0900 	movpl.w	r9, #0
 8006eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8006eb6:	bf48      	it	mi
 8006eb8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006eba:	f1bb 0f00 	cmp.w	fp, #0
 8006ebe:	db3d      	blt.n	8006f3c <_dtoa_r+0x23c>
 8006ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006ec6:	445b      	add	r3, fp
 8006ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eca:	2300      	movs	r3, #0
 8006ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8006ece:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ed0:	2b09      	cmp	r3, #9
 8006ed2:	d867      	bhi.n	8006fa4 <_dtoa_r+0x2a4>
 8006ed4:	2b05      	cmp	r3, #5
 8006ed6:	bfc4      	itt	gt
 8006ed8:	3b04      	subgt	r3, #4
 8006eda:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ede:	bfc8      	it	gt
 8006ee0:	2400      	movgt	r4, #0
 8006ee2:	f1a3 0302 	sub.w	r3, r3, #2
 8006ee6:	bfd8      	it	le
 8006ee8:	2401      	movle	r4, #1
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	f200 8086 	bhi.w	8006ffc <_dtoa_r+0x2fc>
 8006ef0:	e8df f003 	tbb	[pc, r3]
 8006ef4:	5637392c 	.word	0x5637392c
 8006ef8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006efc:	441c      	add	r4, r3
 8006efe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	bfc1      	itttt	gt
 8006f06:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f0a:	fa09 f903 	lslgt.w	r9, r9, r3
 8006f0e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006f12:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006f16:	bfd6      	itet	le
 8006f18:	f1c3 0320 	rsble	r3, r3, #32
 8006f1c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006f20:	fa06 f003 	lslle.w	r0, r6, r3
 8006f24:	f7f9 fa5e 	bl	80003e4 <__aeabi_ui2d>
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006f2e:	3c01      	subs	r4, #1
 8006f30:	9213      	str	r2, [sp, #76]	; 0x4c
 8006f32:	e76f      	b.n	8006e14 <_dtoa_r+0x114>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e7b3      	b.n	8006ea0 <_dtoa_r+0x1a0>
 8006f38:	900f      	str	r0, [sp, #60]	; 0x3c
 8006f3a:	e7b2      	b.n	8006ea2 <_dtoa_r+0x1a2>
 8006f3c:	f1cb 0300 	rsb	r3, fp, #0
 8006f40:	930a      	str	r3, [sp, #40]	; 0x28
 8006f42:	2300      	movs	r3, #0
 8006f44:	eba9 090b 	sub.w	r9, r9, fp
 8006f48:	930e      	str	r3, [sp, #56]	; 0x38
 8006f4a:	e7c0      	b.n	8006ece <_dtoa_r+0x1ce>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	dc55      	bgt.n	8007002 <_dtoa_r+0x302>
 8006f56:	2301      	movs	r3, #1
 8006f58:	461a      	mov	r2, r3
 8006f5a:	9306      	str	r3, [sp, #24]
 8006f5c:	9308      	str	r3, [sp, #32]
 8006f5e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006f60:	e00b      	b.n	8006f7a <_dtoa_r+0x27a>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e7f3      	b.n	8006f4e <_dtoa_r+0x24e>
 8006f66:	2300      	movs	r3, #0
 8006f68:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f6c:	445b      	add	r3, fp
 8006f6e:	9306      	str	r3, [sp, #24]
 8006f70:	3301      	adds	r3, #1
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	9308      	str	r3, [sp, #32]
 8006f76:	bfb8      	it	lt
 8006f78:	2301      	movlt	r3, #1
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	69e8      	ldr	r0, [r5, #28]
 8006f80:	f102 0614 	add.w	r6, r2, #20
 8006f84:	429e      	cmp	r6, r3
 8006f86:	d940      	bls.n	800700a <_dtoa_r+0x30a>
 8006f88:	6041      	str	r1, [r0, #4]
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f000 fd98 	bl	8007ac0 <_Balloc>
 8006f90:	9003      	str	r0, [sp, #12]
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d13c      	bne.n	8007010 <_dtoa_r+0x310>
 8006f96:	4602      	mov	r2, r0
 8006f98:	f240 11af 	movw	r1, #431	; 0x1af
 8006f9c:	4b16      	ldr	r3, [pc, #88]	; (8006ff8 <_dtoa_r+0x2f8>)
 8006f9e:	e6c3      	b.n	8006d28 <_dtoa_r+0x28>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e7e1      	b.n	8006f68 <_dtoa_r+0x268>
 8006fa4:	2401      	movs	r4, #1
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	940b      	str	r4, [sp, #44]	; 0x2c
 8006faa:	9322      	str	r3, [sp, #136]	; 0x88
 8006fac:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	9306      	str	r3, [sp, #24]
 8006fb4:	9308      	str	r3, [sp, #32]
 8006fb6:	2312      	movs	r3, #18
 8006fb8:	e7d1      	b.n	8006f5e <_dtoa_r+0x25e>
 8006fba:	bf00      	nop
 8006fbc:	f3af 8000 	nop.w
 8006fc0:	636f4361 	.word	0x636f4361
 8006fc4:	3fd287a7 	.word	0x3fd287a7
 8006fc8:	8b60c8b3 	.word	0x8b60c8b3
 8006fcc:	3fc68a28 	.word	0x3fc68a28
 8006fd0:	509f79fb 	.word	0x509f79fb
 8006fd4:	3fd34413 	.word	0x3fd34413
 8006fd8:	08008a3b 	.word	0x08008a3b
 8006fdc:	08008a52 	.word	0x08008a52
 8006fe0:	7ff00000 	.word	0x7ff00000
 8006fe4:	08008a37 	.word	0x08008a37
 8006fe8:	08008a2e 	.word	0x08008a2e
 8006fec:	08008a0b 	.word	0x08008a0b
 8006ff0:	3ff80000 	.word	0x3ff80000
 8006ff4:	08008b40 	.word	0x08008b40
 8006ff8:	08008aaa 	.word	0x08008aaa
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007000:	e7d4      	b.n	8006fac <_dtoa_r+0x2ac>
 8007002:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007004:	9306      	str	r3, [sp, #24]
 8007006:	9308      	str	r3, [sp, #32]
 8007008:	e7b7      	b.n	8006f7a <_dtoa_r+0x27a>
 800700a:	3101      	adds	r1, #1
 800700c:	0052      	lsls	r2, r2, #1
 800700e:	e7b7      	b.n	8006f80 <_dtoa_r+0x280>
 8007010:	69eb      	ldr	r3, [r5, #28]
 8007012:	9a03      	ldr	r2, [sp, #12]
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	9b08      	ldr	r3, [sp, #32]
 8007018:	2b0e      	cmp	r3, #14
 800701a:	f200 80a8 	bhi.w	800716e <_dtoa_r+0x46e>
 800701e:	2c00      	cmp	r4, #0
 8007020:	f000 80a5 	beq.w	800716e <_dtoa_r+0x46e>
 8007024:	f1bb 0f00 	cmp.w	fp, #0
 8007028:	dd34      	ble.n	8007094 <_dtoa_r+0x394>
 800702a:	4b9a      	ldr	r3, [pc, #616]	; (8007294 <_dtoa_r+0x594>)
 800702c:	f00b 020f 	and.w	r2, fp, #15
 8007030:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007034:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007038:	e9d3 3400 	ldrd	r3, r4, [r3]
 800703c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007040:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007044:	d016      	beq.n	8007074 <_dtoa_r+0x374>
 8007046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800704a:	4b93      	ldr	r3, [pc, #588]	; (8007298 <_dtoa_r+0x598>)
 800704c:	2703      	movs	r7, #3
 800704e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007052:	f7f9 fb6b 	bl	800072c <__aeabi_ddiv>
 8007056:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800705a:	f004 040f 	and.w	r4, r4, #15
 800705e:	4e8e      	ldr	r6, [pc, #568]	; (8007298 <_dtoa_r+0x598>)
 8007060:	b954      	cbnz	r4, 8007078 <_dtoa_r+0x378>
 8007062:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800706a:	f7f9 fb5f 	bl	800072c <__aeabi_ddiv>
 800706e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007072:	e029      	b.n	80070c8 <_dtoa_r+0x3c8>
 8007074:	2702      	movs	r7, #2
 8007076:	e7f2      	b.n	800705e <_dtoa_r+0x35e>
 8007078:	07e1      	lsls	r1, r4, #31
 800707a:	d508      	bpl.n	800708e <_dtoa_r+0x38e>
 800707c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007080:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007084:	f7f9 fa28 	bl	80004d8 <__aeabi_dmul>
 8007088:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800708c:	3701      	adds	r7, #1
 800708e:	1064      	asrs	r4, r4, #1
 8007090:	3608      	adds	r6, #8
 8007092:	e7e5      	b.n	8007060 <_dtoa_r+0x360>
 8007094:	f000 80a5 	beq.w	80071e2 <_dtoa_r+0x4e2>
 8007098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800709c:	f1cb 0400 	rsb	r4, fp, #0
 80070a0:	4b7c      	ldr	r3, [pc, #496]	; (8007294 <_dtoa_r+0x594>)
 80070a2:	f004 020f 	and.w	r2, r4, #15
 80070a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	f7f9 fa13 	bl	80004d8 <__aeabi_dmul>
 80070b2:	2702      	movs	r7, #2
 80070b4:	2300      	movs	r3, #0
 80070b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070ba:	4e77      	ldr	r6, [pc, #476]	; (8007298 <_dtoa_r+0x598>)
 80070bc:	1124      	asrs	r4, r4, #4
 80070be:	2c00      	cmp	r4, #0
 80070c0:	f040 8084 	bne.w	80071cc <_dtoa_r+0x4cc>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1d2      	bne.n	800706e <_dtoa_r+0x36e>
 80070c8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80070cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80070d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 8087 	beq.w	80071e6 <_dtoa_r+0x4e6>
 80070d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070dc:	2200      	movs	r2, #0
 80070de:	4b6f      	ldr	r3, [pc, #444]	; (800729c <_dtoa_r+0x59c>)
 80070e0:	f7f9 fc6c 	bl	80009bc <__aeabi_dcmplt>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d07e      	beq.n	80071e6 <_dtoa_r+0x4e6>
 80070e8:	9b08      	ldr	r3, [sp, #32]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d07b      	beq.n	80071e6 <_dtoa_r+0x4e6>
 80070ee:	9b06      	ldr	r3, [sp, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	dd38      	ble.n	8007166 <_dtoa_r+0x466>
 80070f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070f8:	2200      	movs	r2, #0
 80070fa:	4b69      	ldr	r3, [pc, #420]	; (80072a0 <_dtoa_r+0x5a0>)
 80070fc:	f7f9 f9ec 	bl	80004d8 <__aeabi_dmul>
 8007100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007104:	9c06      	ldr	r4, [sp, #24]
 8007106:	f10b 38ff 	add.w	r8, fp, #4294967295
 800710a:	3701      	adds	r7, #1
 800710c:	4638      	mov	r0, r7
 800710e:	f7f9 f979 	bl	8000404 <__aeabi_i2d>
 8007112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007116:	f7f9 f9df 	bl	80004d8 <__aeabi_dmul>
 800711a:	2200      	movs	r2, #0
 800711c:	4b61      	ldr	r3, [pc, #388]	; (80072a4 <_dtoa_r+0x5a4>)
 800711e:	f7f9 f825 	bl	800016c <__adddf3>
 8007122:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007126:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800712a:	9611      	str	r6, [sp, #68]	; 0x44
 800712c:	2c00      	cmp	r4, #0
 800712e:	d15d      	bne.n	80071ec <_dtoa_r+0x4ec>
 8007130:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007134:	2200      	movs	r2, #0
 8007136:	4b5c      	ldr	r3, [pc, #368]	; (80072a8 <_dtoa_r+0x5a8>)
 8007138:	f7f9 f816 	bl	8000168 <__aeabi_dsub>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007144:	4633      	mov	r3, r6
 8007146:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007148:	f7f9 fc56 	bl	80009f8 <__aeabi_dcmpgt>
 800714c:	2800      	cmp	r0, #0
 800714e:	f040 8295 	bne.w	800767c <_dtoa_r+0x97c>
 8007152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007156:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007158:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800715c:	f7f9 fc2e 	bl	80009bc <__aeabi_dcmplt>
 8007160:	2800      	cmp	r0, #0
 8007162:	f040 8289 	bne.w	8007678 <_dtoa_r+0x978>
 8007166:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800716a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800716e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007170:	2b00      	cmp	r3, #0
 8007172:	f2c0 8151 	blt.w	8007418 <_dtoa_r+0x718>
 8007176:	f1bb 0f0e 	cmp.w	fp, #14
 800717a:	f300 814d 	bgt.w	8007418 <_dtoa_r+0x718>
 800717e:	4b45      	ldr	r3, [pc, #276]	; (8007294 <_dtoa_r+0x594>)
 8007180:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007184:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007188:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800718c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800718e:	2b00      	cmp	r3, #0
 8007190:	f280 80da 	bge.w	8007348 <_dtoa_r+0x648>
 8007194:	9b08      	ldr	r3, [sp, #32]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f300 80d6 	bgt.w	8007348 <_dtoa_r+0x648>
 800719c:	f040 826b 	bne.w	8007676 <_dtoa_r+0x976>
 80071a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071a4:	2200      	movs	r2, #0
 80071a6:	4b40      	ldr	r3, [pc, #256]	; (80072a8 <_dtoa_r+0x5a8>)
 80071a8:	f7f9 f996 	bl	80004d8 <__aeabi_dmul>
 80071ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071b0:	f7f9 fc18 	bl	80009e4 <__aeabi_dcmpge>
 80071b4:	9c08      	ldr	r4, [sp, #32]
 80071b6:	4626      	mov	r6, r4
 80071b8:	2800      	cmp	r0, #0
 80071ba:	f040 8241 	bne.w	8007640 <_dtoa_r+0x940>
 80071be:	2331      	movs	r3, #49	; 0x31
 80071c0:	9f03      	ldr	r7, [sp, #12]
 80071c2:	f10b 0b01 	add.w	fp, fp, #1
 80071c6:	f807 3b01 	strb.w	r3, [r7], #1
 80071ca:	e23d      	b.n	8007648 <_dtoa_r+0x948>
 80071cc:	07e2      	lsls	r2, r4, #31
 80071ce:	d505      	bpl.n	80071dc <_dtoa_r+0x4dc>
 80071d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071d4:	f7f9 f980 	bl	80004d8 <__aeabi_dmul>
 80071d8:	2301      	movs	r3, #1
 80071da:	3701      	adds	r7, #1
 80071dc:	1064      	asrs	r4, r4, #1
 80071de:	3608      	adds	r6, #8
 80071e0:	e76d      	b.n	80070be <_dtoa_r+0x3be>
 80071e2:	2702      	movs	r7, #2
 80071e4:	e770      	b.n	80070c8 <_dtoa_r+0x3c8>
 80071e6:	46d8      	mov	r8, fp
 80071e8:	9c08      	ldr	r4, [sp, #32]
 80071ea:	e78f      	b.n	800710c <_dtoa_r+0x40c>
 80071ec:	9903      	ldr	r1, [sp, #12]
 80071ee:	4b29      	ldr	r3, [pc, #164]	; (8007294 <_dtoa_r+0x594>)
 80071f0:	4421      	add	r1, r4
 80071f2:	9112      	str	r1, [sp, #72]	; 0x48
 80071f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071fa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80071fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007202:	2900      	cmp	r1, #0
 8007204:	d054      	beq.n	80072b0 <_dtoa_r+0x5b0>
 8007206:	2000      	movs	r0, #0
 8007208:	4928      	ldr	r1, [pc, #160]	; (80072ac <_dtoa_r+0x5ac>)
 800720a:	f7f9 fa8f 	bl	800072c <__aeabi_ddiv>
 800720e:	463b      	mov	r3, r7
 8007210:	4632      	mov	r2, r6
 8007212:	f7f8 ffa9 	bl	8000168 <__aeabi_dsub>
 8007216:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800721a:	9f03      	ldr	r7, [sp, #12]
 800721c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007220:	f7f9 fc0a 	bl	8000a38 <__aeabi_d2iz>
 8007224:	4604      	mov	r4, r0
 8007226:	f7f9 f8ed 	bl	8000404 <__aeabi_i2d>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007232:	f7f8 ff99 	bl	8000168 <__aeabi_dsub>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	3430      	adds	r4, #48	; 0x30
 800723c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007240:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007244:	f807 4b01 	strb.w	r4, [r7], #1
 8007248:	f7f9 fbb8 	bl	80009bc <__aeabi_dcmplt>
 800724c:	2800      	cmp	r0, #0
 800724e:	d173      	bne.n	8007338 <_dtoa_r+0x638>
 8007250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007254:	2000      	movs	r0, #0
 8007256:	4911      	ldr	r1, [pc, #68]	; (800729c <_dtoa_r+0x59c>)
 8007258:	f7f8 ff86 	bl	8000168 <__aeabi_dsub>
 800725c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007260:	f7f9 fbac 	bl	80009bc <__aeabi_dcmplt>
 8007264:	2800      	cmp	r0, #0
 8007266:	f040 80b6 	bne.w	80073d6 <_dtoa_r+0x6d6>
 800726a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800726c:	429f      	cmp	r7, r3
 800726e:	f43f af7a 	beq.w	8007166 <_dtoa_r+0x466>
 8007272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007276:	2200      	movs	r2, #0
 8007278:	4b09      	ldr	r3, [pc, #36]	; (80072a0 <_dtoa_r+0x5a0>)
 800727a:	f7f9 f92d 	bl	80004d8 <__aeabi_dmul>
 800727e:	2200      	movs	r2, #0
 8007280:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007288:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <_dtoa_r+0x5a0>)
 800728a:	f7f9 f925 	bl	80004d8 <__aeabi_dmul>
 800728e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007292:	e7c3      	b.n	800721c <_dtoa_r+0x51c>
 8007294:	08008b40 	.word	0x08008b40
 8007298:	08008b18 	.word	0x08008b18
 800729c:	3ff00000 	.word	0x3ff00000
 80072a0:	40240000 	.word	0x40240000
 80072a4:	401c0000 	.word	0x401c0000
 80072a8:	40140000 	.word	0x40140000
 80072ac:	3fe00000 	.word	0x3fe00000
 80072b0:	4630      	mov	r0, r6
 80072b2:	4639      	mov	r1, r7
 80072b4:	f7f9 f910 	bl	80004d8 <__aeabi_dmul>
 80072b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072be:	9c03      	ldr	r4, [sp, #12]
 80072c0:	9314      	str	r3, [sp, #80]	; 0x50
 80072c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072c6:	f7f9 fbb7 	bl	8000a38 <__aeabi_d2iz>
 80072ca:	9015      	str	r0, [sp, #84]	; 0x54
 80072cc:	f7f9 f89a 	bl	8000404 <__aeabi_i2d>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072d8:	f7f8 ff46 	bl	8000168 <__aeabi_dsub>
 80072dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072de:	4606      	mov	r6, r0
 80072e0:	3330      	adds	r3, #48	; 0x30
 80072e2:	f804 3b01 	strb.w	r3, [r4], #1
 80072e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072e8:	460f      	mov	r7, r1
 80072ea:	429c      	cmp	r4, r3
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	d124      	bne.n	800733c <_dtoa_r+0x63c>
 80072f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072f6:	4baf      	ldr	r3, [pc, #700]	; (80075b4 <_dtoa_r+0x8b4>)
 80072f8:	f7f8 ff38 	bl	800016c <__adddf3>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4630      	mov	r0, r6
 8007302:	4639      	mov	r1, r7
 8007304:	f7f9 fb78 	bl	80009f8 <__aeabi_dcmpgt>
 8007308:	2800      	cmp	r0, #0
 800730a:	d163      	bne.n	80073d4 <_dtoa_r+0x6d4>
 800730c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007310:	2000      	movs	r0, #0
 8007312:	49a8      	ldr	r1, [pc, #672]	; (80075b4 <_dtoa_r+0x8b4>)
 8007314:	f7f8 ff28 	bl	8000168 <__aeabi_dsub>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4630      	mov	r0, r6
 800731e:	4639      	mov	r1, r7
 8007320:	f7f9 fb4c 	bl	80009bc <__aeabi_dcmplt>
 8007324:	2800      	cmp	r0, #0
 8007326:	f43f af1e 	beq.w	8007166 <_dtoa_r+0x466>
 800732a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800732c:	1e7b      	subs	r3, r7, #1
 800732e:	9314      	str	r3, [sp, #80]	; 0x50
 8007330:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007334:	2b30      	cmp	r3, #48	; 0x30
 8007336:	d0f8      	beq.n	800732a <_dtoa_r+0x62a>
 8007338:	46c3      	mov	fp, r8
 800733a:	e03b      	b.n	80073b4 <_dtoa_r+0x6b4>
 800733c:	4b9e      	ldr	r3, [pc, #632]	; (80075b8 <_dtoa_r+0x8b8>)
 800733e:	f7f9 f8cb 	bl	80004d8 <__aeabi_dmul>
 8007342:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007346:	e7bc      	b.n	80072c2 <_dtoa_r+0x5c2>
 8007348:	9f03      	ldr	r7, [sp, #12]
 800734a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800734e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007352:	4640      	mov	r0, r8
 8007354:	4649      	mov	r1, r9
 8007356:	f7f9 f9e9 	bl	800072c <__aeabi_ddiv>
 800735a:	f7f9 fb6d 	bl	8000a38 <__aeabi_d2iz>
 800735e:	4604      	mov	r4, r0
 8007360:	f7f9 f850 	bl	8000404 <__aeabi_i2d>
 8007364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007368:	f7f9 f8b6 	bl	80004d8 <__aeabi_dmul>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4640      	mov	r0, r8
 8007372:	4649      	mov	r1, r9
 8007374:	f7f8 fef8 	bl	8000168 <__aeabi_dsub>
 8007378:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800737c:	f807 6b01 	strb.w	r6, [r7], #1
 8007380:	9e03      	ldr	r6, [sp, #12]
 8007382:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007386:	1bbe      	subs	r6, r7, r6
 8007388:	45b4      	cmp	ip, r6
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	d136      	bne.n	80073fe <_dtoa_r+0x6fe>
 8007390:	f7f8 feec 	bl	800016c <__adddf3>
 8007394:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007398:	4680      	mov	r8, r0
 800739a:	4689      	mov	r9, r1
 800739c:	f7f9 fb2c 	bl	80009f8 <__aeabi_dcmpgt>
 80073a0:	bb58      	cbnz	r0, 80073fa <_dtoa_r+0x6fa>
 80073a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073a6:	4640      	mov	r0, r8
 80073a8:	4649      	mov	r1, r9
 80073aa:	f7f9 fafd 	bl	80009a8 <__aeabi_dcmpeq>
 80073ae:	b108      	cbz	r0, 80073b4 <_dtoa_r+0x6b4>
 80073b0:	07e3      	lsls	r3, r4, #31
 80073b2:	d422      	bmi.n	80073fa <_dtoa_r+0x6fa>
 80073b4:	4651      	mov	r1, sl
 80073b6:	4628      	mov	r0, r5
 80073b8:	f000 fbc2 	bl	8007b40 <_Bfree>
 80073bc:	2300      	movs	r3, #0
 80073be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073c0:	703b      	strb	r3, [r7, #0]
 80073c2:	f10b 0301 	add.w	r3, fp, #1
 80073c6:	6013      	str	r3, [r2, #0]
 80073c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f43f ace6 	beq.w	8006d9c <_dtoa_r+0x9c>
 80073d0:	601f      	str	r7, [r3, #0]
 80073d2:	e4e3      	b.n	8006d9c <_dtoa_r+0x9c>
 80073d4:	4627      	mov	r7, r4
 80073d6:	463b      	mov	r3, r7
 80073d8:	461f      	mov	r7, r3
 80073da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073de:	2a39      	cmp	r2, #57	; 0x39
 80073e0:	d107      	bne.n	80073f2 <_dtoa_r+0x6f2>
 80073e2:	9a03      	ldr	r2, [sp, #12]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d1f7      	bne.n	80073d8 <_dtoa_r+0x6d8>
 80073e8:	2230      	movs	r2, #48	; 0x30
 80073ea:	9903      	ldr	r1, [sp, #12]
 80073ec:	f108 0801 	add.w	r8, r8, #1
 80073f0:	700a      	strb	r2, [r1, #0]
 80073f2:	781a      	ldrb	r2, [r3, #0]
 80073f4:	3201      	adds	r2, #1
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	e79e      	b.n	8007338 <_dtoa_r+0x638>
 80073fa:	46d8      	mov	r8, fp
 80073fc:	e7eb      	b.n	80073d6 <_dtoa_r+0x6d6>
 80073fe:	2200      	movs	r2, #0
 8007400:	4b6d      	ldr	r3, [pc, #436]	; (80075b8 <_dtoa_r+0x8b8>)
 8007402:	f7f9 f869 	bl	80004d8 <__aeabi_dmul>
 8007406:	2200      	movs	r2, #0
 8007408:	2300      	movs	r3, #0
 800740a:	4680      	mov	r8, r0
 800740c:	4689      	mov	r9, r1
 800740e:	f7f9 facb 	bl	80009a8 <__aeabi_dcmpeq>
 8007412:	2800      	cmp	r0, #0
 8007414:	d09b      	beq.n	800734e <_dtoa_r+0x64e>
 8007416:	e7cd      	b.n	80073b4 <_dtoa_r+0x6b4>
 8007418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800741a:	2a00      	cmp	r2, #0
 800741c:	f000 80c4 	beq.w	80075a8 <_dtoa_r+0x8a8>
 8007420:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007422:	2a01      	cmp	r2, #1
 8007424:	f300 80a8 	bgt.w	8007578 <_dtoa_r+0x878>
 8007428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800742a:	2a00      	cmp	r2, #0
 800742c:	f000 80a0 	beq.w	8007570 <_dtoa_r+0x870>
 8007430:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007434:	464f      	mov	r7, r9
 8007436:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800743a:	2101      	movs	r1, #1
 800743c:	441a      	add	r2, r3
 800743e:	4628      	mov	r0, r5
 8007440:	4499      	add	r9, r3
 8007442:	9209      	str	r2, [sp, #36]	; 0x24
 8007444:	f000 fc32 	bl	8007cac <__i2b>
 8007448:	4606      	mov	r6, r0
 800744a:	b15f      	cbz	r7, 8007464 <_dtoa_r+0x764>
 800744c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744e:	2b00      	cmp	r3, #0
 8007450:	dd08      	ble.n	8007464 <_dtoa_r+0x764>
 8007452:	42bb      	cmp	r3, r7
 8007454:	bfa8      	it	ge
 8007456:	463b      	movge	r3, r7
 8007458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800745a:	eba9 0903 	sub.w	r9, r9, r3
 800745e:	1aff      	subs	r7, r7, r3
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	9309      	str	r3, [sp, #36]	; 0x24
 8007464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007466:	b1f3      	cbz	r3, 80074a6 <_dtoa_r+0x7a6>
 8007468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 80a0 	beq.w	80075b0 <_dtoa_r+0x8b0>
 8007470:	2c00      	cmp	r4, #0
 8007472:	dd10      	ble.n	8007496 <_dtoa_r+0x796>
 8007474:	4631      	mov	r1, r6
 8007476:	4622      	mov	r2, r4
 8007478:	4628      	mov	r0, r5
 800747a:	f000 fcd5 	bl	8007e28 <__pow5mult>
 800747e:	4652      	mov	r2, sl
 8007480:	4601      	mov	r1, r0
 8007482:	4606      	mov	r6, r0
 8007484:	4628      	mov	r0, r5
 8007486:	f000 fc27 	bl	8007cd8 <__multiply>
 800748a:	4680      	mov	r8, r0
 800748c:	4651      	mov	r1, sl
 800748e:	4628      	mov	r0, r5
 8007490:	f000 fb56 	bl	8007b40 <_Bfree>
 8007494:	46c2      	mov	sl, r8
 8007496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007498:	1b1a      	subs	r2, r3, r4
 800749a:	d004      	beq.n	80074a6 <_dtoa_r+0x7a6>
 800749c:	4651      	mov	r1, sl
 800749e:	4628      	mov	r0, r5
 80074a0:	f000 fcc2 	bl	8007e28 <__pow5mult>
 80074a4:	4682      	mov	sl, r0
 80074a6:	2101      	movs	r1, #1
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 fbff 	bl	8007cac <__i2b>
 80074ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074b0:	4604      	mov	r4, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f340 8082 	ble.w	80075bc <_dtoa_r+0x8bc>
 80074b8:	461a      	mov	r2, r3
 80074ba:	4601      	mov	r1, r0
 80074bc:	4628      	mov	r0, r5
 80074be:	f000 fcb3 	bl	8007e28 <__pow5mult>
 80074c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074c4:	4604      	mov	r4, r0
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	dd7b      	ble.n	80075c2 <_dtoa_r+0x8c2>
 80074ca:	f04f 0800 	mov.w	r8, #0
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074d4:	6918      	ldr	r0, [r3, #16]
 80074d6:	f000 fb9b 	bl	8007c10 <__hi0bits>
 80074da:	f1c0 0020 	rsb	r0, r0, #32
 80074de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e0:	4418      	add	r0, r3
 80074e2:	f010 001f 	ands.w	r0, r0, #31
 80074e6:	f000 8092 	beq.w	800760e <_dtoa_r+0x90e>
 80074ea:	f1c0 0320 	rsb	r3, r0, #32
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	f340 8085 	ble.w	80075fe <_dtoa_r+0x8fe>
 80074f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f6:	f1c0 001c 	rsb	r0, r0, #28
 80074fa:	4403      	add	r3, r0
 80074fc:	4481      	add	r9, r0
 80074fe:	4407      	add	r7, r0
 8007500:	9309      	str	r3, [sp, #36]	; 0x24
 8007502:	f1b9 0f00 	cmp.w	r9, #0
 8007506:	dd05      	ble.n	8007514 <_dtoa_r+0x814>
 8007508:	4651      	mov	r1, sl
 800750a:	464a      	mov	r2, r9
 800750c:	4628      	mov	r0, r5
 800750e:	f000 fce5 	bl	8007edc <__lshift>
 8007512:	4682      	mov	sl, r0
 8007514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007516:	2b00      	cmp	r3, #0
 8007518:	dd05      	ble.n	8007526 <_dtoa_r+0x826>
 800751a:	4621      	mov	r1, r4
 800751c:	461a      	mov	r2, r3
 800751e:	4628      	mov	r0, r5
 8007520:	f000 fcdc 	bl	8007edc <__lshift>
 8007524:	4604      	mov	r4, r0
 8007526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d072      	beq.n	8007612 <_dtoa_r+0x912>
 800752c:	4621      	mov	r1, r4
 800752e:	4650      	mov	r0, sl
 8007530:	f000 fd40 	bl	8007fb4 <__mcmp>
 8007534:	2800      	cmp	r0, #0
 8007536:	da6c      	bge.n	8007612 <_dtoa_r+0x912>
 8007538:	2300      	movs	r3, #0
 800753a:	4651      	mov	r1, sl
 800753c:	220a      	movs	r2, #10
 800753e:	4628      	mov	r0, r5
 8007540:	f000 fb20 	bl	8007b84 <__multadd>
 8007544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007546:	4682      	mov	sl, r0
 8007548:	f10b 3bff 	add.w	fp, fp, #4294967295
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 81ac 	beq.w	80078aa <_dtoa_r+0xbaa>
 8007552:	2300      	movs	r3, #0
 8007554:	4631      	mov	r1, r6
 8007556:	220a      	movs	r2, #10
 8007558:	4628      	mov	r0, r5
 800755a:	f000 fb13 	bl	8007b84 <__multadd>
 800755e:	9b06      	ldr	r3, [sp, #24]
 8007560:	4606      	mov	r6, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	f300 8093 	bgt.w	800768e <_dtoa_r+0x98e>
 8007568:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800756a:	2b02      	cmp	r3, #2
 800756c:	dc59      	bgt.n	8007622 <_dtoa_r+0x922>
 800756e:	e08e      	b.n	800768e <_dtoa_r+0x98e>
 8007570:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007572:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007576:	e75d      	b.n	8007434 <_dtoa_r+0x734>
 8007578:	9b08      	ldr	r3, [sp, #32]
 800757a:	1e5c      	subs	r4, r3, #1
 800757c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800757e:	42a3      	cmp	r3, r4
 8007580:	bfbf      	itttt	lt
 8007582:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007584:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007586:	1ae3      	sublt	r3, r4, r3
 8007588:	18d2      	addlt	r2, r2, r3
 800758a:	bfa8      	it	ge
 800758c:	1b1c      	subge	r4, r3, r4
 800758e:	9b08      	ldr	r3, [sp, #32]
 8007590:	bfbe      	ittt	lt
 8007592:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007594:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007596:	2400      	movlt	r4, #0
 8007598:	2b00      	cmp	r3, #0
 800759a:	bfb5      	itete	lt
 800759c:	eba9 0703 	sublt.w	r7, r9, r3
 80075a0:	464f      	movge	r7, r9
 80075a2:	2300      	movlt	r3, #0
 80075a4:	9b08      	ldrge	r3, [sp, #32]
 80075a6:	e747      	b.n	8007438 <_dtoa_r+0x738>
 80075a8:	464f      	mov	r7, r9
 80075aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80075ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80075ae:	e74c      	b.n	800744a <_dtoa_r+0x74a>
 80075b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075b2:	e773      	b.n	800749c <_dtoa_r+0x79c>
 80075b4:	3fe00000 	.word	0x3fe00000
 80075b8:	40240000 	.word	0x40240000
 80075bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075be:	2b01      	cmp	r3, #1
 80075c0:	dc18      	bgt.n	80075f4 <_dtoa_r+0x8f4>
 80075c2:	9b04      	ldr	r3, [sp, #16]
 80075c4:	b9b3      	cbnz	r3, 80075f4 <_dtoa_r+0x8f4>
 80075c6:	9b05      	ldr	r3, [sp, #20]
 80075c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075cc:	b993      	cbnz	r3, 80075f4 <_dtoa_r+0x8f4>
 80075ce:	9b05      	ldr	r3, [sp, #20]
 80075d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075d4:	0d1b      	lsrs	r3, r3, #20
 80075d6:	051b      	lsls	r3, r3, #20
 80075d8:	b17b      	cbz	r3, 80075fa <_dtoa_r+0x8fa>
 80075da:	f04f 0801 	mov.w	r8, #1
 80075de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e0:	f109 0901 	add.w	r9, r9, #1
 80075e4:	3301      	adds	r3, #1
 80075e6:	9309      	str	r3, [sp, #36]	; 0x24
 80075e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f47f af6f 	bne.w	80074ce <_dtoa_r+0x7ce>
 80075f0:	2001      	movs	r0, #1
 80075f2:	e774      	b.n	80074de <_dtoa_r+0x7de>
 80075f4:	f04f 0800 	mov.w	r8, #0
 80075f8:	e7f6      	b.n	80075e8 <_dtoa_r+0x8e8>
 80075fa:	4698      	mov	r8, r3
 80075fc:	e7f4      	b.n	80075e8 <_dtoa_r+0x8e8>
 80075fe:	d080      	beq.n	8007502 <_dtoa_r+0x802>
 8007600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007602:	331c      	adds	r3, #28
 8007604:	441a      	add	r2, r3
 8007606:	4499      	add	r9, r3
 8007608:	441f      	add	r7, r3
 800760a:	9209      	str	r2, [sp, #36]	; 0x24
 800760c:	e779      	b.n	8007502 <_dtoa_r+0x802>
 800760e:	4603      	mov	r3, r0
 8007610:	e7f6      	b.n	8007600 <_dtoa_r+0x900>
 8007612:	9b08      	ldr	r3, [sp, #32]
 8007614:	2b00      	cmp	r3, #0
 8007616:	dc34      	bgt.n	8007682 <_dtoa_r+0x982>
 8007618:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800761a:	2b02      	cmp	r3, #2
 800761c:	dd31      	ble.n	8007682 <_dtoa_r+0x982>
 800761e:	9b08      	ldr	r3, [sp, #32]
 8007620:	9306      	str	r3, [sp, #24]
 8007622:	9b06      	ldr	r3, [sp, #24]
 8007624:	b963      	cbnz	r3, 8007640 <_dtoa_r+0x940>
 8007626:	4621      	mov	r1, r4
 8007628:	2205      	movs	r2, #5
 800762a:	4628      	mov	r0, r5
 800762c:	f000 faaa 	bl	8007b84 <__multadd>
 8007630:	4601      	mov	r1, r0
 8007632:	4604      	mov	r4, r0
 8007634:	4650      	mov	r0, sl
 8007636:	f000 fcbd 	bl	8007fb4 <__mcmp>
 800763a:	2800      	cmp	r0, #0
 800763c:	f73f adbf 	bgt.w	80071be <_dtoa_r+0x4be>
 8007640:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007642:	9f03      	ldr	r7, [sp, #12]
 8007644:	ea6f 0b03 	mvn.w	fp, r3
 8007648:	f04f 0800 	mov.w	r8, #0
 800764c:	4621      	mov	r1, r4
 800764e:	4628      	mov	r0, r5
 8007650:	f000 fa76 	bl	8007b40 <_Bfree>
 8007654:	2e00      	cmp	r6, #0
 8007656:	f43f aead 	beq.w	80073b4 <_dtoa_r+0x6b4>
 800765a:	f1b8 0f00 	cmp.w	r8, #0
 800765e:	d005      	beq.n	800766c <_dtoa_r+0x96c>
 8007660:	45b0      	cmp	r8, r6
 8007662:	d003      	beq.n	800766c <_dtoa_r+0x96c>
 8007664:	4641      	mov	r1, r8
 8007666:	4628      	mov	r0, r5
 8007668:	f000 fa6a 	bl	8007b40 <_Bfree>
 800766c:	4631      	mov	r1, r6
 800766e:	4628      	mov	r0, r5
 8007670:	f000 fa66 	bl	8007b40 <_Bfree>
 8007674:	e69e      	b.n	80073b4 <_dtoa_r+0x6b4>
 8007676:	2400      	movs	r4, #0
 8007678:	4626      	mov	r6, r4
 800767a:	e7e1      	b.n	8007640 <_dtoa_r+0x940>
 800767c:	46c3      	mov	fp, r8
 800767e:	4626      	mov	r6, r4
 8007680:	e59d      	b.n	80071be <_dtoa_r+0x4be>
 8007682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 80c8 	beq.w	800781a <_dtoa_r+0xb1a>
 800768a:	9b08      	ldr	r3, [sp, #32]
 800768c:	9306      	str	r3, [sp, #24]
 800768e:	2f00      	cmp	r7, #0
 8007690:	dd05      	ble.n	800769e <_dtoa_r+0x99e>
 8007692:	4631      	mov	r1, r6
 8007694:	463a      	mov	r2, r7
 8007696:	4628      	mov	r0, r5
 8007698:	f000 fc20 	bl	8007edc <__lshift>
 800769c:	4606      	mov	r6, r0
 800769e:	f1b8 0f00 	cmp.w	r8, #0
 80076a2:	d05b      	beq.n	800775c <_dtoa_r+0xa5c>
 80076a4:	4628      	mov	r0, r5
 80076a6:	6871      	ldr	r1, [r6, #4]
 80076a8:	f000 fa0a 	bl	8007ac0 <_Balloc>
 80076ac:	4607      	mov	r7, r0
 80076ae:	b928      	cbnz	r0, 80076bc <_dtoa_r+0x9bc>
 80076b0:	4602      	mov	r2, r0
 80076b2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80076b6:	4b81      	ldr	r3, [pc, #516]	; (80078bc <_dtoa_r+0xbbc>)
 80076b8:	f7ff bb36 	b.w	8006d28 <_dtoa_r+0x28>
 80076bc:	6932      	ldr	r2, [r6, #16]
 80076be:	f106 010c 	add.w	r1, r6, #12
 80076c2:	3202      	adds	r2, #2
 80076c4:	0092      	lsls	r2, r2, #2
 80076c6:	300c      	adds	r0, #12
 80076c8:	f7ff fa83 	bl	8006bd2 <memcpy>
 80076cc:	2201      	movs	r2, #1
 80076ce:	4639      	mov	r1, r7
 80076d0:	4628      	mov	r0, r5
 80076d2:	f000 fc03 	bl	8007edc <__lshift>
 80076d6:	46b0      	mov	r8, r6
 80076d8:	4606      	mov	r6, r0
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	9a03      	ldr	r2, [sp, #12]
 80076de:	3301      	adds	r3, #1
 80076e0:	9308      	str	r3, [sp, #32]
 80076e2:	9b06      	ldr	r3, [sp, #24]
 80076e4:	4413      	add	r3, r2
 80076e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80076e8:	9b04      	ldr	r3, [sp, #16]
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	930a      	str	r3, [sp, #40]	; 0x28
 80076f0:	9b08      	ldr	r3, [sp, #32]
 80076f2:	4621      	mov	r1, r4
 80076f4:	3b01      	subs	r3, #1
 80076f6:	4650      	mov	r0, sl
 80076f8:	9304      	str	r3, [sp, #16]
 80076fa:	f7ff fa78 	bl	8006bee <quorem>
 80076fe:	4641      	mov	r1, r8
 8007700:	9006      	str	r0, [sp, #24]
 8007702:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007706:	4650      	mov	r0, sl
 8007708:	f000 fc54 	bl	8007fb4 <__mcmp>
 800770c:	4632      	mov	r2, r6
 800770e:	9009      	str	r0, [sp, #36]	; 0x24
 8007710:	4621      	mov	r1, r4
 8007712:	4628      	mov	r0, r5
 8007714:	f000 fc6a 	bl	8007fec <__mdiff>
 8007718:	68c2      	ldr	r2, [r0, #12]
 800771a:	4607      	mov	r7, r0
 800771c:	bb02      	cbnz	r2, 8007760 <_dtoa_r+0xa60>
 800771e:	4601      	mov	r1, r0
 8007720:	4650      	mov	r0, sl
 8007722:	f000 fc47 	bl	8007fb4 <__mcmp>
 8007726:	4602      	mov	r2, r0
 8007728:	4639      	mov	r1, r7
 800772a:	4628      	mov	r0, r5
 800772c:	920c      	str	r2, [sp, #48]	; 0x30
 800772e:	f000 fa07 	bl	8007b40 <_Bfree>
 8007732:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007734:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007736:	9f08      	ldr	r7, [sp, #32]
 8007738:	ea43 0102 	orr.w	r1, r3, r2
 800773c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773e:	4319      	orrs	r1, r3
 8007740:	d110      	bne.n	8007764 <_dtoa_r+0xa64>
 8007742:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007746:	d029      	beq.n	800779c <_dtoa_r+0xa9c>
 8007748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774a:	2b00      	cmp	r3, #0
 800774c:	dd02      	ble.n	8007754 <_dtoa_r+0xa54>
 800774e:	9b06      	ldr	r3, [sp, #24]
 8007750:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007754:	9b04      	ldr	r3, [sp, #16]
 8007756:	f883 9000 	strb.w	r9, [r3]
 800775a:	e777      	b.n	800764c <_dtoa_r+0x94c>
 800775c:	4630      	mov	r0, r6
 800775e:	e7ba      	b.n	80076d6 <_dtoa_r+0x9d6>
 8007760:	2201      	movs	r2, #1
 8007762:	e7e1      	b.n	8007728 <_dtoa_r+0xa28>
 8007764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007766:	2b00      	cmp	r3, #0
 8007768:	db04      	blt.n	8007774 <_dtoa_r+0xa74>
 800776a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800776c:	430b      	orrs	r3, r1
 800776e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007770:	430b      	orrs	r3, r1
 8007772:	d120      	bne.n	80077b6 <_dtoa_r+0xab6>
 8007774:	2a00      	cmp	r2, #0
 8007776:	dded      	ble.n	8007754 <_dtoa_r+0xa54>
 8007778:	4651      	mov	r1, sl
 800777a:	2201      	movs	r2, #1
 800777c:	4628      	mov	r0, r5
 800777e:	f000 fbad 	bl	8007edc <__lshift>
 8007782:	4621      	mov	r1, r4
 8007784:	4682      	mov	sl, r0
 8007786:	f000 fc15 	bl	8007fb4 <__mcmp>
 800778a:	2800      	cmp	r0, #0
 800778c:	dc03      	bgt.n	8007796 <_dtoa_r+0xa96>
 800778e:	d1e1      	bne.n	8007754 <_dtoa_r+0xa54>
 8007790:	f019 0f01 	tst.w	r9, #1
 8007794:	d0de      	beq.n	8007754 <_dtoa_r+0xa54>
 8007796:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800779a:	d1d8      	bne.n	800774e <_dtoa_r+0xa4e>
 800779c:	2339      	movs	r3, #57	; 0x39
 800779e:	9a04      	ldr	r2, [sp, #16]
 80077a0:	7013      	strb	r3, [r2, #0]
 80077a2:	463b      	mov	r3, r7
 80077a4:	461f      	mov	r7, r3
 80077a6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	2a39      	cmp	r2, #57	; 0x39
 80077ae:	d06b      	beq.n	8007888 <_dtoa_r+0xb88>
 80077b0:	3201      	adds	r2, #1
 80077b2:	701a      	strb	r2, [r3, #0]
 80077b4:	e74a      	b.n	800764c <_dtoa_r+0x94c>
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	dd07      	ble.n	80077ca <_dtoa_r+0xaca>
 80077ba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80077be:	d0ed      	beq.n	800779c <_dtoa_r+0xa9c>
 80077c0:	9a04      	ldr	r2, [sp, #16]
 80077c2:	f109 0301 	add.w	r3, r9, #1
 80077c6:	7013      	strb	r3, [r2, #0]
 80077c8:	e740      	b.n	800764c <_dtoa_r+0x94c>
 80077ca:	9b08      	ldr	r3, [sp, #32]
 80077cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077ce:	f803 9c01 	strb.w	r9, [r3, #-1]
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d042      	beq.n	800785c <_dtoa_r+0xb5c>
 80077d6:	4651      	mov	r1, sl
 80077d8:	2300      	movs	r3, #0
 80077da:	220a      	movs	r2, #10
 80077dc:	4628      	mov	r0, r5
 80077de:	f000 f9d1 	bl	8007b84 <__multadd>
 80077e2:	45b0      	cmp	r8, r6
 80077e4:	4682      	mov	sl, r0
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	f04f 020a 	mov.w	r2, #10
 80077ee:	4641      	mov	r1, r8
 80077f0:	4628      	mov	r0, r5
 80077f2:	d107      	bne.n	8007804 <_dtoa_r+0xb04>
 80077f4:	f000 f9c6 	bl	8007b84 <__multadd>
 80077f8:	4680      	mov	r8, r0
 80077fa:	4606      	mov	r6, r0
 80077fc:	9b08      	ldr	r3, [sp, #32]
 80077fe:	3301      	adds	r3, #1
 8007800:	9308      	str	r3, [sp, #32]
 8007802:	e775      	b.n	80076f0 <_dtoa_r+0x9f0>
 8007804:	f000 f9be 	bl	8007b84 <__multadd>
 8007808:	4631      	mov	r1, r6
 800780a:	4680      	mov	r8, r0
 800780c:	2300      	movs	r3, #0
 800780e:	220a      	movs	r2, #10
 8007810:	4628      	mov	r0, r5
 8007812:	f000 f9b7 	bl	8007b84 <__multadd>
 8007816:	4606      	mov	r6, r0
 8007818:	e7f0      	b.n	80077fc <_dtoa_r+0xafc>
 800781a:	9b08      	ldr	r3, [sp, #32]
 800781c:	9306      	str	r3, [sp, #24]
 800781e:	9f03      	ldr	r7, [sp, #12]
 8007820:	4621      	mov	r1, r4
 8007822:	4650      	mov	r0, sl
 8007824:	f7ff f9e3 	bl	8006bee <quorem>
 8007828:	9b03      	ldr	r3, [sp, #12]
 800782a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800782e:	f807 9b01 	strb.w	r9, [r7], #1
 8007832:	1afa      	subs	r2, r7, r3
 8007834:	9b06      	ldr	r3, [sp, #24]
 8007836:	4293      	cmp	r3, r2
 8007838:	dd07      	ble.n	800784a <_dtoa_r+0xb4a>
 800783a:	4651      	mov	r1, sl
 800783c:	2300      	movs	r3, #0
 800783e:	220a      	movs	r2, #10
 8007840:	4628      	mov	r0, r5
 8007842:	f000 f99f 	bl	8007b84 <__multadd>
 8007846:	4682      	mov	sl, r0
 8007848:	e7ea      	b.n	8007820 <_dtoa_r+0xb20>
 800784a:	9b06      	ldr	r3, [sp, #24]
 800784c:	f04f 0800 	mov.w	r8, #0
 8007850:	2b00      	cmp	r3, #0
 8007852:	bfcc      	ite	gt
 8007854:	461f      	movgt	r7, r3
 8007856:	2701      	movle	r7, #1
 8007858:	9b03      	ldr	r3, [sp, #12]
 800785a:	441f      	add	r7, r3
 800785c:	4651      	mov	r1, sl
 800785e:	2201      	movs	r2, #1
 8007860:	4628      	mov	r0, r5
 8007862:	f000 fb3b 	bl	8007edc <__lshift>
 8007866:	4621      	mov	r1, r4
 8007868:	4682      	mov	sl, r0
 800786a:	f000 fba3 	bl	8007fb4 <__mcmp>
 800786e:	2800      	cmp	r0, #0
 8007870:	dc97      	bgt.n	80077a2 <_dtoa_r+0xaa2>
 8007872:	d102      	bne.n	800787a <_dtoa_r+0xb7a>
 8007874:	f019 0f01 	tst.w	r9, #1
 8007878:	d193      	bne.n	80077a2 <_dtoa_r+0xaa2>
 800787a:	463b      	mov	r3, r7
 800787c:	461f      	mov	r7, r3
 800787e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007882:	2a30      	cmp	r2, #48	; 0x30
 8007884:	d0fa      	beq.n	800787c <_dtoa_r+0xb7c>
 8007886:	e6e1      	b.n	800764c <_dtoa_r+0x94c>
 8007888:	9a03      	ldr	r2, [sp, #12]
 800788a:	429a      	cmp	r2, r3
 800788c:	d18a      	bne.n	80077a4 <_dtoa_r+0xaa4>
 800788e:	2331      	movs	r3, #49	; 0x31
 8007890:	f10b 0b01 	add.w	fp, fp, #1
 8007894:	e797      	b.n	80077c6 <_dtoa_r+0xac6>
 8007896:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <_dtoa_r+0xbc0>)
 8007898:	f7ff ba9f 	b.w	8006dda <_dtoa_r+0xda>
 800789c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f47f aa77 	bne.w	8006d92 <_dtoa_r+0x92>
 80078a4:	4b07      	ldr	r3, [pc, #28]	; (80078c4 <_dtoa_r+0xbc4>)
 80078a6:	f7ff ba98 	b.w	8006dda <_dtoa_r+0xda>
 80078aa:	9b06      	ldr	r3, [sp, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dcb6      	bgt.n	800781e <_dtoa_r+0xb1e>
 80078b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	f73f aeb5 	bgt.w	8007622 <_dtoa_r+0x922>
 80078b8:	e7b1      	b.n	800781e <_dtoa_r+0xb1e>
 80078ba:	bf00      	nop
 80078bc:	08008aaa 	.word	0x08008aaa
 80078c0:	08008a0a 	.word	0x08008a0a
 80078c4:	08008a2e 	.word	0x08008a2e

080078c8 <_free_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4605      	mov	r5, r0
 80078cc:	2900      	cmp	r1, #0
 80078ce:	d040      	beq.n	8007952 <_free_r+0x8a>
 80078d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078d4:	1f0c      	subs	r4, r1, #4
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	bfb8      	it	lt
 80078da:	18e4      	addlt	r4, r4, r3
 80078dc:	f000 f8e4 	bl	8007aa8 <__malloc_lock>
 80078e0:	4a1c      	ldr	r2, [pc, #112]	; (8007954 <_free_r+0x8c>)
 80078e2:	6813      	ldr	r3, [r2, #0]
 80078e4:	b933      	cbnz	r3, 80078f4 <_free_r+0x2c>
 80078e6:	6063      	str	r3, [r4, #4]
 80078e8:	6014      	str	r4, [r2, #0]
 80078ea:	4628      	mov	r0, r5
 80078ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078f0:	f000 b8e0 	b.w	8007ab4 <__malloc_unlock>
 80078f4:	42a3      	cmp	r3, r4
 80078f6:	d908      	bls.n	800790a <_free_r+0x42>
 80078f8:	6820      	ldr	r0, [r4, #0]
 80078fa:	1821      	adds	r1, r4, r0
 80078fc:	428b      	cmp	r3, r1
 80078fe:	bf01      	itttt	eq
 8007900:	6819      	ldreq	r1, [r3, #0]
 8007902:	685b      	ldreq	r3, [r3, #4]
 8007904:	1809      	addeq	r1, r1, r0
 8007906:	6021      	streq	r1, [r4, #0]
 8007908:	e7ed      	b.n	80078e6 <_free_r+0x1e>
 800790a:	461a      	mov	r2, r3
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	b10b      	cbz	r3, 8007914 <_free_r+0x4c>
 8007910:	42a3      	cmp	r3, r4
 8007912:	d9fa      	bls.n	800790a <_free_r+0x42>
 8007914:	6811      	ldr	r1, [r2, #0]
 8007916:	1850      	adds	r0, r2, r1
 8007918:	42a0      	cmp	r0, r4
 800791a:	d10b      	bne.n	8007934 <_free_r+0x6c>
 800791c:	6820      	ldr	r0, [r4, #0]
 800791e:	4401      	add	r1, r0
 8007920:	1850      	adds	r0, r2, r1
 8007922:	4283      	cmp	r3, r0
 8007924:	6011      	str	r1, [r2, #0]
 8007926:	d1e0      	bne.n	80078ea <_free_r+0x22>
 8007928:	6818      	ldr	r0, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	4408      	add	r0, r1
 800792e:	6010      	str	r0, [r2, #0]
 8007930:	6053      	str	r3, [r2, #4]
 8007932:	e7da      	b.n	80078ea <_free_r+0x22>
 8007934:	d902      	bls.n	800793c <_free_r+0x74>
 8007936:	230c      	movs	r3, #12
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	e7d6      	b.n	80078ea <_free_r+0x22>
 800793c:	6820      	ldr	r0, [r4, #0]
 800793e:	1821      	adds	r1, r4, r0
 8007940:	428b      	cmp	r3, r1
 8007942:	bf01      	itttt	eq
 8007944:	6819      	ldreq	r1, [r3, #0]
 8007946:	685b      	ldreq	r3, [r3, #4]
 8007948:	1809      	addeq	r1, r1, r0
 800794a:	6021      	streq	r1, [r4, #0]
 800794c:	6063      	str	r3, [r4, #4]
 800794e:	6054      	str	r4, [r2, #4]
 8007950:	e7cb      	b.n	80078ea <_free_r+0x22>
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	2000148c 	.word	0x2000148c

08007958 <malloc>:
 8007958:	4b02      	ldr	r3, [pc, #8]	; (8007964 <malloc+0xc>)
 800795a:	4601      	mov	r1, r0
 800795c:	6818      	ldr	r0, [r3, #0]
 800795e:	f000 b823 	b.w	80079a8 <_malloc_r>
 8007962:	bf00      	nop
 8007964:	20000068 	.word	0x20000068

08007968 <sbrk_aligned>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	4e0e      	ldr	r6, [pc, #56]	; (80079a4 <sbrk_aligned+0x3c>)
 800796c:	460c      	mov	r4, r1
 800796e:	6831      	ldr	r1, [r6, #0]
 8007970:	4605      	mov	r5, r0
 8007972:	b911      	cbnz	r1, 800797a <sbrk_aligned+0x12>
 8007974:	f000 fcc6 	bl	8008304 <_sbrk_r>
 8007978:	6030      	str	r0, [r6, #0]
 800797a:	4621      	mov	r1, r4
 800797c:	4628      	mov	r0, r5
 800797e:	f000 fcc1 	bl	8008304 <_sbrk_r>
 8007982:	1c43      	adds	r3, r0, #1
 8007984:	d00a      	beq.n	800799c <sbrk_aligned+0x34>
 8007986:	1cc4      	adds	r4, r0, #3
 8007988:	f024 0403 	bic.w	r4, r4, #3
 800798c:	42a0      	cmp	r0, r4
 800798e:	d007      	beq.n	80079a0 <sbrk_aligned+0x38>
 8007990:	1a21      	subs	r1, r4, r0
 8007992:	4628      	mov	r0, r5
 8007994:	f000 fcb6 	bl	8008304 <_sbrk_r>
 8007998:	3001      	adds	r0, #1
 800799a:	d101      	bne.n	80079a0 <sbrk_aligned+0x38>
 800799c:	f04f 34ff 	mov.w	r4, #4294967295
 80079a0:	4620      	mov	r0, r4
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
 80079a4:	20001490 	.word	0x20001490

080079a8 <_malloc_r>:
 80079a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079ac:	1ccd      	adds	r5, r1, #3
 80079ae:	f025 0503 	bic.w	r5, r5, #3
 80079b2:	3508      	adds	r5, #8
 80079b4:	2d0c      	cmp	r5, #12
 80079b6:	bf38      	it	cc
 80079b8:	250c      	movcc	r5, #12
 80079ba:	2d00      	cmp	r5, #0
 80079bc:	4607      	mov	r7, r0
 80079be:	db01      	blt.n	80079c4 <_malloc_r+0x1c>
 80079c0:	42a9      	cmp	r1, r5
 80079c2:	d905      	bls.n	80079d0 <_malloc_r+0x28>
 80079c4:	230c      	movs	r3, #12
 80079c6:	2600      	movs	r6, #0
 80079c8:	603b      	str	r3, [r7, #0]
 80079ca:	4630      	mov	r0, r6
 80079cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007aa4 <_malloc_r+0xfc>
 80079d4:	f000 f868 	bl	8007aa8 <__malloc_lock>
 80079d8:	f8d8 3000 	ldr.w	r3, [r8]
 80079dc:	461c      	mov	r4, r3
 80079de:	bb5c      	cbnz	r4, 8007a38 <_malloc_r+0x90>
 80079e0:	4629      	mov	r1, r5
 80079e2:	4638      	mov	r0, r7
 80079e4:	f7ff ffc0 	bl	8007968 <sbrk_aligned>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	4604      	mov	r4, r0
 80079ec:	d155      	bne.n	8007a9a <_malloc_r+0xf2>
 80079ee:	f8d8 4000 	ldr.w	r4, [r8]
 80079f2:	4626      	mov	r6, r4
 80079f4:	2e00      	cmp	r6, #0
 80079f6:	d145      	bne.n	8007a84 <_malloc_r+0xdc>
 80079f8:	2c00      	cmp	r4, #0
 80079fa:	d048      	beq.n	8007a8e <_malloc_r+0xe6>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	4631      	mov	r1, r6
 8007a00:	4638      	mov	r0, r7
 8007a02:	eb04 0903 	add.w	r9, r4, r3
 8007a06:	f000 fc7d 	bl	8008304 <_sbrk_r>
 8007a0a:	4581      	cmp	r9, r0
 8007a0c:	d13f      	bne.n	8007a8e <_malloc_r+0xe6>
 8007a0e:	6821      	ldr	r1, [r4, #0]
 8007a10:	4638      	mov	r0, r7
 8007a12:	1a6d      	subs	r5, r5, r1
 8007a14:	4629      	mov	r1, r5
 8007a16:	f7ff ffa7 	bl	8007968 <sbrk_aligned>
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	d037      	beq.n	8007a8e <_malloc_r+0xe6>
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	442b      	add	r3, r5
 8007a22:	6023      	str	r3, [r4, #0]
 8007a24:	f8d8 3000 	ldr.w	r3, [r8]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d038      	beq.n	8007a9e <_malloc_r+0xf6>
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	42a2      	cmp	r2, r4
 8007a30:	d12b      	bne.n	8007a8a <_malloc_r+0xe2>
 8007a32:	2200      	movs	r2, #0
 8007a34:	605a      	str	r2, [r3, #4]
 8007a36:	e00f      	b.n	8007a58 <_malloc_r+0xb0>
 8007a38:	6822      	ldr	r2, [r4, #0]
 8007a3a:	1b52      	subs	r2, r2, r5
 8007a3c:	d41f      	bmi.n	8007a7e <_malloc_r+0xd6>
 8007a3e:	2a0b      	cmp	r2, #11
 8007a40:	d917      	bls.n	8007a72 <_malloc_r+0xca>
 8007a42:	1961      	adds	r1, r4, r5
 8007a44:	42a3      	cmp	r3, r4
 8007a46:	6025      	str	r5, [r4, #0]
 8007a48:	bf18      	it	ne
 8007a4a:	6059      	strne	r1, [r3, #4]
 8007a4c:	6863      	ldr	r3, [r4, #4]
 8007a4e:	bf08      	it	eq
 8007a50:	f8c8 1000 	streq.w	r1, [r8]
 8007a54:	5162      	str	r2, [r4, r5]
 8007a56:	604b      	str	r3, [r1, #4]
 8007a58:	4638      	mov	r0, r7
 8007a5a:	f104 060b 	add.w	r6, r4, #11
 8007a5e:	f000 f829 	bl	8007ab4 <__malloc_unlock>
 8007a62:	f026 0607 	bic.w	r6, r6, #7
 8007a66:	1d23      	adds	r3, r4, #4
 8007a68:	1af2      	subs	r2, r6, r3
 8007a6a:	d0ae      	beq.n	80079ca <_malloc_r+0x22>
 8007a6c:	1b9b      	subs	r3, r3, r6
 8007a6e:	50a3      	str	r3, [r4, r2]
 8007a70:	e7ab      	b.n	80079ca <_malloc_r+0x22>
 8007a72:	42a3      	cmp	r3, r4
 8007a74:	6862      	ldr	r2, [r4, #4]
 8007a76:	d1dd      	bne.n	8007a34 <_malloc_r+0x8c>
 8007a78:	f8c8 2000 	str.w	r2, [r8]
 8007a7c:	e7ec      	b.n	8007a58 <_malloc_r+0xb0>
 8007a7e:	4623      	mov	r3, r4
 8007a80:	6864      	ldr	r4, [r4, #4]
 8007a82:	e7ac      	b.n	80079de <_malloc_r+0x36>
 8007a84:	4634      	mov	r4, r6
 8007a86:	6876      	ldr	r6, [r6, #4]
 8007a88:	e7b4      	b.n	80079f4 <_malloc_r+0x4c>
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	e7cc      	b.n	8007a28 <_malloc_r+0x80>
 8007a8e:	230c      	movs	r3, #12
 8007a90:	4638      	mov	r0, r7
 8007a92:	603b      	str	r3, [r7, #0]
 8007a94:	f000 f80e 	bl	8007ab4 <__malloc_unlock>
 8007a98:	e797      	b.n	80079ca <_malloc_r+0x22>
 8007a9a:	6025      	str	r5, [r4, #0]
 8007a9c:	e7dc      	b.n	8007a58 <_malloc_r+0xb0>
 8007a9e:	605b      	str	r3, [r3, #4]
 8007aa0:	deff      	udf	#255	; 0xff
 8007aa2:	bf00      	nop
 8007aa4:	2000148c 	.word	0x2000148c

08007aa8 <__malloc_lock>:
 8007aa8:	4801      	ldr	r0, [pc, #4]	; (8007ab0 <__malloc_lock+0x8>)
 8007aaa:	f7ff b882 	b.w	8006bb2 <__retarget_lock_acquire_recursive>
 8007aae:	bf00      	nop
 8007ab0:	20001488 	.word	0x20001488

08007ab4 <__malloc_unlock>:
 8007ab4:	4801      	ldr	r0, [pc, #4]	; (8007abc <__malloc_unlock+0x8>)
 8007ab6:	f7ff b87d 	b.w	8006bb4 <__retarget_lock_release_recursive>
 8007aba:	bf00      	nop
 8007abc:	20001488 	.word	0x20001488

08007ac0 <_Balloc>:
 8007ac0:	b570      	push	{r4, r5, r6, lr}
 8007ac2:	69c6      	ldr	r6, [r0, #28]
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	460d      	mov	r5, r1
 8007ac8:	b976      	cbnz	r6, 8007ae8 <_Balloc+0x28>
 8007aca:	2010      	movs	r0, #16
 8007acc:	f7ff ff44 	bl	8007958 <malloc>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	61e0      	str	r0, [r4, #28]
 8007ad4:	b920      	cbnz	r0, 8007ae0 <_Balloc+0x20>
 8007ad6:	216b      	movs	r1, #107	; 0x6b
 8007ad8:	4b17      	ldr	r3, [pc, #92]	; (8007b38 <_Balloc+0x78>)
 8007ada:	4818      	ldr	r0, [pc, #96]	; (8007b3c <_Balloc+0x7c>)
 8007adc:	f000 fc22 	bl	8008324 <__assert_func>
 8007ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ae4:	6006      	str	r6, [r0, #0]
 8007ae6:	60c6      	str	r6, [r0, #12]
 8007ae8:	69e6      	ldr	r6, [r4, #28]
 8007aea:	68f3      	ldr	r3, [r6, #12]
 8007aec:	b183      	cbz	r3, 8007b10 <_Balloc+0x50>
 8007aee:	69e3      	ldr	r3, [r4, #28]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007af6:	b9b8      	cbnz	r0, 8007b28 <_Balloc+0x68>
 8007af8:	2101      	movs	r1, #1
 8007afa:	fa01 f605 	lsl.w	r6, r1, r5
 8007afe:	1d72      	adds	r2, r6, #5
 8007b00:	4620      	mov	r0, r4
 8007b02:	0092      	lsls	r2, r2, #2
 8007b04:	f000 fc2c 	bl	8008360 <_calloc_r>
 8007b08:	b160      	cbz	r0, 8007b24 <_Balloc+0x64>
 8007b0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b0e:	e00e      	b.n	8007b2e <_Balloc+0x6e>
 8007b10:	2221      	movs	r2, #33	; 0x21
 8007b12:	2104      	movs	r1, #4
 8007b14:	4620      	mov	r0, r4
 8007b16:	f000 fc23 	bl	8008360 <_calloc_r>
 8007b1a:	69e3      	ldr	r3, [r4, #28]
 8007b1c:	60f0      	str	r0, [r6, #12]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e4      	bne.n	8007aee <_Balloc+0x2e>
 8007b24:	2000      	movs	r0, #0
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
 8007b28:	6802      	ldr	r2, [r0, #0]
 8007b2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b34:	e7f7      	b.n	8007b26 <_Balloc+0x66>
 8007b36:	bf00      	nop
 8007b38:	08008a3b 	.word	0x08008a3b
 8007b3c:	08008abb 	.word	0x08008abb

08007b40 <_Bfree>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	69c6      	ldr	r6, [r0, #28]
 8007b44:	4605      	mov	r5, r0
 8007b46:	460c      	mov	r4, r1
 8007b48:	b976      	cbnz	r6, 8007b68 <_Bfree+0x28>
 8007b4a:	2010      	movs	r0, #16
 8007b4c:	f7ff ff04 	bl	8007958 <malloc>
 8007b50:	4602      	mov	r2, r0
 8007b52:	61e8      	str	r0, [r5, #28]
 8007b54:	b920      	cbnz	r0, 8007b60 <_Bfree+0x20>
 8007b56:	218f      	movs	r1, #143	; 0x8f
 8007b58:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <_Bfree+0x3c>)
 8007b5a:	4809      	ldr	r0, [pc, #36]	; (8007b80 <_Bfree+0x40>)
 8007b5c:	f000 fbe2 	bl	8008324 <__assert_func>
 8007b60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b64:	6006      	str	r6, [r0, #0]
 8007b66:	60c6      	str	r6, [r0, #12]
 8007b68:	b13c      	cbz	r4, 8007b7a <_Bfree+0x3a>
 8007b6a:	69eb      	ldr	r3, [r5, #28]
 8007b6c:	6862      	ldr	r2, [r4, #4]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b74:	6021      	str	r1, [r4, #0]
 8007b76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	08008a3b 	.word	0x08008a3b
 8007b80:	08008abb 	.word	0x08008abb

08007b84 <__multadd>:
 8007b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b88:	4607      	mov	r7, r0
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	461e      	mov	r6, r3
 8007b8e:	2000      	movs	r0, #0
 8007b90:	690d      	ldr	r5, [r1, #16]
 8007b92:	f101 0c14 	add.w	ip, r1, #20
 8007b96:	f8dc 3000 	ldr.w	r3, [ip]
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	b299      	uxth	r1, r3
 8007b9e:	fb02 6101 	mla	r1, r2, r1, r6
 8007ba2:	0c1e      	lsrs	r6, r3, #16
 8007ba4:	0c0b      	lsrs	r3, r1, #16
 8007ba6:	fb02 3306 	mla	r3, r2, r6, r3
 8007baa:	b289      	uxth	r1, r1
 8007bac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007bb0:	4285      	cmp	r5, r0
 8007bb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007bb6:	f84c 1b04 	str.w	r1, [ip], #4
 8007bba:	dcec      	bgt.n	8007b96 <__multadd+0x12>
 8007bbc:	b30e      	cbz	r6, 8007c02 <__multadd+0x7e>
 8007bbe:	68a3      	ldr	r3, [r4, #8]
 8007bc0:	42ab      	cmp	r3, r5
 8007bc2:	dc19      	bgt.n	8007bf8 <__multadd+0x74>
 8007bc4:	6861      	ldr	r1, [r4, #4]
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	3101      	adds	r1, #1
 8007bca:	f7ff ff79 	bl	8007ac0 <_Balloc>
 8007bce:	4680      	mov	r8, r0
 8007bd0:	b928      	cbnz	r0, 8007bde <__multadd+0x5a>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	21ba      	movs	r1, #186	; 0xba
 8007bd6:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <__multadd+0x84>)
 8007bd8:	480c      	ldr	r0, [pc, #48]	; (8007c0c <__multadd+0x88>)
 8007bda:	f000 fba3 	bl	8008324 <__assert_func>
 8007bde:	6922      	ldr	r2, [r4, #16]
 8007be0:	f104 010c 	add.w	r1, r4, #12
 8007be4:	3202      	adds	r2, #2
 8007be6:	0092      	lsls	r2, r2, #2
 8007be8:	300c      	adds	r0, #12
 8007bea:	f7fe fff2 	bl	8006bd2 <memcpy>
 8007bee:	4621      	mov	r1, r4
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7ff ffa5 	bl	8007b40 <_Bfree>
 8007bf6:	4644      	mov	r4, r8
 8007bf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bfc:	3501      	adds	r5, #1
 8007bfe:	615e      	str	r6, [r3, #20]
 8007c00:	6125      	str	r5, [r4, #16]
 8007c02:	4620      	mov	r0, r4
 8007c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c08:	08008aaa 	.word	0x08008aaa
 8007c0c:	08008abb 	.word	0x08008abb

08007c10 <__hi0bits>:
 8007c10:	0c02      	lsrs	r2, r0, #16
 8007c12:	0412      	lsls	r2, r2, #16
 8007c14:	4603      	mov	r3, r0
 8007c16:	b9ca      	cbnz	r2, 8007c4c <__hi0bits+0x3c>
 8007c18:	0403      	lsls	r3, r0, #16
 8007c1a:	2010      	movs	r0, #16
 8007c1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c20:	bf04      	itt	eq
 8007c22:	021b      	lsleq	r3, r3, #8
 8007c24:	3008      	addeq	r0, #8
 8007c26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c2a:	bf04      	itt	eq
 8007c2c:	011b      	lsleq	r3, r3, #4
 8007c2e:	3004      	addeq	r0, #4
 8007c30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c34:	bf04      	itt	eq
 8007c36:	009b      	lsleq	r3, r3, #2
 8007c38:	3002      	addeq	r0, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	db05      	blt.n	8007c4a <__hi0bits+0x3a>
 8007c3e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007c42:	f100 0001 	add.w	r0, r0, #1
 8007c46:	bf08      	it	eq
 8007c48:	2020      	moveq	r0, #32
 8007c4a:	4770      	bx	lr
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	e7e5      	b.n	8007c1c <__hi0bits+0xc>

08007c50 <__lo0bits>:
 8007c50:	6803      	ldr	r3, [r0, #0]
 8007c52:	4602      	mov	r2, r0
 8007c54:	f013 0007 	ands.w	r0, r3, #7
 8007c58:	d00b      	beq.n	8007c72 <__lo0bits+0x22>
 8007c5a:	07d9      	lsls	r1, r3, #31
 8007c5c:	d421      	bmi.n	8007ca2 <__lo0bits+0x52>
 8007c5e:	0798      	lsls	r0, r3, #30
 8007c60:	bf49      	itett	mi
 8007c62:	085b      	lsrmi	r3, r3, #1
 8007c64:	089b      	lsrpl	r3, r3, #2
 8007c66:	2001      	movmi	r0, #1
 8007c68:	6013      	strmi	r3, [r2, #0]
 8007c6a:	bf5c      	itt	pl
 8007c6c:	2002      	movpl	r0, #2
 8007c6e:	6013      	strpl	r3, [r2, #0]
 8007c70:	4770      	bx	lr
 8007c72:	b299      	uxth	r1, r3
 8007c74:	b909      	cbnz	r1, 8007c7a <__lo0bits+0x2a>
 8007c76:	2010      	movs	r0, #16
 8007c78:	0c1b      	lsrs	r3, r3, #16
 8007c7a:	b2d9      	uxtb	r1, r3
 8007c7c:	b909      	cbnz	r1, 8007c82 <__lo0bits+0x32>
 8007c7e:	3008      	adds	r0, #8
 8007c80:	0a1b      	lsrs	r3, r3, #8
 8007c82:	0719      	lsls	r1, r3, #28
 8007c84:	bf04      	itt	eq
 8007c86:	091b      	lsreq	r3, r3, #4
 8007c88:	3004      	addeq	r0, #4
 8007c8a:	0799      	lsls	r1, r3, #30
 8007c8c:	bf04      	itt	eq
 8007c8e:	089b      	lsreq	r3, r3, #2
 8007c90:	3002      	addeq	r0, #2
 8007c92:	07d9      	lsls	r1, r3, #31
 8007c94:	d403      	bmi.n	8007c9e <__lo0bits+0x4e>
 8007c96:	085b      	lsrs	r3, r3, #1
 8007c98:	f100 0001 	add.w	r0, r0, #1
 8007c9c:	d003      	beq.n	8007ca6 <__lo0bits+0x56>
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	4770      	bx	lr
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	4770      	bx	lr
 8007ca6:	2020      	movs	r0, #32
 8007ca8:	4770      	bx	lr
	...

08007cac <__i2b>:
 8007cac:	b510      	push	{r4, lr}
 8007cae:	460c      	mov	r4, r1
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	f7ff ff05 	bl	8007ac0 <_Balloc>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	b928      	cbnz	r0, 8007cc6 <__i2b+0x1a>
 8007cba:	f240 1145 	movw	r1, #325	; 0x145
 8007cbe:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <__i2b+0x24>)
 8007cc0:	4804      	ldr	r0, [pc, #16]	; (8007cd4 <__i2b+0x28>)
 8007cc2:	f000 fb2f 	bl	8008324 <__assert_func>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	6144      	str	r4, [r0, #20]
 8007cca:	6103      	str	r3, [r0, #16]
 8007ccc:	bd10      	pop	{r4, pc}
 8007cce:	bf00      	nop
 8007cd0:	08008aaa 	.word	0x08008aaa
 8007cd4:	08008abb 	.word	0x08008abb

08007cd8 <__multiply>:
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	4691      	mov	r9, r2
 8007cde:	690a      	ldr	r2, [r1, #16]
 8007ce0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	bfbe      	ittt	lt
 8007cea:	460b      	movlt	r3, r1
 8007cec:	464c      	movlt	r4, r9
 8007cee:	4699      	movlt	r9, r3
 8007cf0:	6927      	ldr	r7, [r4, #16]
 8007cf2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007cf6:	68a3      	ldr	r3, [r4, #8]
 8007cf8:	6861      	ldr	r1, [r4, #4]
 8007cfa:	eb07 060a 	add.w	r6, r7, sl
 8007cfe:	42b3      	cmp	r3, r6
 8007d00:	b085      	sub	sp, #20
 8007d02:	bfb8      	it	lt
 8007d04:	3101      	addlt	r1, #1
 8007d06:	f7ff fedb 	bl	8007ac0 <_Balloc>
 8007d0a:	b930      	cbnz	r0, 8007d1a <__multiply+0x42>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007d12:	4b43      	ldr	r3, [pc, #268]	; (8007e20 <__multiply+0x148>)
 8007d14:	4843      	ldr	r0, [pc, #268]	; (8007e24 <__multiply+0x14c>)
 8007d16:	f000 fb05 	bl	8008324 <__assert_func>
 8007d1a:	f100 0514 	add.w	r5, r0, #20
 8007d1e:	462b      	mov	r3, r5
 8007d20:	2200      	movs	r2, #0
 8007d22:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d26:	4543      	cmp	r3, r8
 8007d28:	d321      	bcc.n	8007d6e <__multiply+0x96>
 8007d2a:	f104 0314 	add.w	r3, r4, #20
 8007d2e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d32:	f109 0314 	add.w	r3, r9, #20
 8007d36:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d3a:	9202      	str	r2, [sp, #8]
 8007d3c:	1b3a      	subs	r2, r7, r4
 8007d3e:	3a15      	subs	r2, #21
 8007d40:	f022 0203 	bic.w	r2, r2, #3
 8007d44:	3204      	adds	r2, #4
 8007d46:	f104 0115 	add.w	r1, r4, #21
 8007d4a:	428f      	cmp	r7, r1
 8007d4c:	bf38      	it	cc
 8007d4e:	2204      	movcc	r2, #4
 8007d50:	9201      	str	r2, [sp, #4]
 8007d52:	9a02      	ldr	r2, [sp, #8]
 8007d54:	9303      	str	r3, [sp, #12]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d80c      	bhi.n	8007d74 <__multiply+0x9c>
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	dd03      	ble.n	8007d66 <__multiply+0x8e>
 8007d5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d05a      	beq.n	8007e1c <__multiply+0x144>
 8007d66:	6106      	str	r6, [r0, #16]
 8007d68:	b005      	add	sp, #20
 8007d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6e:	f843 2b04 	str.w	r2, [r3], #4
 8007d72:	e7d8      	b.n	8007d26 <__multiply+0x4e>
 8007d74:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d78:	f1ba 0f00 	cmp.w	sl, #0
 8007d7c:	d023      	beq.n	8007dc6 <__multiply+0xee>
 8007d7e:	46a9      	mov	r9, r5
 8007d80:	f04f 0c00 	mov.w	ip, #0
 8007d84:	f104 0e14 	add.w	lr, r4, #20
 8007d88:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d8c:	f8d9 1000 	ldr.w	r1, [r9]
 8007d90:	fa1f fb82 	uxth.w	fp, r2
 8007d94:	b289      	uxth	r1, r1
 8007d96:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d9a:	4461      	add	r1, ip
 8007d9c:	f8d9 c000 	ldr.w	ip, [r9]
 8007da0:	0c12      	lsrs	r2, r2, #16
 8007da2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007da6:	fb0a c202 	mla	r2, sl, r2, ip
 8007daa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007dae:	b289      	uxth	r1, r1
 8007db0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007db4:	4577      	cmp	r7, lr
 8007db6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007dba:	f849 1b04 	str.w	r1, [r9], #4
 8007dbe:	d8e3      	bhi.n	8007d88 <__multiply+0xb0>
 8007dc0:	9a01      	ldr	r2, [sp, #4]
 8007dc2:	f845 c002 	str.w	ip, [r5, r2]
 8007dc6:	9a03      	ldr	r2, [sp, #12]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007dce:	f1b9 0f00 	cmp.w	r9, #0
 8007dd2:	d021      	beq.n	8007e18 <__multiply+0x140>
 8007dd4:	46ae      	mov	lr, r5
 8007dd6:	f04f 0a00 	mov.w	sl, #0
 8007dda:	6829      	ldr	r1, [r5, #0]
 8007ddc:	f104 0c14 	add.w	ip, r4, #20
 8007de0:	f8bc b000 	ldrh.w	fp, [ip]
 8007de4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007de8:	b289      	uxth	r1, r1
 8007dea:	fb09 220b 	mla	r2, r9, fp, r2
 8007dee:	4452      	add	r2, sl
 8007df0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007df4:	f84e 1b04 	str.w	r1, [lr], #4
 8007df8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007dfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e00:	f8be 1000 	ldrh.w	r1, [lr]
 8007e04:	4567      	cmp	r7, ip
 8007e06:	fb09 110a 	mla	r1, r9, sl, r1
 8007e0a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007e0e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e12:	d8e5      	bhi.n	8007de0 <__multiply+0x108>
 8007e14:	9a01      	ldr	r2, [sp, #4]
 8007e16:	50a9      	str	r1, [r5, r2]
 8007e18:	3504      	adds	r5, #4
 8007e1a:	e79a      	b.n	8007d52 <__multiply+0x7a>
 8007e1c:	3e01      	subs	r6, #1
 8007e1e:	e79c      	b.n	8007d5a <__multiply+0x82>
 8007e20:	08008aaa 	.word	0x08008aaa
 8007e24:	08008abb 	.word	0x08008abb

08007e28 <__pow5mult>:
 8007e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e2c:	4615      	mov	r5, r2
 8007e2e:	f012 0203 	ands.w	r2, r2, #3
 8007e32:	4606      	mov	r6, r0
 8007e34:	460f      	mov	r7, r1
 8007e36:	d007      	beq.n	8007e48 <__pow5mult+0x20>
 8007e38:	4c25      	ldr	r4, [pc, #148]	; (8007ed0 <__pow5mult+0xa8>)
 8007e3a:	3a01      	subs	r2, #1
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e42:	f7ff fe9f 	bl	8007b84 <__multadd>
 8007e46:	4607      	mov	r7, r0
 8007e48:	10ad      	asrs	r5, r5, #2
 8007e4a:	d03d      	beq.n	8007ec8 <__pow5mult+0xa0>
 8007e4c:	69f4      	ldr	r4, [r6, #28]
 8007e4e:	b97c      	cbnz	r4, 8007e70 <__pow5mult+0x48>
 8007e50:	2010      	movs	r0, #16
 8007e52:	f7ff fd81 	bl	8007958 <malloc>
 8007e56:	4602      	mov	r2, r0
 8007e58:	61f0      	str	r0, [r6, #28]
 8007e5a:	b928      	cbnz	r0, 8007e68 <__pow5mult+0x40>
 8007e5c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007e60:	4b1c      	ldr	r3, [pc, #112]	; (8007ed4 <__pow5mult+0xac>)
 8007e62:	481d      	ldr	r0, [pc, #116]	; (8007ed8 <__pow5mult+0xb0>)
 8007e64:	f000 fa5e 	bl	8008324 <__assert_func>
 8007e68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e6c:	6004      	str	r4, [r0, #0]
 8007e6e:	60c4      	str	r4, [r0, #12]
 8007e70:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007e74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e78:	b94c      	cbnz	r4, 8007e8e <__pow5mult+0x66>
 8007e7a:	f240 2171 	movw	r1, #625	; 0x271
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7ff ff14 	bl	8007cac <__i2b>
 8007e84:	2300      	movs	r3, #0
 8007e86:	4604      	mov	r4, r0
 8007e88:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e8c:	6003      	str	r3, [r0, #0]
 8007e8e:	f04f 0900 	mov.w	r9, #0
 8007e92:	07eb      	lsls	r3, r5, #31
 8007e94:	d50a      	bpl.n	8007eac <__pow5mult+0x84>
 8007e96:	4639      	mov	r1, r7
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7ff ff1c 	bl	8007cd8 <__multiply>
 8007ea0:	4680      	mov	r8, r0
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f7ff fe4b 	bl	8007b40 <_Bfree>
 8007eaa:	4647      	mov	r7, r8
 8007eac:	106d      	asrs	r5, r5, #1
 8007eae:	d00b      	beq.n	8007ec8 <__pow5mult+0xa0>
 8007eb0:	6820      	ldr	r0, [r4, #0]
 8007eb2:	b938      	cbnz	r0, 8007ec4 <__pow5mult+0x9c>
 8007eb4:	4622      	mov	r2, r4
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f7ff ff0d 	bl	8007cd8 <__multiply>
 8007ebe:	6020      	str	r0, [r4, #0]
 8007ec0:	f8c0 9000 	str.w	r9, [r0]
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	e7e4      	b.n	8007e92 <__pow5mult+0x6a>
 8007ec8:	4638      	mov	r0, r7
 8007eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ece:	bf00      	nop
 8007ed0:	08008c08 	.word	0x08008c08
 8007ed4:	08008a3b 	.word	0x08008a3b
 8007ed8:	08008abb 	.word	0x08008abb

08007edc <__lshift>:
 8007edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	4607      	mov	r7, r0
 8007ee4:	4691      	mov	r9, r2
 8007ee6:	6923      	ldr	r3, [r4, #16]
 8007ee8:	6849      	ldr	r1, [r1, #4]
 8007eea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007eee:	68a3      	ldr	r3, [r4, #8]
 8007ef0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ef4:	f108 0601 	add.w	r6, r8, #1
 8007ef8:	42b3      	cmp	r3, r6
 8007efa:	db0b      	blt.n	8007f14 <__lshift+0x38>
 8007efc:	4638      	mov	r0, r7
 8007efe:	f7ff fddf 	bl	8007ac0 <_Balloc>
 8007f02:	4605      	mov	r5, r0
 8007f04:	b948      	cbnz	r0, 8007f1a <__lshift+0x3e>
 8007f06:	4602      	mov	r2, r0
 8007f08:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007f0c:	4b27      	ldr	r3, [pc, #156]	; (8007fac <__lshift+0xd0>)
 8007f0e:	4828      	ldr	r0, [pc, #160]	; (8007fb0 <__lshift+0xd4>)
 8007f10:	f000 fa08 	bl	8008324 <__assert_func>
 8007f14:	3101      	adds	r1, #1
 8007f16:	005b      	lsls	r3, r3, #1
 8007f18:	e7ee      	b.n	8007ef8 <__lshift+0x1c>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f100 0114 	add.w	r1, r0, #20
 8007f20:	f100 0210 	add.w	r2, r0, #16
 8007f24:	4618      	mov	r0, r3
 8007f26:	4553      	cmp	r3, sl
 8007f28:	db33      	blt.n	8007f92 <__lshift+0xb6>
 8007f2a:	6920      	ldr	r0, [r4, #16]
 8007f2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f30:	f104 0314 	add.w	r3, r4, #20
 8007f34:	f019 091f 	ands.w	r9, r9, #31
 8007f38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f40:	d02b      	beq.n	8007f9a <__lshift+0xbe>
 8007f42:	468a      	mov	sl, r1
 8007f44:	2200      	movs	r2, #0
 8007f46:	f1c9 0e20 	rsb	lr, r9, #32
 8007f4a:	6818      	ldr	r0, [r3, #0]
 8007f4c:	fa00 f009 	lsl.w	r0, r0, r9
 8007f50:	4310      	orrs	r0, r2
 8007f52:	f84a 0b04 	str.w	r0, [sl], #4
 8007f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f5a:	459c      	cmp	ip, r3
 8007f5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f60:	d8f3      	bhi.n	8007f4a <__lshift+0x6e>
 8007f62:	ebac 0304 	sub.w	r3, ip, r4
 8007f66:	3b15      	subs	r3, #21
 8007f68:	f023 0303 	bic.w	r3, r3, #3
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	f104 0015 	add.w	r0, r4, #21
 8007f72:	4584      	cmp	ip, r0
 8007f74:	bf38      	it	cc
 8007f76:	2304      	movcc	r3, #4
 8007f78:	50ca      	str	r2, [r1, r3]
 8007f7a:	b10a      	cbz	r2, 8007f80 <__lshift+0xa4>
 8007f7c:	f108 0602 	add.w	r6, r8, #2
 8007f80:	3e01      	subs	r6, #1
 8007f82:	4638      	mov	r0, r7
 8007f84:	4621      	mov	r1, r4
 8007f86:	612e      	str	r6, [r5, #16]
 8007f88:	f7ff fdda 	bl	8007b40 <_Bfree>
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f92:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f96:	3301      	adds	r3, #1
 8007f98:	e7c5      	b.n	8007f26 <__lshift+0x4a>
 8007f9a:	3904      	subs	r1, #4
 8007f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fa0:	459c      	cmp	ip, r3
 8007fa2:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fa6:	d8f9      	bhi.n	8007f9c <__lshift+0xc0>
 8007fa8:	e7ea      	b.n	8007f80 <__lshift+0xa4>
 8007faa:	bf00      	nop
 8007fac:	08008aaa 	.word	0x08008aaa
 8007fb0:	08008abb 	.word	0x08008abb

08007fb4 <__mcmp>:
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	690a      	ldr	r2, [r1, #16]
 8007fb8:	6900      	ldr	r0, [r0, #16]
 8007fba:	b530      	push	{r4, r5, lr}
 8007fbc:	1a80      	subs	r0, r0, r2
 8007fbe:	d10d      	bne.n	8007fdc <__mcmp+0x28>
 8007fc0:	3314      	adds	r3, #20
 8007fc2:	3114      	adds	r1, #20
 8007fc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007fc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007fcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fd4:	4295      	cmp	r5, r2
 8007fd6:	d002      	beq.n	8007fde <__mcmp+0x2a>
 8007fd8:	d304      	bcc.n	8007fe4 <__mcmp+0x30>
 8007fda:	2001      	movs	r0, #1
 8007fdc:	bd30      	pop	{r4, r5, pc}
 8007fde:	42a3      	cmp	r3, r4
 8007fe0:	d3f4      	bcc.n	8007fcc <__mcmp+0x18>
 8007fe2:	e7fb      	b.n	8007fdc <__mcmp+0x28>
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe8:	e7f8      	b.n	8007fdc <__mcmp+0x28>
	...

08007fec <__mdiff>:
 8007fec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff0:	460d      	mov	r5, r1
 8007ff2:	4607      	mov	r7, r0
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	f7ff ffdb 	bl	8007fb4 <__mcmp>
 8007ffe:	1e06      	subs	r6, r0, #0
 8008000:	d111      	bne.n	8008026 <__mdiff+0x3a>
 8008002:	4631      	mov	r1, r6
 8008004:	4638      	mov	r0, r7
 8008006:	f7ff fd5b 	bl	8007ac0 <_Balloc>
 800800a:	4602      	mov	r2, r0
 800800c:	b928      	cbnz	r0, 800801a <__mdiff+0x2e>
 800800e:	f240 2137 	movw	r1, #567	; 0x237
 8008012:	4b3a      	ldr	r3, [pc, #232]	; (80080fc <__mdiff+0x110>)
 8008014:	483a      	ldr	r0, [pc, #232]	; (8008100 <__mdiff+0x114>)
 8008016:	f000 f985 	bl	8008324 <__assert_func>
 800801a:	2301      	movs	r3, #1
 800801c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008020:	4610      	mov	r0, r2
 8008022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008026:	bfa4      	itt	ge
 8008028:	4623      	movge	r3, r4
 800802a:	462c      	movge	r4, r5
 800802c:	4638      	mov	r0, r7
 800802e:	6861      	ldr	r1, [r4, #4]
 8008030:	bfa6      	itte	ge
 8008032:	461d      	movge	r5, r3
 8008034:	2600      	movge	r6, #0
 8008036:	2601      	movlt	r6, #1
 8008038:	f7ff fd42 	bl	8007ac0 <_Balloc>
 800803c:	4602      	mov	r2, r0
 800803e:	b918      	cbnz	r0, 8008048 <__mdiff+0x5c>
 8008040:	f240 2145 	movw	r1, #581	; 0x245
 8008044:	4b2d      	ldr	r3, [pc, #180]	; (80080fc <__mdiff+0x110>)
 8008046:	e7e5      	b.n	8008014 <__mdiff+0x28>
 8008048:	f102 0814 	add.w	r8, r2, #20
 800804c:	46c2      	mov	sl, r8
 800804e:	f04f 0c00 	mov.w	ip, #0
 8008052:	6927      	ldr	r7, [r4, #16]
 8008054:	60c6      	str	r6, [r0, #12]
 8008056:	692e      	ldr	r6, [r5, #16]
 8008058:	f104 0014 	add.w	r0, r4, #20
 800805c:	f105 0914 	add.w	r9, r5, #20
 8008060:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008064:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008068:	3410      	adds	r4, #16
 800806a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800806e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008072:	fa1f f18b 	uxth.w	r1, fp
 8008076:	4461      	add	r1, ip
 8008078:	fa1f fc83 	uxth.w	ip, r3
 800807c:	0c1b      	lsrs	r3, r3, #16
 800807e:	eba1 010c 	sub.w	r1, r1, ip
 8008082:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008086:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800808a:	b289      	uxth	r1, r1
 800808c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008090:	454e      	cmp	r6, r9
 8008092:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008096:	f84a 1b04 	str.w	r1, [sl], #4
 800809a:	d8e6      	bhi.n	800806a <__mdiff+0x7e>
 800809c:	1b73      	subs	r3, r6, r5
 800809e:	3b15      	subs	r3, #21
 80080a0:	f023 0303 	bic.w	r3, r3, #3
 80080a4:	3515      	adds	r5, #21
 80080a6:	3304      	adds	r3, #4
 80080a8:	42ae      	cmp	r6, r5
 80080aa:	bf38      	it	cc
 80080ac:	2304      	movcc	r3, #4
 80080ae:	4418      	add	r0, r3
 80080b0:	4443      	add	r3, r8
 80080b2:	461e      	mov	r6, r3
 80080b4:	4605      	mov	r5, r0
 80080b6:	4575      	cmp	r5, lr
 80080b8:	d30e      	bcc.n	80080d8 <__mdiff+0xec>
 80080ba:	f10e 0103 	add.w	r1, lr, #3
 80080be:	1a09      	subs	r1, r1, r0
 80080c0:	f021 0103 	bic.w	r1, r1, #3
 80080c4:	3803      	subs	r0, #3
 80080c6:	4586      	cmp	lr, r0
 80080c8:	bf38      	it	cc
 80080ca:	2100      	movcc	r1, #0
 80080cc:	440b      	add	r3, r1
 80080ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080d2:	b189      	cbz	r1, 80080f8 <__mdiff+0x10c>
 80080d4:	6117      	str	r7, [r2, #16]
 80080d6:	e7a3      	b.n	8008020 <__mdiff+0x34>
 80080d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80080dc:	fa1f f188 	uxth.w	r1, r8
 80080e0:	4461      	add	r1, ip
 80080e2:	140c      	asrs	r4, r1, #16
 80080e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80080e8:	b289      	uxth	r1, r1
 80080ea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80080ee:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80080f2:	f846 1b04 	str.w	r1, [r6], #4
 80080f6:	e7de      	b.n	80080b6 <__mdiff+0xca>
 80080f8:	3f01      	subs	r7, #1
 80080fa:	e7e8      	b.n	80080ce <__mdiff+0xe2>
 80080fc:	08008aaa 	.word	0x08008aaa
 8008100:	08008abb 	.word	0x08008abb

08008104 <__d2b>:
 8008104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008106:	2101      	movs	r1, #1
 8008108:	4617      	mov	r7, r2
 800810a:	461c      	mov	r4, r3
 800810c:	9e08      	ldr	r6, [sp, #32]
 800810e:	f7ff fcd7 	bl	8007ac0 <_Balloc>
 8008112:	4605      	mov	r5, r0
 8008114:	b930      	cbnz	r0, 8008124 <__d2b+0x20>
 8008116:	4602      	mov	r2, r0
 8008118:	f240 310f 	movw	r1, #783	; 0x30f
 800811c:	4b22      	ldr	r3, [pc, #136]	; (80081a8 <__d2b+0xa4>)
 800811e:	4823      	ldr	r0, [pc, #140]	; (80081ac <__d2b+0xa8>)
 8008120:	f000 f900 	bl	8008324 <__assert_func>
 8008124:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008128:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800812c:	bb24      	cbnz	r4, 8008178 <__d2b+0x74>
 800812e:	2f00      	cmp	r7, #0
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	d026      	beq.n	8008182 <__d2b+0x7e>
 8008134:	4668      	mov	r0, sp
 8008136:	9700      	str	r7, [sp, #0]
 8008138:	f7ff fd8a 	bl	8007c50 <__lo0bits>
 800813c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008140:	b1e8      	cbz	r0, 800817e <__d2b+0x7a>
 8008142:	f1c0 0320 	rsb	r3, r0, #32
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	430b      	orrs	r3, r1
 800814c:	40c2      	lsrs	r2, r0
 800814e:	616b      	str	r3, [r5, #20]
 8008150:	9201      	str	r2, [sp, #4]
 8008152:	9b01      	ldr	r3, [sp, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	bf14      	ite	ne
 8008158:	2102      	movne	r1, #2
 800815a:	2101      	moveq	r1, #1
 800815c:	61ab      	str	r3, [r5, #24]
 800815e:	6129      	str	r1, [r5, #16]
 8008160:	b1bc      	cbz	r4, 8008192 <__d2b+0x8e>
 8008162:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008166:	4404      	add	r4, r0
 8008168:	6034      	str	r4, [r6, #0]
 800816a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800816e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008170:	6018      	str	r0, [r3, #0]
 8008172:	4628      	mov	r0, r5
 8008174:	b003      	add	sp, #12
 8008176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800817c:	e7d7      	b.n	800812e <__d2b+0x2a>
 800817e:	6169      	str	r1, [r5, #20]
 8008180:	e7e7      	b.n	8008152 <__d2b+0x4e>
 8008182:	a801      	add	r0, sp, #4
 8008184:	f7ff fd64 	bl	8007c50 <__lo0bits>
 8008188:	9b01      	ldr	r3, [sp, #4]
 800818a:	2101      	movs	r1, #1
 800818c:	616b      	str	r3, [r5, #20]
 800818e:	3020      	adds	r0, #32
 8008190:	e7e5      	b.n	800815e <__d2b+0x5a>
 8008192:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008196:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800819a:	6030      	str	r0, [r6, #0]
 800819c:	6918      	ldr	r0, [r3, #16]
 800819e:	f7ff fd37 	bl	8007c10 <__hi0bits>
 80081a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80081a6:	e7e2      	b.n	800816e <__d2b+0x6a>
 80081a8:	08008aaa 	.word	0x08008aaa
 80081ac:	08008abb 	.word	0x08008abb

080081b0 <__sflush_r>:
 80081b0:	898a      	ldrh	r2, [r1, #12]
 80081b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b4:	4605      	mov	r5, r0
 80081b6:	0710      	lsls	r0, r2, #28
 80081b8:	460c      	mov	r4, r1
 80081ba:	d457      	bmi.n	800826c <__sflush_r+0xbc>
 80081bc:	684b      	ldr	r3, [r1, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	dc04      	bgt.n	80081cc <__sflush_r+0x1c>
 80081c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	dc01      	bgt.n	80081cc <__sflush_r+0x1c>
 80081c8:	2000      	movs	r0, #0
 80081ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081ce:	2e00      	cmp	r6, #0
 80081d0:	d0fa      	beq.n	80081c8 <__sflush_r+0x18>
 80081d2:	2300      	movs	r3, #0
 80081d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081d8:	682f      	ldr	r7, [r5, #0]
 80081da:	6a21      	ldr	r1, [r4, #32]
 80081dc:	602b      	str	r3, [r5, #0]
 80081de:	d032      	beq.n	8008246 <__sflush_r+0x96>
 80081e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	075a      	lsls	r2, r3, #29
 80081e6:	d505      	bpl.n	80081f4 <__sflush_r+0x44>
 80081e8:	6863      	ldr	r3, [r4, #4]
 80081ea:	1ac0      	subs	r0, r0, r3
 80081ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081ee:	b10b      	cbz	r3, 80081f4 <__sflush_r+0x44>
 80081f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081f2:	1ac0      	subs	r0, r0, r3
 80081f4:	2300      	movs	r3, #0
 80081f6:	4602      	mov	r2, r0
 80081f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081fa:	4628      	mov	r0, r5
 80081fc:	6a21      	ldr	r1, [r4, #32]
 80081fe:	47b0      	blx	r6
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	d106      	bne.n	8008214 <__sflush_r+0x64>
 8008206:	6829      	ldr	r1, [r5, #0]
 8008208:	291d      	cmp	r1, #29
 800820a:	d82b      	bhi.n	8008264 <__sflush_r+0xb4>
 800820c:	4a28      	ldr	r2, [pc, #160]	; (80082b0 <__sflush_r+0x100>)
 800820e:	410a      	asrs	r2, r1
 8008210:	07d6      	lsls	r6, r2, #31
 8008212:	d427      	bmi.n	8008264 <__sflush_r+0xb4>
 8008214:	2200      	movs	r2, #0
 8008216:	6062      	str	r2, [r4, #4]
 8008218:	6922      	ldr	r2, [r4, #16]
 800821a:	04d9      	lsls	r1, r3, #19
 800821c:	6022      	str	r2, [r4, #0]
 800821e:	d504      	bpl.n	800822a <__sflush_r+0x7a>
 8008220:	1c42      	adds	r2, r0, #1
 8008222:	d101      	bne.n	8008228 <__sflush_r+0x78>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	b903      	cbnz	r3, 800822a <__sflush_r+0x7a>
 8008228:	6560      	str	r0, [r4, #84]	; 0x54
 800822a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800822c:	602f      	str	r7, [r5, #0]
 800822e:	2900      	cmp	r1, #0
 8008230:	d0ca      	beq.n	80081c8 <__sflush_r+0x18>
 8008232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008236:	4299      	cmp	r1, r3
 8008238:	d002      	beq.n	8008240 <__sflush_r+0x90>
 800823a:	4628      	mov	r0, r5
 800823c:	f7ff fb44 	bl	80078c8 <_free_r>
 8008240:	2000      	movs	r0, #0
 8008242:	6360      	str	r0, [r4, #52]	; 0x34
 8008244:	e7c1      	b.n	80081ca <__sflush_r+0x1a>
 8008246:	2301      	movs	r3, #1
 8008248:	4628      	mov	r0, r5
 800824a:	47b0      	blx	r6
 800824c:	1c41      	adds	r1, r0, #1
 800824e:	d1c8      	bne.n	80081e2 <__sflush_r+0x32>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0c5      	beq.n	80081e2 <__sflush_r+0x32>
 8008256:	2b1d      	cmp	r3, #29
 8008258:	d001      	beq.n	800825e <__sflush_r+0xae>
 800825a:	2b16      	cmp	r3, #22
 800825c:	d101      	bne.n	8008262 <__sflush_r+0xb2>
 800825e:	602f      	str	r7, [r5, #0]
 8008260:	e7b2      	b.n	80081c8 <__sflush_r+0x18>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008268:	81a3      	strh	r3, [r4, #12]
 800826a:	e7ae      	b.n	80081ca <__sflush_r+0x1a>
 800826c:	690f      	ldr	r7, [r1, #16]
 800826e:	2f00      	cmp	r7, #0
 8008270:	d0aa      	beq.n	80081c8 <__sflush_r+0x18>
 8008272:	0793      	lsls	r3, r2, #30
 8008274:	bf18      	it	ne
 8008276:	2300      	movne	r3, #0
 8008278:	680e      	ldr	r6, [r1, #0]
 800827a:	bf08      	it	eq
 800827c:	694b      	ldreq	r3, [r1, #20]
 800827e:	1bf6      	subs	r6, r6, r7
 8008280:	600f      	str	r7, [r1, #0]
 8008282:	608b      	str	r3, [r1, #8]
 8008284:	2e00      	cmp	r6, #0
 8008286:	dd9f      	ble.n	80081c8 <__sflush_r+0x18>
 8008288:	4633      	mov	r3, r6
 800828a:	463a      	mov	r2, r7
 800828c:	4628      	mov	r0, r5
 800828e:	6a21      	ldr	r1, [r4, #32]
 8008290:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008294:	47e0      	blx	ip
 8008296:	2800      	cmp	r0, #0
 8008298:	dc06      	bgt.n	80082a8 <__sflush_r+0xf8>
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082a4:	81a3      	strh	r3, [r4, #12]
 80082a6:	e790      	b.n	80081ca <__sflush_r+0x1a>
 80082a8:	4407      	add	r7, r0
 80082aa:	1a36      	subs	r6, r6, r0
 80082ac:	e7ea      	b.n	8008284 <__sflush_r+0xd4>
 80082ae:	bf00      	nop
 80082b0:	dfbffffe 	.word	0xdfbffffe

080082b4 <_fflush_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	690b      	ldr	r3, [r1, #16]
 80082b8:	4605      	mov	r5, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	b913      	cbnz	r3, 80082c4 <_fflush_r+0x10>
 80082be:	2500      	movs	r5, #0
 80082c0:	4628      	mov	r0, r5
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	b118      	cbz	r0, 80082ce <_fflush_r+0x1a>
 80082c6:	6a03      	ldr	r3, [r0, #32]
 80082c8:	b90b      	cbnz	r3, 80082ce <_fflush_r+0x1a>
 80082ca:	f7fe fb7b 	bl	80069c4 <__sinit>
 80082ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d0f3      	beq.n	80082be <_fflush_r+0xa>
 80082d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082d8:	07d0      	lsls	r0, r2, #31
 80082da:	d404      	bmi.n	80082e6 <_fflush_r+0x32>
 80082dc:	0599      	lsls	r1, r3, #22
 80082de:	d402      	bmi.n	80082e6 <_fflush_r+0x32>
 80082e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082e2:	f7fe fc66 	bl	8006bb2 <__retarget_lock_acquire_recursive>
 80082e6:	4628      	mov	r0, r5
 80082e8:	4621      	mov	r1, r4
 80082ea:	f7ff ff61 	bl	80081b0 <__sflush_r>
 80082ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082f0:	4605      	mov	r5, r0
 80082f2:	07da      	lsls	r2, r3, #31
 80082f4:	d4e4      	bmi.n	80082c0 <_fflush_r+0xc>
 80082f6:	89a3      	ldrh	r3, [r4, #12]
 80082f8:	059b      	lsls	r3, r3, #22
 80082fa:	d4e1      	bmi.n	80082c0 <_fflush_r+0xc>
 80082fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082fe:	f7fe fc59 	bl	8006bb4 <__retarget_lock_release_recursive>
 8008302:	e7dd      	b.n	80082c0 <_fflush_r+0xc>

08008304 <_sbrk_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	2300      	movs	r3, #0
 8008308:	4d05      	ldr	r5, [pc, #20]	; (8008320 <_sbrk_r+0x1c>)
 800830a:	4604      	mov	r4, r0
 800830c:	4608      	mov	r0, r1
 800830e:	602b      	str	r3, [r5, #0]
 8008310:	f7f9 fe3c 	bl	8001f8c <_sbrk>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d102      	bne.n	800831e <_sbrk_r+0x1a>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	b103      	cbz	r3, 800831e <_sbrk_r+0x1a>
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	bd38      	pop	{r3, r4, r5, pc}
 8008320:	20001484 	.word	0x20001484

08008324 <__assert_func>:
 8008324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008326:	4614      	mov	r4, r2
 8008328:	461a      	mov	r2, r3
 800832a:	4b09      	ldr	r3, [pc, #36]	; (8008350 <__assert_func+0x2c>)
 800832c:	4605      	mov	r5, r0
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68d8      	ldr	r0, [r3, #12]
 8008332:	b14c      	cbz	r4, 8008348 <__assert_func+0x24>
 8008334:	4b07      	ldr	r3, [pc, #28]	; (8008354 <__assert_func+0x30>)
 8008336:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800833a:	9100      	str	r1, [sp, #0]
 800833c:	462b      	mov	r3, r5
 800833e:	4906      	ldr	r1, [pc, #24]	; (8008358 <__assert_func+0x34>)
 8008340:	f000 f842 	bl	80083c8 <fiprintf>
 8008344:	f000 f852 	bl	80083ec <abort>
 8008348:	4b04      	ldr	r3, [pc, #16]	; (800835c <__assert_func+0x38>)
 800834a:	461c      	mov	r4, r3
 800834c:	e7f3      	b.n	8008336 <__assert_func+0x12>
 800834e:	bf00      	nop
 8008350:	20000068 	.word	0x20000068
 8008354:	08008c1e 	.word	0x08008c1e
 8008358:	08008c2b 	.word	0x08008c2b
 800835c:	08008c59 	.word	0x08008c59

08008360 <_calloc_r>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	fba1 5402 	umull	r5, r4, r1, r2
 8008366:	b934      	cbnz	r4, 8008376 <_calloc_r+0x16>
 8008368:	4629      	mov	r1, r5
 800836a:	f7ff fb1d 	bl	80079a8 <_malloc_r>
 800836e:	4606      	mov	r6, r0
 8008370:	b928      	cbnz	r0, 800837e <_calloc_r+0x1e>
 8008372:	4630      	mov	r0, r6
 8008374:	bd70      	pop	{r4, r5, r6, pc}
 8008376:	220c      	movs	r2, #12
 8008378:	2600      	movs	r6, #0
 800837a:	6002      	str	r2, [r0, #0]
 800837c:	e7f9      	b.n	8008372 <_calloc_r+0x12>
 800837e:	462a      	mov	r2, r5
 8008380:	4621      	mov	r1, r4
 8008382:	f7fe fb98 	bl	8006ab6 <memset>
 8008386:	e7f4      	b.n	8008372 <_calloc_r+0x12>

08008388 <__ascii_mbtowc>:
 8008388:	b082      	sub	sp, #8
 800838a:	b901      	cbnz	r1, 800838e <__ascii_mbtowc+0x6>
 800838c:	a901      	add	r1, sp, #4
 800838e:	b142      	cbz	r2, 80083a2 <__ascii_mbtowc+0x1a>
 8008390:	b14b      	cbz	r3, 80083a6 <__ascii_mbtowc+0x1e>
 8008392:	7813      	ldrb	r3, [r2, #0]
 8008394:	600b      	str	r3, [r1, #0]
 8008396:	7812      	ldrb	r2, [r2, #0]
 8008398:	1e10      	subs	r0, r2, #0
 800839a:	bf18      	it	ne
 800839c:	2001      	movne	r0, #1
 800839e:	b002      	add	sp, #8
 80083a0:	4770      	bx	lr
 80083a2:	4610      	mov	r0, r2
 80083a4:	e7fb      	b.n	800839e <__ascii_mbtowc+0x16>
 80083a6:	f06f 0001 	mvn.w	r0, #1
 80083aa:	e7f8      	b.n	800839e <__ascii_mbtowc+0x16>

080083ac <__ascii_wctomb>:
 80083ac:	4603      	mov	r3, r0
 80083ae:	4608      	mov	r0, r1
 80083b0:	b141      	cbz	r1, 80083c4 <__ascii_wctomb+0x18>
 80083b2:	2aff      	cmp	r2, #255	; 0xff
 80083b4:	d904      	bls.n	80083c0 <__ascii_wctomb+0x14>
 80083b6:	228a      	movs	r2, #138	; 0x8a
 80083b8:	f04f 30ff 	mov.w	r0, #4294967295
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	4770      	bx	lr
 80083c0:	2001      	movs	r0, #1
 80083c2:	700a      	strb	r2, [r1, #0]
 80083c4:	4770      	bx	lr
	...

080083c8 <fiprintf>:
 80083c8:	b40e      	push	{r1, r2, r3}
 80083ca:	b503      	push	{r0, r1, lr}
 80083cc:	4601      	mov	r1, r0
 80083ce:	ab03      	add	r3, sp, #12
 80083d0:	4805      	ldr	r0, [pc, #20]	; (80083e8 <fiprintf+0x20>)
 80083d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d6:	6800      	ldr	r0, [r0, #0]
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	f000 f835 	bl	8008448 <_vfiprintf_r>
 80083de:	b002      	add	sp, #8
 80083e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e4:	b003      	add	sp, #12
 80083e6:	4770      	bx	lr
 80083e8:	20000068 	.word	0x20000068

080083ec <abort>:
 80083ec:	2006      	movs	r0, #6
 80083ee:	b508      	push	{r3, lr}
 80083f0:	f000 fa02 	bl	80087f8 <raise>
 80083f4:	2001      	movs	r0, #1
 80083f6:	f7f9 fd56 	bl	8001ea6 <_exit>

080083fa <__sfputc_r>:
 80083fa:	6893      	ldr	r3, [r2, #8]
 80083fc:	b410      	push	{r4}
 80083fe:	3b01      	subs	r3, #1
 8008400:	2b00      	cmp	r3, #0
 8008402:	6093      	str	r3, [r2, #8]
 8008404:	da07      	bge.n	8008416 <__sfputc_r+0x1c>
 8008406:	6994      	ldr	r4, [r2, #24]
 8008408:	42a3      	cmp	r3, r4
 800840a:	db01      	blt.n	8008410 <__sfputc_r+0x16>
 800840c:	290a      	cmp	r1, #10
 800840e:	d102      	bne.n	8008416 <__sfputc_r+0x1c>
 8008410:	bc10      	pop	{r4}
 8008412:	f000 b933 	b.w	800867c <__swbuf_r>
 8008416:	6813      	ldr	r3, [r2, #0]
 8008418:	1c58      	adds	r0, r3, #1
 800841a:	6010      	str	r0, [r2, #0]
 800841c:	7019      	strb	r1, [r3, #0]
 800841e:	4608      	mov	r0, r1
 8008420:	bc10      	pop	{r4}
 8008422:	4770      	bx	lr

08008424 <__sfputs_r>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	4606      	mov	r6, r0
 8008428:	460f      	mov	r7, r1
 800842a:	4614      	mov	r4, r2
 800842c:	18d5      	adds	r5, r2, r3
 800842e:	42ac      	cmp	r4, r5
 8008430:	d101      	bne.n	8008436 <__sfputs_r+0x12>
 8008432:	2000      	movs	r0, #0
 8008434:	e007      	b.n	8008446 <__sfputs_r+0x22>
 8008436:	463a      	mov	r2, r7
 8008438:	4630      	mov	r0, r6
 800843a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800843e:	f7ff ffdc 	bl	80083fa <__sfputc_r>
 8008442:	1c43      	adds	r3, r0, #1
 8008444:	d1f3      	bne.n	800842e <__sfputs_r+0xa>
 8008446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008448 <_vfiprintf_r>:
 8008448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844c:	460d      	mov	r5, r1
 800844e:	4614      	mov	r4, r2
 8008450:	4698      	mov	r8, r3
 8008452:	4606      	mov	r6, r0
 8008454:	b09d      	sub	sp, #116	; 0x74
 8008456:	b118      	cbz	r0, 8008460 <_vfiprintf_r+0x18>
 8008458:	6a03      	ldr	r3, [r0, #32]
 800845a:	b90b      	cbnz	r3, 8008460 <_vfiprintf_r+0x18>
 800845c:	f7fe fab2 	bl	80069c4 <__sinit>
 8008460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008462:	07d9      	lsls	r1, r3, #31
 8008464:	d405      	bmi.n	8008472 <_vfiprintf_r+0x2a>
 8008466:	89ab      	ldrh	r3, [r5, #12]
 8008468:	059a      	lsls	r2, r3, #22
 800846a:	d402      	bmi.n	8008472 <_vfiprintf_r+0x2a>
 800846c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800846e:	f7fe fba0 	bl	8006bb2 <__retarget_lock_acquire_recursive>
 8008472:	89ab      	ldrh	r3, [r5, #12]
 8008474:	071b      	lsls	r3, r3, #28
 8008476:	d501      	bpl.n	800847c <_vfiprintf_r+0x34>
 8008478:	692b      	ldr	r3, [r5, #16]
 800847a:	b99b      	cbnz	r3, 80084a4 <_vfiprintf_r+0x5c>
 800847c:	4629      	mov	r1, r5
 800847e:	4630      	mov	r0, r6
 8008480:	f000 f93a 	bl	80086f8 <__swsetup_r>
 8008484:	b170      	cbz	r0, 80084a4 <_vfiprintf_r+0x5c>
 8008486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008488:	07dc      	lsls	r4, r3, #31
 800848a:	d504      	bpl.n	8008496 <_vfiprintf_r+0x4e>
 800848c:	f04f 30ff 	mov.w	r0, #4294967295
 8008490:	b01d      	add	sp, #116	; 0x74
 8008492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008496:	89ab      	ldrh	r3, [r5, #12]
 8008498:	0598      	lsls	r0, r3, #22
 800849a:	d4f7      	bmi.n	800848c <_vfiprintf_r+0x44>
 800849c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800849e:	f7fe fb89 	bl	8006bb4 <__retarget_lock_release_recursive>
 80084a2:	e7f3      	b.n	800848c <_vfiprintf_r+0x44>
 80084a4:	2300      	movs	r3, #0
 80084a6:	9309      	str	r3, [sp, #36]	; 0x24
 80084a8:	2320      	movs	r3, #32
 80084aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ae:	2330      	movs	r3, #48	; 0x30
 80084b0:	f04f 0901 	mov.w	r9, #1
 80084b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80084b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008668 <_vfiprintf_r+0x220>
 80084bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084c0:	4623      	mov	r3, r4
 80084c2:	469a      	mov	sl, r3
 80084c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084c8:	b10a      	cbz	r2, 80084ce <_vfiprintf_r+0x86>
 80084ca:	2a25      	cmp	r2, #37	; 0x25
 80084cc:	d1f9      	bne.n	80084c2 <_vfiprintf_r+0x7a>
 80084ce:	ebba 0b04 	subs.w	fp, sl, r4
 80084d2:	d00b      	beq.n	80084ec <_vfiprintf_r+0xa4>
 80084d4:	465b      	mov	r3, fp
 80084d6:	4622      	mov	r2, r4
 80084d8:	4629      	mov	r1, r5
 80084da:	4630      	mov	r0, r6
 80084dc:	f7ff ffa2 	bl	8008424 <__sfputs_r>
 80084e0:	3001      	adds	r0, #1
 80084e2:	f000 80a9 	beq.w	8008638 <_vfiprintf_r+0x1f0>
 80084e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084e8:	445a      	add	r2, fp
 80084ea:	9209      	str	r2, [sp, #36]	; 0x24
 80084ec:	f89a 3000 	ldrb.w	r3, [sl]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 80a1 	beq.w	8008638 <_vfiprintf_r+0x1f0>
 80084f6:	2300      	movs	r3, #0
 80084f8:	f04f 32ff 	mov.w	r2, #4294967295
 80084fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008500:	f10a 0a01 	add.w	sl, sl, #1
 8008504:	9304      	str	r3, [sp, #16]
 8008506:	9307      	str	r3, [sp, #28]
 8008508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800850c:	931a      	str	r3, [sp, #104]	; 0x68
 800850e:	4654      	mov	r4, sl
 8008510:	2205      	movs	r2, #5
 8008512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008516:	4854      	ldr	r0, [pc, #336]	; (8008668 <_vfiprintf_r+0x220>)
 8008518:	f7fe fb4d 	bl	8006bb6 <memchr>
 800851c:	9a04      	ldr	r2, [sp, #16]
 800851e:	b9d8      	cbnz	r0, 8008558 <_vfiprintf_r+0x110>
 8008520:	06d1      	lsls	r1, r2, #27
 8008522:	bf44      	itt	mi
 8008524:	2320      	movmi	r3, #32
 8008526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800852a:	0713      	lsls	r3, r2, #28
 800852c:	bf44      	itt	mi
 800852e:	232b      	movmi	r3, #43	; 0x2b
 8008530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008534:	f89a 3000 	ldrb.w	r3, [sl]
 8008538:	2b2a      	cmp	r3, #42	; 0x2a
 800853a:	d015      	beq.n	8008568 <_vfiprintf_r+0x120>
 800853c:	4654      	mov	r4, sl
 800853e:	2000      	movs	r0, #0
 8008540:	f04f 0c0a 	mov.w	ip, #10
 8008544:	9a07      	ldr	r2, [sp, #28]
 8008546:	4621      	mov	r1, r4
 8008548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800854c:	3b30      	subs	r3, #48	; 0x30
 800854e:	2b09      	cmp	r3, #9
 8008550:	d94d      	bls.n	80085ee <_vfiprintf_r+0x1a6>
 8008552:	b1b0      	cbz	r0, 8008582 <_vfiprintf_r+0x13a>
 8008554:	9207      	str	r2, [sp, #28]
 8008556:	e014      	b.n	8008582 <_vfiprintf_r+0x13a>
 8008558:	eba0 0308 	sub.w	r3, r0, r8
 800855c:	fa09 f303 	lsl.w	r3, r9, r3
 8008560:	4313      	orrs	r3, r2
 8008562:	46a2      	mov	sl, r4
 8008564:	9304      	str	r3, [sp, #16]
 8008566:	e7d2      	b.n	800850e <_vfiprintf_r+0xc6>
 8008568:	9b03      	ldr	r3, [sp, #12]
 800856a:	1d19      	adds	r1, r3, #4
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	9103      	str	r1, [sp, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	bfbb      	ittet	lt
 8008574:	425b      	neglt	r3, r3
 8008576:	f042 0202 	orrlt.w	r2, r2, #2
 800857a:	9307      	strge	r3, [sp, #28]
 800857c:	9307      	strlt	r3, [sp, #28]
 800857e:	bfb8      	it	lt
 8008580:	9204      	strlt	r2, [sp, #16]
 8008582:	7823      	ldrb	r3, [r4, #0]
 8008584:	2b2e      	cmp	r3, #46	; 0x2e
 8008586:	d10c      	bne.n	80085a2 <_vfiprintf_r+0x15a>
 8008588:	7863      	ldrb	r3, [r4, #1]
 800858a:	2b2a      	cmp	r3, #42	; 0x2a
 800858c:	d134      	bne.n	80085f8 <_vfiprintf_r+0x1b0>
 800858e:	9b03      	ldr	r3, [sp, #12]
 8008590:	3402      	adds	r4, #2
 8008592:	1d1a      	adds	r2, r3, #4
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	9203      	str	r2, [sp, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	bfb8      	it	lt
 800859c:	f04f 33ff 	movlt.w	r3, #4294967295
 80085a0:	9305      	str	r3, [sp, #20]
 80085a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800866c <_vfiprintf_r+0x224>
 80085a6:	2203      	movs	r2, #3
 80085a8:	4650      	mov	r0, sl
 80085aa:	7821      	ldrb	r1, [r4, #0]
 80085ac:	f7fe fb03 	bl	8006bb6 <memchr>
 80085b0:	b138      	cbz	r0, 80085c2 <_vfiprintf_r+0x17a>
 80085b2:	2240      	movs	r2, #64	; 0x40
 80085b4:	9b04      	ldr	r3, [sp, #16]
 80085b6:	eba0 000a 	sub.w	r0, r0, sl
 80085ba:	4082      	lsls	r2, r0
 80085bc:	4313      	orrs	r3, r2
 80085be:	3401      	adds	r4, #1
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c6:	2206      	movs	r2, #6
 80085c8:	4829      	ldr	r0, [pc, #164]	; (8008670 <_vfiprintf_r+0x228>)
 80085ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085ce:	f7fe faf2 	bl	8006bb6 <memchr>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	d03f      	beq.n	8008656 <_vfiprintf_r+0x20e>
 80085d6:	4b27      	ldr	r3, [pc, #156]	; (8008674 <_vfiprintf_r+0x22c>)
 80085d8:	bb1b      	cbnz	r3, 8008622 <_vfiprintf_r+0x1da>
 80085da:	9b03      	ldr	r3, [sp, #12]
 80085dc:	3307      	adds	r3, #7
 80085de:	f023 0307 	bic.w	r3, r3, #7
 80085e2:	3308      	adds	r3, #8
 80085e4:	9303      	str	r3, [sp, #12]
 80085e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e8:	443b      	add	r3, r7
 80085ea:	9309      	str	r3, [sp, #36]	; 0x24
 80085ec:	e768      	b.n	80084c0 <_vfiprintf_r+0x78>
 80085ee:	460c      	mov	r4, r1
 80085f0:	2001      	movs	r0, #1
 80085f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80085f6:	e7a6      	b.n	8008546 <_vfiprintf_r+0xfe>
 80085f8:	2300      	movs	r3, #0
 80085fa:	f04f 0c0a 	mov.w	ip, #10
 80085fe:	4619      	mov	r1, r3
 8008600:	3401      	adds	r4, #1
 8008602:	9305      	str	r3, [sp, #20]
 8008604:	4620      	mov	r0, r4
 8008606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800860a:	3a30      	subs	r2, #48	; 0x30
 800860c:	2a09      	cmp	r2, #9
 800860e:	d903      	bls.n	8008618 <_vfiprintf_r+0x1d0>
 8008610:	2b00      	cmp	r3, #0
 8008612:	d0c6      	beq.n	80085a2 <_vfiprintf_r+0x15a>
 8008614:	9105      	str	r1, [sp, #20]
 8008616:	e7c4      	b.n	80085a2 <_vfiprintf_r+0x15a>
 8008618:	4604      	mov	r4, r0
 800861a:	2301      	movs	r3, #1
 800861c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008620:	e7f0      	b.n	8008604 <_vfiprintf_r+0x1bc>
 8008622:	ab03      	add	r3, sp, #12
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	462a      	mov	r2, r5
 8008628:	4630      	mov	r0, r6
 800862a:	4b13      	ldr	r3, [pc, #76]	; (8008678 <_vfiprintf_r+0x230>)
 800862c:	a904      	add	r1, sp, #16
 800862e:	f7fd fd7b 	bl	8006128 <_printf_float>
 8008632:	4607      	mov	r7, r0
 8008634:	1c78      	adds	r0, r7, #1
 8008636:	d1d6      	bne.n	80085e6 <_vfiprintf_r+0x19e>
 8008638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800863a:	07d9      	lsls	r1, r3, #31
 800863c:	d405      	bmi.n	800864a <_vfiprintf_r+0x202>
 800863e:	89ab      	ldrh	r3, [r5, #12]
 8008640:	059a      	lsls	r2, r3, #22
 8008642:	d402      	bmi.n	800864a <_vfiprintf_r+0x202>
 8008644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008646:	f7fe fab5 	bl	8006bb4 <__retarget_lock_release_recursive>
 800864a:	89ab      	ldrh	r3, [r5, #12]
 800864c:	065b      	lsls	r3, r3, #25
 800864e:	f53f af1d 	bmi.w	800848c <_vfiprintf_r+0x44>
 8008652:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008654:	e71c      	b.n	8008490 <_vfiprintf_r+0x48>
 8008656:	ab03      	add	r3, sp, #12
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	462a      	mov	r2, r5
 800865c:	4630      	mov	r0, r6
 800865e:	4b06      	ldr	r3, [pc, #24]	; (8008678 <_vfiprintf_r+0x230>)
 8008660:	a904      	add	r1, sp, #16
 8008662:	f7fe f801 	bl	8006668 <_printf_i>
 8008666:	e7e4      	b.n	8008632 <_vfiprintf_r+0x1ea>
 8008668:	08008d5b 	.word	0x08008d5b
 800866c:	08008d61 	.word	0x08008d61
 8008670:	08008d65 	.word	0x08008d65
 8008674:	08006129 	.word	0x08006129
 8008678:	08008425 	.word	0x08008425

0800867c <__swbuf_r>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	460e      	mov	r6, r1
 8008680:	4614      	mov	r4, r2
 8008682:	4605      	mov	r5, r0
 8008684:	b118      	cbz	r0, 800868e <__swbuf_r+0x12>
 8008686:	6a03      	ldr	r3, [r0, #32]
 8008688:	b90b      	cbnz	r3, 800868e <__swbuf_r+0x12>
 800868a:	f7fe f99b 	bl	80069c4 <__sinit>
 800868e:	69a3      	ldr	r3, [r4, #24]
 8008690:	60a3      	str	r3, [r4, #8]
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	071a      	lsls	r2, r3, #28
 8008696:	d525      	bpl.n	80086e4 <__swbuf_r+0x68>
 8008698:	6923      	ldr	r3, [r4, #16]
 800869a:	b31b      	cbz	r3, 80086e4 <__swbuf_r+0x68>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	6922      	ldr	r2, [r4, #16]
 80086a0:	b2f6      	uxtb	r6, r6
 80086a2:	1a98      	subs	r0, r3, r2
 80086a4:	6963      	ldr	r3, [r4, #20]
 80086a6:	4637      	mov	r7, r6
 80086a8:	4283      	cmp	r3, r0
 80086aa:	dc04      	bgt.n	80086b6 <__swbuf_r+0x3a>
 80086ac:	4621      	mov	r1, r4
 80086ae:	4628      	mov	r0, r5
 80086b0:	f7ff fe00 	bl	80082b4 <_fflush_r>
 80086b4:	b9e0      	cbnz	r0, 80086f0 <__swbuf_r+0x74>
 80086b6:	68a3      	ldr	r3, [r4, #8]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	60a3      	str	r3, [r4, #8]
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	1c5a      	adds	r2, r3, #1
 80086c0:	6022      	str	r2, [r4, #0]
 80086c2:	701e      	strb	r6, [r3, #0]
 80086c4:	6962      	ldr	r2, [r4, #20]
 80086c6:	1c43      	adds	r3, r0, #1
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d004      	beq.n	80086d6 <__swbuf_r+0x5a>
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	07db      	lsls	r3, r3, #31
 80086d0:	d506      	bpl.n	80086e0 <__swbuf_r+0x64>
 80086d2:	2e0a      	cmp	r6, #10
 80086d4:	d104      	bne.n	80086e0 <__swbuf_r+0x64>
 80086d6:	4621      	mov	r1, r4
 80086d8:	4628      	mov	r0, r5
 80086da:	f7ff fdeb 	bl	80082b4 <_fflush_r>
 80086de:	b938      	cbnz	r0, 80086f0 <__swbuf_r+0x74>
 80086e0:	4638      	mov	r0, r7
 80086e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e4:	4621      	mov	r1, r4
 80086e6:	4628      	mov	r0, r5
 80086e8:	f000 f806 	bl	80086f8 <__swsetup_r>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d0d5      	beq.n	800869c <__swbuf_r+0x20>
 80086f0:	f04f 37ff 	mov.w	r7, #4294967295
 80086f4:	e7f4      	b.n	80086e0 <__swbuf_r+0x64>
	...

080086f8 <__swsetup_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4b2a      	ldr	r3, [pc, #168]	; (80087a4 <__swsetup_r+0xac>)
 80086fc:	4605      	mov	r5, r0
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	460c      	mov	r4, r1
 8008702:	b118      	cbz	r0, 800870c <__swsetup_r+0x14>
 8008704:	6a03      	ldr	r3, [r0, #32]
 8008706:	b90b      	cbnz	r3, 800870c <__swsetup_r+0x14>
 8008708:	f7fe f95c 	bl	80069c4 <__sinit>
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008712:	0718      	lsls	r0, r3, #28
 8008714:	d422      	bmi.n	800875c <__swsetup_r+0x64>
 8008716:	06d9      	lsls	r1, r3, #27
 8008718:	d407      	bmi.n	800872a <__swsetup_r+0x32>
 800871a:	2309      	movs	r3, #9
 800871c:	602b      	str	r3, [r5, #0]
 800871e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008722:	f04f 30ff 	mov.w	r0, #4294967295
 8008726:	81a3      	strh	r3, [r4, #12]
 8008728:	e034      	b.n	8008794 <__swsetup_r+0x9c>
 800872a:	0758      	lsls	r0, r3, #29
 800872c:	d512      	bpl.n	8008754 <__swsetup_r+0x5c>
 800872e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008730:	b141      	cbz	r1, 8008744 <__swsetup_r+0x4c>
 8008732:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008736:	4299      	cmp	r1, r3
 8008738:	d002      	beq.n	8008740 <__swsetup_r+0x48>
 800873a:	4628      	mov	r0, r5
 800873c:	f7ff f8c4 	bl	80078c8 <_free_r>
 8008740:	2300      	movs	r3, #0
 8008742:	6363      	str	r3, [r4, #52]	; 0x34
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800874a:	81a3      	strh	r3, [r4, #12]
 800874c:	2300      	movs	r3, #0
 800874e:	6063      	str	r3, [r4, #4]
 8008750:	6923      	ldr	r3, [r4, #16]
 8008752:	6023      	str	r3, [r4, #0]
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	f043 0308 	orr.w	r3, r3, #8
 800875a:	81a3      	strh	r3, [r4, #12]
 800875c:	6923      	ldr	r3, [r4, #16]
 800875e:	b94b      	cbnz	r3, 8008774 <__swsetup_r+0x7c>
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800876a:	d003      	beq.n	8008774 <__swsetup_r+0x7c>
 800876c:	4621      	mov	r1, r4
 800876e:	4628      	mov	r0, r5
 8008770:	f000 f883 	bl	800887a <__smakebuf_r>
 8008774:	89a0      	ldrh	r0, [r4, #12]
 8008776:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800877a:	f010 0301 	ands.w	r3, r0, #1
 800877e:	d00a      	beq.n	8008796 <__swsetup_r+0x9e>
 8008780:	2300      	movs	r3, #0
 8008782:	60a3      	str	r3, [r4, #8]
 8008784:	6963      	ldr	r3, [r4, #20]
 8008786:	425b      	negs	r3, r3
 8008788:	61a3      	str	r3, [r4, #24]
 800878a:	6923      	ldr	r3, [r4, #16]
 800878c:	b943      	cbnz	r3, 80087a0 <__swsetup_r+0xa8>
 800878e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008792:	d1c4      	bne.n	800871e <__swsetup_r+0x26>
 8008794:	bd38      	pop	{r3, r4, r5, pc}
 8008796:	0781      	lsls	r1, r0, #30
 8008798:	bf58      	it	pl
 800879a:	6963      	ldrpl	r3, [r4, #20]
 800879c:	60a3      	str	r3, [r4, #8]
 800879e:	e7f4      	b.n	800878a <__swsetup_r+0x92>
 80087a0:	2000      	movs	r0, #0
 80087a2:	e7f7      	b.n	8008794 <__swsetup_r+0x9c>
 80087a4:	20000068 	.word	0x20000068

080087a8 <_raise_r>:
 80087a8:	291f      	cmp	r1, #31
 80087aa:	b538      	push	{r3, r4, r5, lr}
 80087ac:	4604      	mov	r4, r0
 80087ae:	460d      	mov	r5, r1
 80087b0:	d904      	bls.n	80087bc <_raise_r+0x14>
 80087b2:	2316      	movs	r3, #22
 80087b4:	6003      	str	r3, [r0, #0]
 80087b6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80087be:	b112      	cbz	r2, 80087c6 <_raise_r+0x1e>
 80087c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087c4:	b94b      	cbnz	r3, 80087da <_raise_r+0x32>
 80087c6:	4620      	mov	r0, r4
 80087c8:	f000 f830 	bl	800882c <_getpid_r>
 80087cc:	462a      	mov	r2, r5
 80087ce:	4601      	mov	r1, r0
 80087d0:	4620      	mov	r0, r4
 80087d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087d6:	f000 b817 	b.w	8008808 <_kill_r>
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d00a      	beq.n	80087f4 <_raise_r+0x4c>
 80087de:	1c59      	adds	r1, r3, #1
 80087e0:	d103      	bne.n	80087ea <_raise_r+0x42>
 80087e2:	2316      	movs	r3, #22
 80087e4:	6003      	str	r3, [r0, #0]
 80087e6:	2001      	movs	r0, #1
 80087e8:	e7e7      	b.n	80087ba <_raise_r+0x12>
 80087ea:	2400      	movs	r4, #0
 80087ec:	4628      	mov	r0, r5
 80087ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087f2:	4798      	blx	r3
 80087f4:	2000      	movs	r0, #0
 80087f6:	e7e0      	b.n	80087ba <_raise_r+0x12>

080087f8 <raise>:
 80087f8:	4b02      	ldr	r3, [pc, #8]	; (8008804 <raise+0xc>)
 80087fa:	4601      	mov	r1, r0
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	f7ff bfd3 	b.w	80087a8 <_raise_r>
 8008802:	bf00      	nop
 8008804:	20000068 	.word	0x20000068

08008808 <_kill_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	2300      	movs	r3, #0
 800880c:	4d06      	ldr	r5, [pc, #24]	; (8008828 <_kill_r+0x20>)
 800880e:	4604      	mov	r4, r0
 8008810:	4608      	mov	r0, r1
 8008812:	4611      	mov	r1, r2
 8008814:	602b      	str	r3, [r5, #0]
 8008816:	f7f9 fb36 	bl	8001e86 <_kill>
 800881a:	1c43      	adds	r3, r0, #1
 800881c:	d102      	bne.n	8008824 <_kill_r+0x1c>
 800881e:	682b      	ldr	r3, [r5, #0]
 8008820:	b103      	cbz	r3, 8008824 <_kill_r+0x1c>
 8008822:	6023      	str	r3, [r4, #0]
 8008824:	bd38      	pop	{r3, r4, r5, pc}
 8008826:	bf00      	nop
 8008828:	20001484 	.word	0x20001484

0800882c <_getpid_r>:
 800882c:	f7f9 bb24 	b.w	8001e78 <_getpid>

08008830 <__swhatbuf_r>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	460c      	mov	r4, r1
 8008834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008838:	4615      	mov	r5, r2
 800883a:	2900      	cmp	r1, #0
 800883c:	461e      	mov	r6, r3
 800883e:	b096      	sub	sp, #88	; 0x58
 8008840:	da0c      	bge.n	800885c <__swhatbuf_r+0x2c>
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	2100      	movs	r1, #0
 8008846:	f013 0f80 	tst.w	r3, #128	; 0x80
 800884a:	bf0c      	ite	eq
 800884c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008850:	2340      	movne	r3, #64	; 0x40
 8008852:	2000      	movs	r0, #0
 8008854:	6031      	str	r1, [r6, #0]
 8008856:	602b      	str	r3, [r5, #0]
 8008858:	b016      	add	sp, #88	; 0x58
 800885a:	bd70      	pop	{r4, r5, r6, pc}
 800885c:	466a      	mov	r2, sp
 800885e:	f000 f849 	bl	80088f4 <_fstat_r>
 8008862:	2800      	cmp	r0, #0
 8008864:	dbed      	blt.n	8008842 <__swhatbuf_r+0x12>
 8008866:	9901      	ldr	r1, [sp, #4]
 8008868:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800886c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008870:	4259      	negs	r1, r3
 8008872:	4159      	adcs	r1, r3
 8008874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008878:	e7eb      	b.n	8008852 <__swhatbuf_r+0x22>

0800887a <__smakebuf_r>:
 800887a:	898b      	ldrh	r3, [r1, #12]
 800887c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800887e:	079d      	lsls	r5, r3, #30
 8008880:	4606      	mov	r6, r0
 8008882:	460c      	mov	r4, r1
 8008884:	d507      	bpl.n	8008896 <__smakebuf_r+0x1c>
 8008886:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	6123      	str	r3, [r4, #16]
 800888e:	2301      	movs	r3, #1
 8008890:	6163      	str	r3, [r4, #20]
 8008892:	b002      	add	sp, #8
 8008894:	bd70      	pop	{r4, r5, r6, pc}
 8008896:	466a      	mov	r2, sp
 8008898:	ab01      	add	r3, sp, #4
 800889a:	f7ff ffc9 	bl	8008830 <__swhatbuf_r>
 800889e:	9900      	ldr	r1, [sp, #0]
 80088a0:	4605      	mov	r5, r0
 80088a2:	4630      	mov	r0, r6
 80088a4:	f7ff f880 	bl	80079a8 <_malloc_r>
 80088a8:	b948      	cbnz	r0, 80088be <__smakebuf_r+0x44>
 80088aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ae:	059a      	lsls	r2, r3, #22
 80088b0:	d4ef      	bmi.n	8008892 <__smakebuf_r+0x18>
 80088b2:	f023 0303 	bic.w	r3, r3, #3
 80088b6:	f043 0302 	orr.w	r3, r3, #2
 80088ba:	81a3      	strh	r3, [r4, #12]
 80088bc:	e7e3      	b.n	8008886 <__smakebuf_r+0xc>
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	6020      	str	r0, [r4, #0]
 80088c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	9b00      	ldr	r3, [sp, #0]
 80088ca:	6120      	str	r0, [r4, #16]
 80088cc:	6163      	str	r3, [r4, #20]
 80088ce:	9b01      	ldr	r3, [sp, #4]
 80088d0:	b15b      	cbz	r3, 80088ea <__smakebuf_r+0x70>
 80088d2:	4630      	mov	r0, r6
 80088d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088d8:	f000 f81e 	bl	8008918 <_isatty_r>
 80088dc:	b128      	cbz	r0, 80088ea <__smakebuf_r+0x70>
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	f023 0303 	bic.w	r3, r3, #3
 80088e4:	f043 0301 	orr.w	r3, r3, #1
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	431d      	orrs	r5, r3
 80088ee:	81a5      	strh	r5, [r4, #12]
 80088f0:	e7cf      	b.n	8008892 <__smakebuf_r+0x18>
	...

080088f4 <_fstat_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	2300      	movs	r3, #0
 80088f8:	4d06      	ldr	r5, [pc, #24]	; (8008914 <_fstat_r+0x20>)
 80088fa:	4604      	mov	r4, r0
 80088fc:	4608      	mov	r0, r1
 80088fe:	4611      	mov	r1, r2
 8008900:	602b      	str	r3, [r5, #0]
 8008902:	f7f9 fb1e 	bl	8001f42 <_fstat>
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	d102      	bne.n	8008910 <_fstat_r+0x1c>
 800890a:	682b      	ldr	r3, [r5, #0]
 800890c:	b103      	cbz	r3, 8008910 <_fstat_r+0x1c>
 800890e:	6023      	str	r3, [r4, #0]
 8008910:	bd38      	pop	{r3, r4, r5, pc}
 8008912:	bf00      	nop
 8008914:	20001484 	.word	0x20001484

08008918 <_isatty_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	2300      	movs	r3, #0
 800891c:	4d05      	ldr	r5, [pc, #20]	; (8008934 <_isatty_r+0x1c>)
 800891e:	4604      	mov	r4, r0
 8008920:	4608      	mov	r0, r1
 8008922:	602b      	str	r3, [r5, #0]
 8008924:	f7f9 fb1c 	bl	8001f60 <_isatty>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_isatty_r+0x1a>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_isatty_r+0x1a>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	20001484 	.word	0x20001484

08008938 <_init>:
 8008938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893a:	bf00      	nop
 800893c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800893e:	bc08      	pop	{r3}
 8008940:	469e      	mov	lr, r3
 8008942:	4770      	bx	lr

08008944 <_fini>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	bf00      	nop
 8008948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894a:	bc08      	pop	{r3}
 800894c:	469e      	mov	lr, r3
 800894e:	4770      	bx	lr
