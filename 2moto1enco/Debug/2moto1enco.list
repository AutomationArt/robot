
2moto1enco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003860  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003994  08003994  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003994  08003994  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003994  08003994  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800399c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  080039a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080039a8  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a565  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b13  00000000  00000000  0002a5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  0002c0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093e  00000000  00000000  0002ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002365  00000000  00000000  0002d616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cbf5  00000000  00000000  0002f97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089f0b  00000000  00000000  0003c570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034c4  00000000  00000000  000c647c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000c9940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003958 	.word	0x08003958

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003958 	.word	0x08003958

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_d2f>:
 80005d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005e0:	bf24      	itt	cs
 80005e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005ea:	d90d      	bls.n	8000608 <__aeabi_d2f+0x30>
 80005ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000600:	bf08      	it	eq
 8000602:	f020 0001 	biceq.w	r0, r0, #1
 8000606:	4770      	bx	lr
 8000608:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800060c:	d121      	bne.n	8000652 <__aeabi_d2f+0x7a>
 800060e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000612:	bfbc      	itt	lt
 8000614:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000618:	4770      	bxlt	lr
 800061a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000622:	f1c2 0218 	rsb	r2, r2, #24
 8000626:	f1c2 0c20 	rsb	ip, r2, #32
 800062a:	fa10 f30c 	lsls.w	r3, r0, ip
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	bf18      	it	ne
 8000634:	f040 0001 	orrne.w	r0, r0, #1
 8000638:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800063c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000640:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000644:	ea40 000c 	orr.w	r0, r0, ip
 8000648:	fa23 f302 	lsr.w	r3, r3, r2
 800064c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000650:	e7cc      	b.n	80005ec <__aeabi_d2f+0x14>
 8000652:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000656:	d107      	bne.n	8000668 <__aeabi_d2f+0x90>
 8000658:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800065c:	bf1e      	ittt	ne
 800065e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000662:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000666:	4770      	bxne	lr
 8000668:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800066c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_fmul>:
 8000678:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800067c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000680:	bf1e      	ittt	ne
 8000682:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000686:	ea92 0f0c 	teqne	r2, ip
 800068a:	ea93 0f0c 	teqne	r3, ip
 800068e:	d06f      	beq.n	8000770 <__aeabi_fmul+0xf8>
 8000690:	441a      	add	r2, r3
 8000692:	ea80 0c01 	eor.w	ip, r0, r1
 8000696:	0240      	lsls	r0, r0, #9
 8000698:	bf18      	it	ne
 800069a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800069e:	d01e      	beq.n	80006de <__aeabi_fmul+0x66>
 80006a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80006a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80006a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80006ac:	fba0 3101 	umull	r3, r1, r0, r1
 80006b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80006b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80006b8:	bf3e      	ittt	cc
 80006ba:	0049      	lslcc	r1, r1, #1
 80006bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80006c0:	005b      	lslcc	r3, r3, #1
 80006c2:	ea40 0001 	orr.w	r0, r0, r1
 80006c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80006ca:	2afd      	cmp	r2, #253	; 0xfd
 80006cc:	d81d      	bhi.n	800070a <__aeabi_fmul+0x92>
 80006ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80006d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006d6:	bf08      	it	eq
 80006d8:	f020 0001 	biceq.w	r0, r0, #1
 80006dc:	4770      	bx	lr
 80006de:	f090 0f00 	teq	r0, #0
 80006e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006e6:	bf08      	it	eq
 80006e8:	0249      	lsleq	r1, r1, #9
 80006ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80006f2:	3a7f      	subs	r2, #127	; 0x7f
 80006f4:	bfc2      	ittt	gt
 80006f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006fe:	4770      	bxgt	lr
 8000700:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000704:	f04f 0300 	mov.w	r3, #0
 8000708:	3a01      	subs	r2, #1
 800070a:	dc5d      	bgt.n	80007c8 <__aeabi_fmul+0x150>
 800070c:	f112 0f19 	cmn.w	r2, #25
 8000710:	bfdc      	itt	le
 8000712:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000716:	4770      	bxle	lr
 8000718:	f1c2 0200 	rsb	r2, r2, #0
 800071c:	0041      	lsls	r1, r0, #1
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	f1c2 0220 	rsb	r2, r2, #32
 8000726:	fa00 fc02 	lsl.w	ip, r0, r2
 800072a:	ea5f 0031 	movs.w	r0, r1, rrx
 800072e:	f140 0000 	adc.w	r0, r0, #0
 8000732:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000736:	bf08      	it	eq
 8000738:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800073c:	4770      	bx	lr
 800073e:	f092 0f00 	teq	r2, #0
 8000742:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000746:	bf02      	ittt	eq
 8000748:	0040      	lsleq	r0, r0, #1
 800074a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800074e:	3a01      	subeq	r2, #1
 8000750:	d0f9      	beq.n	8000746 <__aeabi_fmul+0xce>
 8000752:	ea40 000c 	orr.w	r0, r0, ip
 8000756:	f093 0f00 	teq	r3, #0
 800075a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800075e:	bf02      	ittt	eq
 8000760:	0049      	lsleq	r1, r1, #1
 8000762:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000766:	3b01      	subeq	r3, #1
 8000768:	d0f9      	beq.n	800075e <__aeabi_fmul+0xe6>
 800076a:	ea41 010c 	orr.w	r1, r1, ip
 800076e:	e78f      	b.n	8000690 <__aeabi_fmul+0x18>
 8000770:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000774:	ea92 0f0c 	teq	r2, ip
 8000778:	bf18      	it	ne
 800077a:	ea93 0f0c 	teqne	r3, ip
 800077e:	d00a      	beq.n	8000796 <__aeabi_fmul+0x11e>
 8000780:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000784:	bf18      	it	ne
 8000786:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800078a:	d1d8      	bne.n	800073e <__aeabi_fmul+0xc6>
 800078c:	ea80 0001 	eor.w	r0, r0, r1
 8000790:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000794:	4770      	bx	lr
 8000796:	f090 0f00 	teq	r0, #0
 800079a:	bf17      	itett	ne
 800079c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80007a0:	4608      	moveq	r0, r1
 80007a2:	f091 0f00 	teqne	r1, #0
 80007a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80007aa:	d014      	beq.n	80007d6 <__aeabi_fmul+0x15e>
 80007ac:	ea92 0f0c 	teq	r2, ip
 80007b0:	d101      	bne.n	80007b6 <__aeabi_fmul+0x13e>
 80007b2:	0242      	lsls	r2, r0, #9
 80007b4:	d10f      	bne.n	80007d6 <__aeabi_fmul+0x15e>
 80007b6:	ea93 0f0c 	teq	r3, ip
 80007ba:	d103      	bne.n	80007c4 <__aeabi_fmul+0x14c>
 80007bc:	024b      	lsls	r3, r1, #9
 80007be:	bf18      	it	ne
 80007c0:	4608      	movne	r0, r1
 80007c2:	d108      	bne.n	80007d6 <__aeabi_fmul+0x15e>
 80007c4:	ea80 0001 	eor.w	r0, r0, r1
 80007c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80007de:	4770      	bx	lr

080007e0 <__aeabi_fdiv>:
 80007e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007e8:	bf1e      	ittt	ne
 80007ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007ee:	ea92 0f0c 	teqne	r2, ip
 80007f2:	ea93 0f0c 	teqne	r3, ip
 80007f6:	d069      	beq.n	80008cc <__aeabi_fdiv+0xec>
 80007f8:	eba2 0203 	sub.w	r2, r2, r3
 80007fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000800:	0249      	lsls	r1, r1, #9
 8000802:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000806:	d037      	beq.n	8000878 <__aeabi_fdiv+0x98>
 8000808:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800080c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000810:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000814:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000818:	428b      	cmp	r3, r1
 800081a:	bf38      	it	cc
 800081c:	005b      	lslcc	r3, r3, #1
 800081e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000822:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000826:	428b      	cmp	r3, r1
 8000828:	bf24      	itt	cs
 800082a:	1a5b      	subcs	r3, r3, r1
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000834:	bf24      	itt	cs
 8000836:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800083a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800083e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000842:	bf24      	itt	cs
 8000844:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000848:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800084c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000850:	bf24      	itt	cs
 8000852:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000856:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	bf18      	it	ne
 800085e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000862:	d1e0      	bne.n	8000826 <__aeabi_fdiv+0x46>
 8000864:	2afd      	cmp	r2, #253	; 0xfd
 8000866:	f63f af50 	bhi.w	800070a <__aeabi_fmul+0x92>
 800086a:	428b      	cmp	r3, r1
 800086c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000870:	bf08      	it	eq
 8000872:	f020 0001 	biceq.w	r0, r0, #1
 8000876:	4770      	bx	lr
 8000878:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800087c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000880:	327f      	adds	r2, #127	; 0x7f
 8000882:	bfc2      	ittt	gt
 8000884:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000888:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800088c:	4770      	bxgt	lr
 800088e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000892:	f04f 0300 	mov.w	r3, #0
 8000896:	3a01      	subs	r2, #1
 8000898:	e737      	b.n	800070a <__aeabi_fmul+0x92>
 800089a:	f092 0f00 	teq	r2, #0
 800089e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008a2:	bf02      	ittt	eq
 80008a4:	0040      	lsleq	r0, r0, #1
 80008a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008aa:	3a01      	subeq	r2, #1
 80008ac:	d0f9      	beq.n	80008a2 <__aeabi_fdiv+0xc2>
 80008ae:	ea40 000c 	orr.w	r0, r0, ip
 80008b2:	f093 0f00 	teq	r3, #0
 80008b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008ba:	bf02      	ittt	eq
 80008bc:	0049      	lsleq	r1, r1, #1
 80008be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008c2:	3b01      	subeq	r3, #1
 80008c4:	d0f9      	beq.n	80008ba <__aeabi_fdiv+0xda>
 80008c6:	ea41 010c 	orr.w	r1, r1, ip
 80008ca:	e795      	b.n	80007f8 <__aeabi_fdiv+0x18>
 80008cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008d0:	ea92 0f0c 	teq	r2, ip
 80008d4:	d108      	bne.n	80008e8 <__aeabi_fdiv+0x108>
 80008d6:	0242      	lsls	r2, r0, #9
 80008d8:	f47f af7d 	bne.w	80007d6 <__aeabi_fmul+0x15e>
 80008dc:	ea93 0f0c 	teq	r3, ip
 80008e0:	f47f af70 	bne.w	80007c4 <__aeabi_fmul+0x14c>
 80008e4:	4608      	mov	r0, r1
 80008e6:	e776      	b.n	80007d6 <__aeabi_fmul+0x15e>
 80008e8:	ea93 0f0c 	teq	r3, ip
 80008ec:	d104      	bne.n	80008f8 <__aeabi_fdiv+0x118>
 80008ee:	024b      	lsls	r3, r1, #9
 80008f0:	f43f af4c 	beq.w	800078c <__aeabi_fmul+0x114>
 80008f4:	4608      	mov	r0, r1
 80008f6:	e76e      	b.n	80007d6 <__aeabi_fmul+0x15e>
 80008f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008fc:	bf18      	it	ne
 80008fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000902:	d1ca      	bne.n	800089a <__aeabi_fdiv+0xba>
 8000904:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000908:	f47f af5c 	bne.w	80007c4 <__aeabi_fmul+0x14c>
 800090c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000910:	f47f af3c 	bne.w	800078c <__aeabi_fmul+0x114>
 8000914:	e75f      	b.n	80007d6 <__aeabi_fmul+0x15e>
 8000916:	bf00      	nop

08000918 <__gesf2>:
 8000918:	f04f 3cff 	mov.w	ip, #4294967295
 800091c:	e006      	b.n	800092c <__cmpsf2+0x4>
 800091e:	bf00      	nop

08000920 <__lesf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	e002      	b.n	800092c <__cmpsf2+0x4>
 8000926:	bf00      	nop

08000928 <__cmpsf2>:
 8000928:	f04f 0c01 	mov.w	ip, #1
 800092c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000930:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000934:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000938:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800093c:	bf18      	it	ne
 800093e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000942:	d011      	beq.n	8000968 <__cmpsf2+0x40>
 8000944:	b001      	add	sp, #4
 8000946:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800094a:	bf18      	it	ne
 800094c:	ea90 0f01 	teqne	r0, r1
 8000950:	bf58      	it	pl
 8000952:	ebb2 0003 	subspl.w	r0, r2, r3
 8000956:	bf88      	it	hi
 8000958:	17c8      	asrhi	r0, r1, #31
 800095a:	bf38      	it	cc
 800095c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000960:	bf18      	it	ne
 8000962:	f040 0001 	orrne.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800096c:	d102      	bne.n	8000974 <__cmpsf2+0x4c>
 800096e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000972:	d105      	bne.n	8000980 <__cmpsf2+0x58>
 8000974:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000978:	d1e4      	bne.n	8000944 <__cmpsf2+0x1c>
 800097a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800097e:	d0e1      	beq.n	8000944 <__cmpsf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cfrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4608      	mov	r0, r1
 800098c:	4661      	mov	r1, ip
 800098e:	e7ff      	b.n	8000990 <__aeabi_cfcmpeq>

08000990 <__aeabi_cfcmpeq>:
 8000990:	b50f      	push	{r0, r1, r2, r3, lr}
 8000992:	f7ff ffc9 	bl	8000928 <__cmpsf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080009a0 <__aeabi_fcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cfcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_fcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cfcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_fcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cfcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_fcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffd2 	bl	8000988 <__aeabi_cfrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_fcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc8 	bl	8000988 <__aeabi_cfrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_f2iz>:
 8000a04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a08:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a0c:	d30f      	bcc.n	8000a2e <__aeabi_f2iz+0x2a>
 8000a0e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a12:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_f2iz+0x30>
 8000a18:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a20:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a24:	fa23 f002 	lsr.w	r0, r3, r2
 8000a28:	bf18      	it	ne
 8000a2a:	4240      	negne	r0, r0
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0000 	mov.w	r0, #0
 8000a32:	4770      	bx	lr
 8000a34:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a38:	d101      	bne.n	8000a3e <__aeabi_f2iz+0x3a>
 8000a3a:	0242      	lsls	r2, r0, #9
 8000a3c:	d105      	bne.n	8000a4a <__aeabi_f2iz+0x46>
 8000a3e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a42:	bf08      	it	eq
 8000a44:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a48:	4770      	bx	lr
 8000a4a:	f04f 0000 	mov.w	r0, #0
 8000a4e:	4770      	bx	lr

08000a50 <__aeabi_f2uiz>:
 8000a50:	0042      	lsls	r2, r0, #1
 8000a52:	d20e      	bcs.n	8000a72 <__aeabi_f2uiz+0x22>
 8000a54:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a58:	d30b      	bcc.n	8000a72 <__aeabi_f2uiz+0x22>
 8000a5a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a62:	d409      	bmi.n	8000a78 <__aeabi_f2uiz+0x28>
 8000a64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6c:	fa23 f002 	lsr.w	r0, r3, r2
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr
 8000a78:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a7c:	d101      	bne.n	8000a82 <__aeabi_f2uiz+0x32>
 8000a7e:	0242      	lsls	r2, r0, #9
 8000a80:	d102      	bne.n	8000a88 <__aeabi_f2uiz+0x38>
 8000a82:	f04f 30ff 	mov.w	r0, #4294967295
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

int cntImpulse1 = 0, cntImpulse2 = 0, step1=0, step2=0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) /*CallBack, вызванный при окончании периода Ш�?М*/
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
//			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
//			HAL_TIM_Base_Stop_IT(&htim2);
//
//		}
//	}
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
	...

08000aa4 <steppingyakkazavmaxim>:

int steppingyakkazavmaxim(float stepM1, float stepM2) {
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]

	step1=stepM1;
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffa8 	bl	8000a04 <__aeabi_f2iz>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4a6c      	ldr	r2, [pc, #432]	; (8000c68 <steppingyakkazavmaxim+0x1c4>)
 8000ab8:	6013      	str	r3, [r2, #0]
	step2=stepM2;
 8000aba:	6838      	ldr	r0, [r7, #0]
 8000abc:	f7ff ffa2 	bl	8000a04 <__aeabi_f2iz>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4a6a      	ldr	r2, [pc, #424]	; (8000c6c <steppingyakkazavmaxim+0x1c8>)
 8000ac4:	6013      	str	r3, [r2, #0]

	//числа 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	4869      	ldr	r0, [pc, #420]	; (8000c70 <steppingyakkazavmaxim+0x1cc>)
 8000aca:	f002 f819 	bl	8002b00 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000ace:	2108      	movs	r1, #8
 8000ad0:	4868      	ldr	r0, [pc, #416]	; (8000c74 <steppingyakkazavmaxim+0x1d0>)
 8000ad2:	f002 f815 	bl	8002b00 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 8000ad6:	4866      	ldr	r0, [pc, #408]	; (8000c70 <steppingyakkazavmaxim+0x1cc>)
 8000ad8:	f001 fef2 	bl	80028c0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 8000adc:	4865      	ldr	r0, [pc, #404]	; (8000c74 <steppingyakkazavmaxim+0x1d0>)
 8000ade:	f001 feef 	bl	80028c0 <HAL_TIM_Base_Stop_IT>

	//  частота шим = входящая частота / период (arr)
	//  125 000 (125 килогерц)  = 16 000 000 / 128
	// (1/60)*1000 = частота 16 (герц);
float periodM1=60; //мікросекунд
 8000ae2:	4b65      	ldr	r3, [pc, #404]	; (8000c78 <steppingyakkazavmaxim+0x1d4>)
 8000ae4:	61fb      	str	r3, [r7, #28]
uint32_t psc=1800;
 8000ae6:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000aea:	61bb      	str	r3, [r7, #24]

if(stepM1>stepM2){
 8000aec:	6839      	ldr	r1, [r7, #0]
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff ff7e 	bl	80009f0 <__aeabi_fcmpgt>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d04e      	beq.n	8000b98 <steppingyakkazavmaxim+0xf4>

	htim1.Instance->PSC = psc;
 8000afa:	4b5d      	ldr	r3, [pc, #372]	; (8000c70 <steppingyakkazavmaxim+0x1cc>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
	htim1.Instance->ARR = periodM1;
 8000b02:	4b5b      	ldr	r3, [pc, #364]	; (8000c70 <steppingyakkazavmaxim+0x1cc>)
 8000b04:	681c      	ldr	r4, [r3, #0]
 8000b06:	69f8      	ldr	r0, [r7, #28]
 8000b08:	f7ff ffa2 	bl	8000a50 <__aeabi_f2uiz>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim1.Instance->CCR3 = periodM1/2;
 8000b10:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b14:	69f8      	ldr	r0, [r7, #28]
 8000b16:	f7ff fe63 	bl	80007e0 <__aeabi_fdiv>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b54      	ldr	r3, [pc, #336]	; (8000c70 <steppingyakkazavmaxim+0x1cc>)
 8000b20:	681c      	ldr	r4, [r3, #0]
 8000b22:	4610      	mov	r0, r2
 8000b24:	f7ff ff94 	bl	8000a50 <__aeabi_f2uiz>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	63e3      	str	r3, [r4, #60]	; 0x3c

	float delimiter= stepM1/stepM2;
 8000b2c:	6839      	ldr	r1, [r7, #0]
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fe56 	bl	80007e0 <__aeabi_fdiv>
 8000b34:	4603      	mov	r3, r0
 8000b36:	60fb      	str	r3, [r7, #12]
	float mnoj= ceil(periodM1*delimiter);
 8000b38:	68f9      	ldr	r1, [r7, #12]
 8000b3a:	69f8      	ldr	r0, [r7, #28]
 8000b3c:	f7ff fd9c 	bl	8000678 <__aeabi_fmul>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fc68 	bl	8000418 <__aeabi_f2d>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	4610      	mov	r0, r2
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f002 fe82 	bl	8003858 <ceil>
 8000b54:	4602      	mov	r2, r0
 8000b56:	460b      	mov	r3, r1
 8000b58:	4610      	mov	r0, r2
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f7ff fd3c 	bl	80005d8 <__aeabi_d2f>
 8000b60:	4603      	mov	r3, r0
 8000b62:	60bb      	str	r3, [r7, #8]

	htim2.Instance->PSC = psc;
 8000b64:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <steppingyakkazavmaxim+0x1d0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
	htim2.Instance->ARR = mnoj;
 8000b6c:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <steppingyakkazavmaxim+0x1d0>)
 8000b6e:	681c      	ldr	r4, [r3, #0]
 8000b70:	68b8      	ldr	r0, [r7, #8]
 8000b72:	f7ff ff6d 	bl	8000a50 <__aeabi_f2uiz>
 8000b76:	4603      	mov	r3, r0
 8000b78:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim2.Instance->CCR3 = mnoj/2;
 8000b7a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b7e:	68b8      	ldr	r0, [r7, #8]
 8000b80:	f7ff fe2e 	bl	80007e0 <__aeabi_fdiv>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <steppingyakkazavmaxim+0x1d0>)
 8000b8a:	681c      	ldr	r4, [r3, #0]
 8000b8c:	4610      	mov	r0, r2
 8000b8e:	f7ff ff5f 	bl	8000a50 <__aeabi_f2uiz>
 8000b92:	4603      	mov	r3, r0
 8000b94:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000b96:	e054      	b.n	8000c42 <steppingyakkazavmaxim+0x19e>

} else if (stepM1<stepM2) {
 8000b98:	6839      	ldr	r1, [r7, #0]
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ff0a 	bl	80009b4 <__aeabi_fcmplt>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d04d      	beq.n	8000c42 <steppingyakkazavmaxim+0x19e>
//	uint16_t impMore = (72000000/psc_max)/1000; 						//імпульсів кроків за секунду для мотора з більшої кількістю кроків  КРОКІВ НА СЕКУНДУ
//	uint16_t allSecMore = (stepM2/impMore)*1000;		 				//загальний час роботи мотора із більшої кількістю кроків  мілісекунд
//	uint16_t stepSecM1 =  (stepM1/allSecMore)*1000; 					//кроків на секунду на двигуна LESS  250
//	uint16_t PSCmLess= 72000000 / (stepSecM1 * 1000); 					//дільник для мотора LESS

	htim2.Instance->PSC = psc;
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <steppingyakkazavmaxim+0x1d0>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
	htim2.Instance->ARR = periodM1;
 8000bae:	4b31      	ldr	r3, [pc, #196]	; (8000c74 <steppingyakkazavmaxim+0x1d0>)
 8000bb0:	681c      	ldr	r4, [r3, #0]
 8000bb2:	69f8      	ldr	r0, [r7, #28]
 8000bb4:	f7ff ff4c 	bl	8000a50 <__aeabi_f2uiz>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim2.Instance->CCR3 = periodM1/2;
 8000bbc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000bc0:	69f8      	ldr	r0, [r7, #28]
 8000bc2:	f7ff fe0d 	bl	80007e0 <__aeabi_fdiv>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <steppingyakkazavmaxim+0x1d0>)
 8000bcc:	681c      	ldr	r4, [r3, #0]
 8000bce:	4610      	mov	r0, r2
 8000bd0:	f7ff ff3e 	bl	8000a50 <__aeabi_f2uiz>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	63e3      	str	r3, [r4, #60]	; 0x3c

	float delimiter= stepM2/stepM1;
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	6838      	ldr	r0, [r7, #0]
 8000bdc:	f7ff fe00 	bl	80007e0 <__aeabi_fdiv>
 8000be0:	4603      	mov	r3, r0
 8000be2:	617b      	str	r3, [r7, #20]
	float mnoj= ceil(periodM1*delimiter);
 8000be4:	6979      	ldr	r1, [r7, #20]
 8000be6:	69f8      	ldr	r0, [r7, #28]
 8000be8:	f7ff fd46 	bl	8000678 <__aeabi_fmul>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fc12 	bl	8000418 <__aeabi_f2d>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f002 fe2c 	bl	8003858 <ceil>
 8000c00:	4602      	mov	r2, r0
 8000c02:	460b      	mov	r3, r1
 8000c04:	4610      	mov	r0, r2
 8000c06:	4619      	mov	r1, r3
 8000c08:	f7ff fce6 	bl	80005d8 <__aeabi_d2f>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	613b      	str	r3, [r7, #16]

	htim1.Instance->PSC = psc;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <steppingyakkazavmaxim+0x1cc>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
	htim1.Instance->ARR = mnoj;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <steppingyakkazavmaxim+0x1cc>)
 8000c1a:	681c      	ldr	r4, [r3, #0]
 8000c1c:	6938      	ldr	r0, [r7, #16]
 8000c1e:	f7ff ff17 	bl	8000a50 <__aeabi_f2uiz>
 8000c22:	4603      	mov	r3, r0
 8000c24:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim1.Instance->CCR3 = mnoj/2;
 8000c26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c2a:	6938      	ldr	r0, [r7, #16]
 8000c2c:	f7ff fdd8 	bl	80007e0 <__aeabi_fdiv>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <steppingyakkazavmaxim+0x1cc>)
 8000c36:	681c      	ldr	r4, [r3, #0]
 8000c38:	4610      	mov	r0, r2
 8000c3a:	f7ff ff09 	bl	8000a50 <__aeabi_f2uiz>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	63e3      	str	r3, [r4, #60]	; 0x3c

}

	//Старт таймера та переривань

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000c42:	2108      	movs	r1, #8
 8000c44:	480a      	ldr	r0, [pc, #40]	; (8000c70 <steppingyakkazavmaxim+0x1cc>)
 8000c46:	f001 feb9 	bl	80029bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	4809      	ldr	r0, [pc, #36]	; (8000c74 <steppingyakkazavmaxim+0x1d0>)
 8000c4e:	f001 feb5 	bl	80029bc <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <steppingyakkazavmaxim+0x1cc>)
 8000c54:	f001 fde2 	bl	800281c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000c58:	4806      	ldr	r0, [pc, #24]	; (8000c74 <steppingyakkazavmaxim+0x1d0>)
 8000c5a:	f001 fddf 	bl	800281c <HAL_TIM_Base_Start_IT>

	return 0;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3724      	adds	r7, #36	; 0x24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	20000158 	.word	0x20000158
 8000c6c:	2000015c 	.word	0x2000015c
 8000c70:	20000080 	.word	0x20000080
 8000c74:	200000c8 	.word	0x200000c8
 8000c78:	42700000 	.word	0x42700000

08000c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c82:	f000 fc51 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c86:	f000 f843 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8a:	f000 f9eb 	bl	8001064 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c8e:	f000 f8bd 	bl	8000e0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c92:	f000 f93f 	bl	8000f14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c96:	f000 f997 	bl	8000fc8 <MX_TIM3_Init>
  MX_SPI1_Init();
 8000c9a:	f000 f881 	bl	8000da0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Init(&htim1);
 8000c9e:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <main+0x78>)
 8000ca0:	f001 fd6d 	bl	800277e <HAL_TIM_Base_Init>
  HAL_TIM_Base_Init(&htim2);
 8000ca4:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <main+0x7c>)
 8000ca6:	f001 fd6a 	bl	800277e <HAL_TIM_Base_Init>
  HAL_TIM_Base_Init(&htim3);
 8000caa:	4814      	ldr	r0, [pc, #80]	; (8000cfc <main+0x80>)
 8000cac:	f001 fd67 	bl	800277e <HAL_TIM_Base_Init>

  char buf[4];
  char bufAngle[8];

  uint16_t posnow=0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	82fb      	strh	r3, [r7, #22]
  float angle = 0;
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]

  	HAL_Delay(300); //при старте 200 милисек не хотел ебать?
 8000cba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cbe:	f000 fc95 	bl	80015ec <HAL_Delay>
//  	posnow = getPositionSPI(&hspi1, CS_GPIO_Port, CS_Pin, 14, &htim3);
  //	resetAMT22(&hspi1, CS_GPIO_Port, CS_Pin, &htim3);
 // 	setZeroSPI(&hspi1, CS_GPIO_Port, CS_Pin, &htim3); //воно само зчитає поточну позицію и засейвить її в пам'ять
  	HAL_Delay(250);  //250   мілісек після встановлення нуля полюбасу
 8000cc2:	20fa      	movs	r0, #250	; 0xfa
 8000cc4:	f000 fc92 	bl	80015ec <HAL_Delay>

  	HAL_GPIO_WritePin(En_GPIO_Port,En_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2120      	movs	r1, #32
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <main+0x84>)
 8000cce:	f000 ffbb 	bl	8001c48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Dir_GPIO_Port,Dir_Pin, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2140      	movs	r1, #64	; 0x40
 8000cd6:	480a      	ldr	r0, [pc, #40]	; (8000d00 <main+0x84>)
 8000cd8:	f000 ffb6 	bl	8001c48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Dir2_GPIO_Port,Dir2_Pin, GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce2:	4808      	ldr	r0, [pc, #32]	; (8000d04 <main+0x88>)
 8000ce4:	f000 ffb0 	bl	8001c48 <HAL_GPIO_WritePin>

    steppingyakkazavmaxim(10000, 20000);
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <main+0x8c>)
 8000cea:	4808      	ldr	r0, [pc, #32]	; (8000d0c <main+0x90>)
 8000cec:	f7ff feda 	bl	8000aa4 <steppingyakkazavmaxim>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000cf0:	e7fe      	b.n	8000cf0 <main+0x74>
 8000cf2:	bf00      	nop
 8000cf4:	20000080 	.word	0x20000080
 8000cf8:	200000c8 	.word	0x200000c8
 8000cfc:	20000110 	.word	0x20000110
 8000d00:	40010800 	.word	0x40010800
 8000d04:	40010c00 	.word	0x40010c00
 8000d08:	469c4000 	.word	0x469c4000
 8000d0c:	461c4000 	.word	0x461c4000

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b090      	sub	sp, #64	; 0x40
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 0318 	add.w	r3, r7, #24
 8000d1a:	2228      	movs	r2, #40	; 0x28
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 fd6d 	bl	80037fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d40:	2301      	movs	r3, #1
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d44:	2302      	movs	r3, #2
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d54:	f107 0318 	add.w	r3, r7, #24
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 ff8d 	bl	8001c78 <HAL_RCC_OscConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d64:	f000 fa02 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d68:	230f      	movs	r3, #15
 8000d6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2102      	movs	r1, #2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 f9fa 	bl	800217c <HAL_RCC_ClockConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d8e:	f000 f9ed 	bl	800116c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000d92:	f001 fadd 	bl	8002350 <HAL_RCC_EnableCSS>
}
 8000d96:	bf00      	nop
 8000d98:	3740      	adds	r7, #64	; 0x40
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000da6:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <MX_SPI1_Init+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dd4:	2218      	movs	r2, #24
 8000dd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dec:	220a      	movs	r2, #10
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000df2:	f001 fb45 	bl	8002480 <HAL_SPI_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dfc:	f000 f9b6 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000028 	.word	0x20000028
 8000e08:	40013000 	.word	0x40013000

08000e0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b092      	sub	sp, #72	; 0x48
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
 8000e2c:	615a      	str	r2, [r3, #20]
 8000e2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2220      	movs	r2, #32
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fce1 	bl	80037fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e3c:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <MX_TIM1_Init+0x100>)
 8000e3e:	4a34      	ldr	r2, [pc, #208]	; (8000f10 <MX_TIM1_Init+0x104>)
 8000e40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8000e42:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <MX_TIM1_Init+0x100>)
 8000e44:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <MX_TIM1_Init+0x100>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000e50:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <MX_TIM1_Init+0x100>)
 8000e52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e58:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <MX_TIM1_Init+0x100>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <MX_TIM1_Init+0x100>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <MX_TIM1_Init+0x100>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e6a:	4828      	ldr	r0, [pc, #160]	; (8000f0c <MX_TIM1_Init+0x100>)
 8000e6c:	f001 fd56 	bl	800291c <HAL_TIM_PWM_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e76:	f000 f979 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e86:	4619      	mov	r1, r3
 8000e88:	4820      	ldr	r0, [pc, #128]	; (8000f0c <MX_TIM1_Init+0x100>)
 8000e8a:	f002 fbf7 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000e94:	f000 f96a 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e98:	2360      	movs	r3, #96	; 0x60
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eac:	2300      	movs	r3, #0
 8000eae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	2208      	movs	r2, #8
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4813      	ldr	r0, [pc, #76]	; (8000f0c <MX_TIM1_Init+0x100>)
 8000ebe:	f001 ff8b 	bl	8002dd8 <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000ec8:	f000 f950 	bl	800116c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <MX_TIM1_Init+0x100>)
 8000ef0:	f002 fc22 	bl	8003738 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000efa:	f000 f937 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <MX_TIM1_Init+0x100>)
 8000f00:	f000 fa3c 	bl	800137c <HAL_TIM_MspPostInit>

}
 8000f04:	bf00      	nop
 8000f06:	3748      	adds	r7, #72	; 0x48
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000080 	.word	0x20000080
 8000f10:	40012c00 	.word	0x40012c00

08000f14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]
 8000f32:	615a      	str	r2, [r3, #20]
 8000f34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <MX_TIM2_Init+0xb0>)
 8000f38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <MX_TIM2_Init+0xb0>)
 8000f40:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <MX_TIM2_Init+0xb0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_TIM2_Init+0xb0>)
 8000f4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_TIM2_Init+0xb0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_TIM2_Init+0xb0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f60:	4818      	ldr	r0, [pc, #96]	; (8000fc4 <MX_TIM2_Init+0xb0>)
 8000f62:	f001 fcdb 	bl	800291c <HAL_TIM_PWM_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000f6c:	f000 f8fe 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <MX_TIM2_Init+0xb0>)
 8000f80:	f002 fb7c 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000f8a:	f000 f8ef 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8e:	2360      	movs	r3, #96	; 0x60
 8000f90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <MX_TIM2_Init+0xb0>)
 8000fa6:	f001 ff17 	bl	8002dd8 <HAL_TIM_PWM_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000fb0:	f000 f8dc 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <MX_TIM2_Init+0xb0>)
 8000fb6:	f000 f9e1 	bl	800137c <HAL_TIM_MspPostInit>

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200000c8 	.word	0x200000c8

08000fc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <MX_TIM3_Init+0x94>)
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <MX_TIM3_Init+0x98>)
 8000fe8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <MX_TIM3_Init+0x94>)
 8000fec:	2247      	movs	r2, #71	; 0x47
 8000fee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_TIM3_Init+0x94>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <MX_TIM3_Init+0x94>)
 8000ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_TIM3_Init+0x94>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_TIM3_Init+0x94>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800100a:	4814      	ldr	r0, [pc, #80]	; (800105c <MX_TIM3_Init+0x94>)
 800100c:	f001 fbb7 	bl	800277e <HAL_TIM_Base_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001016:	f000 f8a9 	bl	800116c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <MX_TIM3_Init+0x94>)
 8001028:	f001 ff98 	bl	8002f5c <HAL_TIM_ConfigClockSource>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001032:	f000 f89b 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <MX_TIM3_Init+0x94>)
 8001044:	f002 fb1a 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800104e:	f000 f88d 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000110 	.word	0x20000110
 8001060:	40000400 	.word	0x40000400

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001078:	4b38      	ldr	r3, [pc, #224]	; (800115c <MX_GPIO_Init+0xf8>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a37      	ldr	r2, [pc, #220]	; (800115c <MX_GPIO_Init+0xf8>)
 800107e:	f043 0310 	orr.w	r3, r3, #16
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b35      	ldr	r3, [pc, #212]	; (800115c <MX_GPIO_Init+0xf8>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001090:	4b32      	ldr	r3, [pc, #200]	; (800115c <MX_GPIO_Init+0xf8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a31      	ldr	r2, [pc, #196]	; (800115c <MX_GPIO_Init+0xf8>)
 8001096:	f043 0320 	orr.w	r3, r3, #32
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <MX_GPIO_Init+0xf8>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b2c      	ldr	r3, [pc, #176]	; (800115c <MX_GPIO_Init+0xf8>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a2b      	ldr	r2, [pc, #172]	; (800115c <MX_GPIO_Init+0xf8>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <MX_GPIO_Init+0xf8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <MX_GPIO_Init+0xf8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a25      	ldr	r2, [pc, #148]	; (800115c <MX_GPIO_Init+0xf8>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <MX_GPIO_Init+0xf8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010de:	4820      	ldr	r0, [pc, #128]	; (8001160 <MX_GPIO_Init+0xfc>)
 80010e0:	f000 fdb2 	bl	8001c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, En_Pin|Dir_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2160      	movs	r1, #96	; 0x60
 80010e8:	481e      	ldr	r0, [pc, #120]	; (8001164 <MX_GPIO_Init+0x100>)
 80010ea:	f000 fdad 	bl	8001c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|Dir2_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f240 4101 	movw	r1, #1025	; 0x401
 80010f4:	481c      	ldr	r0, [pc, #112]	; (8001168 <MX_GPIO_Init+0x104>)
 80010f6:	f000 fda7 	bl	8001c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80010fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2302      	movs	r3, #2
 800110a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4619      	mov	r1, r3
 8001112:	4813      	ldr	r0, [pc, #76]	; (8001160 <MX_GPIO_Init+0xfc>)
 8001114:	f000 fc14 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : En_Pin Dir_Pin */
  GPIO_InitStruct.Pin = En_Pin|Dir_Pin;
 8001118:	2360      	movs	r3, #96	; 0x60
 800111a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2302      	movs	r3, #2
 8001126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_GPIO_Init+0x100>)
 8001130:	f000 fc06 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin Dir2_Pin */
  GPIO_InitStruct.Pin = CS_Pin|Dir2_Pin;
 8001134:	f240 4301 	movw	r3, #1025	; 0x401
 8001138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2302      	movs	r3, #2
 8001144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4619      	mov	r1, r3
 800114c:	4806      	ldr	r0, [pc, #24]	; (8001168 <MX_GPIO_Init+0x104>)
 800114e:	f000 fbf7 	bl	8001940 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001152:	bf00      	nop
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40021000 	.word	0x40021000
 8001160:	40011000 	.word	0x40011000
 8001164:	40010800 	.word	0x40010800
 8001168:	40010c00 	.word	0x40010c00

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x8>
	...

08001178 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_MspInit+0x6c>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_MspInit+0x6c>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6193      	str	r3, [r2, #24]
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_MspInit+0x6c>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_MspInit+0x6c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <HAL_MspInit+0x6c>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <HAL_MspInit+0x6c>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2005      	movs	r0, #5
 80011b4:	f000 fb15 	bl	80017e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80011b8:	2005      	movs	r0, #5
 80011ba:	f000 fb2e 	bl	800181a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_MspInit+0x70>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_MspInit+0x70>)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010000 	.word	0x40010000

080011ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <HAL_SPI_MspInit+0xb4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d145      	bne.n	8001298 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a24      	ldr	r2, [pc, #144]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 8001212:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_SPI_MspInit+0xb8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800123c:	2328      	movs	r3, #40	; 0x28
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4816      	ldr	r0, [pc, #88]	; (80012a8 <HAL_SPI_MspInit+0xbc>)
 8001250:	f000 fb76 	bl	8001940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001254:	2310      	movs	r3, #16
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <HAL_SPI_MspInit+0xbc>)
 8001268:	f000 fb6a 	bl	8001940 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_SPI_MspInit+0xc0>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_SPI_MspInit+0xc0>)
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	2023      	movs	r0, #35	; 0x23
 800128e:	f000 faa8 	bl	80017e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001292:	2023      	movs	r0, #35	; 0x23
 8001294:	f000 fac1 	bl	800181a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40013000 	.word	0x40013000
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010c00 	.word	0x40010c00
 80012ac:	40010000 	.word	0x40010000

080012b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <HAL_TIM_PWM_MspInit+0x78>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d114      	bne.n	80012ec <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_TIM_PWM_MspInit+0x7c>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_TIM_PWM_MspInit+0x7c>)
 80012c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012cc:	6193      	str	r3, [r2, #24]
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_TIM_PWM_MspInit+0x7c>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2019      	movs	r0, #25
 80012e0:	f000 fa7f 	bl	80017e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012e4:	2019      	movs	r0, #25
 80012e6:	f000 fa98 	bl	800181a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012ea:	e018      	b.n	800131e <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f4:	d113      	bne.n	800131e <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_TIM_PWM_MspInit+0x7c>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a0c      	ldr	r2, [pc, #48]	; (800132c <HAL_TIM_PWM_MspInit+0x7c>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_TIM_PWM_MspInit+0x7c>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	201c      	movs	r0, #28
 8001314:	f000 fa65 	bl	80017e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001318:	201c      	movs	r0, #28
 800131a:	f000 fa7e 	bl	800181a <HAL_NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40012c00 	.word	0x40012c00
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <HAL_TIM_Base_MspInit+0x44>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d113      	bne.n	800136a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_TIM_Base_MspInit+0x48>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <HAL_TIM_Base_MspInit+0x48>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_TIM_Base_MspInit+0x48>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	201d      	movs	r0, #29
 8001360:	f000 fa3f 	bl	80017e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001364:	201d      	movs	r0, #29
 8001366:	f000 fa58 	bl	800181a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40000400 	.word	0x40000400
 8001378:	40021000 	.word	0x40021000

0800137c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <HAL_TIM_MspPostInit+0x98>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d119      	bne.n	80013d0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_TIM_MspPostInit+0x9c>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <HAL_TIM_MspPostInit+0x9c>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_TIM_MspPostInit+0x9c>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4619      	mov	r1, r3
 80013c8:	4814      	ldr	r0, [pc, #80]	; (800141c <HAL_TIM_MspPostInit+0xa0>)
 80013ca:	f000 fab9 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013ce:	e01c      	b.n	800140a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d8:	d117      	bne.n	800140a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_TIM_MspPostInit+0x9c>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_TIM_MspPostInit+0x9c>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6193      	str	r3, [r2, #24]
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_TIM_MspPostInit+0x9c>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013f2:	2304      	movs	r3, #4
 80013f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <HAL_TIM_MspPostInit+0xa0>)
 8001406:	f000 fa9b 	bl	8001940 <HAL_GPIO_Init>
}
 800140a:	bf00      	nop
 800140c:	3720      	adds	r7, #32
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40012c00 	.word	0x40012c00
 8001418:	40021000 	.word	0x40021000
 800141c:	40010800 	.word	0x40010800

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001424:	f000 fff4 	bl	8002410 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x8>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146a:	f000 f8a3 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}

08001472 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
	...

08001480 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <TIM1_UP_IRQHandler+0x10>)
 8001486:	f001 fb9f 	bl	8002bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000080 	.word	0x20000080

08001494 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <TIM2_IRQHandler+0x10>)
 800149a:	f001 fb95 	bl	8002bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200000c8 	.word	0x200000c8

080014a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <TIM3_IRQHandler+0x10>)
 80014ae:	f001 fb8b 	bl	8002bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000110 	.word	0x20000110

080014bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <SPI1_IRQHandler+0x10>)
 80014c2:	f001 f861 	bl	8002588 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000028 	.word	0x20000028

080014d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014dc:	f7ff fff8 	bl	80014d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e0:	480b      	ldr	r0, [pc, #44]	; (8001510 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014e2:	490c      	ldr	r1, [pc, #48]	; (8001514 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014e4:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014f8:	4c09      	ldr	r4, [pc, #36]	; (8001520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001506:	f002 f983 	bl	8003810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800150a:	f7ff fbb7 	bl	8000c7c <main>
  bx lr
 800150e:	4770      	bx	lr
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001518:	0800399c 	.word	0x0800399c
  ldr r2, =_sbss
 800151c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001520:	20000164 	.word	0x20000164

08001524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC1_2_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_Init+0x28>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_Init+0x28>)
 8001532:	f043 0310 	orr.w	r3, r3, #16
 8001536:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 f947 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153e:	200f      	movs	r0, #15
 8001540:	f000 f808 	bl	8001554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001544:	f7ff fe18 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40022000 	.word	0x40022000

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x54>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x58>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f95f 	bl	8001836 <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00e      	b.n	80015a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d80a      	bhi.n	800159e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f000 f927 	bl	80017e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_InitTick+0x5c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_IncTick+0x1c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_IncTick+0x20>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a03      	ldr	r2, [pc, #12]	; (80015d4 <HAL_IncTick+0x20>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000160 	.word	0x20000160

080015d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return uwTick;
 80015dc:	4b02      	ldr	r3, [pc, #8]	; (80015e8 <HAL_GetTick+0x10>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000160 	.word	0x20000160

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff fff0 	bl	80015d8 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_Delay+0x44>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffe0 	bl	80015d8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000008 	.word	0x20000008

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4906      	ldr	r1, [pc, #24]	; (80016cc <__NVIC_EnableIRQ+0x34>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	; (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001798:	d301      	bcc.n	800179e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179a:	2301      	movs	r3, #1
 800179c:	e00f      	b.n	80017be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <SysTick_Config+0x40>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a6:	210f      	movs	r1, #15
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f7ff ff90 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <SysTick_Config+0x40>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <SysTick_Config+0x40>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010

080017cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff2d 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f4:	f7ff ff42 	bl	800167c <__NVIC_GetPriorityGrouping>
 80017f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff ff90 	bl	8001724 <NVIC_EncodePriority>
 8001804:	4602      	mov	r2, r0
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff5f 	bl	80016d0 <__NVIC_SetPriority>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff35 	bl	8001698 <__NVIC_EnableIRQ>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffa2 	bl	8001788 <SysTick_Config>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d005      	beq.n	8001874 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2204      	movs	r2, #4
 800186c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	e051      	b.n	8001918 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 020e 	bic.w	r2, r2, #14
 8001882:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a22      	ldr	r2, [pc, #136]	; (8001924 <HAL_DMA_Abort_IT+0xd4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d029      	beq.n	80018f2 <HAL_DMA_Abort_IT+0xa2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a21      	ldr	r2, [pc, #132]	; (8001928 <HAL_DMA_Abort_IT+0xd8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d022      	beq.n	80018ee <HAL_DMA_Abort_IT+0x9e>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1f      	ldr	r2, [pc, #124]	; (800192c <HAL_DMA_Abort_IT+0xdc>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d01a      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x98>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <HAL_DMA_Abort_IT+0xe0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d012      	beq.n	80018e2 <HAL_DMA_Abort_IT+0x92>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1c      	ldr	r2, [pc, #112]	; (8001934 <HAL_DMA_Abort_IT+0xe4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00a      	beq.n	80018dc <HAL_DMA_Abort_IT+0x8c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <HAL_DMA_Abort_IT+0xe8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d102      	bne.n	80018d6 <HAL_DMA_Abort_IT+0x86>
 80018d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018d4:	e00e      	b.n	80018f4 <HAL_DMA_Abort_IT+0xa4>
 80018d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018da:	e00b      	b.n	80018f4 <HAL_DMA_Abort_IT+0xa4>
 80018dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e0:	e008      	b.n	80018f4 <HAL_DMA_Abort_IT+0xa4>
 80018e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e6:	e005      	b.n	80018f4 <HAL_DMA_Abort_IT+0xa4>
 80018e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ec:	e002      	b.n	80018f4 <HAL_DMA_Abort_IT+0xa4>
 80018ee:	2310      	movs	r3, #16
 80018f0:	e000      	b.n	80018f4 <HAL_DMA_Abort_IT+0xa4>
 80018f2:	2301      	movs	r3, #1
 80018f4:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_DMA_Abort_IT+0xec>)
 80018f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
    } 
  }
  return status;
 8001918:	7bfb      	ldrb	r3, [r7, #15]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40020008 	.word	0x40020008
 8001928:	4002001c 	.word	0x4002001c
 800192c:	40020030 	.word	0x40020030
 8001930:	40020044 	.word	0x40020044
 8001934:	40020058 	.word	0x40020058
 8001938:	4002006c 	.word	0x4002006c
 800193c:	40020000 	.word	0x40020000

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b480      	push	{r7}
 8001942:	b08b      	sub	sp, #44	; 0x2c
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001952:	e169      	b.n	8001c28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001954:	2201      	movs	r2, #1
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	429a      	cmp	r2, r3
 800196e:	f040 8158 	bne.w	8001c22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4a9a      	ldr	r2, [pc, #616]	; (8001be0 <HAL_GPIO_Init+0x2a0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d05e      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 800197c:	4a98      	ldr	r2, [pc, #608]	; (8001be0 <HAL_GPIO_Init+0x2a0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d875      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 8001982:	4a98      	ldr	r2, [pc, #608]	; (8001be4 <HAL_GPIO_Init+0x2a4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d058      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 8001988:	4a96      	ldr	r2, [pc, #600]	; (8001be4 <HAL_GPIO_Init+0x2a4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d86f      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 800198e:	4a96      	ldr	r2, [pc, #600]	; (8001be8 <HAL_GPIO_Init+0x2a8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d052      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 8001994:	4a94      	ldr	r2, [pc, #592]	; (8001be8 <HAL_GPIO_Init+0x2a8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d869      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 800199a:	4a94      	ldr	r2, [pc, #592]	; (8001bec <HAL_GPIO_Init+0x2ac>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d04c      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 80019a0:	4a92      	ldr	r2, [pc, #584]	; (8001bec <HAL_GPIO_Init+0x2ac>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d863      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 80019a6:	4a92      	ldr	r2, [pc, #584]	; (8001bf0 <HAL_GPIO_Init+0x2b0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d046      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 80019ac:	4a90      	ldr	r2, [pc, #576]	; (8001bf0 <HAL_GPIO_Init+0x2b0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d85d      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d82a      	bhi.n	8001a0c <HAL_GPIO_Init+0xcc>
 80019b6:	2b12      	cmp	r3, #18
 80019b8:	d859      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 80019ba:	a201      	add	r2, pc, #4	; (adr r2, 80019c0 <HAL_GPIO_Init+0x80>)
 80019bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c0:	08001a3b 	.word	0x08001a3b
 80019c4:	08001a15 	.word	0x08001a15
 80019c8:	08001a27 	.word	0x08001a27
 80019cc:	08001a69 	.word	0x08001a69
 80019d0:	08001a6f 	.word	0x08001a6f
 80019d4:	08001a6f 	.word	0x08001a6f
 80019d8:	08001a6f 	.word	0x08001a6f
 80019dc:	08001a6f 	.word	0x08001a6f
 80019e0:	08001a6f 	.word	0x08001a6f
 80019e4:	08001a6f 	.word	0x08001a6f
 80019e8:	08001a6f 	.word	0x08001a6f
 80019ec:	08001a6f 	.word	0x08001a6f
 80019f0:	08001a6f 	.word	0x08001a6f
 80019f4:	08001a6f 	.word	0x08001a6f
 80019f8:	08001a6f 	.word	0x08001a6f
 80019fc:	08001a6f 	.word	0x08001a6f
 8001a00:	08001a6f 	.word	0x08001a6f
 8001a04:	08001a1d 	.word	0x08001a1d
 8001a08:	08001a31 	.word	0x08001a31
 8001a0c:	4a79      	ldr	r2, [pc, #484]	; (8001bf4 <HAL_GPIO_Init+0x2b4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a12:	e02c      	b.n	8001a6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	623b      	str	r3, [r7, #32]
          break;
 8001a1a:	e029      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	3304      	adds	r3, #4
 8001a22:	623b      	str	r3, [r7, #32]
          break;
 8001a24:	e024      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	623b      	str	r3, [r7, #32]
          break;
 8001a2e:	e01f      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	330c      	adds	r3, #12
 8001a36:	623b      	str	r3, [r7, #32]
          break;
 8001a38:	e01a      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a42:	2304      	movs	r3, #4
 8001a44:	623b      	str	r3, [r7, #32]
          break;
 8001a46:	e013      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a50:	2308      	movs	r3, #8
 8001a52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	611a      	str	r2, [r3, #16]
          break;
 8001a5a:	e009      	b.n	8001a70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	615a      	str	r2, [r3, #20]
          break;
 8001a66:	e003      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
          break;
 8001a6c:	e000      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          break;
 8001a6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2bff      	cmp	r3, #255	; 0xff
 8001a74:	d801      	bhi.n	8001a7a <HAL_GPIO_Init+0x13a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	e001      	b.n	8001a7e <HAL_GPIO_Init+0x13e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2bff      	cmp	r3, #255	; 0xff
 8001a84:	d802      	bhi.n	8001a8c <HAL_GPIO_Init+0x14c>
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	e002      	b.n	8001a92 <HAL_GPIO_Init+0x152>
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	3b08      	subs	r3, #8
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	210f      	movs	r1, #15
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	6a39      	ldr	r1, [r7, #32]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	431a      	orrs	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80b1 	beq.w	8001c22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac0:	4b4d      	ldr	r3, [pc, #308]	; (8001bf8 <HAL_GPIO_Init+0x2b8>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a4c      	ldr	r2, [pc, #304]	; (8001bf8 <HAL_GPIO_Init+0x2b8>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <HAL_GPIO_Init+0x2b8>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ad8:	4a48      	ldr	r2, [pc, #288]	; (8001bfc <HAL_GPIO_Init+0x2bc>)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	3302      	adds	r3, #2
 8001ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a40      	ldr	r2, [pc, #256]	; (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d013      	beq.n	8001b2c <HAL_GPIO_Init+0x1ec>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a3f      	ldr	r2, [pc, #252]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00d      	beq.n	8001b28 <HAL_GPIO_Init+0x1e8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a3e      	ldr	r2, [pc, #248]	; (8001c08 <HAL_GPIO_Init+0x2c8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_Init+0x1e4>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a3d      	ldr	r2, [pc, #244]	; (8001c0c <HAL_GPIO_Init+0x2cc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_Init+0x1e0>
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e006      	b.n	8001b2e <HAL_GPIO_Init+0x1ee>
 8001b20:	2304      	movs	r3, #4
 8001b22:	e004      	b.n	8001b2e <HAL_GPIO_Init+0x1ee>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e002      	b.n	8001b2e <HAL_GPIO_Init+0x1ee>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_GPIO_Init+0x1ee>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b30:	f002 0203 	and.w	r2, r2, #3
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	4093      	lsls	r3, r2
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b3e:	492f      	ldr	r1, [pc, #188]	; (8001bfc <HAL_GPIO_Init+0x2bc>)
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	492c      	ldr	r1, [pc, #176]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b66:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4928      	ldr	r1, [pc, #160]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b80:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	4922      	ldr	r1, [pc, #136]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	491e      	ldr	r1, [pc, #120]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4918      	ldr	r1, [pc, #96]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	4914      	ldr	r1, [pc, #80]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d021      	beq.n	8001c14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	490e      	ldr	r1, [pc, #56]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]
 8001bdc:	e021      	b.n	8001c22 <HAL_GPIO_Init+0x2e2>
 8001bde:	bf00      	nop
 8001be0:	10320000 	.word	0x10320000
 8001be4:	10310000 	.word	0x10310000
 8001be8:	10220000 	.word	0x10220000
 8001bec:	10210000 	.word	0x10210000
 8001bf0:	10120000 	.word	0x10120000
 8001bf4:	10110000 	.word	0x10110000
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	40010800 	.word	0x40010800
 8001c04:	40010c00 	.word	0x40010c00
 8001c08:	40011000 	.word	0x40011000
 8001c0c:	40011400 	.word	0x40011400
 8001c10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_GPIO_Init+0x304>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	4909      	ldr	r1, [pc, #36]	; (8001c44 <HAL_GPIO_Init+0x304>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	3301      	adds	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f47f ae8e 	bne.w	8001954 <HAL_GPIO_Init+0x14>
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	372c      	adds	r7, #44	; 0x2c
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	40010400 	.word	0x40010400

08001c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	807b      	strh	r3, [r7, #2]
 8001c54:	4613      	mov	r3, r2
 8001c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c58:	787b      	ldrb	r3, [r7, #1]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c5e:	887a      	ldrh	r2, [r7, #2]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c64:	e003      	b.n	8001c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	041a      	lsls	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	611a      	str	r2, [r3, #16]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e272      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 8087 	beq.w	8001da6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c98:	4b92      	ldr	r3, [pc, #584]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d00c      	beq.n	8001cbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca4:	4b8f      	ldr	r3, [pc, #572]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d112      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x5e>
 8001cb0:	4b8c      	ldr	r3, [pc, #560]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbe:	4b89      	ldr	r3, [pc, #548]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d06c      	beq.n	8001da4 <HAL_RCC_OscConfig+0x12c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d168      	bne.n	8001da4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e24c      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x76>
 8001ce0:	4b80      	ldr	r3, [pc, #512]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a7f      	ldr	r2, [pc, #508]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	e02e      	b.n	8001d4c <HAL_RCC_OscConfig+0xd4>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x98>
 8001cf6:	4b7b      	ldr	r3, [pc, #492]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7a      	ldr	r2, [pc, #488]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	4b78      	ldr	r3, [pc, #480]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a77      	ldr	r2, [pc, #476]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e01d      	b.n	8001d4c <HAL_RCC_OscConfig+0xd4>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0xbc>
 8001d1a:	4b72      	ldr	r3, [pc, #456]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a71      	ldr	r2, [pc, #452]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b6f      	ldr	r3, [pc, #444]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6e      	ldr	r2, [pc, #440]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0xd4>
 8001d34:	4b6b      	ldr	r3, [pc, #428]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a6a      	ldr	r2, [pc, #424]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b68      	ldr	r3, [pc, #416]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a67      	ldr	r2, [pc, #412]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff fc40 	bl	80015d8 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fc3c 	bl	80015d8 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e200      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0xe4>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fc2c 	bl	80015d8 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fc28 	bl	80015d8 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1ec      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x10c>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d063      	beq.n	8001e7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db2:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dbe:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d11c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x18c>
 8001dca:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	4b43      	ldr	r3, [pc, #268]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_RCC_OscConfig+0x176>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e1c0      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4939      	ldr	r1, [pc, #228]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	e03a      	b.n	8001e7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0c:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7ff fbe1 	bl	80015d8 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fbdd 	bl	80015d8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1a1      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4927      	ldr	r1, [pc, #156]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <HAL_RCC_OscConfig+0x270>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fbc0 	bl	80015d8 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5c:	f7ff fbbc 	bl	80015d8 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e180      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d03a      	beq.n	8001efc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d019      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7ff fba0 	bl	80015d8 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fb9c 	bl	80015d8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e160      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f000 fabc 	bl	8002438 <RCC_Delay>
 8001ec0:	e01c      	b.n	8001efc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec8:	f7ff fb86 	bl	80015d8 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ece:	e00f      	b.n	8001ef0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed0:	f7ff fb82 	bl	80015d8 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d908      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e146      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	42420000 	.word	0x42420000
 8001eec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef0:	4b92      	ldr	r3, [pc, #584]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1e9      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 80a6 	beq.w	8002056 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0e:	4b8b      	ldr	r3, [pc, #556]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10d      	bne.n	8001f36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	4b88      	ldr	r3, [pc, #544]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4a87      	ldr	r2, [pc, #540]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f24:	61d3      	str	r3, [r2, #28]
 8001f26:	4b85      	ldr	r3, [pc, #532]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f32:	2301      	movs	r3, #1
 8001f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f36:	4b82      	ldr	r3, [pc, #520]	; (8002140 <HAL_RCC_OscConfig+0x4c8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d118      	bne.n	8001f74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f42:	4b7f      	ldr	r3, [pc, #508]	; (8002140 <HAL_RCC_OscConfig+0x4c8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a7e      	ldr	r2, [pc, #504]	; (8002140 <HAL_RCC_OscConfig+0x4c8>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fb43 	bl	80015d8 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f56:	f7ff fb3f 	bl	80015d8 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b64      	cmp	r3, #100	; 0x64
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e103      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	4b75      	ldr	r3, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0x4c8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x312>
 8001f7c:	4b6f      	ldr	r3, [pc, #444]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a6e      	ldr	r2, [pc, #440]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6213      	str	r3, [r2, #32]
 8001f88:	e02d      	b.n	8001fe6 <HAL_RCC_OscConfig+0x36e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x334>
 8001f92:	4b6a      	ldr	r3, [pc, #424]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a69      	ldr	r2, [pc, #420]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	6213      	str	r3, [r2, #32]
 8001f9e:	4b67      	ldr	r3, [pc, #412]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a66      	ldr	r2, [pc, #408]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	f023 0304 	bic.w	r3, r3, #4
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	e01c      	b.n	8001fe6 <HAL_RCC_OscConfig+0x36e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCC_OscConfig+0x356>
 8001fb4:	4b61      	ldr	r3, [pc, #388]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a60      	ldr	r2, [pc, #384]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	4b5e      	ldr	r3, [pc, #376]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a5d      	ldr	r2, [pc, #372]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	e00b      	b.n	8001fe6 <HAL_RCC_OscConfig+0x36e>
 8001fce:	4b5b      	ldr	r3, [pc, #364]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a5a      	ldr	r2, [pc, #360]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	6213      	str	r3, [r2, #32]
 8001fda:	4b58      	ldr	r3, [pc, #352]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a57      	ldr	r2, [pc, #348]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	f023 0304 	bic.w	r3, r3, #4
 8001fe4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d015      	beq.n	800201a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fee:	f7ff faf3 	bl	80015d8 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7ff faef 	bl	80015d8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e0b1      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200c:	4b4b      	ldr	r3, [pc, #300]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0ee      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x37e>
 8002018:	e014      	b.n	8002044 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201a:	f7ff fadd 	bl	80015d8 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002020:	e00a      	b.n	8002038 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7ff fad9 	bl	80015d8 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e09b      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002038:	4b40      	ldr	r3, [pc, #256]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1ee      	bne.n	8002022 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002044:	7dfb      	ldrb	r3, [r7, #23]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d105      	bne.n	8002056 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204a:	4b3c      	ldr	r3, [pc, #240]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4a3b      	ldr	r2, [pc, #236]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8002050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002054:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 8087 	beq.w	800216e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002060:	4b36      	ldr	r3, [pc, #216]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b08      	cmp	r3, #8
 800206a:	d061      	beq.n	8002130 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d146      	bne.n	8002102 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002074:	4b33      	ldr	r3, [pc, #204]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7ff faad 	bl	80015d8 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002082:	f7ff faa9 	bl	80015d8 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e06d      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002094:	4b29      	ldr	r3, [pc, #164]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f0      	bne.n	8002082 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a8:	d108      	bne.n	80020bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020aa:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4921      	ldr	r1, [pc, #132]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020bc:	4b1f      	ldr	r3, [pc, #124]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a19      	ldr	r1, [r3, #32]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	430b      	orrs	r3, r1
 80020ce:	491b      	ldr	r1, [pc, #108]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7ff fa7d 	bl	80015d8 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e2:	f7ff fa79 	bl	80015d8 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e03d      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x46a>
 8002100:	e035      	b.n	800216e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fa66 	bl	80015d8 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff fa62 	bl	80015d8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e026      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_RCC_OscConfig+0x4c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x498>
 800212e:	e01e      	b.n	800216e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d107      	bne.n	8002148 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e019      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
 800213c:	40021000 	.word	0x40021000
 8002140:	40007000 	.word	0x40007000
 8002144:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_OscConfig+0x500>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	429a      	cmp	r2, r3
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000

0800217c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0d0      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002190:	4b6a      	ldr	r3, [pc, #424]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d910      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b67      	ldr	r3, [pc, #412]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 0207 	bic.w	r2, r3, #7
 80021a6:	4965      	ldr	r1, [pc, #404]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b63      	ldr	r3, [pc, #396]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0b8      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d8:	4b59      	ldr	r3, [pc, #356]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4a58      	ldr	r2, [pc, #352]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f0:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a52      	ldr	r2, [pc, #328]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fc:	4b50      	ldr	r3, [pc, #320]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	494d      	ldr	r1, [pc, #308]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d040      	beq.n	800229c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b47      	ldr	r3, [pc, #284]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d115      	bne.n	800225a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e07f      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223a:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e073      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e06b      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225a:	4b39      	ldr	r3, [pc, #228]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4936      	ldr	r1, [pc, #216]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800226c:	f7ff f9b4 	bl	80015d8 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7ff f9b0 	bl	80015d8 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e053      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 020c 	and.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	429a      	cmp	r2, r3
 800229a:	d1eb      	bne.n	8002274 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800229c:	4b27      	ldr	r3, [pc, #156]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d210      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 0207 	bic.w	r2, r3, #7
 80022b2:	4922      	ldr	r1, [pc, #136]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e032      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4916      	ldr	r1, [pc, #88]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	490e      	ldr	r1, [pc, #56]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800230a:	f000 f82d 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 800230e:	4602      	mov	r2, r0
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	490a      	ldr	r1, [pc, #40]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 800231c:	5ccb      	ldrb	r3, [r1, r3]
 800231e:	fa22 f303 	lsr.w	r3, r2, r3
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <HAL_RCC_ClockConfig+0x1cc>)
 8002324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_ClockConfig+0x1d0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f912 	bl	8001554 <HAL_InitTick>

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40022000 	.word	0x40022000
 8002340:	40021000 	.word	0x40021000
 8002344:	08003970 	.word	0x08003970
 8002348:	20000000 	.word	0x20000000
 800234c:	20000004 	.word	0x20000004

08002350 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_RCC_EnableCSS+0x14>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	4242004c 	.word	0x4242004c

08002368 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b04      	cmp	r3, #4
 8002390:	d002      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x30>
 8002392:	2b08      	cmp	r3, #8
 8002394:	d003      	beq.n	800239e <HAL_RCC_GetSysClockFreq+0x36>
 8002396:	e027      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_RCC_GetSysClockFreq+0x98>)
 800239a:	613b      	str	r3, [r7, #16]
      break;
 800239c:	e027      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	0c9b      	lsrs	r3, r3, #18
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	4a17      	ldr	r2, [pc, #92]	; (8002404 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023a8:	5cd3      	ldrb	r3, [r2, r3]
 80023aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d010      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_RCC_GetSysClockFreq+0x94>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	0c5b      	lsrs	r3, r3, #17
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	4a11      	ldr	r2, [pc, #68]	; (8002408 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ca:	fb03 f202 	mul.w	r2, r3, r2
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	e004      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a0c      	ldr	r2, [pc, #48]	; (800240c <HAL_RCC_GetSysClockFreq+0xa4>)
 80023dc:	fb02 f303 	mul.w	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	613b      	str	r3, [r7, #16]
      break;
 80023e6:	e002      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ea:	613b      	str	r3, [r7, #16]
      break;
 80023ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ee:	693b      	ldr	r3, [r7, #16]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	007a1200 	.word	0x007a1200
 8002404:	08003980 	.word	0x08003980
 8002408:	08003990 	.word	0x08003990
 800240c:	003d0900 	.word	0x003d0900

08002410 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241c:	2b80      	cmp	r3, #128	; 0x80
 800241e:	d104      	bne.n	800242a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002420:	f000 f828 	bl	8002474 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	701a      	strb	r2, [r3, #0]
  }
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	4002100a 	.word	0x4002100a

08002438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <RCC_Delay+0x34>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <RCC_Delay+0x38>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0a5b      	lsrs	r3, r3, #9
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002454:	bf00      	nop
  }
  while (Delay --);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	60fa      	str	r2, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f9      	bne.n	8002454 <RCC_Delay+0x1c>
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	20000000 	.word	0x20000000
 8002470:	10624dd3 	.word	0x10624dd3

08002474 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e076      	b.n	8002580 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	2b00      	cmp	r3, #0
 8002498:	d108      	bne.n	80024ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024a2:	d009      	beq.n	80024b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	61da      	str	r2, [r3, #28]
 80024aa:	e005      	b.n	80024b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fe8a 	bl	80011ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	ea42 0103 	orr.w	r1, r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	0c1a      	lsrs	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f002 0204 	and.w	r2, r2, #4
 800255e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10e      	bne.n	80025c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d004      	beq.n	80025c8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
    return;
 80025c6:	e0b7      	b.n	8002738 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_SPI_IRQHandler+0x5e>
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4798      	blx	r3
    return;
 80025e4:	e0a8      	b.n	8002738 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d105      	bne.n	80025fc <HAL_SPI_IRQHandler+0x74>
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 809e 	beq.w	8002738 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8098 	beq.w	8002738 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d023      	beq.n	800265a <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b03      	cmp	r3, #3
 800261c:	d011      	beq.n	8002642 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f043 0204 	orr.w	r2, r3, #4
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	e00b      	b.n	800265a <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	693b      	ldr	r3, [r7, #16]
        return;
 8002658:	e06e      	b.n	8002738 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d014      	beq.n	800268e <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	2b00      	cmp	r3, #0
 8002694:	d04f      	beq.n	8002736 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026a4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d104      	bne.n	80026c2 <HAL_SPI_IRQHandler+0x13a>
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d034      	beq.n	800272c <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0203 	bic.w	r2, r2, #3
 80026d0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d011      	beq.n	80026fe <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	4a18      	ldr	r2, [pc, #96]	; (8002740 <HAL_SPI_IRQHandler+0x1b8>)
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f8b2 	bl	8001850 <HAL_DMA_Abort_IT>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002702:	2b00      	cmp	r3, #0
 8002704:	d016      	beq.n	8002734 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270a:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <HAL_SPI_IRQHandler+0x1b8>)
 800270c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f89c 	bl	8001850 <HAL_DMA_Abort_IT>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800272a:	e003      	b.n	8002734 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f809 	bl	8002744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002732:	e000      	b.n	8002736 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8002734:	bf00      	nop
    return;
 8002736:	bf00      	nop
  }
}
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	08002757 	.word	0x08002757

08002744 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff ffe7 	bl	8002744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e041      	b.n	8002814 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fe fdc3 	bl	8001330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f000 fcb9 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d001      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e03a      	b.n	80028aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <HAL_TIM_Base_Start_IT+0x98>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00e      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x58>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285e:	d009      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x58>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x58>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <HAL_TIM_Base_Start_IT+0xa0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d111      	bne.n	8002898 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b06      	cmp	r3, #6
 8002884:	d010      	beq.n	80028a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002896:	e007      	b.n	80028a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40000800 	.word	0x40000800

080028c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6a1a      	ldr	r2, [r3, #32]
 80028de:	f241 1311 	movw	r3, #4369	; 0x1111
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10f      	bne.n	8002908 <HAL_TIM_Base_Stop_IT+0x48>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6a1a      	ldr	r2, [r3, #32]
 80028ee:	f240 4344 	movw	r3, #1092	; 0x444
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d107      	bne.n	8002908 <HAL_TIM_Base_Stop_IT+0x48>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e041      	b.n	80029b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe fcb4 	bl	80012b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	4619      	mov	r1, r3
 800295a:	4610      	mov	r0, r2
 800295c:	f000 fbea 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d109      	bne.n	80029e0 <HAL_TIM_PWM_Start+0x24>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e022      	b.n	8002a26 <HAL_TIM_PWM_Start+0x6a>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d109      	bne.n	80029fa <HAL_TIM_PWM_Start+0x3e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	e015      	b.n	8002a26 <HAL_TIM_PWM_Start+0x6a>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d109      	bne.n	8002a14 <HAL_TIM_PWM_Start+0x58>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e008      	b.n	8002a26 <HAL_TIM_PWM_Start+0x6a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	bf14      	ite	ne
 8002a20:	2301      	movne	r3, #1
 8002a22:	2300      	moveq	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e05e      	b.n	8002aec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0x82>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a3c:	e013      	b.n	8002a66 <HAL_TIM_PWM_Start+0xaa>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_PWM_Start+0x92>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a4c:	e00b      	b.n	8002a66 <HAL_TIM_PWM_Start+0xaa>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d104      	bne.n	8002a5e <HAL_TIM_PWM_Start+0xa2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a5c:	e003      	b.n	8002a66 <HAL_TIM_PWM_Start+0xaa>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2202      	movs	r2, #2
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	6839      	ldr	r1, [r7, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fde0 	bl	8003634 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <HAL_TIM_PWM_Start+0x138>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d107      	bne.n	8002a8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_TIM_PWM_Start+0x138>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00e      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0xfa>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa0:	d009      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0xfa>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <HAL_TIM_PWM_Start+0x13c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0xfa>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a12      	ldr	r2, [pc, #72]	; (8002afc <HAL_TIM_PWM_Start+0x140>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d111      	bne.n	8002ada <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b06      	cmp	r3, #6
 8002ac6:	d010      	beq.n	8002aea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad8:	e007      	b.n	8002aea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000800 	.word	0x40000800

08002b00 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	6839      	ldr	r1, [r7, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fd8e 	bl	8003634 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <HAL_TIM_PWM_Stop+0xc4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d117      	bne.n	8002b52 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6a1a      	ldr	r2, [r3, #32]
 8002b28:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <HAL_TIM_PWM_Stop+0x52>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6a1a      	ldr	r2, [r3, #32]
 8002b38:	f240 4344 	movw	r3, #1092	; 0x444
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d107      	bne.n	8002b52 <HAL_TIM_PWM_Stop+0x52>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6a1a      	ldr	r2, [r3, #32]
 8002b58:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10f      	bne.n	8002b82 <HAL_TIM_PWM_Stop+0x82>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6a1a      	ldr	r2, [r3, #32]
 8002b68:	f240 4344 	movw	r3, #1092	; 0x444
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d107      	bne.n	8002b82 <HAL_TIM_PWM_Stop+0x82>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d104      	bne.n	8002b92 <HAL_TIM_PWM_Stop+0x92>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b90:	e013      	b.n	8002bba <HAL_TIM_PWM_Stop+0xba>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d104      	bne.n	8002ba2 <HAL_TIM_PWM_Stop+0xa2>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba0:	e00b      	b.n	8002bba <HAL_TIM_PWM_Stop+0xba>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d104      	bne.n	8002bb2 <HAL_TIM_PWM_Stop+0xb2>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb0:	e003      	b.n	8002bba <HAL_TIM_PWM_Stop+0xba>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40012c00 	.word	0x40012c00

08002bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0202 	mvn.w	r2, #2
 8002bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa76 	bl	80030fc <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa69 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fa78 	bl	800310e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d122      	bne.n	8002c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d11b      	bne.n	8002c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0204 	mvn.w	r2, #4
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fa4c 	bl	80030fc <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa3f 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fa4e 	bl	800310e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d122      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d11b      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0208 	mvn.w	r2, #8
 8002c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fa22 	bl	80030fc <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fa15 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fa24 	bl	800310e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d122      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d11b      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0210 	mvn.w	r2, #16
 8002cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f9f8 	bl	80030fc <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e005      	b.n	8002d1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f9eb 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f9fa 	bl	800310e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10e      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d107      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0201 	mvn.w	r2, #1
 8002d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fd fea2 	bl	8000a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b80      	cmp	r3, #128	; 0x80
 8002d58:	d10e      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d64:	2b80      	cmp	r3, #128	; 0x80
 8002d66:	d107      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fd3a 	bl	80037ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d10e      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d107      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f9be 	bl	8003120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d10e      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d107      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0220 	mvn.w	r2, #32
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fd05 	bl	80037da <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e0ae      	b.n	8002f54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	f200 809f 	bhi.w	8002f44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e06:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0c:	08002e41 	.word	0x08002e41
 8002e10:	08002f45 	.word	0x08002f45
 8002e14:	08002f45 	.word	0x08002f45
 8002e18:	08002f45 	.word	0x08002f45
 8002e1c:	08002e81 	.word	0x08002e81
 8002e20:	08002f45 	.word	0x08002f45
 8002e24:	08002f45 	.word	0x08002f45
 8002e28:	08002f45 	.word	0x08002f45
 8002e2c:	08002ec3 	.word	0x08002ec3
 8002e30:	08002f45 	.word	0x08002f45
 8002e34:	08002f45 	.word	0x08002f45
 8002e38:	08002f45 	.word	0x08002f45
 8002e3c:	08002f03 	.word	0x08002f03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f9d6 	bl	80031f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0208 	orr.w	r2, r2, #8
 8002e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0204 	bic.w	r2, r2, #4
 8002e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6999      	ldr	r1, [r3, #24]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	619a      	str	r2, [r3, #24]
      break;
 8002e7e:	e064      	b.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fa1c 	bl	80032c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6999      	ldr	r1, [r3, #24]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	021a      	lsls	r2, r3, #8
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	619a      	str	r2, [r3, #24]
      break;
 8002ec0:	e043      	b.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fa65 	bl	8003398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0208 	orr.w	r2, r2, #8
 8002edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69da      	ldr	r2, [r3, #28]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0204 	bic.w	r2, r2, #4
 8002eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69d9      	ldr	r1, [r3, #28]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	61da      	str	r2, [r3, #28]
      break;
 8002f00:	e023      	b.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 faaf 	bl	800346c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69d9      	ldr	r1, [r3, #28]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	021a      	lsls	r2, r3, #8
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	61da      	str	r2, [r3, #28]
      break;
 8002f42:	e002      	b.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	75fb      	strb	r3, [r7, #23]
      break;
 8002f48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_TIM_ConfigClockSource+0x1c>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e0b4      	b.n	80030e2 <HAL_TIM_ConfigClockSource+0x186>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb0:	d03e      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0xd4>
 8002fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb6:	f200 8087 	bhi.w	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbe:	f000 8086 	beq.w	80030ce <HAL_TIM_ConfigClockSource+0x172>
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc6:	d87f      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc8:	2b70      	cmp	r3, #112	; 0x70
 8002fca:	d01a      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0xa6>
 8002fcc:	2b70      	cmp	r3, #112	; 0x70
 8002fce:	d87b      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd0:	2b60      	cmp	r3, #96	; 0x60
 8002fd2:	d050      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x11a>
 8002fd4:	2b60      	cmp	r3, #96	; 0x60
 8002fd6:	d877      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd8:	2b50      	cmp	r3, #80	; 0x50
 8002fda:	d03c      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0xfa>
 8002fdc:	2b50      	cmp	r3, #80	; 0x50
 8002fde:	d873      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d058      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x13a>
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d86f      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe8:	2b30      	cmp	r3, #48	; 0x30
 8002fea:	d064      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002fec:	2b30      	cmp	r3, #48	; 0x30
 8002fee:	d86b      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d060      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d867      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d05c      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d05a      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003000:	e062      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003012:	f000 faf0 	bl	80035f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	609a      	str	r2, [r3, #8]
      break;
 800302e:	e04f      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003040:	f000 fad9 	bl	80035f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003052:	609a      	str	r2, [r3, #8]
      break;
 8003054:	e03c      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003062:	461a      	mov	r2, r3
 8003064:	f000 fa50 	bl	8003508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2150      	movs	r1, #80	; 0x50
 800306e:	4618      	mov	r0, r3
 8003070:	f000 faa7 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8003074:	e02c      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003082:	461a      	mov	r2, r3
 8003084:	f000 fa6e 	bl	8003564 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2160      	movs	r1, #96	; 0x60
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fa97 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8003094:	e01c      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 fa30 	bl	8003508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2140      	movs	r1, #64	; 0x40
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fa87 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 80030b4:	e00c      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4619      	mov	r1, r3
 80030c0:	4610      	mov	r0, r2
 80030c2:	f000 fa7e 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 80030c6:	e003      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      break;
 80030cc:	e000      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr

0800310e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
	...

08003134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a29      	ldr	r2, [pc, #164]	; (80031ec <TIM_Base_SetConfig+0xb8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00b      	beq.n	8003164 <TIM_Base_SetConfig+0x30>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003152:	d007      	beq.n	8003164 <TIM_Base_SetConfig+0x30>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a26      	ldr	r2, [pc, #152]	; (80031f0 <TIM_Base_SetConfig+0xbc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_Base_SetConfig+0x30>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <TIM_Base_SetConfig+0xc0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d108      	bne.n	8003176 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1c      	ldr	r2, [pc, #112]	; (80031ec <TIM_Base_SetConfig+0xb8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00b      	beq.n	8003196 <TIM_Base_SetConfig+0x62>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d007      	beq.n	8003196 <TIM_Base_SetConfig+0x62>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <TIM_Base_SetConfig+0xbc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0x62>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a18      	ldr	r2, [pc, #96]	; (80031f4 <TIM_Base_SetConfig+0xc0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a07      	ldr	r2, [pc, #28]	; (80031ec <TIM_Base_SetConfig+0xb8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d103      	bne.n	80031dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	615a      	str	r2, [r3, #20]
}
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	40012c00 	.word	0x40012c00
 80031f0:	40000400 	.word	0x40000400
 80031f4:	40000800 	.word	0x40000800

080031f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	f023 0201 	bic.w	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0303 	bic.w	r3, r3, #3
 800322e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f023 0302 	bic.w	r3, r3, #2
 8003240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <TIM_OC1_SetConfig+0xc8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d10c      	bne.n	800326e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f023 0308 	bic.w	r3, r3, #8
 800325a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f023 0304 	bic.w	r3, r3, #4
 800326c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <TIM_OC1_SetConfig+0xc8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d111      	bne.n	800329a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800327c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	621a      	str	r2, [r3, #32]
}
 80032b4:	bf00      	nop
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40012c00 	.word	0x40012c00

080032c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f023 0210 	bic.w	r2, r3, #16
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0320 	bic.w	r3, r3, #32
 800330e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a1d      	ldr	r2, [pc, #116]	; (8003394 <TIM_OC2_SetConfig+0xd0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10d      	bne.n	8003340 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800332a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800333e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a14      	ldr	r2, [pc, #80]	; (8003394 <TIM_OC2_SetConfig+0xd0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d113      	bne.n	8003370 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800334e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	40012c00 	.word	0x40012c00

08003398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0303 	bic.w	r3, r3, #3
 80033ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <TIM_OC3_SetConfig+0xd0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d10d      	bne.n	8003412 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <TIM_OC3_SetConfig+0xd0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d113      	bne.n	8003442 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	621a      	str	r2, [r3, #32]
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40012c00 	.word	0x40012c00

0800346c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800349a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	031b      	lsls	r3, r3, #12
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a0f      	ldr	r2, [pc, #60]	; (8003504 <TIM_OC4_SetConfig+0x98>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d109      	bne.n	80034e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	40012c00 	.word	0x40012c00

08003508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f023 0201 	bic.w	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 030a 	bic.w	r3, r3, #10
 8003544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f023 0210 	bic.w	r2, r3, #16
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800358e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	031b      	lsls	r3, r3, #12
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	621a      	str	r2, [r3, #32]
}
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	f043 0307 	orr.w	r3, r3, #7
 80035e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	609a      	str	r2, [r3, #8]
}
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b087      	sub	sp, #28
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003610:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	021a      	lsls	r2, r3, #8
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	431a      	orrs	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4313      	orrs	r3, r2
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	609a      	str	r2, [r3, #8]
}
 800362a:	bf00      	nop
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	2201      	movs	r2, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1a      	ldr	r2, [r3, #32]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	43db      	mvns	r3, r3
 8003656:	401a      	ands	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1a      	ldr	r2, [r3, #32]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	fa01 f303 	lsl.w	r3, r1, r3
 800366c:	431a      	orrs	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003690:	2302      	movs	r3, #2
 8003692:	e046      	b.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a16      	ldr	r2, [pc, #88]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e0:	d009      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a10      	ldr	r2, [pc, #64]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10c      	bne.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	4313      	orrs	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40012c00 	.word	0x40012c00
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800

08003738 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003750:	2302      	movs	r3, #2
 8003752:	e03d      	b.n	80037d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr

080037fe <memset>:
 80037fe:	4603      	mov	r3, r0
 8003800:	4402      	add	r2, r0
 8003802:	4293      	cmp	r3, r2
 8003804:	d100      	bne.n	8003808 <memset+0xa>
 8003806:	4770      	bx	lr
 8003808:	f803 1b01 	strb.w	r1, [r3], #1
 800380c:	e7f9      	b.n	8003802 <memset+0x4>
	...

08003810 <__libc_init_array>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	2600      	movs	r6, #0
 8003814:	4d0c      	ldr	r5, [pc, #48]	; (8003848 <__libc_init_array+0x38>)
 8003816:	4c0d      	ldr	r4, [pc, #52]	; (800384c <__libc_init_array+0x3c>)
 8003818:	1b64      	subs	r4, r4, r5
 800381a:	10a4      	asrs	r4, r4, #2
 800381c:	42a6      	cmp	r6, r4
 800381e:	d109      	bne.n	8003834 <__libc_init_array+0x24>
 8003820:	f000 f89a 	bl	8003958 <_init>
 8003824:	2600      	movs	r6, #0
 8003826:	4d0a      	ldr	r5, [pc, #40]	; (8003850 <__libc_init_array+0x40>)
 8003828:	4c0a      	ldr	r4, [pc, #40]	; (8003854 <__libc_init_array+0x44>)
 800382a:	1b64      	subs	r4, r4, r5
 800382c:	10a4      	asrs	r4, r4, #2
 800382e:	42a6      	cmp	r6, r4
 8003830:	d105      	bne.n	800383e <__libc_init_array+0x2e>
 8003832:	bd70      	pop	{r4, r5, r6, pc}
 8003834:	f855 3b04 	ldr.w	r3, [r5], #4
 8003838:	4798      	blx	r3
 800383a:	3601      	adds	r6, #1
 800383c:	e7ee      	b.n	800381c <__libc_init_array+0xc>
 800383e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003842:	4798      	blx	r3
 8003844:	3601      	adds	r6, #1
 8003846:	e7f2      	b.n	800382e <__libc_init_array+0x1e>
 8003848:	08003994 	.word	0x08003994
 800384c:	08003994 	.word	0x08003994
 8003850:	08003994 	.word	0x08003994
 8003854:	08003998 	.word	0x08003998

08003858 <ceil>:
 8003858:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800385c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003860:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8003864:	2e13      	cmp	r6, #19
 8003866:	460b      	mov	r3, r1
 8003868:	4607      	mov	r7, r0
 800386a:	460c      	mov	r4, r1
 800386c:	4605      	mov	r5, r0
 800386e:	dc30      	bgt.n	80038d2 <ceil+0x7a>
 8003870:	2e00      	cmp	r6, #0
 8003872:	da12      	bge.n	800389a <ceil+0x42>
 8003874:	a334      	add	r3, pc, #208	; (adr r3, 8003948 <ceil+0xf0>)
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f7fc fc6f 	bl	800015c <__adddf3>
 800387e:	2200      	movs	r2, #0
 8003880:	2300      	movs	r3, #0
 8003882:	f7fc fe9f 	bl	80005c4 <__aeabi_dcmpgt>
 8003886:	b128      	cbz	r0, 8003894 <ceil+0x3c>
 8003888:	2c00      	cmp	r4, #0
 800388a:	db54      	blt.n	8003936 <ceil+0xde>
 800388c:	433c      	orrs	r4, r7
 800388e:	d056      	beq.n	800393e <ceil+0xe6>
 8003890:	2500      	movs	r5, #0
 8003892:	4c2f      	ldr	r4, [pc, #188]	; (8003950 <ceil+0xf8>)
 8003894:	4623      	mov	r3, r4
 8003896:	462f      	mov	r7, r5
 8003898:	e025      	b.n	80038e6 <ceil+0x8e>
 800389a:	4a2e      	ldr	r2, [pc, #184]	; (8003954 <ceil+0xfc>)
 800389c:	fa42 f806 	asr.w	r8, r2, r6
 80038a0:	ea01 0208 	and.w	r2, r1, r8
 80038a4:	4302      	orrs	r2, r0
 80038a6:	d01e      	beq.n	80038e6 <ceil+0x8e>
 80038a8:	a327      	add	r3, pc, #156	; (adr r3, 8003948 <ceil+0xf0>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f7fc fc55 	bl	800015c <__adddf3>
 80038b2:	2200      	movs	r2, #0
 80038b4:	2300      	movs	r3, #0
 80038b6:	f7fc fe85 	bl	80005c4 <__aeabi_dcmpgt>
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d0ea      	beq.n	8003894 <ceil+0x3c>
 80038be:	2c00      	cmp	r4, #0
 80038c0:	bfc2      	ittt	gt
 80038c2:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80038c6:	4133      	asrgt	r3, r6
 80038c8:	18e4      	addgt	r4, r4, r3
 80038ca:	2500      	movs	r5, #0
 80038cc:	ea24 0408 	bic.w	r4, r4, r8
 80038d0:	e7e0      	b.n	8003894 <ceil+0x3c>
 80038d2:	2e33      	cmp	r6, #51	; 0x33
 80038d4:	dd0b      	ble.n	80038ee <ceil+0x96>
 80038d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80038da:	d104      	bne.n	80038e6 <ceil+0x8e>
 80038dc:	4602      	mov	r2, r0
 80038de:	f7fc fc3d 	bl	800015c <__adddf3>
 80038e2:	4607      	mov	r7, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4638      	mov	r0, r7
 80038e8:	4619      	mov	r1, r3
 80038ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ee:	f04f 38ff 	mov.w	r8, #4294967295
 80038f2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80038f6:	fa28 f802 	lsr.w	r8, r8, r2
 80038fa:	ea10 0f08 	tst.w	r0, r8
 80038fe:	d0f2      	beq.n	80038e6 <ceil+0x8e>
 8003900:	a311      	add	r3, pc, #68	; (adr r3, 8003948 <ceil+0xf0>)
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f7fc fc29 	bl	800015c <__adddf3>
 800390a:	2200      	movs	r2, #0
 800390c:	2300      	movs	r3, #0
 800390e:	f7fc fe59 	bl	80005c4 <__aeabi_dcmpgt>
 8003912:	2800      	cmp	r0, #0
 8003914:	d0be      	beq.n	8003894 <ceil+0x3c>
 8003916:	2c00      	cmp	r4, #0
 8003918:	dd0a      	ble.n	8003930 <ceil+0xd8>
 800391a:	2e14      	cmp	r6, #20
 800391c:	d101      	bne.n	8003922 <ceil+0xca>
 800391e:	3401      	adds	r4, #1
 8003920:	e006      	b.n	8003930 <ceil+0xd8>
 8003922:	2301      	movs	r3, #1
 8003924:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003928:	40b3      	lsls	r3, r6
 800392a:	441d      	add	r5, r3
 800392c:	42af      	cmp	r7, r5
 800392e:	d8f6      	bhi.n	800391e <ceil+0xc6>
 8003930:	ea25 0508 	bic.w	r5, r5, r8
 8003934:	e7ae      	b.n	8003894 <ceil+0x3c>
 8003936:	2500      	movs	r5, #0
 8003938:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800393c:	e7aa      	b.n	8003894 <ceil+0x3c>
 800393e:	4625      	mov	r5, r4
 8003940:	e7a8      	b.n	8003894 <ceil+0x3c>
 8003942:	bf00      	nop
 8003944:	f3af 8000 	nop.w
 8003948:	8800759c 	.word	0x8800759c
 800394c:	7e37e43c 	.word	0x7e37e43c
 8003950:	3ff00000 	.word	0x3ff00000
 8003954:	000fffff 	.word	0x000fffff

08003958 <_init>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	bf00      	nop
 800395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395e:	bc08      	pop	{r3}
 8003960:	469e      	mov	lr, r3
 8003962:	4770      	bx	lr

08003964 <_fini>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	bf00      	nop
 8003968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396a:	bc08      	pop	{r3}
 800396c:	469e      	mov	lr, r3
 800396e:	4770      	bx	lr
