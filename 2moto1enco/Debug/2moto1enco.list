
2moto1enco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ee0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08009ff0  08009ff0  00019ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a444  0800a444  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a444  0800a444  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a444  0800a444  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a444  0800a444  0001a444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a44c  0800a44c  0001a44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001320  200001dc  0800a62c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014fc  0800a62c  000214fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a080  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a5b  00000000  00000000  0003a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f8  00000000  00000000  0003dd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103a  00000000  00000000  0003f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dcb3  00000000  00000000  0004025a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018616  00000000  00000000  0005df0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cb62  00000000  00000000  00076523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069cc  00000000  00000000  00113088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00119a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08009fd8 	.word	0x08009fd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08009fd8 	.word	0x08009fd8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8001120:	787a      	ldrb	r2, [r7, #1]
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	4619      	mov	r1, r3
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f002 f8c8 	bl	80032bc <HAL_GPIO_WritePin>

}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af02      	add	r7, sp, #8
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	461a      	mov	r2, r3
 8001140:	460b      	mov	r3, r1
 8001142:	72fb      	strb	r3, [r7, #11]
 8001144:	4613      	mov	r3, r2
 8001146:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 8001148:	893b      	ldrh	r3, [r7, #8]
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffde 	bl	8001110 <setCSLine>
	delay(docDelay);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f923 	bl	80013a0 <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 800115a:	f107 0217 	add.w	r2, r7, #23
 800115e:	f107 010b 	add.w	r1, r7, #11
 8001162:	230a      	movs	r3, #10
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f002 fdc3 	bl	8003cf4 <HAL_SPI_TransmitReceive>
	delay(docDelay);
 800116e:	2003      	movs	r0, #3
 8001170:	f000 f916 	bl	80013a0 <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 8001174:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001178:	893b      	ldrh	r3, [r7, #8]
 800117a:	4619      	mov	r1, r3
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffc7 	bl	8001110 <setCSLine>
	return data;
 8001182:	7dfb      	ldrb	r3, [r7, #23]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af02      	add	r7, sp, #8
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	460b      	mov	r3, r1
 800119c:	80fb      	strh	r3, [r7, #6]
 800119e:	4613      	mov	r3, r2
 80011a0:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 80011a2:	f000 f90f 	bl	80013c4 <DWT_Delay_Init>

	uint16_t currentPosition = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	2200      	movs	r2, #0
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	2100      	movs	r1, #0
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f7ff ffbd 	bl	8001134 <spiWriteRead>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b29b      	uxth	r3, r3
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	84fb      	strh	r3, [r7, #38]	; 0x26
	delay(docDelay);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 f8ec 	bl	80013a0 <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	2201      	movs	r2, #1
 80011cc:	9200      	str	r2, [sp, #0]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	2100      	movs	r1, #0
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff ffae 	bl	8001134 <spiWriteRead>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011de:	4313      	orrs	r3, r2
 80011e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 0; i < 16; i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
 80011e6:	e010      	b.n	800120a <getPositionSPI+0x7e>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 80011e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	fa42 f303 	asr.w	r3, r2, r3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	b2d9      	uxtb	r1, r3
 80011f8:	f107 0210 	add.w	r2, r7, #16
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	4413      	add	r3, r2
 8001200:	460a      	mov	r2, r1
 8001202:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	3301      	adds	r3, #1
 8001208:	623b      	str	r3, [r7, #32]
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	ddeb      	ble.n	80011e8 <getPositionSPI+0x5c>
	if ((binaryArray[15]
 8001210:	7ffb      	ldrb	r3, [r7, #31]
 8001212:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001214:	7f7a      	ldrb	r2, [r7, #29]
 8001216:	7efb      	ldrb	r3, [r7, #27]
 8001218:	4053      	eors	r3, r2
 800121a:	b2da      	uxtb	r2, r3
 800121c:	7e7b      	ldrb	r3, [r7, #25]
 800121e:	4053      	eors	r3, r2
 8001220:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001222:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001224:	4053      	eors	r3, r2
 8001226:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001228:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800122a:	4053      	eors	r3, r2
 800122c:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 800122e:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001230:	4053      	eors	r3, r2
 8001232:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 8001234:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001236:	429a      	cmp	r2, r3
 8001238:	bf0c      	ite	eq
 800123a:	2301      	moveq	r3, #1
 800123c:	2300      	movne	r3, #0
 800123e:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 8001240:	4299      	cmp	r1, r3
 8001242:	d11e      	bne.n	8001282 <getPositionSPI+0xf6>
			&& (binaryArray[14]
 8001244:	7fbb      	ldrb	r3, [r7, #30]
 8001246:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8001248:	7f3a      	ldrb	r2, [r7, #28]
 800124a:	7ebb      	ldrb	r3, [r7, #26]
 800124c:	4053      	eors	r3, r2
 800124e:	b2da      	uxtb	r2, r3
 8001250:	7e3b      	ldrb	r3, [r7, #24]
 8001252:	4053      	eors	r3, r2
 8001254:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8001256:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8001258:	4053      	eors	r3, r2
 800125a:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 800125c:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 800125e:	4053      	eors	r3, r2
 8001260:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8001262:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8001264:	4053      	eors	r3, r2
 8001266:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 8001268:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 800126a:	429a      	cmp	r2, r3
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 8001274:	4299      	cmp	r1, r3
 8001276:	d104      	bne.n	8001282 <getPositionSPI+0xf6>
		currentPosition &= 0x3FFF;
 8001278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800127a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800127e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001280:	e002      	b.n	8001288 <getPositionSPI+0xfc>
	} else {
		currentPosition = 0xFFFF; //bad position
 8001282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001286:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 8001288:	797b      	ldrb	r3, [r7, #5]
 800128a:	2b0c      	cmp	r3, #12
 800128c:	d107      	bne.n	800129e <getPositionSPI+0x112>
 800128e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001294:	4293      	cmp	r3, r2
 8001296:	d002      	beq.n	800129e <getPositionSPI+0x112>
		currentPosition = currentPosition >> 2;
 8001298:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 800129e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <setZeroSPI>:

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	4613      	mov	r3, r2
 80012b4:	80fb      	strh	r3, [r7, #6]

	spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0);
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	2200      	movs	r2, #0
 80012ba:	9200      	str	r2, [sp, #0]
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	2100      	movs	r1, #0
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff ff37 	bl	8001134 <spiWriteRead>
	delay( docDelay);
 80012c6:	2003      	movs	r0, #3
 80012c8:	f000 f86a 	bl	80013a0 <delay>
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	2201      	movs	r2, #1
 80012d0:	9200      	str	r2, [sp, #0]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	2170      	movs	r1, #112	; 0x70
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff ff2c 	bl	8001134 <spiWriteRead>
	delay( docDelayLong + docDelayLong);
 80012dc:	2064      	movs	r0, #100	; 0x64
 80012de:	f000 f85f 	bl	80013a0 <delay>

}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <calculateAngle>:

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	80fb      	strh	r3, [r7, #6]
 80012f8:	4613      	mov	r3, r2
 80012fa:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
	if (bitDepth == 12) {
 8001302:	797b      	ldrb	r3, [r7, #5]
 8001304:	2b0c      	cmp	r3, #12
 8001306:	d11e      	bne.n	8001346 <calculateAngle+0x5a>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_12_BIT;
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fcc2 	bl	8000c94 <__aeabi_ui2f>
 8001310:	4603      	mov	r3, r0
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f888 	bl	8000428 <__aeabi_f2d>
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <calculateAngle+0xa8>)
 800131e:	f7ff f8db 	bl	80004d8 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <calculateAngle+0xac>)
 8001330:	f7ff f9fc 	bl	800072c <__aeabi_ddiv>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fba4 	bl	8000a88 <__aeabi_d2f>
 8001340:	4603      	mov	r3, r0
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	e020      	b.n	8001388 <calculateAngle+0x9c>
	} else if (bitDepth == 14) {
 8001346:	797b      	ldrb	r3, [r7, #5]
 8001348:	2b0e      	cmp	r3, #14
 800134a:	d11d      	bne.n	8001388 <calculateAngle+0x9c>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_14_BIT;
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fca0 	bl	8000c94 <__aeabi_ui2f>
 8001354:	4603      	mov	r3, r0
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f866 	bl	8000428 <__aeabi_f2d>
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <calculateAngle+0xa8>)
 8001362:	f7ff f8b9 	bl	80004d8 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <calculateAngle+0xb0>)
 8001374:	f7ff f9da 	bl	800072c <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff fb82 	bl	8000a88 <__aeabi_d2f>
 8001384:	4603      	mov	r3, r0
 8001386:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	//angle = roundf(angle * 100.0) / 100.0;
	return angle;
 8001388:	68fb      	ldr	r3, [r7, #12]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40768000 	.word	0x40768000
 8001398:	40b00000 	.word	0x40b00000
 800139c:	40d00000 	.word	0x40d00000

080013a0 <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

	DWT_Delay_ms(delayTime);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f83b 	bl	8001424 <DWT_Delay_ms>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <startDWT>:

int startDWT(){
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0

	 DWT_Delay_Init();
 80013ba:	f000 f803 	bl	80013c4 <DWT_Delay_Init>

}
 80013be:	bf00      	nop
 80013c0:	4618      	mov	r0, r3
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <DWT_Delay_Init>:
 */

#include "DWT_Delay.h"

uint32_t DWT_Delay_Init()
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <DWT_Delay_Init+0x58>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4a13      	ldr	r2, [pc, #76]	; (800141c <DWT_Delay_Init+0x58>)
 80013ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013d2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <DWT_Delay_Init+0x58>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	4a10      	ldr	r2, [pc, #64]	; (800141c <DWT_Delay_Init+0x58>)
 80013da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013de:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <DWT_Delay_Init+0x5c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <DWT_Delay_Init+0x5c>)
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <DWT_Delay_Init+0x5c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <DWT_Delay_Init+0x5c>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <DWT_Delay_Init+0x5c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80013fe:	bf00      	nop
    __ASM volatile ("NOP");
 8001400:	bf00      	nop
    __ASM volatile ("NOP");
 8001402:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <DWT_Delay_Init+0x5c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800140c:	2300      	movs	r3, #0
 800140e:	e000      	b.n	8001412 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001410:	2301      	movs	r3, #1
    }
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000edf0 	.word	0xe000edf0
 8001420:	e0001000 	.word	0xe0001000

08001424 <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <DWT_Delay_ms+0x44>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8001432:	f002 fb41 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8001436:	4603      	mov	r3, r0
 8001438:	4a0c      	ldr	r2, [pc, #48]	; (800146c <DWT_Delay_ms+0x48>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	099b      	lsrs	r3, r3, #6
 8001440:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 800144c:	bf00      	nop
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <DWT_Delay_ms+0x44>)
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad2      	subs	r2, r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	d3f8      	bcc.n	800144e <DWT_Delay_ms+0x2a>
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e0001000 	.word	0xe0001000
 800146c:	10624dd3 	.word	0x10624dd3

08001470 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f005 fef5 	bl	8007280 <ceilf>
 8001496:	4603      	mov	r3, r0
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_ZN7RoboArmC1Ehh>:
#include "RoboArm.h"

RoboArm::RoboArm(uint8_t defaultAngleT, uint8_t defaultDistanseT) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
 80014ac:	4613      	mov	r3, r2
 80014ae:	70bb      	strb	r3, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <_ZN7RoboArmC1Ehh+0x80>)
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	220e      	movs	r2, #14
 80014ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	669a      	str	r2, [r3, #104]	; 0x68
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	defaultAngle = defaultAngleT;
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	b29a      	uxth	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	defaultDistanse = defaultDistanseT;
 8001508:	78bb      	ldrb	r3, [r7, #2]
 800150a:	b29a      	uxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	startDWT();
 8001512:	f7ff ff50 	bl	80013b6 <startDWT>
}
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	42200000 	.word	0x42200000
 8001524:	00000000 	.word	0x00000000

08001528 <_ZN7RoboArm15Move2MotorsSimuEft>:

	return 0;

}

int RoboArm::Move2MotorsSimu(float angle, uint16_t distance) {
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b08d      	sub	sp, #52	; 0x34
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	80fb      	strh	r3, [r7, #6]

	// TIM1 Х  enc1 -  угол 360  -  8 оборотов движка на 1 оборот энкодера
	// TIM2  Y  enc2 - линейный -  6,4516129 оборотов движка (это целое линейное перемещение с запасом) на 1 оборот энкодера

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_3);      //остановили PWM таймера
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2108      	movs	r1, #8
 800153c:	4618      	mov	r0, r3
 800153e:	f003 f8f5 	bl	800472c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_3);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2108      	movs	r1, #8
 8001548:	4618      	mov	r0, r3
 800154a:	f003 f8ef 	bl	800472c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);				// остановили прерывание таймеров
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4618      	mov	r0, r3
 8001554:	f002 ffca 	bl	80044ec <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4618      	mov	r0, r3
 800155e:	f002 ffc5 	bl	80044ec <HAL_TIM_Base_Stop_IT>

	SetEnable(1, false);
 8001562:	2200      	movs	r2, #0
 8001564:	2101      	movs	r1, #1
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 fa8c 	bl	8001a84 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 800156c:	2200      	movs	r2, #0
 800156e:	2102      	movs	r1, #2
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 fa87 	bl	8001a84 <_ZN7RoboArm9SetEnableEtb>
	/* выставили в каку сторону ехать мотору*/

	if (lastPosAngle < angle) {
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800157a:	4619      	mov	r1, r3
 800157c:	68b8      	ldr	r0, [r7, #8]
 800157e:	f7ff fd9d 	bl	80010bc <__aeabi_fcmpgt>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <_ZN7RoboArm15Move2MotorsSimuEft+0x72>
		HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	68d8      	ldr	r0, [r3, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8a1b      	ldrh	r3, [r3, #16]
 8001590:	2201      	movs	r2, #1
 8001592:	4619      	mov	r1, r3
 8001594:	f001 fe92 	bl	80032bc <HAL_GPIO_WritePin>
 8001598:	e010      	b.n	80015bc <_ZN7RoboArm15Move2MotorsSimuEft+0x94>
	} else if (lastPosAngle > angle) {
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800159e:	4619      	mov	r1, r3
 80015a0:	68b8      	ldr	r0, [r7, #8]
 80015a2:	f7ff fd6d 	bl	8001080 <__aeabi_fcmplt>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d007      	beq.n	80015bc <_ZN7RoboArm15Move2MotorsSimuEft+0x94>
		HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	68d8      	ldr	r0, [r3, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8a1b      	ldrh	r3, [r3, #16]
 80015b4:	2200      	movs	r2, #0
 80015b6:	4619      	mov	r1, r3
 80015b8:	f001 fe80 	bl	80032bc <HAL_GPIO_WritePin>
	}
	if (lastPosLinear < distance) {
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80015c2:	88fa      	ldrh	r2, [r7, #6]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d908      	bls.n	80015da <_ZN7RoboArm15Move2MotorsSimuEft+0xb2>
		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6958      	ldr	r0, [r3, #20]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8b1b      	ldrh	r3, [r3, #24]
 80015d0:	2201      	movs	r2, #1
 80015d2:	4619      	mov	r1, r3
 80015d4:	f001 fe72 	bl	80032bc <HAL_GPIO_WritePin>
 80015d8:	e00d      	b.n	80015f6 <_ZN7RoboArm15Move2MotorsSimuEft+0xce>
	} else if (lastPosLinear > distance) {
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80015e0:	88fa      	ldrh	r2, [r7, #6]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d207      	bcs.n	80015f6 <_ZN7RoboArm15Move2MotorsSimuEft+0xce>
		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6958      	ldr	r0, [r3, #20]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8b1b      	ldrh	r3, [r3, #24]
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	f001 fe63 	bl	80032bc <HAL_GPIO_WritePin>
	}

	float actualPosAngle = abs(lastPosAngle - angle);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fa97 	bl	8000b30 <__aeabi_fsub>
 8001602:	4603      	mov	r3, r0
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff33 	bl	8001470 <_ZSt3absf>
 800160a:	62f8      	str	r0, [r7, #44]	; 0x2c
	float actualPosDistance = abs(lastPosLinear - distance);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001612:	461a      	mov	r2, r3
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	bfb8      	it	lt
 800161c:	425b      	neglt	r3, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fb3c 	bl	8000c9c <__aeabi_i2f>
 8001624:	4603      	mov	r3, r0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28

	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 8001628:	4991      	ldr	r1, [pc, #580]	; (8001870 <_ZN7RoboArm15Move2MotorsSimuEft+0x348>)
 800162a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800162c:	f7ff fb8a 	bl	8000d44 <__aeabi_fmul>
 8001630:	4603      	mov	r3, r0
 8001632:	4990      	ldr	r1, [pc, #576]	; (8001874 <_ZN7RoboArm15Move2MotorsSimuEft+0x34c>)
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fc39 	bl	8000eac <__aeabi_fdiv>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	631a      	str	r2, [r3, #48]	; 0x30
	distPsteps = actualPosDistance * linearStepsMil; //steps to distanse
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fb7b 	bl	8000d44 <__aeabi_fmul>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c

	float distPangle = ((distPsteps / (motorStep * drvMicroSteps)) * 360
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	4987      	ldr	r1, [pc, #540]	; (8001878 <_ZN7RoboArm15Move2MotorsSimuEft+0x350>)
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fc25 	bl	8000eac <__aeabi_fdiv>
 8001662:	4603      	mov	r3, r0
 8001664:	4983      	ldr	r1, [pc, #524]	; (8001874 <_ZN7RoboArm15Move2MotorsSimuEft+0x34c>)
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fb6c 	bl	8000d44 <__aeabi_fmul>
 800166c:	4603      	mov	r3, r0
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe feda 	bl	8000428 <__aeabi_f2d>
			/ 6.45);
 8001674:	a37c      	add	r3, pc, #496	; (adr r3, 8001868 <_ZN7RoboArm15Move2MotorsSimuEft+0x340>)
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	f7ff f857 	bl	800072c <__aeabi_ddiv>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
	float distPangle = ((distPsteps / (motorStep * drvMicroSteps)) * 360
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff f9ff 	bl	8000a88 <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24

	lastPosAngle = angle;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	669a      	str	r2, [r3, #104]	; 0x68
	lastPosLinear = distance;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	88fa      	ldrh	r2, [r7, #6]
 8001698:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

// 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера

	float periodM1 = 1200;
 800169c:	4b77      	ldr	r3, [pc, #476]	; (800187c <_ZN7RoboArm15Move2MotorsSimuEft+0x354>)
 800169e:	623b      	str	r3, [r7, #32]
	uint32_t psc = 72-1;
 80016a0:	2347      	movs	r3, #71	; 0x47
 80016a2:	61fb      	str	r3, [r7, #28]

	float delimiter=1;
 80016a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016a8:	61bb      	str	r3, [r7, #24]
	float mnoj=1;
 80016aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016ae:	617b      	str	r3, [r7, #20]

	if (anglePsteps > distPsteps) {
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	4619      	mov	r1, r3
 80016ba:	4610      	mov	r0, r2
 80016bc:	f7ff fcfe 	bl	80010bc <__aeabi_fcmpgt>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d04b      	beq.n	800175e <_ZN7RoboArm15Move2MotorsSimuEft+0x236>

		htim1M1->Instance->PSC = psc;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	681c      	ldr	r4, [r3, #0]
 80016d6:	6a38      	ldr	r0, [r7, #32]
 80016d8:	f7ff fcfa 	bl	80010d0 <__aeabi_f2uiz>
 80016dc:	4603      	mov	r3, r0
 80016de:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR3 = periodM1/2;
 80016e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016e4:	6a38      	ldr	r0, [r7, #32]
 80016e6:	f7ff fbe1 	bl	8000eac <__aeabi_fdiv>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	681c      	ldr	r4, [r3, #0]
 80016f4:	4610      	mov	r0, r2
 80016f6:	f7ff fceb 	bl	80010d0 <__aeabi_f2uiz>
 80016fa:	4603      	mov	r3, r0
 80016fc:	63e3      	str	r3, [r4, #60]	; 0x3c

		delimiter = anglePsteps / distPsteps;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	4619      	mov	r1, r3
 8001708:	4610      	mov	r0, r2
 800170a:	f7ff fbcf 	bl	8000eac <__aeabi_fdiv>
 800170e:	4603      	mov	r3, r0
 8001710:	61bb      	str	r3, [r7, #24]
		mnoj = ceil(periodM1 * delimiter);
 8001712:	69b9      	ldr	r1, [r7, #24]
 8001714:	6a38      	ldr	r0, [r7, #32]
 8001716:	f7ff fb15 	bl	8000d44 <__aeabi_fmul>
 800171a:	4603      	mov	r3, r0
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff feb3 	bl	8001488 <_ZSt4ceilf>
 8001722:	6178      	str	r0, [r7, #20]

		htim2M2->Instance->PSC = psc;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	681c      	ldr	r4, [r3, #0]
 8001734:	6978      	ldr	r0, [r7, #20]
 8001736:	f7ff fccb 	bl	80010d0 <__aeabi_f2uiz>
 800173a:	4603      	mov	r3, r0
 800173c:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR3 = mnoj / 2;
 800173e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	f7ff fbb2 	bl	8000eac <__aeabi_fdiv>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	681c      	ldr	r4, [r3, #0]
 8001752:	4610      	mov	r0, r2
 8001754:	f7ff fcbc 	bl	80010d0 <__aeabi_f2uiz>
 8001758:	4603      	mov	r3, r0
 800175a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800175c:	e055      	b.n	800180a <_ZN7RoboArm15Move2MotorsSimuEft+0x2e2>

	} else if (anglePsteps < distPsteps) {
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	4619      	mov	r1, r3
 8001768:	4610      	mov	r0, r2
 800176a:	f7ff fc89 	bl	8001080 <__aeabi_fcmplt>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d04a      	beq.n	800180a <_ZN7RoboArm15Move2MotorsSimuEft+0x2e2>

		htim2M2->Instance->PSC = psc;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	681c      	ldr	r4, [r3, #0]
 8001784:	6a38      	ldr	r0, [r7, #32]
 8001786:	f7ff fca3 	bl	80010d0 <__aeabi_f2uiz>
 800178a:	4603      	mov	r3, r0
 800178c:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR3 = periodM1 / 2;
 800178e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001792:	6a38      	ldr	r0, [r7, #32]
 8001794:	f7ff fb8a 	bl	8000eac <__aeabi_fdiv>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	681c      	ldr	r4, [r3, #0]
 80017a2:	4610      	mov	r0, r2
 80017a4:	f7ff fc94 	bl	80010d0 <__aeabi_f2uiz>
 80017a8:	4603      	mov	r3, r0
 80017aa:	63e3      	str	r3, [r4, #60]	; 0x3c

		delimiter = distPsteps / anglePsteps;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f7ff fb78 	bl	8000eac <__aeabi_fdiv>
 80017bc:	4603      	mov	r3, r0
 80017be:	61bb      	str	r3, [r7, #24]
		mnoj = ceil(periodM1 * delimiter);
 80017c0:	69b9      	ldr	r1, [r7, #24]
 80017c2:	6a38      	ldr	r0, [r7, #32]
 80017c4:	f7ff fabe 	bl	8000d44 <__aeabi_fmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fe5c 	bl	8001488 <_ZSt4ceilf>
 80017d0:	6178      	str	r0, [r7, #20]

		htim1M1->Instance->PSC = psc;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	681c      	ldr	r4, [r3, #0]
 80017e2:	6978      	ldr	r0, [r7, #20]
 80017e4:	f7ff fc74 	bl	80010d0 <__aeabi_f2uiz>
 80017e8:	4603      	mov	r3, r0
 80017ea:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR3 = mnoj / 2;
 80017ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017f0:	6978      	ldr	r0, [r7, #20]
 80017f2:	f7ff fb5b 	bl	8000eac <__aeabi_fdiv>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	681c      	ldr	r4, [r3, #0]
 8001800:	4610      	mov	r0, r2
 8001802:	f7ff fc65 	bl	80010d0 <__aeabi_f2uiz>
 8001806:	4603      	mov	r3, r0
 8001808:	63e3      	str	r3, [r4, #60]	; 0x3c
	}

	stateMoveM1 = true;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	stateMoveM2 = true;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	SetEnable(1, true);
 800181a:	2201      	movs	r2, #1
 800181c:	2101      	movs	r1, #1
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 f930 	bl	8001a84 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 8001824:	2201      	movs	r2, #1
 8001826:	2102      	movs	r1, #2
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 f92b 	bl	8001a84 <_ZN7RoboArm9SetEnableEtb>

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_3);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2108      	movs	r1, #8
 8001834:	4618      	mov	r0, r3
 8001836:	f002 fed7 	bl	80045e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_3);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2108      	movs	r1, #8
 8001840:	4618      	mov	r0, r3
 8001842:	f002 fed1 	bl	80045e8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	f002 fdfc 	bl	8004448 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fdf7 	bl	8004448 <HAL_TIM_Base_Start_IT>

	return 0;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3734      	adds	r7, #52	; 0x34
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	f3af 8000 	nop.w
 8001868:	cccccccd 	.word	0xcccccccd
 800186c:	4019cccc 	.word	0x4019cccc
 8001870:	46480000 	.word	0x46480000
 8001874:	43b40000 	.word	0x43b40000
 8001878:	44c80000 	.word	0x44c80000
 800187c:	44960000 	.word	0x44960000

08001880 <_ZN7RoboArm13setPrintStateEb>:

int RoboArm::OpenGripper() {
	return 0;
}

int RoboArm::setPrintState(bool state) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
	if (state) {
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <_ZN7RoboArm13setPrintStateEb+0x1c>
		PrintAllState = true;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800189a:	e003      	b.n	80018a4 <_ZN7RoboArm13setPrintStateEb+0x24>
	} else {
		PrintAllState = false;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}
	return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <_ZN7RoboArm13getPrintStateEv>:

bool RoboArm::getPrintState() {
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	if (PrintAllState) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <_ZN7RoboArm13getPrintStateEv+0x16>
		return true;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <_ZN7RoboArm13getPrintStateEv+0x18>
	} else {
		return false;
 80018c6:	2300      	movs	r3, #0
	}
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>:
}

int RoboArm::SetSettEncoders(SPI_HandleTypeDef &arm_hspi1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc1T, uint16_t CS_Pin_Enc1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc2T, uint16_t CS_Pin_Enc2T,
		uint8_t ResolutionEncodersT) {
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	807b      	strh	r3, [r7, #2]

	arm_hspi1 = &arm_hspi1T;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	639a      	str	r2, [r3, #56]	; 0x38
	CS_GPIO_Port_Enc1 = CS_GPIO_Port_Enc1T;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
	CS_Pin_Enc1 = CS_Pin_Enc1T;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	879a      	strh	r2, [r3, #60]	; 0x3c
	CS_Pin_Enc2 = CS_Pin_Enc2T;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8bba      	ldrh	r2, [r7, #28]
 80018f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	CS_GPIO_Port_Enc2 = CS_GPIO_Port_Enc2T;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	649a      	str	r2, [r3, #72]	; 0x48
	ResolutionEncoders = ResolutionEncodersT;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return 0;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <_ZN7RoboArm16GetAngleEncodersEm>:

float RoboArm::GetAngleEncoders(uint32_t encoderValue) {
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
	//	https://www.cuidevices.com/product/resource/amt22.pdf
	return calculateAngle(encoderValue, ResolutionEncoders);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b29a      	uxth	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f7ff fcdd 	bl	80012ec <calculateAngle>
 8001932:	4603      	mov	r3, r0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_ZN7RoboArm14GetPosEncodersEh>:

uint32_t RoboArm::GetPosEncoders(uint8_t numEnc) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
	switch (numEnc) {
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d002      	beq.n	8001954 <_ZN7RoboArm14GetPosEncodersEh+0x18>
 800194e:	2b02      	cmp	r3, #2
 8001950:	d012      	beq.n	8001978 <_ZN7RoboArm14GetPosEncodersEh+0x3c>
 8001952:	e024      	b.n	800199e <_ZN7RoboArm14GetPosEncodersEh+0x62>
	case 1:
		posNowEnc1 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001966:	f7ff fc11 	bl	800118c <getPositionSPI>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	64da      	str	r2, [r3, #76]	; 0x4c
				ResolutionEncoders);
		return posNowEnc1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	e013      	b.n	80019a0 <_ZN7RoboArm14GetPosEncodersEh+0x64>
		break;
	case 2:
		posNowEnc2 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800198c:	f7ff fbfe 	bl	800118c <getPositionSPI>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	651a      	str	r2, [r3, #80]	; 0x50
				ResolutionEncoders);
		return posNowEnc2;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199c:	e000      	b.n	80019a0 <_ZN7RoboArm14GetPosEncodersEh+0x64>
		break;
	default:
		return 1;
 800199e:	2301      	movs	r3, #1
		break;
	}
	return 0;
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_ZN7RoboArm15SetZeroEncodersEv>:

int RoboArm::SetZeroEncoders() {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

	HAL_Delay(300);
 80019b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019b4:	f001 f948 	bl	8002c48 <HAL_Delay>
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019ca:	f7ff fbdf 	bl	800118c <getPositionSPI>
			ResolutionEncoders);
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019e2:	f7ff fbd3 	bl	800118c <getPositionSPI>
			ResolutionEncoders);
	//	resetAMT22();
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80019f2:	461a      	mov	r2, r3
 80019f4:	f7ff fc58 	bl	80012a8 <setZeroSPI>
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a06:	461a      	mov	r2, r3
 8001a08:	f7ff fc4e 	bl	80012a8 <setZeroSPI>
	HAL_Delay(250);
 8001a0c:	20fa      	movs	r0, #250	; 0xfa
 8001a0e:	f001 f91b 	bl	8002c48 <HAL_Delay>
	return 0;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_ZN7RoboArm13SetSettMotorsER17TIM_HandleTypeDefS1_P12GPIO_TypeDeftS3_tS3_tS3_t>:

int RoboArm::SetSettMotors(TIM_HandleTypeDef &htim1, TIM_HandleTypeDef &htim2,
		GPIO_TypeDef *Dir1_GPIO_Port_M1T, uint16_t Dir1_Pin_M1T,
		GPIO_TypeDef *Dir2_GPIO_Port_M2T, uint16_t Dir2_Pin_M2T,
		GPIO_TypeDef *EN1_GPIO_Port_M1T, uint16_t EN1_Pin_M1T,
		GPIO_TypeDef *EN2_GPIO_Port_M2T, uint16_t EN2_Pin_M2T) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
	htim1M1 = &htim1;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	605a      	str	r2, [r3, #4]
	htim2M2 = &htim2;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	609a      	str	r2, [r3, #8]

	Dir1_GPIO_Port_M1 = Dir1_GPIO_Port_M1T;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	60da      	str	r2, [r3, #12]
	Dir1_Pin_M1 = Dir1_Pin_M1T;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8b3a      	ldrh	r2, [r7, #24]
 8001a40:	821a      	strh	r2, [r3, #16]
	Dir2_GPIO_Port_M2 = Dir2_GPIO_Port_M2T;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	615a      	str	r2, [r3, #20]
	Dir2_Pin_M2 = Dir2_Pin_M2T;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8c3a      	ldrh	r2, [r7, #32]
 8001a4c:	831a      	strh	r2, [r3, #24]
	EN1_GPIO_Port_M1 = EN1_GPIO_Port_M1T;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a52:	61da      	str	r2, [r3, #28]
	EN1_Pin_M1 = EN1_Pin_M1T;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a58:	841a      	strh	r2, [r3, #32]
	EN2_GPIO_Port_M2 = EN2_GPIO_Port_M2T;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
	EN2_Pin_M2 = EN2_Pin_M2T;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28

	SetEnable(1, false);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2101      	movs	r1, #1
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f80a 	bl	8001a84 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2102      	movs	r1, #2
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 f805 	bl	8001a84 <_ZN7RoboArm9SetEnableEtb>

	return 0;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_ZN7RoboArm9SetEnableEtb>:

int RoboArm::SetEnable(uint16_t numMotor, bool state) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]

	GPIO_PinState pinSet;

	if (state) {
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <_ZN7RoboArm9SetEnableEtb+0x1c>
		pinSet = GPIO_PIN_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
 8001a9e:	e001      	b.n	8001aa4 <_ZN7RoboArm9SetEnableEtb+0x20>
	} else {
		pinSet = GPIO_PIN_SET;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
	}

	if (numMotor == 1) {
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d108      	bne.n	8001abc <_ZN7RoboArm9SetEnableEtb+0x38>
		HAL_GPIO_WritePin(EN1_GPIO_Port_M1, EN1_Pin_M1, pinSet);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69d8      	ldr	r0, [r3, #28]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	8c1b      	ldrh	r3, [r3, #32]
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f001 fc01 	bl	80032bc <HAL_GPIO_WritePin>
 8001aba:	e00a      	b.n	8001ad2 <_ZN7RoboArm9SetEnableEtb+0x4e>
	} else if (numMotor == 2) {
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d107      	bne.n	8001ad2 <_ZN7RoboArm9SetEnableEtb+0x4e>
		HAL_GPIO_WritePin(EN2_GPIO_Port_M2, EN2_Pin_M2, pinSet);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	4619      	mov	r1, r3
 8001ace:	f001 fbf5 	bl	80032bc <HAL_GPIO_WritePin>
	} else {

	}
}
 8001ad2:	bf00      	nop
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <vApplicationGetIdleTaskMemory+0x28>)
 8001aec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <vApplicationGetIdleTaskMemory+0x2c>)
 8001af2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	200001f8 	.word	0x200001f8
 8001b08:	2000024c 	.word	0x2000024c

08001b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b0c:	b5b0      	push	{r4, r5, r7, lr}
 8001b0e:	b09e      	sub	sp, #120	; 0x78
 8001b10:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b12:	f001 f867 	bl	8002be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b16:	f000 f887 	bl	8001c28 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1a:	f000 fa41 	bl	8001fa0 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8001b1e:	f000 f911 	bl	8001d44 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8001b22:	f000 f9a7 	bl	8001e74 <_ZL12MX_TIM2_Initv>
  MX_SPI1_Init();
 8001b26:	f000 f8d1 	bl	8001ccc <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8001b2a:	f000 fa0b 	bl	8001f44 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Init(&htim1);
 8001b2e:	4832      	ldr	r0, [pc, #200]	; (8001bf8 <main+0xec>)
 8001b30:	f002 fc32 	bl	8004398 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 8001b34:	4831      	ldr	r0, [pc, #196]	; (8001bfc <main+0xf0>)
 8001b36:	f002 fc2f 	bl	8004398 <HAL_TIM_Base_Init>

	arm.SetSettMotors(htim1, htim2, Dir_GPIO_Port, Dir_Pin, Dir2_GPIO_Port,
 8001b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b3e:	9306      	str	r3, [sp, #24]
 8001b40:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <main+0xf4>)
 8001b42:	9305      	str	r3, [sp, #20]
 8001b44:	2320      	movs	r3, #32
 8001b46:	9304      	str	r3, [sp, #16]
 8001b48:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <main+0xf4>)
 8001b4a:	9303      	str	r3, [sp, #12]
 8001b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b50:	9302      	str	r3, [sp, #8]
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <main+0xf8>)
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	2340      	movs	r3, #64	; 0x40
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <main+0xf4>)
 8001b5c:	4a27      	ldr	r2, [pc, #156]	; (8001bfc <main+0xf0>)
 8001b5e:	4926      	ldr	r1, [pc, #152]	; (8001bf8 <main+0xec>)
 8001b60:	4829      	ldr	r0, [pc, #164]	; (8001c08 <main+0xfc>)
 8001b62:	f7ff ff5b 	bl	8001a1c <_ZN7RoboArm13SetSettMotorsER17TIM_HandleTypeDefS1_P12GPIO_TypeDeftS3_tS3_tS3_t>
			Dir2_Pin, En_GPIO_Port, En_Pin, En2_GPIO_Port, En2_Pin);
	arm.SetSettEncoders(hspi1, CS_GPIO_Port, CS_Pin, CS2_GPIO_Port, CS2_Pin,
 8001b66:	230e      	movs	r3, #14
 8001b68:	9302      	str	r3, [sp, #8]
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <main+0xf8>)
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2301      	movs	r3, #1
 8001b74:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <main+0xf8>)
 8001b76:	4925      	ldr	r1, [pc, #148]	; (8001c0c <main+0x100>)
 8001b78:	4823      	ldr	r0, [pc, #140]	; (8001c08 <main+0xfc>)
 8001b7a:	f7ff feaa 	bl	80018d2 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>
			14);
	arm.SetZeroEncoders();
 8001b7e:	4822      	ldr	r0, [pc, #136]	; (8001c08 <main+0xfc>)
 8001b80:	f7ff ff12 	bl	80019a8 <_ZN7RoboArm15SetZeroEncodersEv>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001b84:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <main+0x104>)
 8001b86:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001b8a:	461d      	mov	r5, r3
 8001b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f004 f9b0 	bl	8005f04 <osThreadCreate>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <main+0x108>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myAMT22Task */
  osThreadDef(myAMT22Task, StartAMT22Data, osPriorityIdle, 0, 128);
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <main+0x10c>)
 8001bac:	f107 0420 	add.w	r4, r7, #32
 8001bb0:	461d      	mov	r5, r3
 8001bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myAMT22TaskHandle = osThreadCreate(osThread(myAMT22Task), NULL);
 8001bbe:	f107 0320 	add.w	r3, r7, #32
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f004 f99d 	bl	8005f04 <osThreadCreate>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <main+0x110>)
 8001bce:	6013      	str	r3, [r2, #0]

  /* definition and creation of myUARTTask */
  osThreadDef(myUARTTask, StartUARTData, osPriorityIdle, 0, 128);
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <main+0x114>)
 8001bd2:	1d3c      	adds	r4, r7, #4
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myUARTTaskHandle = osThreadCreate(osThread(myUARTTask), NULL);
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 f98c 	bl	8005f04 <osThreadCreate>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <main+0x118>)
 8001bf0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001bf2:	f004 f980 	bl	8005ef6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8001bf6:	e7fe      	b.n	8001bf6 <main+0xea>
 8001bf8:	200004a4 	.word	0x200004a4
 8001bfc:	200004ec 	.word	0x200004ec
 8001c00:	40010800 	.word	0x40010800
 8001c04:	40010c00 	.word	0x40010c00
 8001c08:	200005a4 	.word	0x200005a4
 8001c0c:	2000044c 	.word	0x2000044c
 8001c10:	08009ffc 	.word	0x08009ffc
 8001c14:	2000057c 	.word	0x2000057c
 8001c18:	0800a024 	.word	0x0800a024
 8001c1c:	20000580 	.word	0x20000580
 8001c20:	0800a04c 	.word	0x0800a04c
 8001c24:	20000584 	.word	0x20000584

08001c28 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b090      	sub	sp, #64	; 0x40
 8001c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2e:	f107 0318 	add.w	r3, r7, #24
 8001c32:	2228      	movs	r2, #40	; 0x28
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f006 f8e5 	bl	8007e06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c66:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c6c:	f107 0318 	add.w	r3, r7, #24
 8001c70:	4618      	mov	r0, r3
 8001c72:	f001 fb55 	bl	8003320 <HAL_RCC_OscConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf14      	ite	ne
 8001c7c:	2301      	movne	r3, #1
 8001c7e:	2300      	moveq	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001c86:	f000 fc37 	bl	80024f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8a:	230f      	movs	r3, #15
 8001c8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 fdbd 	bl	8003824 <HAL_RCC_ClockConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf14      	ite	ne
 8001cb0:	2301      	movne	r3, #1
 8001cb2:	2300      	moveq	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001cba:	f000 fc1d 	bl	80024f8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001cbe:	f001 fe9b 	bl	80039f8 <HAL_RCC_EnableCSS>
}
 8001cc2:	bf00      	nop
 8001cc4:	3740      	adds	r7, #64	; 0x40
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <_ZL12MX_SPI1_Initv+0x70>)
 8001cd2:	4a1b      	ldr	r2, [pc, #108]	; (8001d40 <_ZL12MX_SPI1_Initv+0x74>)
 8001cd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <_ZL12MX_SPI1_Initv+0x70>)
 8001cd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <_ZL12MX_SPI1_Initv+0x70>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <_ZL12MX_SPI1_Initv+0x70>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <_ZL12MX_SPI1_Initv+0x70>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <_ZL12MX_SPI1_Initv+0x70>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <_ZL12MX_SPI1_Initv+0x70>)
 8001cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <_ZL12MX_SPI1_Initv+0x70>)
 8001d00:	2218      	movs	r2, #24
 8001d02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <_ZL12MX_SPI1_Initv+0x70>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <_ZL12MX_SPI1_Initv+0x70>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <_ZL12MX_SPI1_Initv+0x70>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <_ZL12MX_SPI1_Initv+0x70>)
 8001d18:	220a      	movs	r2, #10
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <_ZL12MX_SPI1_Initv+0x70>)
 8001d1e:	f001 ff65 	bl	8003bec <HAL_SPI_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001d32:	f000 fbe1 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000044c 	.word	0x2000044c
 8001d40:	40013000 	.word	0x40013000

08001d44 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b092      	sub	sp, #72	; 0x48
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
 8001d64:	615a      	str	r2, [r3, #20]
 8001d66:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f006 f849 	bl	8007e06 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d74:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <_ZL12MX_TIM1_Initv+0x128>)
 8001d76:	4a3e      	ldr	r2, [pc, #248]	; (8001e70 <_ZL12MX_TIM1_Initv+0x12c>)
 8001d78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8001d7a:	4b3c      	ldr	r3, [pc, #240]	; (8001e6c <_ZL12MX_TIM1_Initv+0x128>)
 8001d7c:	2248      	movs	r2, #72	; 0x48
 8001d7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d80:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <_ZL12MX_TIM1_Initv+0x128>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <_ZL12MX_TIM1_Initv+0x128>)
 8001d88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8e:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <_ZL12MX_TIM1_Initv+0x128>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d94:	4b35      	ldr	r3, [pc, #212]	; (8001e6c <_ZL12MX_TIM1_Initv+0x128>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <_ZL12MX_TIM1_Initv+0x128>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001da0:	4832      	ldr	r0, [pc, #200]	; (8001e6c <_ZL12MX_TIM1_Initv+0x128>)
 8001da2:	f002 fbd1 	bl	8004548 <HAL_TIM_PWM_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf14      	ite	ne
 8001dac:	2301      	movne	r3, #1
 8001dae:	2300      	moveq	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001db6:	f000 fb9f 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4828      	ldr	r0, [pc, #160]	; (8001e6c <_ZL12MX_TIM1_Initv+0x128>)
 8001dca:	f003 f90f 	bl	8004fec <HAL_TIMEx_MasterConfigSynchronization>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf14      	ite	ne
 8001dd4:	2301      	movne	r3, #1
 8001dd6:	2300      	moveq	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001dde:	f000 fb8b 	bl	80024f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de2:	2360      	movs	r3, #96	; 0x60
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dee:	2300      	movs	r3, #0
 8001df0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e02:	2208      	movs	r2, #8
 8001e04:	4619      	mov	r1, r3
 8001e06:	4819      	ldr	r0, [pc, #100]	; (8001e6c <_ZL12MX_TIM1_Initv+0x128>)
 8001e08:	f002 fdfc 	bl	8004a04 <HAL_TIM_PWM_ConfigChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bf14      	ite	ne
 8001e12:	2301      	movne	r3, #1
 8001e14:	2300      	moveq	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001e1c:	f000 fb6c 	bl	80024f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	480a      	ldr	r0, [pc, #40]	; (8001e6c <_ZL12MX_TIM1_Initv+0x128>)
 8001e44:	f003 f930 	bl	80050a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 8001e58:	f000 fb4e 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e5c:	4803      	ldr	r0, [pc, #12]	; (8001e6c <_ZL12MX_TIM1_Initv+0x128>)
 8001e5e:	f000 fc53 	bl	8002708 <HAL_TIM_MspPostInit>

}
 8001e62:	bf00      	nop
 8001e64:	3748      	adds	r7, #72	; 0x48
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200004a4 	.word	0x200004a4
 8001e70:	40012c00 	.word	0x40012c00

08001e74 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7a:	f107 0320 	add.w	r3, r7, #32
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]
 8001e92:	615a      	str	r2, [r3, #20]
 8001e94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e96:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <_ZL12MX_TIM2_Initv+0xcc>)
 8001e98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001e9e:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <_ZL12MX_TIM2_Initv+0xcc>)
 8001ea0:	2248      	movs	r2, #72	; 0x48
 8001ea2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea4:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <_ZL12MX_TIM2_Initv+0xcc>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <_ZL12MX_TIM2_Initv+0xcc>)
 8001eac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <_ZL12MX_TIM2_Initv+0xcc>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <_ZL12MX_TIM2_Initv+0xcc>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ebe:	4820      	ldr	r0, [pc, #128]	; (8001f40 <_ZL12MX_TIM2_Initv+0xcc>)
 8001ec0:	f002 fb42 	bl	8004548 <HAL_TIM_PWM_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bf14      	ite	ne
 8001eca:	2301      	movne	r3, #1
 8001ecc:	2300      	moveq	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8001ed4:	f000 fb10 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4816      	ldr	r0, [pc, #88]	; (8001f40 <_ZL12MX_TIM2_Initv+0xcc>)
 8001ee8:	f003 f880 	bl	8004fec <HAL_TIMEx_MasterConfigSynchronization>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	bf14      	ite	ne
 8001ef2:	2301      	movne	r3, #1
 8001ef4:	2300      	moveq	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8001efc:	f000 fafc 	bl	80024f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f00:	2360      	movs	r3, #96	; 0x60
 8001f02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2208      	movs	r2, #8
 8001f14:	4619      	mov	r1, r3
 8001f16:	480a      	ldr	r0, [pc, #40]	; (8001f40 <_ZL12MX_TIM2_Initv+0xcc>)
 8001f18:	f002 fd74 	bl	8004a04 <HAL_TIM_PWM_ConfigChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf14      	ite	ne
 8001f22:	2301      	movne	r3, #1
 8001f24:	2300      	moveq	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8001f2c:	f000 fae4 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <_ZL12MX_TIM2_Initv+0xcc>)
 8001f32:	f000 fbe9 	bl	8002708 <HAL_TIM_MspPostInit>

}
 8001f36:	bf00      	nop
 8001f38:	3728      	adds	r7, #40	; 0x28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200004ec 	.word	0x200004ec

08001f44 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f4a:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <_ZL19MX_USART1_UART_Initv+0x58>)
 8001f4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f7a:	4807      	ldr	r0, [pc, #28]	; (8001f98 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001f7c:	f003 f8f7 	bl	800516e <HAL_UART_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf14      	ite	ne
 8001f86:	2301      	movne	r3, #1
 8001f88:	2300      	moveq	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001f90:	f000 fab2 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000534 	.word	0x20000534
 8001f9c:	40013800 	.word	0x40013800

08001fa0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb4:	4b39      	ldr	r3, [pc, #228]	; (800209c <_ZL12MX_GPIO_Initv+0xfc>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a38      	ldr	r2, [pc, #224]	; (800209c <_ZL12MX_GPIO_Initv+0xfc>)
 8001fba:	f043 0310 	orr.w	r3, r3, #16
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b36      	ldr	r3, [pc, #216]	; (800209c <_ZL12MX_GPIO_Initv+0xfc>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fcc:	4b33      	ldr	r3, [pc, #204]	; (800209c <_ZL12MX_GPIO_Initv+0xfc>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a32      	ldr	r2, [pc, #200]	; (800209c <_ZL12MX_GPIO_Initv+0xfc>)
 8001fd2:	f043 0320 	orr.w	r3, r3, #32
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b30      	ldr	r3, [pc, #192]	; (800209c <_ZL12MX_GPIO_Initv+0xfc>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <_ZL12MX_GPIO_Initv+0xfc>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a2c      	ldr	r2, [pc, #176]	; (800209c <_ZL12MX_GPIO_Initv+0xfc>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <_ZL12MX_GPIO_Initv+0xfc>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <_ZL12MX_GPIO_Initv+0xfc>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a26      	ldr	r2, [pc, #152]	; (800209c <_ZL12MX_GPIO_Initv+0xfc>)
 8002002:	f043 0308 	orr.w	r3, r3, #8
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b24      	ldr	r3, [pc, #144]	; (800209c <_ZL12MX_GPIO_Initv+0xfc>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8002014:	2200      	movs	r2, #0
 8002016:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800201a:	4821      	ldr	r0, [pc, #132]	; (80020a0 <_ZL12MX_GPIO_Initv+0x100>)
 800201c:	f001 f94e 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, En_Pin|Dir_Pin|En2_Pin, GPIO_PIN_RESET);
 8002020:	2200      	movs	r2, #0
 8002022:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8002026:	481f      	ldr	r0, [pc, #124]	; (80020a4 <_ZL12MX_GPIO_Initv+0x104>)
 8002028:	f001 f948 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|CS2_Pin|Dir2_Pin, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	f240 4103 	movw	r1, #1027	; 0x403
 8002032:	481d      	ldr	r0, [pc, #116]	; (80020a8 <_ZL12MX_GPIO_Initv+0x108>)
 8002034:	f001 f942 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8002038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800203c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203e:	2301      	movs	r3, #1
 8002040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2302      	movs	r3, #2
 8002048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800204a:	f107 0310 	add.w	r3, r7, #16
 800204e:	4619      	mov	r1, r3
 8002050:	4813      	ldr	r0, [pc, #76]	; (80020a0 <_ZL12MX_GPIO_Initv+0x100>)
 8002052:	f000 ffaf 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : En_Pin Dir_Pin En2_Pin */
  GPIO_InitStruct.Pin = En_Pin|Dir_Pin|En2_Pin;
 8002056:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800205a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205c:	2301      	movs	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2302      	movs	r3, #2
 8002066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	4619      	mov	r1, r3
 800206e:	480d      	ldr	r0, [pc, #52]	; (80020a4 <_ZL12MX_GPIO_Initv+0x104>)
 8002070:	f000 ffa0 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin CS2_Pin Dir2_Pin */
  GPIO_InitStruct.Pin = CS_Pin|CS2_Pin|Dir2_Pin;
 8002074:	f240 4303 	movw	r3, #1027	; 0x403
 8002078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207a:	2301      	movs	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2302      	movs	r3, #2
 8002084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	4619      	mov	r1, r3
 800208c:	4806      	ldr	r0, [pc, #24]	; (80020a8 <_ZL12MX_GPIO_Initv+0x108>)
 800208e:	f000 ff91 	bl	8002fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002092:	bf00      	nop
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	40011000 	.word	0x40011000
 80020a4:	40010800 	.word	0x40010800
 80020a8:	40010c00 	.word	0x40010c00

080020ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if (huart == &huart1) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a49      	ldr	r2, [pc, #292]	; (80021dc <HAL_UART_RxCpltCallback+0x130>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	f040 8086 	bne.w	80021ca <HAL_UART_RxCpltCallback+0x11e>
//		if(!strcmp(rx_buffer,"TEXT")) {
//		}
		if (rx_buffer[0] == '1') {
 80020be:	4b48      	ldr	r3, [pc, #288]	; (80021e0 <HAL_UART_RxCpltCallback+0x134>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b31      	cmp	r3, #49	; 0x31
 80020c4:	d177      	bne.n	80021b6 <HAL_UART_RxCpltCallback+0x10a>

			uint16_t recAngle=0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	81fb      	strh	r3, [r7, #14]
			recAngle = ((rx_buffer[1] - '0') * 10000 ) + ((rx_buffer[2] - '0') * 1000) + ((rx_buffer[3] - '0')*100)+ ((rx_buffer[4] - '0')*10) + (rx_buffer[5] - '0');
 80020ca:	4b45      	ldr	r3, [pc, #276]	; (80021e0 <HAL_UART_RxCpltCallback+0x134>)
 80020cc:	785b      	ldrb	r3, [r3, #1]
 80020ce:	3b30      	subs	r3, #48	; 0x30
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	0152      	lsls	r2, r2, #5
 80020d6:	1ad2      	subs	r2, r2, r3
 80020d8:	0092      	lsls	r2, r2, #2
 80020da:	4413      	add	r3, r2
 80020dc:	461a      	mov	r2, r3
 80020de:	0091      	lsls	r1, r2, #2
 80020e0:	461a      	mov	r2, r3
 80020e2:	460b      	mov	r3, r1
 80020e4:	4413      	add	r3, r2
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_UART_RxCpltCallback+0x134>)
 80020ec:	789b      	ldrb	r3, [r3, #2]
 80020ee:	3b30      	subs	r3, #48	; 0x30
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	4619      	mov	r1, r3
 80020f4:	0149      	lsls	r1, r1, #5
 80020f6:	1ac9      	subs	r1, r1, r3
 80020f8:	0089      	lsls	r1, r1, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	b29b      	uxth	r3, r3
 8002100:	4413      	add	r3, r2
 8002102:	b29a      	uxth	r2, r3
 8002104:	4b36      	ldr	r3, [pc, #216]	; (80021e0 <HAL_UART_RxCpltCallback+0x134>)
 8002106:	791b      	ldrb	r3, [r3, #4]
 8002108:	3b30      	subs	r3, #48	; 0x30
 800210a:	b29b      	uxth	r3, r3
 800210c:	4619      	mov	r1, r3
 800210e:	0089      	lsls	r1, r1, #2
 8002110:	440b      	add	r3, r1
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	b299      	uxth	r1, r3
 8002116:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <HAL_UART_RxCpltCallback+0x134>)
 8002118:	78db      	ldrb	r3, [r3, #3]
 800211a:	3b30      	subs	r3, #48	; 0x30
 800211c:	b29b      	uxth	r3, r3
 800211e:	4618      	mov	r0, r3
 8002120:	0080      	lsls	r0, r0, #2
 8002122:	4403      	add	r3, r0
 8002124:	4618      	mov	r0, r3
 8002126:	0084      	lsls	r4, r0, #2
 8002128:	4618      	mov	r0, r3
 800212a:	4623      	mov	r3, r4
 800212c:	4403      	add	r3, r0
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	b29b      	uxth	r3, r3
 8002132:	440b      	add	r3, r1
 8002134:	b29b      	uxth	r3, r3
 8002136:	4413      	add	r3, r2
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <HAL_UART_RxCpltCallback+0x134>)
 800213c:	795b      	ldrb	r3, [r3, #5]
 800213e:	b29b      	uxth	r3, r3
 8002140:	4413      	add	r3, r2
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b30      	subs	r3, #48	; 0x30
 8002146:	81fb      	strh	r3, [r7, #14]

			recAngleF=(float)recAngle/100.0;
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fda2 	bl	8000c94 <__aeabi_ui2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4924      	ldr	r1, [pc, #144]	; (80021e4 <HAL_UART_RxCpltCallback+0x138>)
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fea9 	bl	8000eac <__aeabi_fdiv>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <HAL_UART_RxCpltCallback+0x13c>)
 8002160:	601a      	str	r2, [r3, #0]

			recDist =((rx_buffer[6] - '0') * 100) + ((rx_buffer[7] - '0') * 10) + (rx_buffer[8] - '0');
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <HAL_UART_RxCpltCallback+0x134>)
 8002164:	799b      	ldrb	r3, [r3, #6]
 8002166:	3b30      	subs	r3, #48	; 0x30
 8002168:	b29b      	uxth	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	4413      	add	r3, r2
 8002170:	461a      	mov	r2, r3
 8002172:	0091      	lsls	r1, r2, #2
 8002174:	461a      	mov	r2, r3
 8002176:	460b      	mov	r3, r1
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	b29a      	uxth	r2, r3
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_UART_RxCpltCallback+0x134>)
 8002180:	79db      	ldrb	r3, [r3, #7]
 8002182:	3b30      	subs	r3, #48	; 0x30
 8002184:	b29b      	uxth	r3, r3
 8002186:	4619      	mov	r1, r3
 8002188:	0089      	lsls	r1, r1, #2
 800218a:	440b      	add	r3, r1
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	b29b      	uxth	r3, r3
 8002190:	4413      	add	r3, r2
 8002192:	b29a      	uxth	r2, r3
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_UART_RxCpltCallback+0x134>)
 8002196:	7a1b      	ldrb	r3, [r3, #8]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4413      	add	r3, r2
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b30      	subs	r3, #48	; 0x30
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_UART_RxCpltCallback+0x140>)
 80021a4:	801a      	strh	r2, [r3, #0]

			HAL_UART_Transmit_IT(&huart1, rx_buffer, 8);
 80021a6:	2208      	movs	r2, #8
 80021a8:	490d      	ldr	r1, [pc, #52]	; (80021e0 <HAL_UART_RxCpltCallback+0x134>)
 80021aa:	480c      	ldr	r0, [pc, #48]	; (80021dc <HAL_UART_RxCpltCallback+0x130>)
 80021ac:	f003 f8b2 	bl	8005314 <HAL_UART_Transmit_IT>
			//	HAL_UART_Transmit_IT(&huart1,reinterpret_cast<uint8_t *>(recDist), sizeof(recDist));
			startFirstMove=true;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_UART_RxCpltCallback+0x144>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80021b6:	2209      	movs	r2, #9
 80021b8:	2100      	movs	r1, #0
 80021ba:	4809      	ldr	r0, [pc, #36]	; (80021e0 <HAL_UART_RxCpltCallback+0x134>)
 80021bc:	f005 fe23 	bl	8007e06 <memset>
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 80021c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021c4:	480b      	ldr	r0, [pc, #44]	; (80021f4 <HAL_UART_RxCpltCallback+0x148>)
 80021c6:	f001 f891 	bl	80032ec <HAL_GPIO_TogglePin>
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80021ca:	2209      	movs	r2, #9
 80021cc:	4904      	ldr	r1, [pc, #16]	; (80021e0 <HAL_UART_RxCpltCallback+0x134>)
 80021ce:	4803      	ldr	r0, [pc, #12]	; (80021dc <HAL_UART_RxCpltCallback+0x130>)
 80021d0:	f003 f8d5 	bl	800537e <HAL_UART_Receive_IT>
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd90      	pop	{r4, r7, pc}
 80021dc:	20000534 	.word	0x20000534
 80021e0:	20000588 	.word	0x20000588
 80021e4:	42c80000 	.word	0x42c80000
 80021e8:	20000594 	.word	0x20000594
 80021ec:	20000598 	.word	0x20000598
 80021f0:	20000591 	.word	0x20000591
 80021f4:	40011000 	.word	0x40011000

080021f8 <_Z16StartDefaultTaskPKv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	arm.setPrintState(false);
 8002200:	2100      	movs	r1, #0
 8002202:	480b      	ldr	r0, [pc, #44]	; (8002230 <_Z16StartDefaultTaskPKv+0x38>)
 8002204:	f7ff fb3c 	bl	8001880 <_ZN7RoboArm13setPrintStateEb>
	/* Infinite loop */
	for (;;) {

		if(startFirstMove) {
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <_Z16StartDefaultTaskPKv+0x3c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <_Z16StartDefaultTaskPKv+0x2e>
			startFirstMove=false;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_Z16StartDefaultTaskPKv+0x3c>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
			arm.Move2MotorsSimu(recAngleF, recDist);
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <_Z16StartDefaultTaskPKv+0x40>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <_Z16StartDefaultTaskPKv+0x44>)
 800221c:	8812      	ldrh	r2, [r2, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	4803      	ldr	r0, [pc, #12]	; (8002230 <_Z16StartDefaultTaskPKv+0x38>)
 8002222:	f7ff f981 	bl	8001528 <_ZN7RoboArm15Move2MotorsSimuEft>
//			arm.correctPosition();
//
//		}


		osDelay(1);
 8002226:	2001      	movs	r0, #1
 8002228:	f003 feb8 	bl	8005f9c <osDelay>
		if(startFirstMove) {
 800222c:	e7ec      	b.n	8002208 <_Z16StartDefaultTaskPKv+0x10>
 800222e:	bf00      	nop
 8002230:	200005a4 	.word	0x200005a4
 8002234:	20000591 	.word	0x20000591
 8002238:	20000594 	.word	0x20000594
 800223c:	20000598 	.word	0x20000598

08002240 <_Z14StartAMT22DataPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAMT22Data */
void StartAMT22Data(void const * argument)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;) {


		osDelay(50);
 8002248:	2032      	movs	r0, #50	; 0x32
 800224a:	f003 fea7 	bl	8005f9c <osDelay>
 800224e:	e7fb      	b.n	8002248 <_Z14StartAMT22DataPKv+0x8>

08002250 <_Z13StartUARTDataPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUARTData */
void StartUARTData(void const * argument)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b0a4      	sub	sp, #144	; 0x90
 8002254:	af02      	add	r7, sp, #8
 8002256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTData */
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8002258:	2209      	movs	r2, #9
 800225a:	494f      	ldr	r1, [pc, #316]	; (8002398 <_Z13StartUARTDataPKv+0x148>)
 800225c:	484f      	ldr	r0, [pc, #316]	; (800239c <_Z13StartUARTDataPKv+0x14c>)
 800225e:	f003 f88e 	bl	800537e <HAL_UART_Receive_IT>
	uint32_t posnowT;
	float angleT = 0;
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint32_t linearDist = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	flagReadEnc = 1;
 8002270:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <_Z13StartUARTDataPKv+0x150>)
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
	uint32_t distPmm=0;
 8002276:	2300      	movs	r3, #0
 8002278:	67fb      	str	r3, [r7, #124]	; 0x7c
	arm.setPrintState(true);
 800227a:	2101      	movs	r1, #1
 800227c:	4849      	ldr	r0, [pc, #292]	; (80023a4 <_Z13StartUARTDataPKv+0x154>)
 800227e:	f7ff faff 	bl	8001880 <_ZN7RoboArm13setPrintStateEb>

	/* Infinite loop */
	for (;;) {

		if (arm.getPrintState()) {
 8002282:	4848      	ldr	r0, [pc, #288]	; (80023a4 <_Z13StartUARTDataPKv+0x154>)
 8002284:	f7ff fb14 	bl	80018b0 <_ZN7RoboArm13getPrintStateEv>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d07b      	beq.n	8002386 <_Z13StartUARTDataPKv+0x136>

			char str[100];
			posnowT = arm.GetPosEncoders(1);
 800228e:	2101      	movs	r1, #1
 8002290:	4844      	ldr	r0, [pc, #272]	; (80023a4 <_Z13StartUARTDataPKv+0x154>)
 8002292:	f7ff fb53 	bl	800193c <_ZN7RoboArm14GetPosEncodersEh>
 8002296:	67b8      	str	r0, [r7, #120]	; 0x78
			angleT = arm.GetAngleEncoders(posnowT)*100;
 8002298:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800229a:	4842      	ldr	r0, [pc, #264]	; (80023a4 <_Z13StartUARTDataPKv+0x154>)
 800229c:	f7ff fb3b 	bl	8001916 <_ZN7RoboArm16GetAngleEncodersEm>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4941      	ldr	r1, [pc, #260]	; (80023a8 <_Z13StartUARTDataPKv+0x158>)
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fd4d 	bl	8000d44 <__aeabi_fmul>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			sprintf(str, "x: enc: %d | ang: %d \n", posnowT, (uint16_t)angleT);
 80022b0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80022b4:	f7fe ff0c 	bl	80010d0 <__aeabi_f2uiz>
 80022b8:	4603      	mov	r3, r0
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	f107 000c 	add.w	r0, r7, #12
 80022c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80022c2:	493a      	ldr	r1, [pc, #232]	; (80023ac <_Z13StartUARTDataPKv+0x15c>)
 80022c4:	f005 fd3c 	bl	8007d40 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str),HAL_MAX_DELAY);
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fd ff3f 	bl	8000150 <strlen>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	f107 010c 	add.w	r1, r7, #12
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
 80022de:	482f      	ldr	r0, [pc, #188]	; (800239c <_Z13StartUARTDataPKv+0x14c>)
 80022e0:	f002 ff95 	bl	800520e <HAL_UART_Transmit>

			posnowT = arm.GetPosEncoders(2);
 80022e4:	2102      	movs	r1, #2
 80022e6:	482f      	ldr	r0, [pc, #188]	; (80023a4 <_Z13StartUARTDataPKv+0x154>)
 80022e8:	f7ff fb28 	bl	800193c <_ZN7RoboArm14GetPosEncodersEh>
 80022ec:	67b8      	str	r0, [r7, #120]	; 0x78
			angleT = arm.GetAngleEncoders(posnowT)*100;
 80022ee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80022f0:	482c      	ldr	r0, [pc, #176]	; (80023a4 <_Z13StartUARTDataPKv+0x154>)
 80022f2:	f7ff fb10 	bl	8001916 <_ZN7RoboArm16GetAngleEncodersEm>
 80022f6:	4603      	mov	r3, r0
 80022f8:	492b      	ldr	r1, [pc, #172]	; (80023a8 <_Z13StartUARTDataPKv+0x158>)
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fd22 	bl	8000d44 <__aeabi_fmul>
 8002300:	4603      	mov	r3, r0
 8002302:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			float distPsteps = angleT * (motorStep * drvMicroSteps) * (6.45 / 360);
 8002306:	492a      	ldr	r1, [pc, #168]	; (80023b0 <_Z13StartUARTDataPKv+0x160>)
 8002308:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800230c:	f7fe fd1a 	bl	8000d44 <__aeabi_fmul>
 8002310:	4603      	mov	r3, r0
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe f888 	bl	8000428 <__aeabi_f2d>
 8002318:	a31d      	add	r3, pc, #116	; (adr r3, 8002390 <_Z13StartUARTDataPKv+0x140>)
 800231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231e:	f7fe f8db 	bl	80004d8 <__aeabi_dmul>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	f7fe fbad 	bl	8000a88 <__aeabi_d2f>
 800232e:	4603      	mov	r3, r0
 8002330:	677b      	str	r3, [r7, #116]	; 0x74
			uint32_t mils=distPsteps/arm.linearStepsMil;
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <_Z13StartUARTDataPKv+0x154>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800233a:	f7fe fdb7 	bl	8000eac <__aeabi_fdiv>
 800233e:	4603      	mov	r3, r0
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fec5 	bl	80010d0 <__aeabi_f2uiz>
 8002346:	4603      	mov	r3, r0
 8002348:	673b      	str	r3, [r7, #112]	; 0x70

			sprintf(str, "y: enc: %d | ang: %d | mm: %d \n", posnowT, (uint16_t)angleT, mils);
 800234a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800234e:	f7fe febf 	bl	80010d0 <__aeabi_f2uiz>
 8002352:	4603      	mov	r3, r0
 8002354:	b29b      	uxth	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	f107 000c 	add.w	r0, r7, #12
 800235c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	4613      	mov	r3, r2
 8002362:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002364:	4913      	ldr	r1, [pc, #76]	; (80023b4 <_Z13StartUARTDataPKv+0x164>)
 8002366:	f005 fceb 	bl	8007d40 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str),HAL_MAX_DELAY);
 800236a:	f107 030c 	add.w	r3, r7, #12
 800236e:	4618      	mov	r0, r3
 8002370:	f7fd feee 	bl	8000150 <strlen>
 8002374:	4603      	mov	r3, r0
 8002376:	b29a      	uxth	r2, r3
 8002378:	f107 010c 	add.w	r1, r7, #12
 800237c:	f04f 33ff 	mov.w	r3, #4294967295
 8002380:	4806      	ldr	r0, [pc, #24]	; (800239c <_Z13StartUARTDataPKv+0x14c>)
 8002382:	f002 ff44 	bl	800520e <HAL_UART_Transmit>
		}
		osDelay(500);
 8002386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800238a:	f003 fe07 	bl	8005f9c <osDelay>
	}
 800238e:	e778      	b.n	8002282 <_Z13StartUARTDataPKv+0x32>
 8002390:	258bf259 	.word	0x258bf259
 8002394:	3f9258bf 	.word	0x3f9258bf
 8002398:	20000588 	.word	0x20000588
 800239c:	20000534 	.word	0x20000534
 80023a0:	2000059a 	.word	0x2000059a
 80023a4:	200005a4 	.word	0x200005a4
 80023a8:	42c80000 	.word	0x42c80000
 80023ac:	0800a068 	.word	0x0800a068
 80023b0:	44c80000 	.word	0x44c80000
 80023b4:	0800a080 	.word	0x0800a080

080023b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a42      	ldr	r2, [pc, #264]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d135      	bne.n	8002436 <HAL_TIM_PeriodElapsedCallback+0x7e>
	{
		cntImpulse1++;
 80023ca:	4b42      	ldr	r3, [pc, #264]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	4a40      	ldr	r2, [pc, #256]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80023d2:	6013      	str	r3, [r2, #0]
		if (cntImpulse1 >= arm.anglePsteps) {
 80023d4:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fc5b 	bl	8000c94 <__aeabi_ui2f>
 80023de:	4602      	mov	r2, r0
 80023e0:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	4619      	mov	r1, r3
 80023e6:	4610      	mov	r0, r2
 80023e8:	f7fe fe5e 	bl	80010a8 <__aeabi_fcmpge>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d063      	beq.n	80024ba <HAL_TIM_PeriodElapsedCallback+0x102>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80023f2:	2108      	movs	r1, #8
 80023f4:	4839      	ldr	r0, [pc, #228]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x124>)
 80023f6:	f002 f999 	bl	800472c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 80023fa:	4838      	ldr	r0, [pc, #224]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x124>)
 80023fc:	f002 f876 	bl	80044ec <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(1, false);
 8002400:	2200      	movs	r2, #0
 8002402:	2101      	movs	r1, #1
 8002404:	4834      	ldr	r0, [pc, #208]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002406:	f7ff fb3d 	bl	8001a84 <_ZN7RoboArm9SetEnableEtb>
			cntImpulse1=0;
 800240a:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
			arm.stateMoveM1=false;
 8002410:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002412:	2200      	movs	r2, #0
 8002414:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			if(correctPosFlag) { timerFT1=true; correctPosFlag=false; } else  { timerFT1=false; }
 8002418:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <HAL_TIM_PeriodElapsedCallback+0x76>
 8002420:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
 800242c:	e045      	b.n	80024ba <HAL_TIM_PeriodElapsedCallback+0x102>
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	e041      	b.n	80024ba <HAL_TIM_PeriodElapsedCallback+0x102>

		}

	} else if (htim->Instance == TIM2) {
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243e:	d135      	bne.n	80024ac <HAL_TIM_PeriodElapsedCallback+0xf4>

		cntImpulse2++;
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	4a28      	ldr	r2, [pc, #160]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002448:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= arm.distPsteps) {
 800244a:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fc20 	bl	8000c94 <__aeabi_ui2f>
 8002454:	4602      	mov	r2, r0
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	4619      	mov	r1, r3
 800245c:	4610      	mov	r0, r2
 800245e:	f7fe fe23 	bl	80010a8 <__aeabi_fcmpge>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d028      	beq.n	80024ba <HAL_TIM_PeriodElapsedCallback+0x102>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002468:	2108      	movs	r1, #8
 800246a:	4820      	ldr	r0, [pc, #128]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x134>)
 800246c:	f002 f95e 	bl	800472c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8002470:	481e      	ldr	r0, [pc, #120]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002472:	f002 f83b 	bl	80044ec <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(2, false);
 8002476:	2200      	movs	r2, #0
 8002478:	2102      	movs	r1, #2
 800247a:	4817      	ldr	r0, [pc, #92]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800247c:	f7ff fb02 	bl	8001a84 <_ZN7RoboArm9SetEnableEtb>
			cntImpulse2=0;
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
			arm.stateMoveM1=false;
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002488:	2200      	movs	r2, #0
 800248a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			if(correctPosFlag) { timerFT2=true;  correctPosFlag=false; } else  { timerFT2=false; }
 800248e:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <HAL_TIM_PeriodElapsedCallback+0xec>
 8002496:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	e00a      	b.n	80024ba <HAL_TIM_PeriodElapsedCallback+0x102>
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e006      	b.n	80024ba <HAL_TIM_PeriodElapsedCallback+0x102>

		}
	} else if (htim->Instance == TIM4) {
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_TIM_PeriodElapsedCallback+0x102>
		HAL_IncTick();
 80024b6:	f000 fbab 	bl	8002c10 <HAL_IncTick>
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a0d      	ldr	r2, [pc, #52]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d101      	bne.n	80024c8 <HAL_TIM_PeriodElapsedCallback+0x110>
    HAL_IncTick();
 80024c4:	f000 fba4 	bl	8002c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40012c00 	.word	0x40012c00
 80024d4:	2000059c 	.word	0x2000059c
 80024d8:	200005a4 	.word	0x200005a4
 80024dc:	200004a4 	.word	0x200004a4
 80024e0:	20000592 	.word	0x20000592
 80024e4:	20000000 	.word	0x20000000
 80024e8:	200005a0 	.word	0x200005a0
 80024ec:	200004ec 	.word	0x200004ec
 80024f0:	20000001 	.word	0x20000001
 80024f4:	40000800 	.word	0x40000800

080024f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024fc:	b672      	cpsid	i
}
 80024fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002500:	e7fe      	b.n	8002500 <Error_Handler+0x8>
	...

08002504 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d109      	bne.n	8002528 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800251a:	4293      	cmp	r3, r2
 800251c:	d104      	bne.n	8002528 <_Z41__static_initialization_and_destruction_0ii+0x24>
RoboArm arm(120, 124);
 800251e:	227c      	movs	r2, #124	; 0x7c
 8002520:	2178      	movs	r1, #120	; 0x78
 8002522:	4803      	ldr	r0, [pc, #12]	; (8002530 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8002524:	f7fe ffbc 	bl	80014a0 <_ZN7RoboArmC1Ehh>
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	200005a4 	.word	0x200005a4

08002534 <_GLOBAL__sub_I_hspi1>:
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
 8002538:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800253c:	2001      	movs	r0, #1
 800253e:	f7ff ffe1 	bl	8002504 <_Z41__static_initialization_and_destruction_0ii>
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800254a:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_MspInit+0x78>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <HAL_MspInit+0x78>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6193      	str	r3, [r2, #24]
 8002556:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_MspInit+0x78>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <HAL_MspInit+0x78>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a15      	ldr	r2, [pc, #84]	; (80025bc <HAL_MspInit+0x78>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	61d3      	str	r3, [r2, #28]
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_MspInit+0x78>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	210f      	movs	r1, #15
 800257e:	f06f 0001 	mvn.w	r0, #1
 8002582:	f000 fc3a 	bl	8002dfa <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002586:	2200      	movs	r2, #0
 8002588:	2105      	movs	r1, #5
 800258a:	2005      	movs	r0, #5
 800258c:	f000 fc35 	bl	8002dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002590:	2005      	movs	r0, #5
 8002592:	f000 fc4e 	bl	8002e32 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_MspInit+0x7c>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <HAL_MspInit+0x7c>)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010000 	.word	0x40010000

080025c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a26      	ldr	r2, [pc, #152]	; (8002678 <HAL_SPI_MspInit+0xb4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d145      	bne.n	8002670 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_SPI_MspInit+0xb8>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a24      	ldr	r2, [pc, #144]	; (800267c <HAL_SPI_MspInit+0xb8>)
 80025ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_SPI_MspInit+0xb8>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fc:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HAL_SPI_MspInit+0xb8>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a1e      	ldr	r2, [pc, #120]	; (800267c <HAL_SPI_MspInit+0xb8>)
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b1c      	ldr	r3, [pc, #112]	; (800267c <HAL_SPI_MspInit+0xb8>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002614:	2328      	movs	r3, #40	; 0x28
 8002616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800261c:	2303      	movs	r3, #3
 800261e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	4816      	ldr	r0, [pc, #88]	; (8002680 <HAL_SPI_MspInit+0xbc>)
 8002628:	f000 fcc4 	bl	8002fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800262c:	2310      	movs	r3, #16
 800262e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4619      	mov	r1, r3
 800263e:	4810      	ldr	r0, [pc, #64]	; (8002680 <HAL_SPI_MspInit+0xbc>)
 8002640:	f000 fcb8 	bl	8002fb4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_SPI_MspInit+0xc0>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
 800265a:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <HAL_SPI_MspInit+0xc0>)
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	2105      	movs	r1, #5
 8002664:	2023      	movs	r0, #35	; 0x23
 8002666:	f000 fbc8 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800266a:	2023      	movs	r0, #35	; 0x23
 800266c:	f000 fbe1 	bl	8002e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002670:	bf00      	nop
 8002672:	3728      	adds	r7, #40	; 0x28
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40013000 	.word	0x40013000
 800267c:	40021000 	.word	0x40021000
 8002680:	40010c00 	.word	0x40010c00
 8002684:	40010000 	.word	0x40010000

08002688 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1a      	ldr	r2, [pc, #104]	; (8002700 <HAL_TIM_PWM_MspInit+0x78>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d114      	bne.n	80026c4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_TIM_PWM_MspInit+0x7c>)
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	4a19      	ldr	r2, [pc, #100]	; (8002704 <HAL_TIM_PWM_MspInit+0x7c>)
 80026a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026a4:	6193      	str	r3, [r2, #24]
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <HAL_TIM_PWM_MspInit+0x7c>)
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2105      	movs	r1, #5
 80026b6:	2019      	movs	r0, #25
 80026b8:	f000 fb9f 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80026bc:	2019      	movs	r0, #25
 80026be:	f000 fbb8 	bl	8002e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026c2:	e018      	b.n	80026f6 <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026cc:	d113      	bne.n	80026f6 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_TIM_PWM_MspInit+0x7c>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4a0c      	ldr	r2, [pc, #48]	; (8002704 <HAL_TIM_PWM_MspInit+0x7c>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	61d3      	str	r3, [r2, #28]
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_TIM_PWM_MspInit+0x7c>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2105      	movs	r1, #5
 80026ea:	201c      	movs	r0, #28
 80026ec:	f000 fb85 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026f0:	201c      	movs	r0, #28
 80026f2:	f000 fb9e 	bl	8002e32 <HAL_NVIC_EnableIRQ>
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40012c00 	.word	0x40012c00
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0310 	add.w	r3, r7, #16
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <HAL_TIM_MspPostInit+0x98>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d119      	bne.n	800275c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002728:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_TIM_MspPostInit+0x9c>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <HAL_TIM_MspPostInit+0x9c>)
 800272e:	f043 0304 	orr.w	r3, r3, #4
 8002732:	6193      	str	r3, [r2, #24]
 8002734:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_TIM_MspPostInit+0x9c>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	4619      	mov	r1, r3
 8002754:	4814      	ldr	r0, [pc, #80]	; (80027a8 <HAL_TIM_MspPostInit+0xa0>)
 8002756:	f000 fc2d 	bl	8002fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800275a:	e01c      	b.n	8002796 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002764:	d117      	bne.n	8002796 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <HAL_TIM_MspPostInit+0x9c>)
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <HAL_TIM_MspPostInit+0x9c>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	6193      	str	r3, [r2, #24]
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <HAL_TIM_MspPostInit+0x9c>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800277e:	2304      	movs	r3, #4
 8002780:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278a:	f107 0310 	add.w	r3, r7, #16
 800278e:	4619      	mov	r1, r3
 8002790:	4805      	ldr	r0, [pc, #20]	; (80027a8 <HAL_TIM_MspPostInit+0xa0>)
 8002792:	f000 fc0f 	bl	8002fb4 <HAL_GPIO_Init>
}
 8002796:	bf00      	nop
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40010800 	.word	0x40010800

080027ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a26      	ldr	r2, [pc, #152]	; (8002860 <HAL_UART_MspInit+0xb4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d145      	bne.n	8002858 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_UART_MspInit+0xb8>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	4a24      	ldr	r2, [pc, #144]	; (8002864 <HAL_UART_MspInit+0xb8>)
 80027d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d6:	6193      	str	r3, [r2, #24]
 80027d8:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_UART_MspInit+0xb8>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e4:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <HAL_UART_MspInit+0xb8>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4a1e      	ldr	r2, [pc, #120]	; (8002864 <HAL_UART_MspInit+0xb8>)
 80027ea:	f043 0308 	orr.w	r3, r3, #8
 80027ee:	6193      	str	r3, [r2, #24]
 80027f0:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_UART_MspInit+0xb8>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027fc:	2340      	movs	r3, #64	; 0x40
 80027fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002804:	2303      	movs	r3, #3
 8002806:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	4619      	mov	r1, r3
 800280e:	4816      	ldr	r0, [pc, #88]	; (8002868 <HAL_UART_MspInit+0xbc>)
 8002810:	f000 fbd0 	bl	8002fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4619      	mov	r1, r3
 8002826:	4810      	ldr	r0, [pc, #64]	; (8002868 <HAL_UART_MspInit+0xbc>)
 8002828:	f000 fbc4 	bl	8002fb4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <HAL_UART_MspInit+0xc0>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <HAL_UART_MspInit+0xc0>)
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002848:	2200      	movs	r2, #0
 800284a:	2105      	movs	r1, #5
 800284c:	2025      	movs	r0, #37	; 0x25
 800284e:	f000 fad4 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002852:	2025      	movs	r0, #37	; 0x25
 8002854:	f000 faed 	bl	8002e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002858:	bf00      	nop
 800285a:	3728      	adds	r7, #40	; 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40013800 	.word	0x40013800
 8002864:	40021000 	.word	0x40021000
 8002868:	40010c00 	.word	0x40010c00
 800286c:	40010000 	.word	0x40010000

08002870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08e      	sub	sp, #56	; 0x38
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002886:	4b34      	ldr	r3, [pc, #208]	; (8002958 <HAL_InitTick+0xe8>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4a33      	ldr	r2, [pc, #204]	; (8002958 <HAL_InitTick+0xe8>)
 800288c:	f043 0304 	orr.w	r3, r3, #4
 8002890:	61d3      	str	r3, [r2, #28]
 8002892:	4b31      	ldr	r3, [pc, #196]	; (8002958 <HAL_InitTick+0xe8>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800289e:	f107 0210 	add.w	r2, r7, #16
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f001 f937 	bl	8003b1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d103      	bne.n	80028c0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80028b8:	f001 f908 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 80028bc:	6378      	str	r0, [r7, #52]	; 0x34
 80028be:	e004      	b.n	80028ca <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80028c0:	f001 f904 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 80028c4:	4603      	mov	r3, r0
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028cc:	4a23      	ldr	r2, [pc, #140]	; (800295c <HAL_InitTick+0xec>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0c9b      	lsrs	r3, r3, #18
 80028d4:	3b01      	subs	r3, #1
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80028d8:	4b21      	ldr	r3, [pc, #132]	; (8002960 <HAL_InitTick+0xf0>)
 80028da:	4a22      	ldr	r2, [pc, #136]	; (8002964 <HAL_InitTick+0xf4>)
 80028dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_InitTick+0xf0>)
 80028e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028e4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80028e6:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <HAL_InitTick+0xf0>)
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80028ec:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_InitTick+0xf0>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f2:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_InitTick+0xf0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_InitTick+0xf0>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80028fe:	4818      	ldr	r0, [pc, #96]	; (8002960 <HAL_InitTick+0xf0>)
 8002900:	f001 fd4a 	bl	8004398 <HAL_TIM_Base_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800290a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800290e:	2b00      	cmp	r3, #0
 8002910:	d11b      	bne.n	800294a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002912:	4813      	ldr	r0, [pc, #76]	; (8002960 <HAL_InitTick+0xf0>)
 8002914:	f001 fd98 	bl	8004448 <HAL_TIM_Base_Start_IT>
 8002918:	4603      	mov	r3, r0
 800291a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800291e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002922:	2b00      	cmp	r3, #0
 8002924:	d111      	bne.n	800294a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002926:	201e      	movs	r0, #30
 8002928:	f000 fa83 	bl	8002e32 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b0f      	cmp	r3, #15
 8002930:	d808      	bhi.n	8002944 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002932:	2200      	movs	r2, #0
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	201e      	movs	r0, #30
 8002938:	f000 fa5f 	bl	8002dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800293c:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <HAL_InitTick+0xf8>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e002      	b.n	800294a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800294a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800294e:	4618      	mov	r0, r3
 8002950:	3738      	adds	r7, #56	; 0x38
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	431bde83 	.word	0x431bde83
 8002960:	20000614 	.word	0x20000614
 8002964:	40000800 	.word	0x40000800
 8002968:	20000008 	.word	0x20000008

0800296c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002970:	f001 f904 	bl	8003b7c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002974:	e7fe      	b.n	8002974 <NMI_Handler+0x8>

08002976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800297a:	e7fe      	b.n	800297a <HardFault_Handler+0x4>

0800297c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <MemManage_Handler+0x4>

08002982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002986:	e7fe      	b.n	8002986 <BusFault_Handler+0x4>

08002988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800298c:	e7fe      	b.n	800298c <UsageFault_Handler+0x4>

0800298e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
	...

080029a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <TIM1_UP_IRQHandler+0x10>)
 80029ae:	f001 ff21 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200004a4 	.word	0x200004a4

080029bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <TIM2_IRQHandler+0x10>)
 80029c2:	f001 ff17 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200004ec 	.word	0x200004ec

080029d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <TIM4_IRQHandler+0x10>)
 80029d6:	f001 ff0d 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000614 	.word	0x20000614

080029e4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <SPI1_IRQHandler+0x10>)
 80029ea:	f001 fb33 	bl	8004054 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	2000044c 	.word	0x2000044c

080029f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <USART1_IRQHandler+0x10>)
 80029fe:	f002 fce3 	bl	80053c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000534 	.word	0x20000534

08002a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return 1;
 8002a10:	2301      	movs	r3, #1
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <_kill>:

int _kill(int pid, int sig)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a24:	f005 fa42 	bl	8007eac <__errno>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2216      	movs	r2, #22
 8002a2c:	601a      	str	r2, [r3, #0]
  return -1;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_exit>:

void _exit (int status)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a42:	f04f 31ff 	mov.w	r1, #4294967295
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ffe7 	bl	8002a1a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a4c:	e7fe      	b.n	8002a4c <_exit+0x12>

08002a4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e00a      	b.n	8002a76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a60:	f3af 8000 	nop.w
 8002a64:	4601      	mov	r1, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	60ba      	str	r2, [r7, #8]
 8002a6c:	b2ca      	uxtb	r2, r1
 8002a6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3301      	adds	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	dbf0      	blt.n	8002a60 <_read+0x12>
  }

  return len;
 8002a7e:	687b      	ldr	r3, [r7, #4]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	e009      	b.n	8002aae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	60ba      	str	r2, [r7, #8]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	dbf1      	blt.n	8002a9a <_write+0x12>
  }
  return len;
 8002ab6:	687b      	ldr	r3, [r7, #4]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_close>:

int _close(int file)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <_isatty>:

int _isatty(int file)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b28:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <_sbrk+0x5c>)
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <_sbrk+0x60>)
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <_sbrk+0x64>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <_sbrk+0x64>)
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <_sbrk+0x68>)
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <_sbrk+0x64>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d207      	bcs.n	8002b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b50:	f005 f9ac 	bl	8007eac <__errno>
 8002b54:	4603      	mov	r3, r0
 8002b56:	220c      	movs	r2, #12
 8002b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5e:	e009      	b.n	8002b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <_sbrk+0x64>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <_sbrk+0x64>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <_sbrk+0x64>)
 8002b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b72:	68fb      	ldr	r3, [r7, #12]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20005000 	.word	0x20005000
 8002b80:	00000400 	.word	0x00000400
 8002b84:	2000065c 	.word	0x2000065c
 8002b88:	20001500 	.word	0x20001500

08002b8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b98:	f7ff fff8 	bl	8002b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b9c:	480b      	ldr	r0, [pc, #44]	; (8002bcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b9e:	490c      	ldr	r1, [pc, #48]	; (8002bd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba4:	e002      	b.n	8002bac <LoopCopyDataInit>

08002ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002baa:	3304      	adds	r3, #4

08002bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb0:	d3f9      	bcc.n	8002ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002bb4:	4c09      	ldr	r4, [pc, #36]	; (8002bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb8:	e001      	b.n	8002bbe <LoopFillZerobss>

08002bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bbc:	3204      	adds	r2, #4

08002bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc0:	d3fb      	bcc.n	8002bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bc2:	f005 f979 	bl	8007eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bc6:	f7fe ffa1 	bl	8001b0c <main>
  bx lr
 8002bca:	4770      	bx	lr
  ldr r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002bd4:	0800a450 	.word	0x0800a450
  ldr r2, =_sbss
 8002bd8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002bdc:	200014fc 	.word	0x200014fc

08002be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <ADC1_2_IRQHandler>
	...

08002be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_Init+0x28>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <HAL_Init+0x28>)
 8002bee:	f043 0310 	orr.w	r3, r3, #16
 8002bf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf4:	2003      	movs	r0, #3
 8002bf6:	f000 f8f5 	bl	8002de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bfa:	200f      	movs	r0, #15
 8002bfc:	f7ff fe38 	bl	8002870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c00:	f7ff fca0 	bl	8002544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40022000 	.word	0x40022000

08002c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_IncTick+0x1c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_IncTick+0x20>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	4a03      	ldr	r2, [pc, #12]	; (8002c30 <HAL_IncTick+0x20>)
 8002c22:	6013      	str	r3, [r2, #0]
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	2000000c 	.word	0x2000000c
 8002c30:	20000660 	.word	0x20000660

08002c34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return uwTick;
 8002c38:	4b02      	ldr	r3, [pc, #8]	; (8002c44 <HAL_GetTick+0x10>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	20000660 	.word	0x20000660

08002c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c50:	f7ff fff0 	bl	8002c34 <HAL_GetTick>
 8002c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d005      	beq.n	8002c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_Delay+0x44>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c6e:	bf00      	nop
 8002c70:	f7ff ffe0 	bl	8002c34 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d8f7      	bhi.n	8002c70 <HAL_Delay+0x28>
  {
  }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000000c 	.word	0x2000000c

08002c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc2:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	60d3      	str	r3, [r2, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	f003 0307 	and.w	r3, r3, #7
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0b      	blt.n	8002d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4906      	ldr	r1, [pc, #24]	; (8002d28 <__NVIC_EnableIRQ+0x34>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db0a      	blt.n	8002d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	490c      	ldr	r1, [pc, #48]	; (8002d78 <__NVIC_SetPriority+0x4c>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d54:	e00a      	b.n	8002d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4908      	ldr	r1, [pc, #32]	; (8002d7c <__NVIC_SetPriority+0x50>)
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3b04      	subs	r3, #4
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	440b      	add	r3, r1
 8002d6a:	761a      	strb	r2, [r3, #24]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e100 	.word	0xe000e100
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f1c3 0307 	rsb	r3, r3, #7
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	bf28      	it	cs
 8002d9e:	2304      	movcs	r3, #4
 8002da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d902      	bls.n	8002db0 <NVIC_EncodePriority+0x30>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3b03      	subs	r3, #3
 8002dae:	e000      	b.n	8002db2 <NVIC_EncodePriority+0x32>
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	43d9      	mvns	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	4313      	orrs	r3, r2
         );
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff ff4f 	bl	8002c90 <__NVIC_SetPriorityGrouping>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e0c:	f7ff ff64 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	6978      	ldr	r0, [r7, #20]
 8002e18:	f7ff ffb2 	bl	8002d80 <NVIC_EncodePriority>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff81 	bl	8002d2c <__NVIC_SetPriority>
}
 8002e2a:	bf00      	nop
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	4603      	mov	r3, r0
 8002e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff57 	bl	8002cf4 <__NVIC_EnableIRQ>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d008      	beq.n	8002e78 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e020      	b.n	8002eba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 020e 	bic.w	r2, r2, #14
 8002e86:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d005      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	e051      	b.n	8002f8c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 020e 	bic.w	r2, r2, #14
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <HAL_DMA_Abort_IT+0xd4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d029      	beq.n	8002f66 <HAL_DMA_Abort_IT+0xa2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a21      	ldr	r2, [pc, #132]	; (8002f9c <HAL_DMA_Abort_IT+0xd8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d022      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x9e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1f      	ldr	r2, [pc, #124]	; (8002fa0 <HAL_DMA_Abort_IT+0xdc>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01a      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x98>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <HAL_DMA_Abort_IT+0xe0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d012      	beq.n	8002f56 <HAL_DMA_Abort_IT+0x92>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <HAL_DMA_Abort_IT+0xe4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00a      	beq.n	8002f50 <HAL_DMA_Abort_IT+0x8c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1b      	ldr	r2, [pc, #108]	; (8002fac <HAL_DMA_Abort_IT+0xe8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d102      	bne.n	8002f4a <HAL_DMA_Abort_IT+0x86>
 8002f44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f48:	e00e      	b.n	8002f68 <HAL_DMA_Abort_IT+0xa4>
 8002f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f4e:	e00b      	b.n	8002f68 <HAL_DMA_Abort_IT+0xa4>
 8002f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f54:	e008      	b.n	8002f68 <HAL_DMA_Abort_IT+0xa4>
 8002f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f5a:	e005      	b.n	8002f68 <HAL_DMA_Abort_IT+0xa4>
 8002f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f60:	e002      	b.n	8002f68 <HAL_DMA_Abort_IT+0xa4>
 8002f62:	2310      	movs	r3, #16
 8002f64:	e000      	b.n	8002f68 <HAL_DMA_Abort_IT+0xa4>
 8002f66:	2301      	movs	r3, #1
 8002f68:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <HAL_DMA_Abort_IT+0xec>)
 8002f6a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
    } 
  }
  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40020008 	.word	0x40020008
 8002f9c:	4002001c 	.word	0x4002001c
 8002fa0:	40020030 	.word	0x40020030
 8002fa4:	40020044 	.word	0x40020044
 8002fa8:	40020058 	.word	0x40020058
 8002fac:	4002006c 	.word	0x4002006c
 8002fb0:	40020000 	.word	0x40020000

08002fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b08b      	sub	sp, #44	; 0x2c
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc6:	e169      	b.n	800329c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fc8:	2201      	movs	r2, #1
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	f040 8158 	bne.w	8003296 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	4a9a      	ldr	r2, [pc, #616]	; (8003254 <HAL_GPIO_Init+0x2a0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d05e      	beq.n	80030ae <HAL_GPIO_Init+0xfa>
 8002ff0:	4a98      	ldr	r2, [pc, #608]	; (8003254 <HAL_GPIO_Init+0x2a0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d875      	bhi.n	80030e2 <HAL_GPIO_Init+0x12e>
 8002ff6:	4a98      	ldr	r2, [pc, #608]	; (8003258 <HAL_GPIO_Init+0x2a4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d058      	beq.n	80030ae <HAL_GPIO_Init+0xfa>
 8002ffc:	4a96      	ldr	r2, [pc, #600]	; (8003258 <HAL_GPIO_Init+0x2a4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d86f      	bhi.n	80030e2 <HAL_GPIO_Init+0x12e>
 8003002:	4a96      	ldr	r2, [pc, #600]	; (800325c <HAL_GPIO_Init+0x2a8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d052      	beq.n	80030ae <HAL_GPIO_Init+0xfa>
 8003008:	4a94      	ldr	r2, [pc, #592]	; (800325c <HAL_GPIO_Init+0x2a8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d869      	bhi.n	80030e2 <HAL_GPIO_Init+0x12e>
 800300e:	4a94      	ldr	r2, [pc, #592]	; (8003260 <HAL_GPIO_Init+0x2ac>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d04c      	beq.n	80030ae <HAL_GPIO_Init+0xfa>
 8003014:	4a92      	ldr	r2, [pc, #584]	; (8003260 <HAL_GPIO_Init+0x2ac>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d863      	bhi.n	80030e2 <HAL_GPIO_Init+0x12e>
 800301a:	4a92      	ldr	r2, [pc, #584]	; (8003264 <HAL_GPIO_Init+0x2b0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d046      	beq.n	80030ae <HAL_GPIO_Init+0xfa>
 8003020:	4a90      	ldr	r2, [pc, #576]	; (8003264 <HAL_GPIO_Init+0x2b0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d85d      	bhi.n	80030e2 <HAL_GPIO_Init+0x12e>
 8003026:	2b12      	cmp	r3, #18
 8003028:	d82a      	bhi.n	8003080 <HAL_GPIO_Init+0xcc>
 800302a:	2b12      	cmp	r3, #18
 800302c:	d859      	bhi.n	80030e2 <HAL_GPIO_Init+0x12e>
 800302e:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <HAL_GPIO_Init+0x80>)
 8003030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003034:	080030af 	.word	0x080030af
 8003038:	08003089 	.word	0x08003089
 800303c:	0800309b 	.word	0x0800309b
 8003040:	080030dd 	.word	0x080030dd
 8003044:	080030e3 	.word	0x080030e3
 8003048:	080030e3 	.word	0x080030e3
 800304c:	080030e3 	.word	0x080030e3
 8003050:	080030e3 	.word	0x080030e3
 8003054:	080030e3 	.word	0x080030e3
 8003058:	080030e3 	.word	0x080030e3
 800305c:	080030e3 	.word	0x080030e3
 8003060:	080030e3 	.word	0x080030e3
 8003064:	080030e3 	.word	0x080030e3
 8003068:	080030e3 	.word	0x080030e3
 800306c:	080030e3 	.word	0x080030e3
 8003070:	080030e3 	.word	0x080030e3
 8003074:	080030e3 	.word	0x080030e3
 8003078:	08003091 	.word	0x08003091
 800307c:	080030a5 	.word	0x080030a5
 8003080:	4a79      	ldr	r2, [pc, #484]	; (8003268 <HAL_GPIO_Init+0x2b4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d013      	beq.n	80030ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003086:	e02c      	b.n	80030e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	623b      	str	r3, [r7, #32]
          break;
 800308e:	e029      	b.n	80030e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	3304      	adds	r3, #4
 8003096:	623b      	str	r3, [r7, #32]
          break;
 8003098:	e024      	b.n	80030e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	3308      	adds	r3, #8
 80030a0:	623b      	str	r3, [r7, #32]
          break;
 80030a2:	e01f      	b.n	80030e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	330c      	adds	r3, #12
 80030aa:	623b      	str	r3, [r7, #32]
          break;
 80030ac:	e01a      	b.n	80030e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d102      	bne.n	80030bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030b6:	2304      	movs	r3, #4
 80030b8:	623b      	str	r3, [r7, #32]
          break;
 80030ba:	e013      	b.n	80030e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d105      	bne.n	80030d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030c4:	2308      	movs	r3, #8
 80030c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	611a      	str	r2, [r3, #16]
          break;
 80030ce:	e009      	b.n	80030e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030d0:	2308      	movs	r3, #8
 80030d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	615a      	str	r2, [r3, #20]
          break;
 80030da:	e003      	b.n	80030e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030dc:	2300      	movs	r3, #0
 80030de:	623b      	str	r3, [r7, #32]
          break;
 80030e0:	e000      	b.n	80030e4 <HAL_GPIO_Init+0x130>
          break;
 80030e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2bff      	cmp	r3, #255	; 0xff
 80030e8:	d801      	bhi.n	80030ee <HAL_GPIO_Init+0x13a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	e001      	b.n	80030f2 <HAL_GPIO_Init+0x13e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3304      	adds	r3, #4
 80030f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2bff      	cmp	r3, #255	; 0xff
 80030f8:	d802      	bhi.n	8003100 <HAL_GPIO_Init+0x14c>
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	e002      	b.n	8003106 <HAL_GPIO_Init+0x152>
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	3b08      	subs	r3, #8
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	210f      	movs	r1, #15
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	fa01 f303 	lsl.w	r3, r1, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	401a      	ands	r2, r3
 8003118:	6a39      	ldr	r1, [r7, #32]
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	431a      	orrs	r2, r3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 80b1 	beq.w	8003296 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003134:	4b4d      	ldr	r3, [pc, #308]	; (800326c <HAL_GPIO_Init+0x2b8>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	4a4c      	ldr	r2, [pc, #304]	; (800326c <HAL_GPIO_Init+0x2b8>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6193      	str	r3, [r2, #24]
 8003140:	4b4a      	ldr	r3, [pc, #296]	; (800326c <HAL_GPIO_Init+0x2b8>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800314c:	4a48      	ldr	r2, [pc, #288]	; (8003270 <HAL_GPIO_Init+0x2bc>)
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003158:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	220f      	movs	r2, #15
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4013      	ands	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a40      	ldr	r2, [pc, #256]	; (8003274 <HAL_GPIO_Init+0x2c0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d013      	beq.n	80031a0 <HAL_GPIO_Init+0x1ec>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a3f      	ldr	r2, [pc, #252]	; (8003278 <HAL_GPIO_Init+0x2c4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00d      	beq.n	800319c <HAL_GPIO_Init+0x1e8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a3e      	ldr	r2, [pc, #248]	; (800327c <HAL_GPIO_Init+0x2c8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d007      	beq.n	8003198 <HAL_GPIO_Init+0x1e4>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a3d      	ldr	r2, [pc, #244]	; (8003280 <HAL_GPIO_Init+0x2cc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_GPIO_Init+0x1e0>
 8003190:	2303      	movs	r3, #3
 8003192:	e006      	b.n	80031a2 <HAL_GPIO_Init+0x1ee>
 8003194:	2304      	movs	r3, #4
 8003196:	e004      	b.n	80031a2 <HAL_GPIO_Init+0x1ee>
 8003198:	2302      	movs	r3, #2
 800319a:	e002      	b.n	80031a2 <HAL_GPIO_Init+0x1ee>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <HAL_GPIO_Init+0x1ee>
 80031a0:	2300      	movs	r3, #0
 80031a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a4:	f002 0203 	and.w	r2, r2, #3
 80031a8:	0092      	lsls	r2, r2, #2
 80031aa:	4093      	lsls	r3, r2
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031b2:	492f      	ldr	r1, [pc, #188]	; (8003270 <HAL_GPIO_Init+0x2bc>)
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	3302      	adds	r3, #2
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d006      	beq.n	80031da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031cc:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	492c      	ldr	r1, [pc, #176]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	608b      	str	r3, [r1, #8]
 80031d8:	e006      	b.n	80031e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031da:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	4928      	ldr	r1, [pc, #160]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031f4:	4b23      	ldr	r3, [pc, #140]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	4922      	ldr	r1, [pc, #136]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60cb      	str	r3, [r1, #12]
 8003200:	e006      	b.n	8003210 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003202:	4b20      	ldr	r3, [pc, #128]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	43db      	mvns	r3, r3
 800320a:	491e      	ldr	r1, [pc, #120]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 800320c:	4013      	ands	r3, r2
 800320e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d006      	beq.n	800322a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800321c:	4b19      	ldr	r3, [pc, #100]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	4918      	ldr	r1, [pc, #96]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
 8003228:	e006      	b.n	8003238 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800322a:	4b16      	ldr	r3, [pc, #88]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	43db      	mvns	r3, r3
 8003232:	4914      	ldr	r1, [pc, #80]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 8003234:	4013      	ands	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d021      	beq.n	8003288 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	490e      	ldr	r1, [pc, #56]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]
 8003250:	e021      	b.n	8003296 <HAL_GPIO_Init+0x2e2>
 8003252:	bf00      	nop
 8003254:	10320000 	.word	0x10320000
 8003258:	10310000 	.word	0x10310000
 800325c:	10220000 	.word	0x10220000
 8003260:	10210000 	.word	0x10210000
 8003264:	10120000 	.word	0x10120000
 8003268:	10110000 	.word	0x10110000
 800326c:	40021000 	.word	0x40021000
 8003270:	40010000 	.word	0x40010000
 8003274:	40010800 	.word	0x40010800
 8003278:	40010c00 	.word	0x40010c00
 800327c:	40011000 	.word	0x40011000
 8003280:	40011400 	.word	0x40011400
 8003284:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_GPIO_Init+0x304>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	43db      	mvns	r3, r3
 8003290:	4909      	ldr	r1, [pc, #36]	; (80032b8 <HAL_GPIO_Init+0x304>)
 8003292:	4013      	ands	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	3301      	adds	r3, #1
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	fa22 f303 	lsr.w	r3, r2, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f47f ae8e 	bne.w	8002fc8 <HAL_GPIO_Init+0x14>
  }
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	372c      	adds	r7, #44	; 0x2c
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	40010400 	.word	0x40010400

080032bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	807b      	strh	r3, [r7, #2]
 80032c8:	4613      	mov	r3, r2
 80032ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032cc:	787b      	ldrb	r3, [r7, #1]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032d8:	e003      	b.n	80032e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032da:	887b      	ldrh	r3, [r7, #2]
 80032dc:	041a      	lsls	r2, r3, #16
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	611a      	str	r2, [r3, #16]
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032fe:	887a      	ldrh	r2, [r7, #2]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4013      	ands	r3, r2
 8003304:	041a      	lsls	r2, r3, #16
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43d9      	mvns	r1, r3
 800330a:	887b      	ldrh	r3, [r7, #2]
 800330c:	400b      	ands	r3, r1
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	611a      	str	r2, [r3, #16]
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
	...

08003320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e272      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 8087 	beq.w	800344e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003340:	4b92      	ldr	r3, [pc, #584]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	2b04      	cmp	r3, #4
 800334a:	d00c      	beq.n	8003366 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800334c:	4b8f      	ldr	r3, [pc, #572]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	2b08      	cmp	r3, #8
 8003356:	d112      	bne.n	800337e <HAL_RCC_OscConfig+0x5e>
 8003358:	4b8c      	ldr	r3, [pc, #560]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003364:	d10b      	bne.n	800337e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003366:	4b89      	ldr	r3, [pc, #548]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d06c      	beq.n	800344c <HAL_RCC_OscConfig+0x12c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d168      	bne.n	800344c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e24c      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003386:	d106      	bne.n	8003396 <HAL_RCC_OscConfig+0x76>
 8003388:	4b80      	ldr	r3, [pc, #512]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a7f      	ldr	r2, [pc, #508]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 800338e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	e02e      	b.n	80033f4 <HAL_RCC_OscConfig+0xd4>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x98>
 800339e:	4b7b      	ldr	r3, [pc, #492]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a7a      	ldr	r2, [pc, #488]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b78      	ldr	r3, [pc, #480]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a77      	ldr	r2, [pc, #476]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e01d      	b.n	80033f4 <HAL_RCC_OscConfig+0xd4>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0xbc>
 80033c2:	4b72      	ldr	r3, [pc, #456]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a71      	ldr	r2, [pc, #452]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b6f      	ldr	r3, [pc, #444]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6e      	ldr	r2, [pc, #440]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0xd4>
 80033dc:	4b6b      	ldr	r3, [pc, #428]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a6a      	ldr	r2, [pc, #424]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b68      	ldr	r3, [pc, #416]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a67      	ldr	r2, [pc, #412]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7ff fc1a 	bl	8002c34 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003404:	f7ff fc16 	bl	8002c34 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e200      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b5d      	ldr	r3, [pc, #372]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0xe4>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7ff fc06 	bl	8002c34 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800342c:	f7ff fc02 	bl	8002c34 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e1ec      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	4b53      	ldr	r3, [pc, #332]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x10c>
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d063      	beq.n	8003522 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800345a:	4b4c      	ldr	r3, [pc, #304]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003466:	4b49      	ldr	r3, [pc, #292]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b08      	cmp	r3, #8
 8003470:	d11c      	bne.n	80034ac <HAL_RCC_OscConfig+0x18c>
 8003472:	4b46      	ldr	r3, [pc, #280]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d116      	bne.n	80034ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	4b43      	ldr	r3, [pc, #268]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x176>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d001      	beq.n	8003496 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e1c0      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003496:	4b3d      	ldr	r3, [pc, #244]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4939      	ldr	r1, [pc, #228]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	e03a      	b.n	8003522 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ba:	f7ff fbbb 	bl	8002c34 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c2:	f7ff fbb7 	bl	8002c34 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e1a1      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	4b2d      	ldr	r3, [pc, #180]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	4b2a      	ldr	r3, [pc, #168]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4927      	ldr	r1, [pc, #156]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]
 80034f4:	e015      	b.n	8003522 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f6:	4b26      	ldr	r3, [pc, #152]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7ff fb9a 	bl	8002c34 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003504:	f7ff fb96 	bl	8002c34 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e180      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d03a      	beq.n	80035a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d019      	beq.n	800356a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003536:	4b17      	ldr	r3, [pc, #92]	; (8003594 <HAL_RCC_OscConfig+0x274>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353c:	f7ff fb7a 	bl	8002c34 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003544:	f7ff fb76 	bl	8002c34 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e160      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	4b0d      	ldr	r3, [pc, #52]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003562:	2001      	movs	r0, #1
 8003564:	f000 fb1e 	bl	8003ba4 <RCC_Delay>
 8003568:	e01c      	b.n	80035a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <HAL_RCC_OscConfig+0x274>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003570:	f7ff fb60 	bl	8002c34 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003576:	e00f      	b.n	8003598 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003578:	f7ff fb5c 	bl	8002c34 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d908      	bls.n	8003598 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e146      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
 8003590:	42420000 	.word	0x42420000
 8003594:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003598:	4b92      	ldr	r3, [pc, #584]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e9      	bne.n	8003578 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80a6 	beq.w	80036fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b6:	4b8b      	ldr	r3, [pc, #556]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10d      	bne.n	80035de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	4b88      	ldr	r3, [pc, #544]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	4a87      	ldr	r2, [pc, #540]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	61d3      	str	r3, [r2, #28]
 80035ce:	4b85      	ldr	r3, [pc, #532]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	4b82      	ldr	r3, [pc, #520]	; (80037e8 <HAL_RCC_OscConfig+0x4c8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d118      	bne.n	800361c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ea:	4b7f      	ldr	r3, [pc, #508]	; (80037e8 <HAL_RCC_OscConfig+0x4c8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a7e      	ldr	r2, [pc, #504]	; (80037e8 <HAL_RCC_OscConfig+0x4c8>)
 80035f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f6:	f7ff fb1d 	bl	8002c34 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fe:	f7ff fb19 	bl	8002c34 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b64      	cmp	r3, #100	; 0x64
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e103      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	4b75      	ldr	r3, [pc, #468]	; (80037e8 <HAL_RCC_OscConfig+0x4c8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d106      	bne.n	8003632 <HAL_RCC_OscConfig+0x312>
 8003624:	4b6f      	ldr	r3, [pc, #444]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4a6e      	ldr	r2, [pc, #440]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6213      	str	r3, [r2, #32]
 8003630:	e02d      	b.n	800368e <HAL_RCC_OscConfig+0x36e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10c      	bne.n	8003654 <HAL_RCC_OscConfig+0x334>
 800363a:	4b6a      	ldr	r3, [pc, #424]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	4a69      	ldr	r2, [pc, #420]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	6213      	str	r3, [r2, #32]
 8003646:	4b67      	ldr	r3, [pc, #412]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4a66      	ldr	r2, [pc, #408]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	f023 0304 	bic.w	r3, r3, #4
 8003650:	6213      	str	r3, [r2, #32]
 8003652:	e01c      	b.n	800368e <HAL_RCC_OscConfig+0x36e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b05      	cmp	r3, #5
 800365a:	d10c      	bne.n	8003676 <HAL_RCC_OscConfig+0x356>
 800365c:	4b61      	ldr	r3, [pc, #388]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4a60      	ldr	r2, [pc, #384]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003662:	f043 0304 	orr.w	r3, r3, #4
 8003666:	6213      	str	r3, [r2, #32]
 8003668:	4b5e      	ldr	r3, [pc, #376]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	4a5d      	ldr	r2, [pc, #372]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6213      	str	r3, [r2, #32]
 8003674:	e00b      	b.n	800368e <HAL_RCC_OscConfig+0x36e>
 8003676:	4b5b      	ldr	r3, [pc, #364]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a5a      	ldr	r2, [pc, #360]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	6213      	str	r3, [r2, #32]
 8003682:	4b58      	ldr	r3, [pc, #352]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4a57      	ldr	r2, [pc, #348]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d015      	beq.n	80036c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003696:	f7ff facd 	bl	8002c34 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	e00a      	b.n	80036b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7ff fac9 	bl	8002c34 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e0b1      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b4:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ee      	beq.n	800369e <HAL_RCC_OscConfig+0x37e>
 80036c0:	e014      	b.n	80036ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c2:	f7ff fab7 	bl	8002c34 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7ff fab3 	bl	8002c34 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e09b      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e0:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ee      	bne.n	80036ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036ec:	7dfb      	ldrb	r3, [r7, #23]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f2:	4b3c      	ldr	r3, [pc, #240]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	4a3b      	ldr	r2, [pc, #236]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8087 	beq.w	8003816 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003708:	4b36      	ldr	r3, [pc, #216]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	2b08      	cmp	r3, #8
 8003712:	d061      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d146      	bne.n	80037aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371c:	4b33      	ldr	r3, [pc, #204]	; (80037ec <HAL_RCC_OscConfig+0x4cc>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003722:	f7ff fa87 	bl	8002c34 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372a:	f7ff fa83 	bl	8002c34 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e06d      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373c:	4b29      	ldr	r3, [pc, #164]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003750:	d108      	bne.n	8003764 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	4921      	ldr	r1, [pc, #132]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003764:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a19      	ldr	r1, [r3, #32]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	430b      	orrs	r3, r1
 8003776:	491b      	ldr	r1, [pc, #108]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <HAL_RCC_OscConfig+0x4cc>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7ff fa57 	bl	8002c34 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378a:	f7ff fa53 	bl	8002c34 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e03d      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x46a>
 80037a8:	e035      	b.n	8003816 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <HAL_RCC_OscConfig+0x4cc>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7ff fa40 	bl	8002c34 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b8:	f7ff fa3c 	bl	8002c34 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e026      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x498>
 80037d6:	e01e      	b.n	8003816 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e019      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40007000 	.word	0x40007000
 80037ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_OscConfig+0x500>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	429a      	cmp	r2, r3
 8003802:	d106      	bne.n	8003812 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d001      	beq.n	8003816 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000

08003824 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0d0      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003838:	4b6a      	ldr	r3, [pc, #424]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d910      	bls.n	8003868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b67      	ldr	r3, [pc, #412]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 0207 	bic.w	r2, r3, #7
 800384e:	4965      	ldr	r1, [pc, #404]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b63      	ldr	r3, [pc, #396]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0b8      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d020      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003880:	4b59      	ldr	r3, [pc, #356]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a58      	ldr	r2, [pc, #352]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800388a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003898:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a52      	ldr	r2, [pc, #328]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a4:	4b50      	ldr	r3, [pc, #320]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	494d      	ldr	r1, [pc, #308]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d040      	beq.n	8003944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d107      	bne.n	80038da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d115      	bne.n	8003902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e07f      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d107      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e2:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e073      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f2:	4b3d      	ldr	r3, [pc, #244]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e06b      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003902:	4b39      	ldr	r3, [pc, #228]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f023 0203 	bic.w	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4936      	ldr	r1, [pc, #216]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003914:	f7ff f98e 	bl	8002c34 <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	e00a      	b.n	8003932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391c:	f7ff f98a 	bl	8002c34 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	; 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e053      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 020c 	and.w	r2, r3, #12
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	429a      	cmp	r2, r3
 8003942:	d1eb      	bne.n	800391c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003944:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d210      	bcs.n	8003974 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 0207 	bic.w	r2, r3, #7
 800395a:	4922      	ldr	r1, [pc, #136]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e032      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003980:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4916      	ldr	r1, [pc, #88]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800399e:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	490e      	ldr	r1, [pc, #56]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039b2:	f000 f82d 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 80039b6:	4602      	mov	r2, r0
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	490a      	ldr	r1, [pc, #40]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80039c4:	5ccb      	ldrb	r3, [r1, r3]
 80039c6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ca:	4a09      	ldr	r2, [pc, #36]	; (80039f0 <HAL_RCC_ClockConfig+0x1cc>)
 80039cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_RCC_ClockConfig+0x1d0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe ff4c 	bl	8002870 <HAL_InitTick>

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40022000 	.word	0x40022000
 80039e8:	40021000 	.word	0x40021000
 80039ec:	0800a0a8 	.word	0x0800a0a8
 80039f0:	20000004 	.word	0x20000004
 80039f4:	20000008 	.word	0x20000008

080039f8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <HAL_RCC_EnableCSS+0x14>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
}
 8003a02:	bf00      	nop
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	4242004c 	.word	0x4242004c

08003a10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	2300      	movs	r3, #0
 8003a24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d002      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x30>
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x36>
 8003a3e:	e027      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a42:	613b      	str	r3, [r7, #16]
      break;
 8003a44:	e027      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	0c9b      	lsrs	r3, r3, #18
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	4a17      	ldr	r2, [pc, #92]	; (8003aac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a50:	5cd3      	ldrb	r3, [r2, r3]
 8003a52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d010      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a5e:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	0c5b      	lsrs	r3, r3, #17
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	4a11      	ldr	r2, [pc, #68]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a6a:	5cd3      	ldrb	r3, [r2, r3]
 8003a6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a0d      	ldr	r2, [pc, #52]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a72:	fb03 f202 	mul.w	r2, r3, r2
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e004      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a0c      	ldr	r2, [pc, #48]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a84:	fb02 f303 	mul.w	r3, r2, r3
 8003a88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	613b      	str	r3, [r7, #16]
      break;
 8003a8e:	e002      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a92:	613b      	str	r3, [r7, #16]
      break;
 8003a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a96:	693b      	ldr	r3, [r7, #16]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	007a1200 	.word	0x007a1200
 8003aac:	0800a0c0 	.word	0x0800a0c0
 8003ab0:	0800a0d0 	.word	0x0800a0d0
 8003ab4:	003d0900 	.word	0x003d0900

08003ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003abc:	4b02      	ldr	r3, [pc, #8]	; (8003ac8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr
 8003ac8:	20000004 	.word	0x20000004

08003acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ad0:	f7ff fff2 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	4903      	ldr	r1, [pc, #12]	; (8003af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	0800a0b8 	.word	0x0800a0b8

08003af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003af8:	f7ff ffde 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	0adb      	lsrs	r3, r3, #11
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	4903      	ldr	r1, [pc, #12]	; (8003b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b0a:	5ccb      	ldrb	r3, [r1, r3]
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	0800a0b8 	.word	0x0800a0b8

08003b1c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	220f      	movs	r2, #15
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_RCC_GetClockConfig+0x58>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0203 	and.w	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <HAL_RCC_GetClockConfig+0x58>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_GetClockConfig+0x58>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b50:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <HAL_RCC_GetClockConfig+0x58>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	08db      	lsrs	r3, r3, #3
 8003b56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_RCC_GetClockConfig+0x5c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0207 	and.w	r2, r3, #7
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40022000 	.word	0x40022000

08003b7c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b88:	2b80      	cmp	r3, #128	; 0x80
 8003b8a:	d104      	bne.n	8003b96 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003b8c:	f000 f828 	bl	8003be0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003b92:	2280      	movs	r2, #128	; 0x80
 8003b94:	701a      	strb	r2, [r3, #0]
  }
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	4002100a 	.word	0x4002100a

08003ba4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <RCC_Delay+0x34>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <RCC_Delay+0x38>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	0a5b      	lsrs	r3, r3, #9
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	fb02 f303 	mul.w	r3, r2, r3
 8003bbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bc0:	bf00      	nop
  }
  while (Delay --);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1e5a      	subs	r2, r3, #1
 8003bc6:	60fa      	str	r2, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f9      	bne.n	8003bc0 <RCC_Delay+0x1c>
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr
 8003bd8:	20000004 	.word	0x20000004
 8003bdc:	10624dd3 	.word	0x10624dd3

08003be0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e076      	b.n	8003cec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d108      	bne.n	8003c18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c0e:	d009      	beq.n	8003c24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	61da      	str	r2, [r3, #28]
 8003c16:	e005      	b.n	8003c24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fe fcc0 	bl	80025c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca8:	ea42 0103 	orr.w	r1, r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	0c1a      	lsrs	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f002 0204 	and.w	r2, r2, #4
 8003cca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08c      	sub	sp, #48	; 0x30
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d02:	2301      	movs	r3, #1
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x26>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e198      	b.n	800404c <HAL_SPI_TransmitReceive+0x358>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d22:	f7fe ff87 	bl	8002c34 <HAL_GetTick>
 8003d26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d38:	887b      	ldrh	r3, [r7, #2]
 8003d3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d00f      	beq.n	8003d64 <HAL_SPI_TransmitReceive+0x70>
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d4a:	d107      	bne.n	8003d5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d103      	bne.n	8003d5c <HAL_SPI_TransmitReceive+0x68>
 8003d54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d003      	beq.n	8003d64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d62:	e16d      	b.n	8004040 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_SPI_TransmitReceive+0x82>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_SPI_TransmitReceive+0x82>
 8003d70:	887b      	ldrh	r3, [r7, #2]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d7c:	e160      	b.n	8004040 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d003      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2205      	movs	r2, #5
 8003d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	887a      	ldrh	r2, [r7, #2]
 8003da2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	887a      	ldrh	r2, [r7, #2]
 8003da8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	887a      	ldrh	r2, [r7, #2]
 8003db4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	887a      	ldrh	r2, [r7, #2]
 8003dba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d007      	beq.n	8003de6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dee:	d17c      	bne.n	8003eea <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_SPI_TransmitReceive+0x10a>
 8003df8:	8b7b      	ldrh	r3, [r7, #26]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d16a      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	881a      	ldrh	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	1c9a      	adds	r2, r3, #2
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e22:	e057      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d11b      	bne.n	8003e6a <HAL_SPI_TransmitReceive+0x176>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d016      	beq.n	8003e6a <HAL_SPI_TransmitReceive+0x176>
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d113      	bne.n	8003e6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	881a      	ldrh	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	1c9a      	adds	r2, r3, #2
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d119      	bne.n	8003eac <HAL_SPI_TransmitReceive+0x1b8>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d014      	beq.n	8003eac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	b292      	uxth	r2, r2
 8003e8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e94:	1c9a      	adds	r2, r3, #2
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003eac:	f7fe fec2 	bl	8002c34 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d80b      	bhi.n	8003ed4 <HAL_SPI_TransmitReceive+0x1e0>
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d007      	beq.n	8003ed4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003ed2:	e0b5      	b.n	8004040 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1a2      	bne.n	8003e24 <HAL_SPI_TransmitReceive+0x130>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d19d      	bne.n	8003e24 <HAL_SPI_TransmitReceive+0x130>
 8003ee8:	e080      	b.n	8003fec <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_SPI_TransmitReceive+0x204>
 8003ef2:	8b7b      	ldrh	r3, [r7, #26]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d16f      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	330c      	adds	r3, #12
 8003f02:	7812      	ldrb	r2, [r2, #0]
 8003f04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f1e:	e05b      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d11c      	bne.n	8003f68 <HAL_SPI_TransmitReceive+0x274>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d017      	beq.n	8003f68 <HAL_SPI_TransmitReceive+0x274>
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d114      	bne.n	8003f68 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	330c      	adds	r3, #12
 8003f48:	7812      	ldrb	r2, [r2, #0]
 8003f4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d119      	bne.n	8003faa <HAL_SPI_TransmitReceive+0x2b6>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d014      	beq.n	8003faa <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003faa:	f7fe fe43 	bl	8002c34 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d803      	bhi.n	8003fc2 <HAL_SPI_TransmitReceive+0x2ce>
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d102      	bne.n	8003fc8 <HAL_SPI_TransmitReceive+0x2d4>
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d107      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003fd6:	e033      	b.n	8004040 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d19e      	bne.n	8003f20 <HAL_SPI_TransmitReceive+0x22c>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d199      	bne.n	8003f20 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f9b3 	bl	800435c <SPI_EndRxTxTransaction>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d006      	beq.n	800400a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2220      	movs	r2, #32
 8004006:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004008:	e01a      	b.n	8004040 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004036:	e003      	b.n	8004040 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800404c:	4618      	mov	r0, r3
 800404e:	3730      	adds	r7, #48	; 0x30
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10e      	bne.n	8004094 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800407c:	2b00      	cmp	r3, #0
 800407e:	d009      	beq.n	8004094 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
    return;
 8004092:	e0b7      	b.n	8004204 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <HAL_SPI_IRQHandler+0x5e>
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d004      	beq.n	80040b2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	4798      	blx	r3
    return;
 80040b0:	e0a8      	b.n	8004204 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d105      	bne.n	80040c8 <HAL_SPI_IRQHandler+0x74>
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 809e 	beq.w	8004204 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8098 	beq.w	8004204 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d023      	beq.n	8004126 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d011      	beq.n	800410e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	f043 0204 	orr.w	r2, r3, #4
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	e00b      	b.n	8004126 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	693b      	ldr	r3, [r7, #16]
        return;
 8004124:	e06e      	b.n	8004204 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d014      	beq.n	800415a <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	f043 0201 	orr.w	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415e:	2b00      	cmp	r3, #0
 8004160:	d04f      	beq.n	8004202 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004170:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d104      	bne.n	800418e <HAL_SPI_IRQHandler+0x13a>
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d034      	beq.n	80041f8 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0203 	bic.w	r2, r2, #3
 800419c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d011      	beq.n	80041ca <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041aa:	4a18      	ldr	r2, [pc, #96]	; (800420c <HAL_SPI_IRQHandler+0x1b8>)
 80041ac:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fe86 	bl	8002ec4 <HAL_DMA_Abort_IT>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d016      	beq.n	8004200 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d6:	4a0d      	ldr	r2, [pc, #52]	; (800420c <HAL_SPI_IRQHandler+0x1b8>)
 80041d8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe fe70 	bl	8002ec4 <HAL_DMA_Abort_IT>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80041f6:	e003      	b.n	8004200 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f809 	bl	8004210 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80041fe:	e000      	b.n	8004202 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8004200:	bf00      	nop
    return;
 8004202:	bf00      	nop
  }
}
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	08004223 	.word	0x08004223

08004210 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff ffe7 	bl	8004210 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	4613      	mov	r3, r2
 800425a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800425c:	f7fe fcea 	bl	8002c34 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	4413      	add	r3, r2
 800426a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800426c:	f7fe fce2 	bl	8002c34 <HAL_GetTick>
 8004270:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004272:	4b39      	ldr	r3, [pc, #228]	; (8004358 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	015b      	lsls	r3, r3, #5
 8004278:	0d1b      	lsrs	r3, r3, #20
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	fb02 f303 	mul.w	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004282:	e054      	b.n	800432e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	d050      	beq.n	800432e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800428c:	f7fe fcd2 	bl	8002c34 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	429a      	cmp	r2, r3
 800429a:	d902      	bls.n	80042a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d13d      	bne.n	800431e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ba:	d111      	bne.n	80042e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c4:	d004      	beq.n	80042d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ce:	d107      	bne.n	80042e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e8:	d10f      	bne.n	800430a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e017      	b.n	800434e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	3b01      	subs	r3, #1
 800432c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4013      	ands	r3, r2
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	bf0c      	ite	eq
 800433e:	2301      	moveq	r3, #1
 8004340:	2300      	movne	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	429a      	cmp	r2, r3
 800434a:	d19b      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3720      	adds	r7, #32
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000004 	.word	0x20000004

0800435c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	2180      	movs	r1, #128	; 0x80
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff ff6a 	bl	800424c <SPI_WaitFlagStateUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e000      	b.n	8004390 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e041      	b.n	800442e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f839 	bl	8004436 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f000 fbfa 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d001      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e03a      	b.n	80044d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <HAL_TIM_Base_Start_IT+0x98>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00e      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x58>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448a:	d009      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x58>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d004      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x58>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d111      	bne.n	80044c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b06      	cmp	r3, #6
 80044b0:	d010      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0201 	orr.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c2:	e007      	b.n	80044d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800

080044ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	f241 1311 	movw	r3, #4369	; 0x1111
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10f      	bne.n	8004534 <HAL_TIM_Base_Stop_IT+0x48>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a1a      	ldr	r2, [r3, #32]
 800451a:	f240 4344 	movw	r3, #1092	; 0x444
 800451e:	4013      	ands	r3, r2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d107      	bne.n	8004534 <HAL_TIM_Base_Stop_IT+0x48>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0201 	bic.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e041      	b.n	80045de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fe f88a 	bl	8002688 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f000 fb22 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <HAL_TIM_PWM_Start+0x24>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e022      	b.n	8004652 <HAL_TIM_PWM_Start+0x6a>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b04      	cmp	r3, #4
 8004610:	d109      	bne.n	8004626 <HAL_TIM_PWM_Start+0x3e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	bf14      	ite	ne
 800461e:	2301      	movne	r3, #1
 8004620:	2300      	moveq	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	e015      	b.n	8004652 <HAL_TIM_PWM_Start+0x6a>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d109      	bne.n	8004640 <HAL_TIM_PWM_Start+0x58>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e008      	b.n	8004652 <HAL_TIM_PWM_Start+0x6a>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e05e      	b.n	8004718 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <HAL_TIM_PWM_Start+0x82>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004668:	e013      	b.n	8004692 <HAL_TIM_PWM_Start+0xaa>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d104      	bne.n	800467a <HAL_TIM_PWM_Start+0x92>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004678:	e00b      	b.n	8004692 <HAL_TIM_PWM_Start+0xaa>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d104      	bne.n	800468a <HAL_TIM_PWM_Start+0xa2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004688:	e003      	b.n	8004692 <HAL_TIM_PWM_Start+0xaa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2201      	movs	r2, #1
 8004698:	6839      	ldr	r1, [r7, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fc82 	bl	8004fa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1e      	ldr	r2, [pc, #120]	; (8004720 <HAL_TIM_PWM_Start+0x138>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d107      	bne.n	80046ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a18      	ldr	r2, [pc, #96]	; (8004720 <HAL_TIM_PWM_Start+0x138>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <HAL_TIM_PWM_Start+0xfa>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046cc:	d009      	beq.n	80046e2 <HAL_TIM_PWM_Start+0xfa>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a14      	ldr	r2, [pc, #80]	; (8004724 <HAL_TIM_PWM_Start+0x13c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <HAL_TIM_PWM_Start+0xfa>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a12      	ldr	r2, [pc, #72]	; (8004728 <HAL_TIM_PWM_Start+0x140>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d111      	bne.n	8004706 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b06      	cmp	r3, #6
 80046f2:	d010      	beq.n	8004716 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004704:	e007      	b.n	8004716 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0201 	orr.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40000400 	.word	0x40000400
 8004728:	40000800 	.word	0x40000800

0800472c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2200      	movs	r2, #0
 800473c:	6839      	ldr	r1, [r7, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fc30 	bl	8004fa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a29      	ldr	r2, [pc, #164]	; (80047f0 <HAL_TIM_PWM_Stop+0xc4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d117      	bne.n	800477e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	f241 1311 	movw	r3, #4369	; 0x1111
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10f      	bne.n	800477e <HAL_TIM_PWM_Stop+0x52>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6a1a      	ldr	r2, [r3, #32]
 8004764:	f240 4344 	movw	r3, #1092	; 0x444
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d107      	bne.n	800477e <HAL_TIM_PWM_Stop+0x52>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800477c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6a1a      	ldr	r2, [r3, #32]
 8004784:	f241 1311 	movw	r3, #4369	; 0x1111
 8004788:	4013      	ands	r3, r2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <HAL_TIM_PWM_Stop+0x82>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6a1a      	ldr	r2, [r3, #32]
 8004794:	f240 4344 	movw	r3, #1092	; 0x444
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d107      	bne.n	80047ae <HAL_TIM_PWM_Stop+0x82>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d104      	bne.n	80047be <HAL_TIM_PWM_Stop+0x92>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047bc:	e013      	b.n	80047e6 <HAL_TIM_PWM_Stop+0xba>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d104      	bne.n	80047ce <HAL_TIM_PWM_Stop+0xa2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047cc:	e00b      	b.n	80047e6 <HAL_TIM_PWM_Stop+0xba>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d104      	bne.n	80047de <HAL_TIM_PWM_Stop+0xb2>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047dc:	e003      	b.n	80047e6 <HAL_TIM_PWM_Stop+0xba>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40012c00 	.word	0x40012c00

080047f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b02      	cmp	r3, #2
 8004808:	d122      	bne.n	8004850 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b02      	cmp	r3, #2
 8004816:	d11b      	bne.n	8004850 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0202 	mvn.w	r2, #2
 8004820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f9af 	bl	8004b9a <HAL_TIM_IC_CaptureCallback>
 800483c:	e005      	b.n	800484a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f9a2 	bl	8004b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f9b1 	bl	8004bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b04      	cmp	r3, #4
 800485c:	d122      	bne.n	80048a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b04      	cmp	r3, #4
 800486a:	d11b      	bne.n	80048a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0204 	mvn.w	r2, #4
 8004874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f985 	bl	8004b9a <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f978 	bl	8004b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f987 	bl	8004bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d122      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d11b      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0208 	mvn.w	r2, #8
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2204      	movs	r2, #4
 80048ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f95b 	bl	8004b9a <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f94e 	bl	8004b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f95d 	bl	8004bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b10      	cmp	r3, #16
 8004904:	d122      	bne.n	800494c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b10      	cmp	r3, #16
 8004912:	d11b      	bne.n	800494c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0210 	mvn.w	r2, #16
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2208      	movs	r2, #8
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f931 	bl	8004b9a <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f924 	bl	8004b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f933 	bl	8004bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b01      	cmp	r3, #1
 8004958:	d10e      	bne.n	8004978 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b01      	cmp	r3, #1
 8004966:	d107      	bne.n	8004978 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0201 	mvn.w	r2, #1
 8004970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fd fd20 	bl	80023b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d10e      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004990:	2b80      	cmp	r3, #128	; 0x80
 8004992:	d107      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800499c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fbdc 	bl	800515c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b40      	cmp	r3, #64	; 0x40
 80049b0:	d10e      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d107      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f8f7 	bl	8004bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d10e      	bne.n	80049fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d107      	bne.n	80049fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0220 	mvn.w	r2, #32
 80049f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fba7 	bl	800514a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e0ae      	b.n	8004b80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b0c      	cmp	r3, #12
 8004a2e:	f200 809f 	bhi.w	8004b70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a32:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004a6d 	.word	0x08004a6d
 8004a3c:	08004b71 	.word	0x08004b71
 8004a40:	08004b71 	.word	0x08004b71
 8004a44:	08004b71 	.word	0x08004b71
 8004a48:	08004aad 	.word	0x08004aad
 8004a4c:	08004b71 	.word	0x08004b71
 8004a50:	08004b71 	.word	0x08004b71
 8004a54:	08004b71 	.word	0x08004b71
 8004a58:	08004aef 	.word	0x08004aef
 8004a5c:	08004b71 	.word	0x08004b71
 8004a60:	08004b71 	.word	0x08004b71
 8004a64:	08004b71 	.word	0x08004b71
 8004a68:	08004b2f 	.word	0x08004b2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f90e 	bl	8004c94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0208 	orr.w	r2, r2, #8
 8004a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0204 	bic.w	r2, r2, #4
 8004a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6999      	ldr	r1, [r3, #24]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	619a      	str	r2, [r3, #24]
      break;
 8004aaa:	e064      	b.n	8004b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f954 	bl	8004d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6999      	ldr	r1, [r3, #24]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	021a      	lsls	r2, r3, #8
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	619a      	str	r2, [r3, #24]
      break;
 8004aec:	e043      	b.n	8004b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 f99d 	bl	8004e34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0208 	orr.w	r2, r2, #8
 8004b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0204 	bic.w	r2, r2, #4
 8004b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69d9      	ldr	r1, [r3, #28]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	61da      	str	r2, [r3, #28]
      break;
 8004b2c:	e023      	b.n	8004b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 f9e7 	bl	8004f08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69d9      	ldr	r1, [r3, #28]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	021a      	lsls	r2, r3, #8
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	61da      	str	r2, [r3, #28]
      break;
 8004b6e:	e002      	b.n	8004b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	75fb      	strb	r3, [r7, #23]
      break;
 8004b74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr

08004bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr

08004bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr

08004bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a29      	ldr	r2, [pc, #164]	; (8004c88 <TIM_Base_SetConfig+0xb8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00b      	beq.n	8004c00 <TIM_Base_SetConfig+0x30>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bee:	d007      	beq.n	8004c00 <TIM_Base_SetConfig+0x30>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a26      	ldr	r2, [pc, #152]	; (8004c8c <TIM_Base_SetConfig+0xbc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d003      	beq.n	8004c00 <TIM_Base_SetConfig+0x30>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a25      	ldr	r2, [pc, #148]	; (8004c90 <TIM_Base_SetConfig+0xc0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d108      	bne.n	8004c12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1c      	ldr	r2, [pc, #112]	; (8004c88 <TIM_Base_SetConfig+0xb8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <TIM_Base_SetConfig+0x62>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c20:	d007      	beq.n	8004c32 <TIM_Base_SetConfig+0x62>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a19      	ldr	r2, [pc, #100]	; (8004c8c <TIM_Base_SetConfig+0xbc>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_Base_SetConfig+0x62>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <TIM_Base_SetConfig+0xc0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d108      	bne.n	8004c44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a07      	ldr	r2, [pc, #28]	; (8004c88 <TIM_Base_SetConfig+0xb8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d103      	bne.n	8004c78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	615a      	str	r2, [r3, #20]
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800

08004c94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f023 0201 	bic.w	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0303 	bic.w	r3, r3, #3
 8004cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f023 0302 	bic.w	r3, r3, #2
 8004cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a1c      	ldr	r2, [pc, #112]	; (8004d5c <TIM_OC1_SetConfig+0xc8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10c      	bne.n	8004d0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f023 0308 	bic.w	r3, r3, #8
 8004cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f023 0304 	bic.w	r3, r3, #4
 8004d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <TIM_OC1_SetConfig+0xc8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d111      	bne.n	8004d36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	621a      	str	r2, [r3, #32]
}
 8004d50:	bf00      	nop
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40012c00 	.word	0x40012c00

08004d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f023 0210 	bic.w	r2, r3, #16
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 0320 	bic.w	r3, r3, #32
 8004daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <TIM_OC2_SetConfig+0xd0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10d      	bne.n	8004ddc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a14      	ldr	r2, [pc, #80]	; (8004e30 <TIM_OC2_SetConfig+0xd0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d113      	bne.n	8004e0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004df2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr
 8004e30:	40012c00 	.word	0x40012c00

08004e34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1d      	ldr	r2, [pc, #116]	; (8004f04 <TIM_OC3_SetConfig+0xd0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d10d      	bne.n	8004eae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a14      	ldr	r2, [pc, #80]	; (8004f04 <TIM_OC3_SetConfig+0xd0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d113      	bne.n	8004ede <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	621a      	str	r2, [r3, #32]
}
 8004ef8:	bf00      	nop
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40012c00 	.word	0x40012c00

08004f08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	031b      	lsls	r3, r3, #12
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a0f      	ldr	r2, [pc, #60]	; (8004fa0 <TIM_OC4_SetConfig+0x98>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d109      	bne.n	8004f7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	019b      	lsls	r3, r3, #6
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	621a      	str	r2, [r3, #32]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr
 8004fa0:	40012c00 	.word	0x40012c00

08004fa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1a      	ldr	r2, [r3, #32]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a1a      	ldr	r2, [r3, #32]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005000:	2302      	movs	r3, #2
 8005002:	e046      	b.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a16      	ldr	r2, [pc, #88]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00e      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005050:	d009      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a12      	ldr	r2, [pc, #72]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a10      	ldr	r2, [pc, #64]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d10c      	bne.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800506c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	4313      	orrs	r3, r2
 8005076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800

080050a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e03d      	b.n	8005140 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr

0800514a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr

0800516e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e042      	b.n	8005206 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7fd fb09 	bl	80027ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2224      	movs	r2, #36	; 0x24
 800519e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fdfa 	bl	8005dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695a      	ldr	r2, [r3, #20]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b08a      	sub	sp, #40	; 0x28
 8005212:	af02      	add	r7, sp, #8
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	603b      	str	r3, [r7, #0]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b20      	cmp	r3, #32
 800522c:	d16d      	bne.n	800530a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_UART_Transmit+0x2c>
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e066      	b.n	800530c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2221      	movs	r2, #33	; 0x21
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800524c:	f7fd fcf2 	bl	8002c34 <HAL_GetTick>
 8005250:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	88fa      	ldrh	r2, [r7, #6]
 8005256:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	88fa      	ldrh	r2, [r7, #6]
 800525c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005266:	d108      	bne.n	800527a <HAL_UART_Transmit+0x6c>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005270:	2300      	movs	r3, #0
 8005272:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	e003      	b.n	8005282 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005282:	e02a      	b.n	80052da <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2200      	movs	r2, #0
 800528c:	2180      	movs	r1, #128	; 0x80
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 fb49 	bl	8005926 <UART_WaitOnFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e036      	b.n	800530c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10b      	bne.n	80052bc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	3302      	adds	r3, #2
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	e007      	b.n	80052cc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	781a      	ldrb	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	3301      	adds	r3, #1
 80052ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1cf      	bne.n	8005284 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2200      	movs	r2, #0
 80052ec:	2140      	movs	r1, #64	; 0x40
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fb19 	bl	8005926 <UART_WaitOnFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e006      	b.n	800530c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	e000      	b.n	800530c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800530a:	2302      	movs	r3, #2
  }
}
 800530c:	4618      	mov	r0, r3
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	4613      	mov	r3, r2
 8005320:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b20      	cmp	r3, #32
 800532c:	d121      	bne.n	8005372 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_UART_Transmit_IT+0x26>
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e01a      	b.n	8005374 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	88fa      	ldrh	r2, [r7, #6]
 8005348:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	88fa      	ldrh	r2, [r7, #6]
 800534e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2221      	movs	r2, #33	; 0x21
 800535a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800536c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	e000      	b.n	8005374 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005372:	2302      	movs	r3, #2
  }
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	4613      	mov	r3, r2
 800538a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b20      	cmp	r3, #32
 8005396:	d112      	bne.n	80053be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_UART_Receive_IT+0x26>
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e00b      	b.n	80053c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	461a      	mov	r2, r3
 80053b2:	68b9      	ldr	r1, [r7, #8]
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 fb24 	bl	8005a02 <UART_Start_Receive_IT>
 80053ba:	4603      	mov	r3, r0
 80053bc:	e000      	b.n	80053c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80053be:	2302      	movs	r3, #2
  }
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b0ba      	sub	sp, #232	; 0xe8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10f      	bne.n	800542e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <HAL_UART_IRQHandler+0x66>
 800541a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fc01 	bl	8005c2e <UART_Receive_IT>
      return;
 800542c:	e25b      	b.n	80058e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800542e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80de 	beq.w	80055f4 <HAL_UART_IRQHandler+0x22c>
 8005438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d106      	bne.n	8005452 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005448:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80d1 	beq.w	80055f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <HAL_UART_IRQHandler+0xae>
 800545e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546e:	f043 0201 	orr.w	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <HAL_UART_IRQHandler+0xd2>
 8005482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005492:	f043 0202 	orr.w	r2, r3, #2
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <HAL_UART_IRQHandler+0xf6>
 80054a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b6:	f043 0204 	orr.w	r2, r3, #4
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d011      	beq.n	80054ee <HAL_UART_IRQHandler+0x126>
 80054ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d105      	bne.n	80054e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e6:	f043 0208 	orr.w	r2, r3, #8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 81f2 	beq.w	80058dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_UART_IRQHandler+0x14e>
 8005504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fb8c 	bl	8005c2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	bf14      	ite	ne
 8005524:	2301      	movne	r3, #1
 8005526:	2300      	moveq	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d103      	bne.n	8005542 <HAL_UART_IRQHandler+0x17a>
 800553a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d04f      	beq.n	80055e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fa96 	bl	8005a74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d041      	beq.n	80055da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3314      	adds	r3, #20
 800555c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800556c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3314      	adds	r3, #20
 800557e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005582:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800558e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800559a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1d9      	bne.n	8005556 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d013      	beq.n	80055d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ae:	4a7e      	ldr	r2, [pc, #504]	; (80057a8 <HAL_UART_IRQHandler+0x3e0>)
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fd fc84 	bl	8002ec4 <HAL_DMA_Abort_IT>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d016      	beq.n	80055f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055cc:	4610      	mov	r0, r2
 80055ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d0:	e00e      	b.n	80055f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f993 	bl	80058fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d8:	e00a      	b.n	80055f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f98f 	bl	80058fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e0:	e006      	b.n	80055f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f98b 	bl	80058fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80055ee:	e175      	b.n	80058dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f0:	bf00      	nop
    return;
 80055f2:	e173      	b.n	80058dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	f040 814f 	bne.w	800589c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 8148 	beq.w	800589c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800560c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8141 	beq.w	800589c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 80b6 	beq.w	80057ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800564c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8145 	beq.w	80058e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800565a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800565e:	429a      	cmp	r2, r3
 8005660:	f080 813e 	bcs.w	80058e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800566a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	2b20      	cmp	r3, #32
 8005674:	f000 8088 	beq.w	8005788 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800568e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005696:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	330c      	adds	r3, #12
 80056a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80056a4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1d9      	bne.n	8005678 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3314      	adds	r3, #20
 80056ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3314      	adds	r3, #20
 80056e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e1      	bne.n	80056c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3314      	adds	r3, #20
 8005706:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3314      	adds	r3, #20
 8005720:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005724:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005726:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800572a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e3      	bne.n	8005700 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	330c      	adds	r3, #12
 800574c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005758:	f023 0310 	bic.w	r3, r3, #16
 800575c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800576a:	65ba      	str	r2, [r7, #88]	; 0x58
 800576c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005772:	e841 2300 	strex	r3, r2, [r1]
 8005776:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e3      	bne.n	8005746 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005782:	4618      	mov	r0, r3
 8005784:	f7fd fb63 	bl	8002e4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005796:	b29b      	uxth	r3, r3
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	b29b      	uxth	r3, r3
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f8b6 	bl	8005910 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057a4:	e09c      	b.n	80058e0 <HAL_UART_IRQHandler+0x518>
 80057a6:	bf00      	nop
 80057a8:	08005b39 	.word	0x08005b39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 808e 	beq.w	80058e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80057c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 8089 	beq.w	80058e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	330c      	adds	r3, #12
 80057f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057f6:	647a      	str	r2, [r7, #68]	; 0x44
 80057f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e3      	bne.n	80057d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3314      	adds	r3, #20
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	623b      	str	r3, [r7, #32]
   return(result);
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	f023 0301 	bic.w	r3, r3, #1
 8005820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3314      	adds	r3, #20
 800582a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800582e:	633a      	str	r2, [r7, #48]	; 0x30
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e3      	bne.n	800580a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	330c      	adds	r3, #12
 8005856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0310 	bic.w	r3, r3, #16
 8005866:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
 8005870:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005874:	61fa      	str	r2, [r7, #28]
 8005876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	69b9      	ldr	r1, [r7, #24]
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	617b      	str	r3, [r7, #20]
   return(result);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e3      	bne.n	8005850 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800588e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f83b 	bl	8005910 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800589a:	e023      	b.n	80058e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800589c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <HAL_UART_IRQHandler+0x4f4>
 80058a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f953 	bl	8005b60 <UART_Transmit_IT>
    return;
 80058ba:	e014      	b.n	80058e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00e      	beq.n	80058e6 <HAL_UART_IRQHandler+0x51e>
 80058c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f992 	bl	8005bfe <UART_EndTransmit_IT>
    return;
 80058da:	e004      	b.n	80058e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80058dc:	bf00      	nop
 80058de:	e002      	b.n	80058e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80058e0:	bf00      	nop
 80058e2:	e000      	b.n	80058e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80058e4:	bf00      	nop
  }
}
 80058e6:	37e8      	adds	r7, #232	; 0xe8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr

080058fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr

08005910 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr

08005926 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b090      	sub	sp, #64	; 0x40
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	4613      	mov	r3, r2
 8005934:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005936:	e050      	b.n	80059da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593e:	d04c      	beq.n	80059da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <UART_WaitOnFlagUntilTimeout+0x30>
 8005946:	f7fd f975 	bl	8002c34 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005952:	429a      	cmp	r2, r3
 8005954:	d241      	bcs.n	80059da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	330c      	adds	r3, #12
 800595c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	330c      	adds	r3, #12
 8005974:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005976:	637a      	str	r2, [r7, #52]	; 0x34
 8005978:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800597c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e5      	bne.n	8005956 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3314      	adds	r3, #20
 8005990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	613b      	str	r3, [r7, #16]
   return(result);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3314      	adds	r3, #20
 80059a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059aa:	623a      	str	r2, [r7, #32]
 80059ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	69f9      	ldr	r1, [r7, #28]
 80059b0:	6a3a      	ldr	r2, [r7, #32]
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e5      	bne.n	800598a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e00f      	b.n	80059fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4013      	ands	r3, r2
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	bf0c      	ite	eq
 80059ea:	2301      	moveq	r3, #1
 80059ec:	2300      	movne	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d09f      	beq.n	8005938 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3740      	adds	r7, #64	; 0x40
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	88fa      	ldrh	r2, [r7, #6]
 8005a1a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	88fa      	ldrh	r2, [r7, #6]
 8005a20:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2222      	movs	r2, #34	; 0x22
 8005a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d007      	beq.n	8005a48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0220 	orr.w	r2, r2, #32
 8005a66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bc80      	pop	{r7}
 8005a72:	4770      	bx	lr

08005a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b095      	sub	sp, #84	; 0x54
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a9c:	643a      	str	r2, [r7, #64]	; 0x40
 8005a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e5      	bne.n	8005a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f023 0301 	bic.w	r3, r3, #1
 8005ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3314      	adds	r3, #20
 8005ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e5      	bne.n	8005ab0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d119      	bne.n	8005b20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f023 0310 	bic.w	r3, r3, #16
 8005b02:	647b      	str	r3, [r7, #68]	; 0x44
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b0c:	61ba      	str	r2, [r7, #24]
 8005b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6979      	ldr	r1, [r7, #20]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e5      	bne.n	8005aec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b2e:	bf00      	nop
 8005b30:	3754      	adds	r7, #84	; 0x54
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr

08005b38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff fed3 	bl	80058fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b21      	cmp	r3, #33	; 0x21
 8005b72:	d13e      	bne.n	8005bf2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7c:	d114      	bne.n	8005ba8 <UART_Transmit_IT+0x48>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d110      	bne.n	8005ba8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	1c9a      	adds	r2, r3, #2
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	621a      	str	r2, [r3, #32]
 8005ba6:	e008      	b.n	8005bba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	1c59      	adds	r1, r3, #1
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6211      	str	r1, [r2, #32]
 8005bb2:	781a      	ldrb	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10f      	bne.n	8005bee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e000      	b.n	8005bf4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bf2:	2302      	movs	r3, #2
  }
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr

08005bfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff fe64 	bl	80058ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b08c      	sub	sp, #48	; 0x30
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b22      	cmp	r3, #34	; 0x22
 8005c40:	f040 80ae 	bne.w	8005da0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4c:	d117      	bne.n	8005c7e <UART_Receive_IT+0x50>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d113      	bne.n	8005c7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c76:	1c9a      	adds	r2, r3, #2
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c7c:	e026      	b.n	8005ccc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c90:	d007      	beq.n	8005ca2 <UART_Receive_IT+0x74>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10a      	bne.n	8005cb0 <UART_Receive_IT+0x82>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	e008      	b.n	8005cc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d15d      	bne.n	8005d9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0220 	bic.w	r2, r2, #32
 8005cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d135      	bne.n	8005d92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f023 0310 	bic.w	r3, r3, #16
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	330c      	adds	r3, #12
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4c:	623a      	str	r2, [r7, #32]
 8005d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	69f9      	ldr	r1, [r7, #28]
 8005d52:	6a3a      	ldr	r2, [r7, #32]
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e5      	bne.n	8005d2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b10      	cmp	r3, #16
 8005d6c:	d10a      	bne.n	8005d84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff fdc0 	bl	8005910 <HAL_UARTEx_RxEventCallback>
 8005d90:	e002      	b.n	8005d98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fc f98a 	bl	80020ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e002      	b.n	8005da2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e000      	b.n	8005da2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3730      	adds	r7, #48	; 0x30
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005de6:	f023 030c 	bic.w	r3, r3, #12
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	430b      	orrs	r3, r1
 8005df2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a2c      	ldr	r2, [pc, #176]	; (8005ec0 <UART_SetConfig+0x114>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d103      	bne.n	8005e1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e14:	f7fd fe6e 	bl	8003af4 <HAL_RCC_GetPCLK2Freq>
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	e002      	b.n	8005e22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e1c:	f7fd fe56 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 8005e20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	009a      	lsls	r2, r3, #2
 8005e2c:	441a      	add	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e38:	4a22      	ldr	r2, [pc, #136]	; (8005ec4 <UART_SetConfig+0x118>)
 8005e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	0119      	lsls	r1, r3, #4
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4613      	mov	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	009a      	lsls	r2, r3, #2
 8005e4c:	441a      	add	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e58:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <UART_SetConfig+0x118>)
 8005e5a:	fba3 0302 	umull	r0, r3, r3, r2
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	2064      	movs	r0, #100	; 0x64
 8005e62:	fb00 f303 	mul.w	r3, r0, r3
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	3332      	adds	r3, #50	; 0x32
 8005e6c:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <UART_SetConfig+0x118>)
 8005e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e78:	4419      	add	r1, r3
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009a      	lsls	r2, r3, #2
 8005e84:	441a      	add	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e90:	4b0c      	ldr	r3, [pc, #48]	; (8005ec4 <UART_SetConfig+0x118>)
 8005e92:	fba3 0302 	umull	r0, r3, r3, r2
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	2064      	movs	r0, #100	; 0x64
 8005e9a:	fb00 f303 	mul.w	r3, r0, r3
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	3332      	adds	r3, #50	; 0x32
 8005ea4:	4a07      	ldr	r2, [pc, #28]	; (8005ec4 <UART_SetConfig+0x118>)
 8005ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	f003 020f 	and.w	r2, r3, #15
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005eb8:	bf00      	nop
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40013800 	.word	0x40013800
 8005ec4:	51eb851f 	.word	0x51eb851f

08005ec8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eda:	2b84      	cmp	r3, #132	; 0x84
 8005edc:	d005      	beq.n	8005eea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ede:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	3303      	adds	r3, #3
 8005ee8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005eea:	68fb      	ldr	r3, [r7, #12]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr

08005ef6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005efa:	f000 fad1 	bl	80064a0 <vTaskStartScheduler>
  
  return osOK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f06:	b089      	sub	sp, #36	; 0x24
 8005f08:	af04      	add	r7, sp, #16
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d020      	beq.n	8005f58 <osThreadCreate+0x54>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01c      	beq.n	8005f58 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685c      	ldr	r4, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691e      	ldr	r6, [r3, #16]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff ffc9 	bl	8005ec8 <makeFreeRtosPriority>
 8005f36:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f40:	9202      	str	r2, [sp, #8]
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	9100      	str	r1, [sp, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	4632      	mov	r2, r6
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 f8e8 	bl	8006122 <xTaskCreateStatic>
 8005f52:	4603      	mov	r3, r0
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	e01c      	b.n	8005f92 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685c      	ldr	r4, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f64:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff ffab 	bl	8005ec8 <makeFreeRtosPriority>
 8005f72:	4602      	mov	r2, r0
 8005f74:	f107 030c 	add.w	r3, r7, #12
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	9200      	str	r2, [sp, #0]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	4632      	mov	r2, r6
 8005f80:	4629      	mov	r1, r5
 8005f82:	4620      	mov	r0, r4
 8005f84:	f000 f929 	bl	80061da <xTaskCreate>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d001      	beq.n	8005f92 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e000      	b.n	8005f94 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f92:	68fb      	ldr	r3, [r7, #12]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f9c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <osDelay+0x16>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	e000      	b.n	8005fb4 <osDelay+0x18>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fa3f 	bl	8006438 <vTaskDelay>
  
  return osOK;
 8005fba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f103 0208 	add.w	r2, r3, #8
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f103 0208 	add.w	r2, r3, #8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f103 0208 	add.w	r2, r3, #8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr

08006002 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr

0800601a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800601a:	b480      	push	{r7}
 800601c:	b085      	sub	sp, #20
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	601a      	str	r2, [r3, #0]
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr

08006060 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d103      	bne.n	8006080 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	e00c      	b.n	800609a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3308      	adds	r3, #8
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	e002      	b.n	800608e <vListInsert+0x2e>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	429a      	cmp	r2, r3
 8006098:	d2f6      	bcs.n	8006088 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
}
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bc80      	pop	{r7}
 80060ce:	4770      	bx	lr

080060d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6892      	ldr	r2, [r2, #8]
 80060e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6852      	ldr	r2, [r2, #4]
 80060f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d103      	bne.n	8006104 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	1e5a      	subs	r2, r3, #1
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr

08006122 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006122:	b580      	push	{r7, lr}
 8006124:	b08e      	sub	sp, #56	; 0x38
 8006126:	af04      	add	r7, sp, #16
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
 800612e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006148:	bf00      	nop
 800614a:	e7fe      	b.n	800614a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10a      	bne.n	8006168 <xTaskCreateStatic+0x46>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	61fb      	str	r3, [r7, #28]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006168:	2354      	movs	r3, #84	; 0x54
 800616a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2b54      	cmp	r3, #84	; 0x54
 8006170:	d00a      	beq.n	8006188 <xTaskCreateStatic+0x66>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	61bb      	str	r3, [r7, #24]
}
 8006184:	bf00      	nop
 8006186:	e7fe      	b.n	8006186 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618a:	2b00      	cmp	r3, #0
 800618c:	d01e      	beq.n	80061cc <xTaskCreateStatic+0xaa>
 800618e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01b      	beq.n	80061cc <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800619c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	2202      	movs	r2, #2
 80061a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061a6:	2300      	movs	r3, #0
 80061a8:	9303      	str	r3, [sp, #12]
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	9302      	str	r3, [sp, #8]
 80061ae:	f107 0314 	add.w	r3, r7, #20
 80061b2:	9301      	str	r3, [sp, #4]
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 f850 	bl	8006264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061c6:	f000 f8cd 	bl	8006364 <prvAddNewTaskToReadyList>
 80061ca:	e001      	b.n	80061d0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061d0:	697b      	ldr	r3, [r7, #20]
	}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3728      	adds	r7, #40	; 0x28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b08c      	sub	sp, #48	; 0x30
 80061de:	af04      	add	r7, sp, #16
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	603b      	str	r3, [r7, #0]
 80061e6:	4613      	mov	r3, r2
 80061e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fe6e 	bl	8006ed0 <pvPortMalloc>
 80061f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00e      	beq.n	800621a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80061fc:	2054      	movs	r0, #84	; 0x54
 80061fe:	f000 fe67 	bl	8006ed0 <pvPortMalloc>
 8006202:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	631a      	str	r2, [r3, #48]	; 0x30
 8006210:	e005      	b.n	800621e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006212:	6978      	ldr	r0, [r7, #20]
 8006214:	f000 ff20 	bl	8007058 <vPortFree>
 8006218:	e001      	b.n	800621e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d017      	beq.n	8006254 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800622c:	88fa      	ldrh	r2, [r7, #6]
 800622e:	2300      	movs	r3, #0
 8006230:	9303      	str	r3, [sp, #12]
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	9302      	str	r3, [sp, #8]
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68b9      	ldr	r1, [r7, #8]
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 f80e 	bl	8006264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006248:	69f8      	ldr	r0, [r7, #28]
 800624a:	f000 f88b 	bl	8006364 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800624e:	2301      	movs	r3, #1
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	e002      	b.n	800625a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006254:	f04f 33ff 	mov.w	r3, #4294967295
 8006258:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800625a:	69bb      	ldr	r3, [r7, #24]
	}
 800625c:	4618      	mov	r0, r3
 800625e:	3720      	adds	r7, #32
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800627c:	3b01      	subs	r3, #1
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	f023 0307 	bic.w	r3, r3, #7
 800628a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <prvInitialiseNewTask+0x48>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	617b      	str	r3, [r7, #20]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062ac:	2300      	movs	r3, #0
 80062ae:	61fb      	str	r3, [r7, #28]
 80062b0:	e012      	b.n	80062d8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	7819      	ldrb	r1, [r3, #0]
 80062ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	4413      	add	r3, r2
 80062c0:	3334      	adds	r3, #52	; 0x34
 80062c2:	460a      	mov	r2, r1
 80062c4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d006      	beq.n	80062e0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	3301      	adds	r3, #1
 80062d6:	61fb      	str	r3, [r7, #28]
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	2b0f      	cmp	r3, #15
 80062dc:	d9e9      	bls.n	80062b2 <prvInitialiseNewTask+0x4e>
 80062de:	e000      	b.n	80062e2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80062e0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	2b06      	cmp	r3, #6
 80062ee:	d901      	bls.n	80062f4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062f0:	2306      	movs	r3, #6
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	2200      	movs	r2, #0
 8006304:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	3304      	adds	r3, #4
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff fe79 	bl	8006002 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	3318      	adds	r3, #24
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff fe74 	bl	8006002 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	f1c3 0207 	rsb	r2, r3, #7
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800632e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	2200      	movs	r2, #0
 8006334:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	68f9      	ldr	r1, [r7, #12]
 8006342:	69b8      	ldr	r0, [r7, #24]
 8006344:	f000 fc0e 	bl	8006b64 <pxPortInitialiseStack>
 8006348:	4602      	mov	r2, r0
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800635a:	bf00      	nop
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800636c:	f000 fcee 	bl	8006d4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006370:	4b2a      	ldr	r3, [pc, #168]	; (800641c <prvAddNewTaskToReadyList+0xb8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3301      	adds	r3, #1
 8006376:	4a29      	ldr	r2, [pc, #164]	; (800641c <prvAddNewTaskToReadyList+0xb8>)
 8006378:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800637a:	4b29      	ldr	r3, [pc, #164]	; (8006420 <prvAddNewTaskToReadyList+0xbc>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006382:	4a27      	ldr	r2, [pc, #156]	; (8006420 <prvAddNewTaskToReadyList+0xbc>)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006388:	4b24      	ldr	r3, [pc, #144]	; (800641c <prvAddNewTaskToReadyList+0xb8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d110      	bne.n	80063b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006390:	f000 fac0 	bl	8006914 <prvInitialiseTaskLists>
 8006394:	e00d      	b.n	80063b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006396:	4b23      	ldr	r3, [pc, #140]	; (8006424 <prvAddNewTaskToReadyList+0xc0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d109      	bne.n	80063b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800639e:	4b20      	ldr	r3, [pc, #128]	; (8006420 <prvAddNewTaskToReadyList+0xbc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d802      	bhi.n	80063b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063ac:	4a1c      	ldr	r2, [pc, #112]	; (8006420 <prvAddNewTaskToReadyList+0xbc>)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063b2:	4b1d      	ldr	r3, [pc, #116]	; (8006428 <prvAddNewTaskToReadyList+0xc4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3301      	adds	r3, #1
 80063b8:	4a1b      	ldr	r2, [pc, #108]	; (8006428 <prvAddNewTaskToReadyList+0xc4>)
 80063ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	2201      	movs	r2, #1
 80063c2:	409a      	lsls	r2, r3
 80063c4:	4b19      	ldr	r3, [pc, #100]	; (800642c <prvAddNewTaskToReadyList+0xc8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	4a18      	ldr	r2, [pc, #96]	; (800642c <prvAddNewTaskToReadyList+0xc8>)
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4a15      	ldr	r2, [pc, #84]	; (8006430 <prvAddNewTaskToReadyList+0xcc>)
 80063dc:	441a      	add	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f7ff fe18 	bl	800601a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063ea:	f000 fcdf 	bl	8006dac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063ee:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <prvAddNewTaskToReadyList+0xc0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00e      	beq.n	8006414 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <prvAddNewTaskToReadyList+0xbc>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	429a      	cmp	r2, r3
 8006402:	d207      	bcs.n	8006414 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006404:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <prvAddNewTaskToReadyList+0xd0>)
 8006406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006414:	bf00      	nop
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20000764 	.word	0x20000764
 8006420:	20000664 	.word	0x20000664
 8006424:	20000770 	.word	0x20000770
 8006428:	20000780 	.word	0x20000780
 800642c:	2000076c 	.word	0x2000076c
 8006430:	20000668 	.word	0x20000668
 8006434:	e000ed04 	.word	0xe000ed04

08006438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d017      	beq.n	800647a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800644a:	4b13      	ldr	r3, [pc, #76]	; (8006498 <vTaskDelay+0x60>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <vTaskDelay+0x30>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	60bb      	str	r3, [r7, #8]
}
 8006464:	bf00      	nop
 8006466:	e7fe      	b.n	8006466 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006468:	f000 f87a 	bl	8006560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800646c:	2100      	movs	r1, #0
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fb12 	bl	8006a98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006474:	f000 f882 	bl	800657c <xTaskResumeAll>
 8006478:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d107      	bne.n	8006490 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006480:	4b06      	ldr	r3, [pc, #24]	; (800649c <vTaskDelay+0x64>)
 8006482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	2000078c 	.word	0x2000078c
 800649c:	e000ed04 	.word	0xe000ed04

080064a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	; 0x28
 80064a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064ae:	463a      	mov	r2, r7
 80064b0:	1d39      	adds	r1, r7, #4
 80064b2:	f107 0308 	add.w	r3, r7, #8
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fb fb10 	bl	8001adc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	9202      	str	r2, [sp, #8]
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	2300      	movs	r3, #0
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	2300      	movs	r3, #0
 80064cc:	460a      	mov	r2, r1
 80064ce:	491e      	ldr	r1, [pc, #120]	; (8006548 <vTaskStartScheduler+0xa8>)
 80064d0:	481e      	ldr	r0, [pc, #120]	; (800654c <vTaskStartScheduler+0xac>)
 80064d2:	f7ff fe26 	bl	8006122 <xTaskCreateStatic>
 80064d6:	4603      	mov	r3, r0
 80064d8:	4a1d      	ldr	r2, [pc, #116]	; (8006550 <vTaskStartScheduler+0xb0>)
 80064da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064dc:	4b1c      	ldr	r3, [pc, #112]	; (8006550 <vTaskStartScheduler+0xb0>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064e4:	2301      	movs	r3, #1
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e001      	b.n	80064ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d116      	bne.n	8006522 <vTaskStartScheduler+0x82>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	613b      	str	r3, [r7, #16]
}
 8006506:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006508:	4b12      	ldr	r3, [pc, #72]	; (8006554 <vTaskStartScheduler+0xb4>)
 800650a:	f04f 32ff 	mov.w	r2, #4294967295
 800650e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006510:	4b11      	ldr	r3, [pc, #68]	; (8006558 <vTaskStartScheduler+0xb8>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006516:	4b11      	ldr	r3, [pc, #68]	; (800655c <vTaskStartScheduler+0xbc>)
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800651c:	f000 fba4 	bl	8006c68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006520:	e00e      	b.n	8006540 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d10a      	bne.n	8006540 <vTaskStartScheduler+0xa0>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	60fb      	str	r3, [r7, #12]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <vTaskStartScheduler+0x9e>
}
 8006540:	bf00      	nop
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	0800a0a0 	.word	0x0800a0a0
 800654c:	080068e5 	.word	0x080068e5
 8006550:	20000788 	.word	0x20000788
 8006554:	20000784 	.word	0x20000784
 8006558:	20000770 	.word	0x20000770
 800655c:	20000768 	.word	0x20000768

08006560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006564:	4b04      	ldr	r3, [pc, #16]	; (8006578 <vTaskSuspendAll+0x18>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3301      	adds	r3, #1
 800656a:	4a03      	ldr	r2, [pc, #12]	; (8006578 <vTaskSuspendAll+0x18>)
 800656c:	6013      	str	r3, [r2, #0]
}
 800656e:	bf00      	nop
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	2000078c 	.word	0x2000078c

0800657c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800658a:	4b41      	ldr	r3, [pc, #260]	; (8006690 <xTaskResumeAll+0x114>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	603b      	str	r3, [r7, #0]
}
 80065a4:	bf00      	nop
 80065a6:	e7fe      	b.n	80065a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065a8:	f000 fbd0 	bl	8006d4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065ac:	4b38      	ldr	r3, [pc, #224]	; (8006690 <xTaskResumeAll+0x114>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	4a37      	ldr	r2, [pc, #220]	; (8006690 <xTaskResumeAll+0x114>)
 80065b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065b6:	4b36      	ldr	r3, [pc, #216]	; (8006690 <xTaskResumeAll+0x114>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d161      	bne.n	8006682 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065be:	4b35      	ldr	r3, [pc, #212]	; (8006694 <xTaskResumeAll+0x118>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d05d      	beq.n	8006682 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065c6:	e02e      	b.n	8006626 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80065c8:	4b33      	ldr	r3, [pc, #204]	; (8006698 <xTaskResumeAll+0x11c>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3318      	adds	r3, #24
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff fd7b 	bl	80060d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3304      	adds	r3, #4
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fd76 	bl	80060d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	2201      	movs	r2, #1
 80065ea:	409a      	lsls	r2, r3
 80065ec:	4b2b      	ldr	r3, [pc, #172]	; (800669c <xTaskResumeAll+0x120>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	4a2a      	ldr	r2, [pc, #168]	; (800669c <xTaskResumeAll+0x120>)
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4a27      	ldr	r2, [pc, #156]	; (80066a0 <xTaskResumeAll+0x124>)
 8006604:	441a      	add	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3304      	adds	r3, #4
 800660a:	4619      	mov	r1, r3
 800660c:	4610      	mov	r0, r2
 800660e:	f7ff fd04 	bl	800601a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006616:	4b23      	ldr	r3, [pc, #140]	; (80066a4 <xTaskResumeAll+0x128>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	429a      	cmp	r2, r3
 800661e:	d302      	bcc.n	8006626 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006620:	4b21      	ldr	r3, [pc, #132]	; (80066a8 <xTaskResumeAll+0x12c>)
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006626:	4b1c      	ldr	r3, [pc, #112]	; (8006698 <xTaskResumeAll+0x11c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1cc      	bne.n	80065c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006634:	f000 fa0c 	bl	8006a50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006638:	4b1c      	ldr	r3, [pc, #112]	; (80066ac <xTaskResumeAll+0x130>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d010      	beq.n	8006666 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006644:	f000 f836 	bl	80066b4 <xTaskIncrementTick>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800664e:	4b16      	ldr	r3, [pc, #88]	; (80066a8 <xTaskResumeAll+0x12c>)
 8006650:	2201      	movs	r2, #1
 8006652:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3b01      	subs	r3, #1
 8006658:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1f1      	bne.n	8006644 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006660:	4b12      	ldr	r3, [pc, #72]	; (80066ac <xTaskResumeAll+0x130>)
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006666:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <xTaskResumeAll+0x12c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800666e:	2301      	movs	r3, #1
 8006670:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006672:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <xTaskResumeAll+0x134>)
 8006674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006682:	f000 fb93 	bl	8006dac <vPortExitCritical>

	return xAlreadyYielded;
 8006686:	68bb      	ldr	r3, [r7, #8]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	2000078c 	.word	0x2000078c
 8006694:	20000764 	.word	0x20000764
 8006698:	20000724 	.word	0x20000724
 800669c:	2000076c 	.word	0x2000076c
 80066a0:	20000668 	.word	0x20000668
 80066a4:	20000664 	.word	0x20000664
 80066a8:	20000778 	.word	0x20000778
 80066ac:	20000774 	.word	0x20000774
 80066b0:	e000ed04 	.word	0xe000ed04

080066b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066be:	4b51      	ldr	r3, [pc, #324]	; (8006804 <xTaskIncrementTick+0x150>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f040 808d 	bne.w	80067e2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066c8:	4b4f      	ldr	r3, [pc, #316]	; (8006808 <xTaskIncrementTick+0x154>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3301      	adds	r3, #1
 80066ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066d0:	4a4d      	ldr	r2, [pc, #308]	; (8006808 <xTaskIncrementTick+0x154>)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d120      	bne.n	800671e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80066dc:	4b4b      	ldr	r3, [pc, #300]	; (800680c <xTaskIncrementTick+0x158>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <xTaskIncrementTick+0x48>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	603b      	str	r3, [r7, #0]
}
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <xTaskIncrementTick+0x46>
 80066fc:	4b43      	ldr	r3, [pc, #268]	; (800680c <xTaskIncrementTick+0x158>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	4b43      	ldr	r3, [pc, #268]	; (8006810 <xTaskIncrementTick+0x15c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a41      	ldr	r2, [pc, #260]	; (800680c <xTaskIncrementTick+0x158>)
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	4a41      	ldr	r2, [pc, #260]	; (8006810 <xTaskIncrementTick+0x15c>)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	4b40      	ldr	r3, [pc, #256]	; (8006814 <xTaskIncrementTick+0x160>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3301      	adds	r3, #1
 8006716:	4a3f      	ldr	r2, [pc, #252]	; (8006814 <xTaskIncrementTick+0x160>)
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	f000 f999 	bl	8006a50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800671e:	4b3e      	ldr	r3, [pc, #248]	; (8006818 <xTaskIncrementTick+0x164>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	429a      	cmp	r2, r3
 8006726:	d34d      	bcc.n	80067c4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006728:	4b38      	ldr	r3, [pc, #224]	; (800680c <xTaskIncrementTick+0x158>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <xTaskIncrementTick+0x82>
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <xTaskIncrementTick+0x84>
 8006736:	2300      	movs	r3, #0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800673c:	4b36      	ldr	r3, [pc, #216]	; (8006818 <xTaskIncrementTick+0x164>)
 800673e:	f04f 32ff 	mov.w	r2, #4294967295
 8006742:	601a      	str	r2, [r3, #0]
					break;
 8006744:	e03e      	b.n	80067c4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006746:	4b31      	ldr	r3, [pc, #196]	; (800680c <xTaskIncrementTick+0x158>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	429a      	cmp	r2, r3
 800675c:	d203      	bcs.n	8006766 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800675e:	4a2e      	ldr	r2, [pc, #184]	; (8006818 <xTaskIncrementTick+0x164>)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6013      	str	r3, [r2, #0]
						break;
 8006764:	e02e      	b.n	80067c4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	3304      	adds	r3, #4
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff fcb0 	bl	80060d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006774:	2b00      	cmp	r3, #0
 8006776:	d004      	beq.n	8006782 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	3318      	adds	r3, #24
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fca7 	bl	80060d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	2201      	movs	r2, #1
 8006788:	409a      	lsls	r2, r3
 800678a:	4b24      	ldr	r3, [pc, #144]	; (800681c <xTaskIncrementTick+0x168>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4313      	orrs	r3, r2
 8006790:	4a22      	ldr	r2, [pc, #136]	; (800681c <xTaskIncrementTick+0x168>)
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4a1f      	ldr	r2, [pc, #124]	; (8006820 <xTaskIncrementTick+0x16c>)
 80067a2:	441a      	add	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	3304      	adds	r3, #4
 80067a8:	4619      	mov	r1, r3
 80067aa:	4610      	mov	r0, r2
 80067ac:	f7ff fc35 	bl	800601a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	4b1b      	ldr	r3, [pc, #108]	; (8006824 <xTaskIncrementTick+0x170>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d3b4      	bcc.n	8006728 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80067be:	2301      	movs	r3, #1
 80067c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067c2:	e7b1      	b.n	8006728 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067c4:	4b17      	ldr	r3, [pc, #92]	; (8006824 <xTaskIncrementTick+0x170>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ca:	4915      	ldr	r1, [pc, #84]	; (8006820 <xTaskIncrementTick+0x16c>)
 80067cc:	4613      	mov	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	440b      	add	r3, r1
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d907      	bls.n	80067ec <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80067dc:	2301      	movs	r3, #1
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	e004      	b.n	80067ec <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80067e2:	4b11      	ldr	r3, [pc, #68]	; (8006828 <xTaskIncrementTick+0x174>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	4a0f      	ldr	r2, [pc, #60]	; (8006828 <xTaskIncrementTick+0x174>)
 80067ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80067ec:	4b0f      	ldr	r3, [pc, #60]	; (800682c <xTaskIncrementTick+0x178>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80067f4:	2301      	movs	r3, #1
 80067f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80067f8:	697b      	ldr	r3, [r7, #20]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	2000078c 	.word	0x2000078c
 8006808:	20000768 	.word	0x20000768
 800680c:	2000071c 	.word	0x2000071c
 8006810:	20000720 	.word	0x20000720
 8006814:	2000077c 	.word	0x2000077c
 8006818:	20000784 	.word	0x20000784
 800681c:	2000076c 	.word	0x2000076c
 8006820:	20000668 	.word	0x20000668
 8006824:	20000664 	.word	0x20000664
 8006828:	20000774 	.word	0x20000774
 800682c:	20000778 	.word	0x20000778

08006830 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006836:	4b26      	ldr	r3, [pc, #152]	; (80068d0 <vTaskSwitchContext+0xa0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800683e:	4b25      	ldr	r3, [pc, #148]	; (80068d4 <vTaskSwitchContext+0xa4>)
 8006840:	2201      	movs	r2, #1
 8006842:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006844:	e03f      	b.n	80068c6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006846:	4b23      	ldr	r3, [pc, #140]	; (80068d4 <vTaskSwitchContext+0xa4>)
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800684c:	4b22      	ldr	r3, [pc, #136]	; (80068d8 <vTaskSwitchContext+0xa8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	fab3 f383 	clz	r3, r3
 8006858:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800685a:	7afb      	ldrb	r3, [r7, #11]
 800685c:	f1c3 031f 	rsb	r3, r3, #31
 8006860:	617b      	str	r3, [r7, #20]
 8006862:	491e      	ldr	r1, [pc, #120]	; (80068dc <vTaskSwitchContext+0xac>)
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	440b      	add	r3, r1
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10a      	bne.n	800688c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	607b      	str	r3, [r7, #4]
}
 8006888:	bf00      	nop
 800688a:	e7fe      	b.n	800688a <vTaskSwitchContext+0x5a>
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	4613      	mov	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4a11      	ldr	r2, [pc, #68]	; (80068dc <vTaskSwitchContext+0xac>)
 8006898:	4413      	add	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	605a      	str	r2, [r3, #4]
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	3308      	adds	r3, #8
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d104      	bne.n	80068bc <vTaskSwitchContext+0x8c>
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	605a      	str	r2, [r3, #4]
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	4a07      	ldr	r2, [pc, #28]	; (80068e0 <vTaskSwitchContext+0xb0>)
 80068c4:	6013      	str	r3, [r2, #0]
}
 80068c6:	bf00      	nop
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr
 80068d0:	2000078c 	.word	0x2000078c
 80068d4:	20000778 	.word	0x20000778
 80068d8:	2000076c 	.word	0x2000076c
 80068dc:	20000668 	.word	0x20000668
 80068e0:	20000664 	.word	0x20000664

080068e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068ec:	f000 f852 	bl	8006994 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <prvIdleTask+0x28>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d9f9      	bls.n	80068ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80068f8:	4b05      	ldr	r3, [pc, #20]	; (8006910 <prvIdleTask+0x2c>)
 80068fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006908:	e7f0      	b.n	80068ec <prvIdleTask+0x8>
 800690a:	bf00      	nop
 800690c:	20000668 	.word	0x20000668
 8006910:	e000ed04 	.word	0xe000ed04

08006914 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800691a:	2300      	movs	r3, #0
 800691c:	607b      	str	r3, [r7, #4]
 800691e:	e00c      	b.n	800693a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4a12      	ldr	r2, [pc, #72]	; (8006974 <prvInitialiseTaskLists+0x60>)
 800692c:	4413      	add	r3, r2
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff fb48 	bl	8005fc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3301      	adds	r3, #1
 8006938:	607b      	str	r3, [r7, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b06      	cmp	r3, #6
 800693e:	d9ef      	bls.n	8006920 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006940:	480d      	ldr	r0, [pc, #52]	; (8006978 <prvInitialiseTaskLists+0x64>)
 8006942:	f7ff fb3f 	bl	8005fc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006946:	480d      	ldr	r0, [pc, #52]	; (800697c <prvInitialiseTaskLists+0x68>)
 8006948:	f7ff fb3c 	bl	8005fc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800694c:	480c      	ldr	r0, [pc, #48]	; (8006980 <prvInitialiseTaskLists+0x6c>)
 800694e:	f7ff fb39 	bl	8005fc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006952:	480c      	ldr	r0, [pc, #48]	; (8006984 <prvInitialiseTaskLists+0x70>)
 8006954:	f7ff fb36 	bl	8005fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006958:	480b      	ldr	r0, [pc, #44]	; (8006988 <prvInitialiseTaskLists+0x74>)
 800695a:	f7ff fb33 	bl	8005fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800695e:	4b0b      	ldr	r3, [pc, #44]	; (800698c <prvInitialiseTaskLists+0x78>)
 8006960:	4a05      	ldr	r2, [pc, #20]	; (8006978 <prvInitialiseTaskLists+0x64>)
 8006962:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006964:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <prvInitialiseTaskLists+0x7c>)
 8006966:	4a05      	ldr	r2, [pc, #20]	; (800697c <prvInitialiseTaskLists+0x68>)
 8006968:	601a      	str	r2, [r3, #0]
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000668 	.word	0x20000668
 8006978:	200006f4 	.word	0x200006f4
 800697c:	20000708 	.word	0x20000708
 8006980:	20000724 	.word	0x20000724
 8006984:	20000738 	.word	0x20000738
 8006988:	20000750 	.word	0x20000750
 800698c:	2000071c 	.word	0x2000071c
 8006990:	20000720 	.word	0x20000720

08006994 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800699a:	e019      	b.n	80069d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800699c:	f000 f9d6 	bl	8006d4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80069a0:	4b10      	ldr	r3, [pc, #64]	; (80069e4 <prvCheckTasksWaitingTermination+0x50>)
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3304      	adds	r3, #4
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff fb8f 	bl	80060d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069b2:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <prvCheckTasksWaitingTermination+0x54>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	4a0b      	ldr	r2, [pc, #44]	; (80069e8 <prvCheckTasksWaitingTermination+0x54>)
 80069ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069bc:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <prvCheckTasksWaitingTermination+0x58>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <prvCheckTasksWaitingTermination+0x58>)
 80069c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069c6:	f000 f9f1 	bl	8006dac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f810 	bl	80069f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069d0:	4b06      	ldr	r3, [pc, #24]	; (80069ec <prvCheckTasksWaitingTermination+0x58>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e1      	bne.n	800699c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000738 	.word	0x20000738
 80069e8:	20000764 	.word	0x20000764
 80069ec:	2000074c 	.word	0x2000074c

080069f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d108      	bne.n	8006a14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fb26 	bl	8007058 <vPortFree>
				vPortFree( pxTCB );
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fb23 	bl	8007058 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a12:	e018      	b.n	8006a46 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d103      	bne.n	8006a26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fb1a 	bl	8007058 <vPortFree>
	}
 8006a24:	e00f      	b.n	8006a46 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d00a      	beq.n	8006a46 <prvDeleteTCB+0x56>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	60fb      	str	r3, [r7, #12]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <prvDeleteTCB+0x54>
	}
 8006a46:	bf00      	nop
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a56:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <prvResetNextTaskUnblockTime+0x40>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <prvResetNextTaskUnblockTime+0x14>
 8006a60:	2301      	movs	r3, #1
 8006a62:	e000      	b.n	8006a66 <prvResetNextTaskUnblockTime+0x16>
 8006a64:	2300      	movs	r3, #0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d004      	beq.n	8006a74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <prvResetNextTaskUnblockTime+0x44>)
 8006a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a72:	e008      	b.n	8006a86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a74:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <prvResetNextTaskUnblockTime+0x40>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	4a04      	ldr	r2, [pc, #16]	; (8006a94 <prvResetNextTaskUnblockTime+0x44>)
 8006a84:	6013      	str	r3, [r2, #0]
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr
 8006a90:	2000071c 	.word	0x2000071c
 8006a94:	20000784 	.word	0x20000784

08006a98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006aa2:	4b29      	ldr	r3, [pc, #164]	; (8006b48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aa8:	4b28      	ldr	r3, [pc, #160]	; (8006b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3304      	adds	r3, #4
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff fb0e 	bl	80060d0 <uxListRemove>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10b      	bne.n	8006ad2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006aba:	4b24      	ldr	r3, [pc, #144]	; (8006b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac6:	43da      	mvns	r2, r3
 8006ac8:	4b21      	ldr	r3, [pc, #132]	; (8006b50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4013      	ands	r3, r2
 8006ace:	4a20      	ldr	r2, [pc, #128]	; (8006b50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ad0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d10a      	bne.n	8006af0 <prvAddCurrentTaskToDelayedList+0x58>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ae0:	4b1a      	ldr	r3, [pc, #104]	; (8006b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	481a      	ldr	r0, [pc, #104]	; (8006b54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006aea:	f7ff fa96 	bl	800601a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006aee:	e026      	b.n	8006b3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4413      	add	r3, r2
 8006af6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006af8:	4b14      	ldr	r3, [pc, #80]	; (8006b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d209      	bcs.n	8006b1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b08:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	4b0f      	ldr	r3, [pc, #60]	; (8006b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f7ff faa3 	bl	8006060 <vListInsert>
}
 8006b1a:	e010      	b.n	8006b3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b1c:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4619      	mov	r1, r3
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f7ff fa99 	bl	8006060 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b2e:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d202      	bcs.n	8006b3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006b38:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	6013      	str	r3, [r2, #0]
}
 8006b3e:	bf00      	nop
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20000768 	.word	0x20000768
 8006b4c:	20000664 	.word	0x20000664
 8006b50:	2000076c 	.word	0x2000076c
 8006b54:	20000750 	.word	0x20000750
 8006b58:	20000720 	.word	0x20000720
 8006b5c:	2000071c 	.word	0x2000071c
 8006b60:	20000784 	.word	0x20000784

08006b64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3b04      	subs	r3, #4
 8006b74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3b04      	subs	r3, #4
 8006b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f023 0201 	bic.w	r2, r3, #1
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3b04      	subs	r3, #4
 8006b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b94:	4a08      	ldr	r2, [pc, #32]	; (8006bb8 <pxPortInitialiseStack+0x54>)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3b14      	subs	r3, #20
 8006b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3b20      	subs	r3, #32
 8006baa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bac:	68fb      	ldr	r3, [r7, #12]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bc80      	pop	{r7}
 8006bb6:	4770      	bx	lr
 8006bb8:	08006bbd 	.word	0x08006bbd

08006bbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bc6:	4b12      	ldr	r3, [pc, #72]	; (8006c10 <prvTaskExitError+0x54>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bce:	d00a      	beq.n	8006be6 <prvTaskExitError+0x2a>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	60fb      	str	r3, [r7, #12]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <prvTaskExitError+0x28>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	60bb      	str	r3, [r7, #8]
}
 8006bf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bfa:	bf00      	nop
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0fc      	beq.n	8006bfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c02:	bf00      	nop
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bc80      	pop	{r7}
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	20000010 	.word	0x20000010
	...

08006c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <pxCurrentTCBConst2>)
 8006c22:	6819      	ldr	r1, [r3, #0]
 8006c24:	6808      	ldr	r0, [r1, #0]
 8006c26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c2a:	f380 8809 	msr	PSP, r0
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f04f 0000 	mov.w	r0, #0
 8006c36:	f380 8811 	msr	BASEPRI, r0
 8006c3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006c3e:	4770      	bx	lr

08006c40 <pxCurrentTCBConst2>:
 8006c40:	20000664 	.word	0x20000664
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop

08006c48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006c48:	4806      	ldr	r0, [pc, #24]	; (8006c64 <prvPortStartFirstTask+0x1c>)
 8006c4a:	6800      	ldr	r0, [r0, #0]
 8006c4c:	6800      	ldr	r0, [r0, #0]
 8006c4e:	f380 8808 	msr	MSP, r0
 8006c52:	b662      	cpsie	i
 8006c54:	b661      	cpsie	f
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	df00      	svc	0
 8006c60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c62:	bf00      	nop
 8006c64:	e000ed08 	.word	0xe000ed08

08006c68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c6e:	4b32      	ldr	r3, [pc, #200]	; (8006d38 <xPortStartScheduler+0xd0>)
 8006c70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	22ff      	movs	r2, #255	; 0xff
 8006c7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c88:	78fb      	ldrb	r3, [r7, #3]
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	4b2a      	ldr	r3, [pc, #168]	; (8006d3c <xPortStartScheduler+0xd4>)
 8006c94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c96:	4b2a      	ldr	r3, [pc, #168]	; (8006d40 <xPortStartScheduler+0xd8>)
 8006c98:	2207      	movs	r2, #7
 8006c9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c9c:	e009      	b.n	8006cb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006c9e:	4b28      	ldr	r3, [pc, #160]	; (8006d40 <xPortStartScheduler+0xd8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	4a26      	ldr	r2, [pc, #152]	; (8006d40 <xPortStartScheduler+0xd8>)
 8006ca6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cb2:	78fb      	ldrb	r3, [r7, #3]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cba:	2b80      	cmp	r3, #128	; 0x80
 8006cbc:	d0ef      	beq.n	8006c9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cbe:	4b20      	ldr	r3, [pc, #128]	; (8006d40 <xPortStartScheduler+0xd8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f1c3 0307 	rsb	r3, r3, #7
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d00a      	beq.n	8006ce0 <xPortStartScheduler+0x78>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	60bb      	str	r3, [r7, #8]
}
 8006cdc:	bf00      	nop
 8006cde:	e7fe      	b.n	8006cde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ce0:	4b17      	ldr	r3, [pc, #92]	; (8006d40 <xPortStartScheduler+0xd8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	021b      	lsls	r3, r3, #8
 8006ce6:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <xPortStartScheduler+0xd8>)
 8006ce8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cea:	4b15      	ldr	r3, [pc, #84]	; (8006d40 <xPortStartScheduler+0xd8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cf2:	4a13      	ldr	r2, [pc, #76]	; (8006d40 <xPortStartScheduler+0xd8>)
 8006cf4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cfe:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <xPortStartScheduler+0xdc>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a10      	ldr	r2, [pc, #64]	; (8006d44 <xPortStartScheduler+0xdc>)
 8006d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d0a:	4b0e      	ldr	r3, [pc, #56]	; (8006d44 <xPortStartScheduler+0xdc>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a0d      	ldr	r2, [pc, #52]	; (8006d44 <xPortStartScheduler+0xdc>)
 8006d10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d16:	f000 f8b9 	bl	8006e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d1a:	4b0b      	ldr	r3, [pc, #44]	; (8006d48 <xPortStartScheduler+0xe0>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d20:	f7ff ff92 	bl	8006c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d24:	f7ff fd84 	bl	8006830 <vTaskSwitchContext>
	prvTaskExitError();
 8006d28:	f7ff ff48 	bl	8006bbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	e000e400 	.word	0xe000e400
 8006d3c:	20000790 	.word	0x20000790
 8006d40:	20000794 	.word	0x20000794
 8006d44:	e000ed20 	.word	0xe000ed20
 8006d48:	20000010 	.word	0x20000010

08006d4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	607b      	str	r3, [r7, #4]
}
 8006d64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d66:	4b0f      	ldr	r3, [pc, #60]	; (8006da4 <vPortEnterCritical+0x58>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	4a0d      	ldr	r2, [pc, #52]	; (8006da4 <vPortEnterCritical+0x58>)
 8006d6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d70:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <vPortEnterCritical+0x58>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d10f      	bne.n	8006d98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d78:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <vPortEnterCritical+0x5c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <vPortEnterCritical+0x4c>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	603b      	str	r3, [r7, #0]
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <vPortEnterCritical+0x4a>
	}
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	20000010 	.word	0x20000010
 8006da8:	e000ed04 	.word	0xe000ed04

08006dac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006db2:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <vPortExitCritical+0x4c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10a      	bne.n	8006dd0 <vPortExitCritical+0x24>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	607b      	str	r3, [r7, #4]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006dd0:	4b09      	ldr	r3, [pc, #36]	; (8006df8 <vPortExitCritical+0x4c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	4a08      	ldr	r2, [pc, #32]	; (8006df8 <vPortExitCritical+0x4c>)
 8006dd8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006dda:	4b07      	ldr	r3, [pc, #28]	; (8006df8 <vPortExitCritical+0x4c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d105      	bne.n	8006dee <vPortExitCritical+0x42>
 8006de2:	2300      	movs	r3, #0
 8006de4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006dec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bc80      	pop	{r7}
 8006df6:	4770      	bx	lr
 8006df8:	20000010 	.word	0x20000010
 8006dfc:	00000000 	.word	0x00000000

08006e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e00:	f3ef 8009 	mrs	r0, PSP
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <pxCurrentTCBConst>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e10:	6010      	str	r0, [r2, #0]
 8006e12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e1a:	f380 8811 	msr	BASEPRI, r0
 8006e1e:	f7ff fd07 	bl	8006830 <vTaskSwitchContext>
 8006e22:	f04f 0000 	mov.w	r0, #0
 8006e26:	f380 8811 	msr	BASEPRI, r0
 8006e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e2e:	6819      	ldr	r1, [r3, #0]
 8006e30:	6808      	ldr	r0, [r1, #0]
 8006e32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e36:	f380 8809 	msr	PSP, r0
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	4770      	bx	lr

08006e40 <pxCurrentTCBConst>:
 8006e40:	20000664 	.word	0x20000664
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop

08006e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	607b      	str	r3, [r7, #4]
}
 8006e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e62:	f7ff fc27 	bl	80066b4 <xTaskIncrementTick>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e6c:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <SysTick_Handler+0x40>)
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	2300      	movs	r3, #0
 8006e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	f383 8811 	msr	BASEPRI, r3
}
 8006e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e90:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <vPortSetupTimerInterrupt+0x30>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e96:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <vPortSetupTimerInterrupt+0x34>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e9c:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <vPortSetupTimerInterrupt+0x38>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a09      	ldr	r2, [pc, #36]	; (8006ec8 <vPortSetupTimerInterrupt+0x3c>)
 8006ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea6:	099b      	lsrs	r3, r3, #6
 8006ea8:	4a08      	ldr	r2, [pc, #32]	; (8006ecc <vPortSetupTimerInterrupt+0x40>)
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006eae:	4b03      	ldr	r3, [pc, #12]	; (8006ebc <vPortSetupTimerInterrupt+0x30>)
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	601a      	str	r2, [r3, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr
 8006ebc:	e000e010 	.word	0xe000e010
 8006ec0:	e000e018 	.word	0xe000e018
 8006ec4:	20000004 	.word	0x20000004
 8006ec8:	10624dd3 	.word	0x10624dd3
 8006ecc:	e000e014 	.word	0xe000e014

08006ed0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08a      	sub	sp, #40	; 0x28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006edc:	f7ff fb40 	bl	8006560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ee0:	4b58      	ldr	r3, [pc, #352]	; (8007044 <pvPortMalloc+0x174>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ee8:	f000 f910 	bl	800710c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006eec:	4b56      	ldr	r3, [pc, #344]	; (8007048 <pvPortMalloc+0x178>)
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 808e 	bne.w	8007016 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01d      	beq.n	8006f3c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f00:	2208      	movs	r2, #8
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4413      	add	r3, r2
 8006f06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d014      	beq.n	8006f3c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f023 0307 	bic.w	r3, r3, #7
 8006f18:	3308      	adds	r3, #8
 8006f1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <pvPortMalloc+0x6c>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	617b      	str	r3, [r7, #20]
}
 8006f38:	bf00      	nop
 8006f3a:	e7fe      	b.n	8006f3a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d069      	beq.n	8007016 <pvPortMalloc+0x146>
 8006f42:	4b42      	ldr	r3, [pc, #264]	; (800704c <pvPortMalloc+0x17c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d864      	bhi.n	8007016 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f4c:	4b40      	ldr	r3, [pc, #256]	; (8007050 <pvPortMalloc+0x180>)
 8006f4e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f50:	4b3f      	ldr	r3, [pc, #252]	; (8007050 <pvPortMalloc+0x180>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f56:	e004      	b.n	8006f62 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d903      	bls.n	8006f74 <pvPortMalloc+0xa4>
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1f1      	bne.n	8006f58 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f74:	4b33      	ldr	r3, [pc, #204]	; (8007044 <pvPortMalloc+0x174>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d04b      	beq.n	8007016 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2208      	movs	r2, #8
 8006f84:	4413      	add	r3, r2
 8006f86:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	1ad2      	subs	r2, r2, r3
 8006f98:	2308      	movs	r3, #8
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d91f      	bls.n	8006fe0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <pvPortMalloc+0xf8>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	613b      	str	r3, [r7, #16]
}
 8006fc4:	bf00      	nop
 8006fc6:	e7fe      	b.n	8006fc6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	1ad2      	subs	r2, r2, r3
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fda:	69b8      	ldr	r0, [r7, #24]
 8006fdc:	f000 f8f8 	bl	80071d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fe0:	4b1a      	ldr	r3, [pc, #104]	; (800704c <pvPortMalloc+0x17c>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	4a18      	ldr	r2, [pc, #96]	; (800704c <pvPortMalloc+0x17c>)
 8006fec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fee:	4b17      	ldr	r3, [pc, #92]	; (800704c <pvPortMalloc+0x17c>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4b18      	ldr	r3, [pc, #96]	; (8007054 <pvPortMalloc+0x184>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d203      	bcs.n	8007002 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ffa:	4b14      	ldr	r3, [pc, #80]	; (800704c <pvPortMalloc+0x17c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a15      	ldr	r2, [pc, #84]	; (8007054 <pvPortMalloc+0x184>)
 8007000:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	4b10      	ldr	r3, [pc, #64]	; (8007048 <pvPortMalloc+0x178>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	431a      	orrs	r2, r3
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007016:	f7ff fab1 	bl	800657c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <pvPortMalloc+0x16a>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	60fb      	str	r3, [r7, #12]
}
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <pvPortMalloc+0x168>
	return pvReturn;
 800703a:	69fb      	ldr	r3, [r7, #28]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3728      	adds	r7, #40	; 0x28
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	200013a0 	.word	0x200013a0
 8007048:	200013ac 	.word	0x200013ac
 800704c:	200013a4 	.word	0x200013a4
 8007050:	20001398 	.word	0x20001398
 8007054:	200013a8 	.word	0x200013a8

08007058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d048      	beq.n	80070fc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800706a:	2308      	movs	r3, #8
 800706c:	425b      	negs	r3, r3
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4413      	add	r3, r2
 8007072:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	4b21      	ldr	r3, [pc, #132]	; (8007104 <vPortFree+0xac>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4013      	ands	r3, r2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <vPortFree+0x44>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	60fb      	str	r3, [r7, #12]
}
 8007098:	bf00      	nop
 800709a:	e7fe      	b.n	800709a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00a      	beq.n	80070ba <vPortFree+0x62>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	60bb      	str	r3, [r7, #8]
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	4b11      	ldr	r3, [pc, #68]	; (8007104 <vPortFree+0xac>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4013      	ands	r3, r2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d019      	beq.n	80070fc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d115      	bne.n	80070fc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <vPortFree+0xac>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	43db      	mvns	r3, r3
 80070da:	401a      	ands	r2, r3
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070e0:	f7ff fa3e 	bl	8006560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	4b07      	ldr	r3, [pc, #28]	; (8007108 <vPortFree+0xb0>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4413      	add	r3, r2
 80070ee:	4a06      	ldr	r2, [pc, #24]	; (8007108 <vPortFree+0xb0>)
 80070f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070f2:	6938      	ldr	r0, [r7, #16]
 80070f4:	f000 f86c 	bl	80071d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80070f8:	f7ff fa40 	bl	800657c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070fc:	bf00      	nop
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	200013ac 	.word	0x200013ac
 8007108:	200013a4 	.word	0x200013a4

0800710c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007112:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007116:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007118:	4b27      	ldr	r3, [pc, #156]	; (80071b8 <prvHeapInit+0xac>)
 800711a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00c      	beq.n	8007140 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3307      	adds	r3, #7
 800712a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0307 	bic.w	r3, r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	4a1f      	ldr	r2, [pc, #124]	; (80071b8 <prvHeapInit+0xac>)
 800713c:	4413      	add	r3, r2
 800713e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007144:	4a1d      	ldr	r2, [pc, #116]	; (80071bc <prvHeapInit+0xb0>)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800714a:	4b1c      	ldr	r3, [pc, #112]	; (80071bc <prvHeapInit+0xb0>)
 800714c:	2200      	movs	r2, #0
 800714e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	4413      	add	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007158:	2208      	movs	r2, #8
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0307 	bic.w	r3, r3, #7
 8007166:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4a15      	ldr	r2, [pc, #84]	; (80071c0 <prvHeapInit+0xb4>)
 800716c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800716e:	4b14      	ldr	r3, [pc, #80]	; (80071c0 <prvHeapInit+0xb4>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2200      	movs	r2, #0
 8007174:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007176:	4b12      	ldr	r3, [pc, #72]	; (80071c0 <prvHeapInit+0xb4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	1ad2      	subs	r2, r2, r3
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800718c:	4b0c      	ldr	r3, [pc, #48]	; (80071c0 <prvHeapInit+0xb4>)
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	4a0a      	ldr	r2, [pc, #40]	; (80071c4 <prvHeapInit+0xb8>)
 800719a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	4a09      	ldr	r2, [pc, #36]	; (80071c8 <prvHeapInit+0xbc>)
 80071a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071a4:	4b09      	ldr	r3, [pc, #36]	; (80071cc <prvHeapInit+0xc0>)
 80071a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071aa:	601a      	str	r2, [r3, #0]
}
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	20000798 	.word	0x20000798
 80071bc:	20001398 	.word	0x20001398
 80071c0:	200013a0 	.word	0x200013a0
 80071c4:	200013a8 	.word	0x200013a8
 80071c8:	200013a4 	.word	0x200013a4
 80071cc:	200013ac 	.word	0x200013ac

080071d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071d8:	4b27      	ldr	r3, [pc, #156]	; (8007278 <prvInsertBlockIntoFreeList+0xa8>)
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e002      	b.n	80071e4 <prvInsertBlockIntoFreeList+0x14>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d8f7      	bhi.n	80071de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	4413      	add	r3, r2
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d108      	bne.n	8007212 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	441a      	add	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	441a      	add	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d118      	bne.n	8007258 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4b14      	ldr	r3, [pc, #80]	; (800727c <prvInsertBlockIntoFreeList+0xac>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	429a      	cmp	r2, r3
 8007230:	d00d      	beq.n	800724e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	441a      	add	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	e008      	b.n	8007260 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800724e:	4b0b      	ldr	r3, [pc, #44]	; (800727c <prvInsertBlockIntoFreeList+0xac>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e003      	b.n	8007260 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	429a      	cmp	r2, r3
 8007266:	d002      	beq.n	800726e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800726e:	bf00      	nop
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	bc80      	pop	{r7}
 8007276:	4770      	bx	lr
 8007278:	20001398 	.word	0x20001398
 800727c:	200013a0 	.word	0x200013a0

08007280 <ceilf>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8007286:	3d7f      	subs	r5, #127	; 0x7f
 8007288:	2d16      	cmp	r5, #22
 800728a:	4601      	mov	r1, r0
 800728c:	4604      	mov	r4, r0
 800728e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8007292:	dc25      	bgt.n	80072e0 <ceilf+0x60>
 8007294:	2d00      	cmp	r5, #0
 8007296:	da0e      	bge.n	80072b6 <ceilf+0x36>
 8007298:	4917      	ldr	r1, [pc, #92]	; (80072f8 <ceilf+0x78>)
 800729a:	f7f9 fc4b 	bl	8000b34 <__addsf3>
 800729e:	2100      	movs	r1, #0
 80072a0:	f7f9 ff0c 	bl	80010bc <__aeabi_fcmpgt>
 80072a4:	b128      	cbz	r0, 80072b2 <ceilf+0x32>
 80072a6:	2c00      	cmp	r4, #0
 80072a8:	db22      	blt.n	80072f0 <ceilf+0x70>
 80072aa:	2e00      	cmp	r6, #0
 80072ac:	bf18      	it	ne
 80072ae:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 80072b2:	4621      	mov	r1, r4
 80072b4:	e01a      	b.n	80072ec <ceilf+0x6c>
 80072b6:	4e11      	ldr	r6, [pc, #68]	; (80072fc <ceilf+0x7c>)
 80072b8:	412e      	asrs	r6, r5
 80072ba:	4230      	tst	r0, r6
 80072bc:	d016      	beq.n	80072ec <ceilf+0x6c>
 80072be:	490e      	ldr	r1, [pc, #56]	; (80072f8 <ceilf+0x78>)
 80072c0:	f7f9 fc38 	bl	8000b34 <__addsf3>
 80072c4:	2100      	movs	r1, #0
 80072c6:	f7f9 fef9 	bl	80010bc <__aeabi_fcmpgt>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d0f1      	beq.n	80072b2 <ceilf+0x32>
 80072ce:	2c00      	cmp	r4, #0
 80072d0:	bfc2      	ittt	gt
 80072d2:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 80072d6:	412b      	asrgt	r3, r5
 80072d8:	18e4      	addgt	r4, r4, r3
 80072da:	ea24 0406 	bic.w	r4, r4, r6
 80072de:	e7e8      	b.n	80072b2 <ceilf+0x32>
 80072e0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80072e4:	d302      	bcc.n	80072ec <ceilf+0x6c>
 80072e6:	f7f9 fc25 	bl	8000b34 <__addsf3>
 80072ea:	4601      	mov	r1, r0
 80072ec:	4608      	mov	r0, r1
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80072f4:	e7dd      	b.n	80072b2 <ceilf+0x32>
 80072f6:	bf00      	nop
 80072f8:	7149f2ca 	.word	0x7149f2ca
 80072fc:	007fffff 	.word	0x007fffff

08007300 <__cvt>:
 8007300:	2b00      	cmp	r3, #0
 8007302:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007306:	461f      	mov	r7, r3
 8007308:	bfbb      	ittet	lt
 800730a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800730e:	461f      	movlt	r7, r3
 8007310:	2300      	movge	r3, #0
 8007312:	232d      	movlt	r3, #45	; 0x2d
 8007314:	b088      	sub	sp, #32
 8007316:	4614      	mov	r4, r2
 8007318:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800731a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800731c:	7013      	strb	r3, [r2, #0]
 800731e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007320:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007324:	f023 0820 	bic.w	r8, r3, #32
 8007328:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800732c:	d005      	beq.n	800733a <__cvt+0x3a>
 800732e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007332:	d100      	bne.n	8007336 <__cvt+0x36>
 8007334:	3501      	adds	r5, #1
 8007336:	2302      	movs	r3, #2
 8007338:	e000      	b.n	800733c <__cvt+0x3c>
 800733a:	2303      	movs	r3, #3
 800733c:	aa07      	add	r2, sp, #28
 800733e:	9204      	str	r2, [sp, #16]
 8007340:	aa06      	add	r2, sp, #24
 8007342:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007346:	e9cd 3500 	strd	r3, r5, [sp]
 800734a:	4622      	mov	r2, r4
 800734c:	463b      	mov	r3, r7
 800734e:	f000 fe7f 	bl	8008050 <_dtoa_r>
 8007352:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007356:	4606      	mov	r6, r0
 8007358:	d102      	bne.n	8007360 <__cvt+0x60>
 800735a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800735c:	07db      	lsls	r3, r3, #31
 800735e:	d522      	bpl.n	80073a6 <__cvt+0xa6>
 8007360:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007364:	eb06 0905 	add.w	r9, r6, r5
 8007368:	d110      	bne.n	800738c <__cvt+0x8c>
 800736a:	7833      	ldrb	r3, [r6, #0]
 800736c:	2b30      	cmp	r3, #48	; 0x30
 800736e:	d10a      	bne.n	8007386 <__cvt+0x86>
 8007370:	2200      	movs	r2, #0
 8007372:	2300      	movs	r3, #0
 8007374:	4620      	mov	r0, r4
 8007376:	4639      	mov	r1, r7
 8007378:	f7f9 fb16 	bl	80009a8 <__aeabi_dcmpeq>
 800737c:	b918      	cbnz	r0, 8007386 <__cvt+0x86>
 800737e:	f1c5 0501 	rsb	r5, r5, #1
 8007382:	f8ca 5000 	str.w	r5, [sl]
 8007386:	f8da 3000 	ldr.w	r3, [sl]
 800738a:	4499      	add	r9, r3
 800738c:	2200      	movs	r2, #0
 800738e:	2300      	movs	r3, #0
 8007390:	4620      	mov	r0, r4
 8007392:	4639      	mov	r1, r7
 8007394:	f7f9 fb08 	bl	80009a8 <__aeabi_dcmpeq>
 8007398:	b108      	cbz	r0, 800739e <__cvt+0x9e>
 800739a:	f8cd 901c 	str.w	r9, [sp, #28]
 800739e:	2230      	movs	r2, #48	; 0x30
 80073a0:	9b07      	ldr	r3, [sp, #28]
 80073a2:	454b      	cmp	r3, r9
 80073a4:	d307      	bcc.n	80073b6 <__cvt+0xb6>
 80073a6:	4630      	mov	r0, r6
 80073a8:	9b07      	ldr	r3, [sp, #28]
 80073aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80073ac:	1b9b      	subs	r3, r3, r6
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	b008      	add	sp, #32
 80073b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b6:	1c59      	adds	r1, r3, #1
 80073b8:	9107      	str	r1, [sp, #28]
 80073ba:	701a      	strb	r2, [r3, #0]
 80073bc:	e7f0      	b.n	80073a0 <__cvt+0xa0>

080073be <__exponent>:
 80073be:	4603      	mov	r3, r0
 80073c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073c2:	2900      	cmp	r1, #0
 80073c4:	f803 2b02 	strb.w	r2, [r3], #2
 80073c8:	bfb6      	itet	lt
 80073ca:	222d      	movlt	r2, #45	; 0x2d
 80073cc:	222b      	movge	r2, #43	; 0x2b
 80073ce:	4249      	neglt	r1, r1
 80073d0:	2909      	cmp	r1, #9
 80073d2:	7042      	strb	r2, [r0, #1]
 80073d4:	dd2a      	ble.n	800742c <__exponent+0x6e>
 80073d6:	f10d 0207 	add.w	r2, sp, #7
 80073da:	4617      	mov	r7, r2
 80073dc:	260a      	movs	r6, #10
 80073de:	fb91 f5f6 	sdiv	r5, r1, r6
 80073e2:	4694      	mov	ip, r2
 80073e4:	fb06 1415 	mls	r4, r6, r5, r1
 80073e8:	3430      	adds	r4, #48	; 0x30
 80073ea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80073ee:	460c      	mov	r4, r1
 80073f0:	2c63      	cmp	r4, #99	; 0x63
 80073f2:	4629      	mov	r1, r5
 80073f4:	f102 32ff 	add.w	r2, r2, #4294967295
 80073f8:	dcf1      	bgt.n	80073de <__exponent+0x20>
 80073fa:	3130      	adds	r1, #48	; 0x30
 80073fc:	f1ac 0402 	sub.w	r4, ip, #2
 8007400:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007404:	4622      	mov	r2, r4
 8007406:	1c41      	adds	r1, r0, #1
 8007408:	42ba      	cmp	r2, r7
 800740a:	d30a      	bcc.n	8007422 <__exponent+0x64>
 800740c:	f10d 0209 	add.w	r2, sp, #9
 8007410:	eba2 020c 	sub.w	r2, r2, ip
 8007414:	42bc      	cmp	r4, r7
 8007416:	bf88      	it	hi
 8007418:	2200      	movhi	r2, #0
 800741a:	4413      	add	r3, r2
 800741c:	1a18      	subs	r0, r3, r0
 800741e:	b003      	add	sp, #12
 8007420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007422:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007426:	f801 5f01 	strb.w	r5, [r1, #1]!
 800742a:	e7ed      	b.n	8007408 <__exponent+0x4a>
 800742c:	2330      	movs	r3, #48	; 0x30
 800742e:	3130      	adds	r1, #48	; 0x30
 8007430:	7083      	strb	r3, [r0, #2]
 8007432:	70c1      	strb	r1, [r0, #3]
 8007434:	1d03      	adds	r3, r0, #4
 8007436:	e7f1      	b.n	800741c <__exponent+0x5e>

08007438 <_printf_float>:
 8007438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743c:	b091      	sub	sp, #68	; 0x44
 800743e:	460c      	mov	r4, r1
 8007440:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007444:	4616      	mov	r6, r2
 8007446:	461f      	mov	r7, r3
 8007448:	4605      	mov	r5, r0
 800744a:	f000 fce5 	bl	8007e18 <_localeconv_r>
 800744e:	6803      	ldr	r3, [r0, #0]
 8007450:	4618      	mov	r0, r3
 8007452:	9309      	str	r3, [sp, #36]	; 0x24
 8007454:	f7f8 fe7c 	bl	8000150 <strlen>
 8007458:	2300      	movs	r3, #0
 800745a:	930e      	str	r3, [sp, #56]	; 0x38
 800745c:	f8d8 3000 	ldr.w	r3, [r8]
 8007460:	900a      	str	r0, [sp, #40]	; 0x28
 8007462:	3307      	adds	r3, #7
 8007464:	f023 0307 	bic.w	r3, r3, #7
 8007468:	f103 0208 	add.w	r2, r3, #8
 800746c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007470:	f8d4 b000 	ldr.w	fp, [r4]
 8007474:	f8c8 2000 	str.w	r2, [r8]
 8007478:	e9d3 a800 	ldrd	sl, r8, [r3]
 800747c:	4652      	mov	r2, sl
 800747e:	4643      	mov	r3, r8
 8007480:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007484:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007488:	930b      	str	r3, [sp, #44]	; 0x2c
 800748a:	f04f 32ff 	mov.w	r2, #4294967295
 800748e:	4650      	mov	r0, sl
 8007490:	4b9c      	ldr	r3, [pc, #624]	; (8007704 <_printf_float+0x2cc>)
 8007492:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007494:	f7f9 faba 	bl	8000a0c <__aeabi_dcmpun>
 8007498:	bb70      	cbnz	r0, 80074f8 <_printf_float+0xc0>
 800749a:	f04f 32ff 	mov.w	r2, #4294967295
 800749e:	4650      	mov	r0, sl
 80074a0:	4b98      	ldr	r3, [pc, #608]	; (8007704 <_printf_float+0x2cc>)
 80074a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074a4:	f7f9 fa94 	bl	80009d0 <__aeabi_dcmple>
 80074a8:	bb30      	cbnz	r0, 80074f8 <_printf_float+0xc0>
 80074aa:	2200      	movs	r2, #0
 80074ac:	2300      	movs	r3, #0
 80074ae:	4650      	mov	r0, sl
 80074b0:	4641      	mov	r1, r8
 80074b2:	f7f9 fa83 	bl	80009bc <__aeabi_dcmplt>
 80074b6:	b110      	cbz	r0, 80074be <_printf_float+0x86>
 80074b8:	232d      	movs	r3, #45	; 0x2d
 80074ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074be:	4a92      	ldr	r2, [pc, #584]	; (8007708 <_printf_float+0x2d0>)
 80074c0:	4b92      	ldr	r3, [pc, #584]	; (800770c <_printf_float+0x2d4>)
 80074c2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80074c6:	bf94      	ite	ls
 80074c8:	4690      	movls	r8, r2
 80074ca:	4698      	movhi	r8, r3
 80074cc:	2303      	movs	r3, #3
 80074ce:	f04f 0a00 	mov.w	sl, #0
 80074d2:	6123      	str	r3, [r4, #16]
 80074d4:	f02b 0304 	bic.w	r3, fp, #4
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	4633      	mov	r3, r6
 80074dc:	4621      	mov	r1, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	9700      	str	r7, [sp, #0]
 80074e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80074e4:	f000 f9d6 	bl	8007894 <_printf_common>
 80074e8:	3001      	adds	r0, #1
 80074ea:	f040 8090 	bne.w	800760e <_printf_float+0x1d6>
 80074ee:	f04f 30ff 	mov.w	r0, #4294967295
 80074f2:	b011      	add	sp, #68	; 0x44
 80074f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f8:	4652      	mov	r2, sl
 80074fa:	4643      	mov	r3, r8
 80074fc:	4650      	mov	r0, sl
 80074fe:	4641      	mov	r1, r8
 8007500:	f7f9 fa84 	bl	8000a0c <__aeabi_dcmpun>
 8007504:	b148      	cbz	r0, 800751a <_printf_float+0xe2>
 8007506:	f1b8 0f00 	cmp.w	r8, #0
 800750a:	bfb8      	it	lt
 800750c:	232d      	movlt	r3, #45	; 0x2d
 800750e:	4a80      	ldr	r2, [pc, #512]	; (8007710 <_printf_float+0x2d8>)
 8007510:	bfb8      	it	lt
 8007512:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007516:	4b7f      	ldr	r3, [pc, #508]	; (8007714 <_printf_float+0x2dc>)
 8007518:	e7d3      	b.n	80074c2 <_printf_float+0x8a>
 800751a:	6863      	ldr	r3, [r4, #4]
 800751c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	d142      	bne.n	80075aa <_printf_float+0x172>
 8007524:	2306      	movs	r3, #6
 8007526:	6063      	str	r3, [r4, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	9206      	str	r2, [sp, #24]
 800752c:	aa0e      	add	r2, sp, #56	; 0x38
 800752e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007532:	aa0d      	add	r2, sp, #52	; 0x34
 8007534:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007538:	9203      	str	r2, [sp, #12]
 800753a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800753e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007542:	6023      	str	r3, [r4, #0]
 8007544:	6863      	ldr	r3, [r4, #4]
 8007546:	4652      	mov	r2, sl
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	4628      	mov	r0, r5
 800754c:	4643      	mov	r3, r8
 800754e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007550:	f7ff fed6 	bl	8007300 <__cvt>
 8007554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007556:	4680      	mov	r8, r0
 8007558:	2947      	cmp	r1, #71	; 0x47
 800755a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800755c:	d108      	bne.n	8007570 <_printf_float+0x138>
 800755e:	1cc8      	adds	r0, r1, #3
 8007560:	db02      	blt.n	8007568 <_printf_float+0x130>
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	4299      	cmp	r1, r3
 8007566:	dd40      	ble.n	80075ea <_printf_float+0x1b2>
 8007568:	f1a9 0902 	sub.w	r9, r9, #2
 800756c:	fa5f f989 	uxtb.w	r9, r9
 8007570:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007574:	d81f      	bhi.n	80075b6 <_printf_float+0x17e>
 8007576:	464a      	mov	r2, r9
 8007578:	3901      	subs	r1, #1
 800757a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800757e:	910d      	str	r1, [sp, #52]	; 0x34
 8007580:	f7ff ff1d 	bl	80073be <__exponent>
 8007584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007586:	4682      	mov	sl, r0
 8007588:	1813      	adds	r3, r2, r0
 800758a:	2a01      	cmp	r2, #1
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	dc02      	bgt.n	8007596 <_printf_float+0x15e>
 8007590:	6822      	ldr	r2, [r4, #0]
 8007592:	07d2      	lsls	r2, r2, #31
 8007594:	d501      	bpl.n	800759a <_printf_float+0x162>
 8007596:	3301      	adds	r3, #1
 8007598:	6123      	str	r3, [r4, #16]
 800759a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d09b      	beq.n	80074da <_printf_float+0xa2>
 80075a2:	232d      	movs	r3, #45	; 0x2d
 80075a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a8:	e797      	b.n	80074da <_printf_float+0xa2>
 80075aa:	2947      	cmp	r1, #71	; 0x47
 80075ac:	d1bc      	bne.n	8007528 <_printf_float+0xf0>
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1ba      	bne.n	8007528 <_printf_float+0xf0>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e7b7      	b.n	8007526 <_printf_float+0xee>
 80075b6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80075ba:	d118      	bne.n	80075ee <_printf_float+0x1b6>
 80075bc:	2900      	cmp	r1, #0
 80075be:	6863      	ldr	r3, [r4, #4]
 80075c0:	dd0b      	ble.n	80075da <_printf_float+0x1a2>
 80075c2:	6121      	str	r1, [r4, #16]
 80075c4:	b913      	cbnz	r3, 80075cc <_printf_float+0x194>
 80075c6:	6822      	ldr	r2, [r4, #0]
 80075c8:	07d0      	lsls	r0, r2, #31
 80075ca:	d502      	bpl.n	80075d2 <_printf_float+0x19a>
 80075cc:	3301      	adds	r3, #1
 80075ce:	440b      	add	r3, r1
 80075d0:	6123      	str	r3, [r4, #16]
 80075d2:	f04f 0a00 	mov.w	sl, #0
 80075d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80075d8:	e7df      	b.n	800759a <_printf_float+0x162>
 80075da:	b913      	cbnz	r3, 80075e2 <_printf_float+0x1aa>
 80075dc:	6822      	ldr	r2, [r4, #0]
 80075de:	07d2      	lsls	r2, r2, #31
 80075e0:	d501      	bpl.n	80075e6 <_printf_float+0x1ae>
 80075e2:	3302      	adds	r3, #2
 80075e4:	e7f4      	b.n	80075d0 <_printf_float+0x198>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e7f2      	b.n	80075d0 <_printf_float+0x198>
 80075ea:	f04f 0967 	mov.w	r9, #103	; 0x67
 80075ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f0:	4299      	cmp	r1, r3
 80075f2:	db05      	blt.n	8007600 <_printf_float+0x1c8>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	6121      	str	r1, [r4, #16]
 80075f8:	07d8      	lsls	r0, r3, #31
 80075fa:	d5ea      	bpl.n	80075d2 <_printf_float+0x19a>
 80075fc:	1c4b      	adds	r3, r1, #1
 80075fe:	e7e7      	b.n	80075d0 <_printf_float+0x198>
 8007600:	2900      	cmp	r1, #0
 8007602:	bfcc      	ite	gt
 8007604:	2201      	movgt	r2, #1
 8007606:	f1c1 0202 	rsble	r2, r1, #2
 800760a:	4413      	add	r3, r2
 800760c:	e7e0      	b.n	80075d0 <_printf_float+0x198>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	055a      	lsls	r2, r3, #21
 8007612:	d407      	bmi.n	8007624 <_printf_float+0x1ec>
 8007614:	6923      	ldr	r3, [r4, #16]
 8007616:	4642      	mov	r2, r8
 8007618:	4631      	mov	r1, r6
 800761a:	4628      	mov	r0, r5
 800761c:	47b8      	blx	r7
 800761e:	3001      	adds	r0, #1
 8007620:	d12b      	bne.n	800767a <_printf_float+0x242>
 8007622:	e764      	b.n	80074ee <_printf_float+0xb6>
 8007624:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007628:	f240 80dd 	bls.w	80077e6 <_printf_float+0x3ae>
 800762c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007630:	2200      	movs	r2, #0
 8007632:	2300      	movs	r3, #0
 8007634:	f7f9 f9b8 	bl	80009a8 <__aeabi_dcmpeq>
 8007638:	2800      	cmp	r0, #0
 800763a:	d033      	beq.n	80076a4 <_printf_float+0x26c>
 800763c:	2301      	movs	r3, #1
 800763e:	4631      	mov	r1, r6
 8007640:	4628      	mov	r0, r5
 8007642:	4a35      	ldr	r2, [pc, #212]	; (8007718 <_printf_float+0x2e0>)
 8007644:	47b8      	blx	r7
 8007646:	3001      	adds	r0, #1
 8007648:	f43f af51 	beq.w	80074ee <_printf_float+0xb6>
 800764c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007650:	429a      	cmp	r2, r3
 8007652:	db02      	blt.n	800765a <_printf_float+0x222>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	07d8      	lsls	r0, r3, #31
 8007658:	d50f      	bpl.n	800767a <_printf_float+0x242>
 800765a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800765e:	4631      	mov	r1, r6
 8007660:	4628      	mov	r0, r5
 8007662:	47b8      	blx	r7
 8007664:	3001      	adds	r0, #1
 8007666:	f43f af42 	beq.w	80074ee <_printf_float+0xb6>
 800766a:	f04f 0800 	mov.w	r8, #0
 800766e:	f104 091a 	add.w	r9, r4, #26
 8007672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007674:	3b01      	subs	r3, #1
 8007676:	4543      	cmp	r3, r8
 8007678:	dc09      	bgt.n	800768e <_printf_float+0x256>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	079b      	lsls	r3, r3, #30
 800767e:	f100 8104 	bmi.w	800788a <_printf_float+0x452>
 8007682:	68e0      	ldr	r0, [r4, #12]
 8007684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007686:	4298      	cmp	r0, r3
 8007688:	bfb8      	it	lt
 800768a:	4618      	movlt	r0, r3
 800768c:	e731      	b.n	80074f2 <_printf_float+0xba>
 800768e:	2301      	movs	r3, #1
 8007690:	464a      	mov	r2, r9
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	47b8      	blx	r7
 8007698:	3001      	adds	r0, #1
 800769a:	f43f af28 	beq.w	80074ee <_printf_float+0xb6>
 800769e:	f108 0801 	add.w	r8, r8, #1
 80076a2:	e7e6      	b.n	8007672 <_printf_float+0x23a>
 80076a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	dc38      	bgt.n	800771c <_printf_float+0x2e4>
 80076aa:	2301      	movs	r3, #1
 80076ac:	4631      	mov	r1, r6
 80076ae:	4628      	mov	r0, r5
 80076b0:	4a19      	ldr	r2, [pc, #100]	; (8007718 <_printf_float+0x2e0>)
 80076b2:	47b8      	blx	r7
 80076b4:	3001      	adds	r0, #1
 80076b6:	f43f af1a 	beq.w	80074ee <_printf_float+0xb6>
 80076ba:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80076be:	4313      	orrs	r3, r2
 80076c0:	d102      	bne.n	80076c8 <_printf_float+0x290>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	07d9      	lsls	r1, r3, #31
 80076c6:	d5d8      	bpl.n	800767a <_printf_float+0x242>
 80076c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076cc:	4631      	mov	r1, r6
 80076ce:	4628      	mov	r0, r5
 80076d0:	47b8      	blx	r7
 80076d2:	3001      	adds	r0, #1
 80076d4:	f43f af0b 	beq.w	80074ee <_printf_float+0xb6>
 80076d8:	f04f 0900 	mov.w	r9, #0
 80076dc:	f104 0a1a 	add.w	sl, r4, #26
 80076e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076e2:	425b      	negs	r3, r3
 80076e4:	454b      	cmp	r3, r9
 80076e6:	dc01      	bgt.n	80076ec <_printf_float+0x2b4>
 80076e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076ea:	e794      	b.n	8007616 <_printf_float+0x1de>
 80076ec:	2301      	movs	r3, #1
 80076ee:	4652      	mov	r2, sl
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b8      	blx	r7
 80076f6:	3001      	adds	r0, #1
 80076f8:	f43f aef9 	beq.w	80074ee <_printf_float+0xb6>
 80076fc:	f109 0901 	add.w	r9, r9, #1
 8007700:	e7ee      	b.n	80076e0 <_printf_float+0x2a8>
 8007702:	bf00      	nop
 8007704:	7fefffff 	.word	0x7fefffff
 8007708:	0800a0d2 	.word	0x0800a0d2
 800770c:	0800a0d6 	.word	0x0800a0d6
 8007710:	0800a0da 	.word	0x0800a0da
 8007714:	0800a0de 	.word	0x0800a0de
 8007718:	0800a0e2 	.word	0x0800a0e2
 800771c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800771e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007720:	429a      	cmp	r2, r3
 8007722:	bfa8      	it	ge
 8007724:	461a      	movge	r2, r3
 8007726:	2a00      	cmp	r2, #0
 8007728:	4691      	mov	r9, r2
 800772a:	dc37      	bgt.n	800779c <_printf_float+0x364>
 800772c:	f04f 0b00 	mov.w	fp, #0
 8007730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007734:	f104 021a 	add.w	r2, r4, #26
 8007738:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800773c:	ebaa 0309 	sub.w	r3, sl, r9
 8007740:	455b      	cmp	r3, fp
 8007742:	dc33      	bgt.n	80077ac <_printf_float+0x374>
 8007744:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007748:	429a      	cmp	r2, r3
 800774a:	db3b      	blt.n	80077c4 <_printf_float+0x38c>
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	07da      	lsls	r2, r3, #31
 8007750:	d438      	bmi.n	80077c4 <_printf_float+0x38c>
 8007752:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007756:	eba2 0903 	sub.w	r9, r2, r3
 800775a:	eba2 020a 	sub.w	r2, r2, sl
 800775e:	4591      	cmp	r9, r2
 8007760:	bfa8      	it	ge
 8007762:	4691      	movge	r9, r2
 8007764:	f1b9 0f00 	cmp.w	r9, #0
 8007768:	dc34      	bgt.n	80077d4 <_printf_float+0x39c>
 800776a:	f04f 0800 	mov.w	r8, #0
 800776e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007772:	f104 0a1a 	add.w	sl, r4, #26
 8007776:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	eba3 0309 	sub.w	r3, r3, r9
 8007780:	4543      	cmp	r3, r8
 8007782:	f77f af7a 	ble.w	800767a <_printf_float+0x242>
 8007786:	2301      	movs	r3, #1
 8007788:	4652      	mov	r2, sl
 800778a:	4631      	mov	r1, r6
 800778c:	4628      	mov	r0, r5
 800778e:	47b8      	blx	r7
 8007790:	3001      	adds	r0, #1
 8007792:	f43f aeac 	beq.w	80074ee <_printf_float+0xb6>
 8007796:	f108 0801 	add.w	r8, r8, #1
 800779a:	e7ec      	b.n	8007776 <_printf_float+0x33e>
 800779c:	4613      	mov	r3, r2
 800779e:	4631      	mov	r1, r6
 80077a0:	4642      	mov	r2, r8
 80077a2:	4628      	mov	r0, r5
 80077a4:	47b8      	blx	r7
 80077a6:	3001      	adds	r0, #1
 80077a8:	d1c0      	bne.n	800772c <_printf_float+0x2f4>
 80077aa:	e6a0      	b.n	80074ee <_printf_float+0xb6>
 80077ac:	2301      	movs	r3, #1
 80077ae:	4631      	mov	r1, r6
 80077b0:	4628      	mov	r0, r5
 80077b2:	920b      	str	r2, [sp, #44]	; 0x2c
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f ae99 	beq.w	80074ee <_printf_float+0xb6>
 80077bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077be:	f10b 0b01 	add.w	fp, fp, #1
 80077c2:	e7b9      	b.n	8007738 <_printf_float+0x300>
 80077c4:	4631      	mov	r1, r6
 80077c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077ca:	4628      	mov	r0, r5
 80077cc:	47b8      	blx	r7
 80077ce:	3001      	adds	r0, #1
 80077d0:	d1bf      	bne.n	8007752 <_printf_float+0x31a>
 80077d2:	e68c      	b.n	80074ee <_printf_float+0xb6>
 80077d4:	464b      	mov	r3, r9
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	eb08 020a 	add.w	r2, r8, sl
 80077de:	47b8      	blx	r7
 80077e0:	3001      	adds	r0, #1
 80077e2:	d1c2      	bne.n	800776a <_printf_float+0x332>
 80077e4:	e683      	b.n	80074ee <_printf_float+0xb6>
 80077e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077e8:	2a01      	cmp	r2, #1
 80077ea:	dc01      	bgt.n	80077f0 <_printf_float+0x3b8>
 80077ec:	07db      	lsls	r3, r3, #31
 80077ee:	d539      	bpl.n	8007864 <_printf_float+0x42c>
 80077f0:	2301      	movs	r3, #1
 80077f2:	4642      	mov	r2, r8
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b8      	blx	r7
 80077fa:	3001      	adds	r0, #1
 80077fc:	f43f ae77 	beq.w	80074ee <_printf_float+0xb6>
 8007800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	f43f ae6f 	beq.w	80074ee <_printf_float+0xb6>
 8007810:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007814:	2200      	movs	r2, #0
 8007816:	2300      	movs	r3, #0
 8007818:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800781c:	f7f9 f8c4 	bl	80009a8 <__aeabi_dcmpeq>
 8007820:	b9d8      	cbnz	r0, 800785a <_printf_float+0x422>
 8007822:	f109 33ff 	add.w	r3, r9, #4294967295
 8007826:	f108 0201 	add.w	r2, r8, #1
 800782a:	4631      	mov	r1, r6
 800782c:	4628      	mov	r0, r5
 800782e:	47b8      	blx	r7
 8007830:	3001      	adds	r0, #1
 8007832:	d10e      	bne.n	8007852 <_printf_float+0x41a>
 8007834:	e65b      	b.n	80074ee <_printf_float+0xb6>
 8007836:	2301      	movs	r3, #1
 8007838:	464a      	mov	r2, r9
 800783a:	4631      	mov	r1, r6
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	f43f ae54 	beq.w	80074ee <_printf_float+0xb6>
 8007846:	f108 0801 	add.w	r8, r8, #1
 800784a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800784c:	3b01      	subs	r3, #1
 800784e:	4543      	cmp	r3, r8
 8007850:	dcf1      	bgt.n	8007836 <_printf_float+0x3fe>
 8007852:	4653      	mov	r3, sl
 8007854:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007858:	e6de      	b.n	8007618 <_printf_float+0x1e0>
 800785a:	f04f 0800 	mov.w	r8, #0
 800785e:	f104 091a 	add.w	r9, r4, #26
 8007862:	e7f2      	b.n	800784a <_printf_float+0x412>
 8007864:	2301      	movs	r3, #1
 8007866:	4642      	mov	r2, r8
 8007868:	e7df      	b.n	800782a <_printf_float+0x3f2>
 800786a:	2301      	movs	r3, #1
 800786c:	464a      	mov	r2, r9
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	47b8      	blx	r7
 8007874:	3001      	adds	r0, #1
 8007876:	f43f ae3a 	beq.w	80074ee <_printf_float+0xb6>
 800787a:	f108 0801 	add.w	r8, r8, #1
 800787e:	68e3      	ldr	r3, [r4, #12]
 8007880:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007882:	1a5b      	subs	r3, r3, r1
 8007884:	4543      	cmp	r3, r8
 8007886:	dcf0      	bgt.n	800786a <_printf_float+0x432>
 8007888:	e6fb      	b.n	8007682 <_printf_float+0x24a>
 800788a:	f04f 0800 	mov.w	r8, #0
 800788e:	f104 0919 	add.w	r9, r4, #25
 8007892:	e7f4      	b.n	800787e <_printf_float+0x446>

08007894 <_printf_common>:
 8007894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007898:	4616      	mov	r6, r2
 800789a:	4699      	mov	r9, r3
 800789c:	688a      	ldr	r2, [r1, #8]
 800789e:	690b      	ldr	r3, [r1, #16]
 80078a0:	4607      	mov	r7, r0
 80078a2:	4293      	cmp	r3, r2
 80078a4:	bfb8      	it	lt
 80078a6:	4613      	movlt	r3, r2
 80078a8:	6033      	str	r3, [r6, #0]
 80078aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078ae:	460c      	mov	r4, r1
 80078b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078b4:	b10a      	cbz	r2, 80078ba <_printf_common+0x26>
 80078b6:	3301      	adds	r3, #1
 80078b8:	6033      	str	r3, [r6, #0]
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	0699      	lsls	r1, r3, #26
 80078be:	bf42      	ittt	mi
 80078c0:	6833      	ldrmi	r3, [r6, #0]
 80078c2:	3302      	addmi	r3, #2
 80078c4:	6033      	strmi	r3, [r6, #0]
 80078c6:	6825      	ldr	r5, [r4, #0]
 80078c8:	f015 0506 	ands.w	r5, r5, #6
 80078cc:	d106      	bne.n	80078dc <_printf_common+0x48>
 80078ce:	f104 0a19 	add.w	sl, r4, #25
 80078d2:	68e3      	ldr	r3, [r4, #12]
 80078d4:	6832      	ldr	r2, [r6, #0]
 80078d6:	1a9b      	subs	r3, r3, r2
 80078d8:	42ab      	cmp	r3, r5
 80078da:	dc2b      	bgt.n	8007934 <_printf_common+0xa0>
 80078dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078e0:	1e13      	subs	r3, r2, #0
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	bf18      	it	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	0692      	lsls	r2, r2, #26
 80078ea:	d430      	bmi.n	800794e <_printf_common+0xba>
 80078ec:	4649      	mov	r1, r9
 80078ee:	4638      	mov	r0, r7
 80078f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078f4:	47c0      	blx	r8
 80078f6:	3001      	adds	r0, #1
 80078f8:	d023      	beq.n	8007942 <_printf_common+0xae>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	6922      	ldr	r2, [r4, #16]
 80078fe:	f003 0306 	and.w	r3, r3, #6
 8007902:	2b04      	cmp	r3, #4
 8007904:	bf14      	ite	ne
 8007906:	2500      	movne	r5, #0
 8007908:	6833      	ldreq	r3, [r6, #0]
 800790a:	f04f 0600 	mov.w	r6, #0
 800790e:	bf08      	it	eq
 8007910:	68e5      	ldreq	r5, [r4, #12]
 8007912:	f104 041a 	add.w	r4, r4, #26
 8007916:	bf08      	it	eq
 8007918:	1aed      	subeq	r5, r5, r3
 800791a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800791e:	bf08      	it	eq
 8007920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007924:	4293      	cmp	r3, r2
 8007926:	bfc4      	itt	gt
 8007928:	1a9b      	subgt	r3, r3, r2
 800792a:	18ed      	addgt	r5, r5, r3
 800792c:	42b5      	cmp	r5, r6
 800792e:	d11a      	bne.n	8007966 <_printf_common+0xd2>
 8007930:	2000      	movs	r0, #0
 8007932:	e008      	b.n	8007946 <_printf_common+0xb2>
 8007934:	2301      	movs	r3, #1
 8007936:	4652      	mov	r2, sl
 8007938:	4649      	mov	r1, r9
 800793a:	4638      	mov	r0, r7
 800793c:	47c0      	blx	r8
 800793e:	3001      	adds	r0, #1
 8007940:	d103      	bne.n	800794a <_printf_common+0xb6>
 8007942:	f04f 30ff 	mov.w	r0, #4294967295
 8007946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800794a:	3501      	adds	r5, #1
 800794c:	e7c1      	b.n	80078d2 <_printf_common+0x3e>
 800794e:	2030      	movs	r0, #48	; 0x30
 8007950:	18e1      	adds	r1, r4, r3
 8007952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800795c:	4422      	add	r2, r4
 800795e:	3302      	adds	r3, #2
 8007960:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007964:	e7c2      	b.n	80078ec <_printf_common+0x58>
 8007966:	2301      	movs	r3, #1
 8007968:	4622      	mov	r2, r4
 800796a:	4649      	mov	r1, r9
 800796c:	4638      	mov	r0, r7
 800796e:	47c0      	blx	r8
 8007970:	3001      	adds	r0, #1
 8007972:	d0e6      	beq.n	8007942 <_printf_common+0xae>
 8007974:	3601      	adds	r6, #1
 8007976:	e7d9      	b.n	800792c <_printf_common+0x98>

08007978 <_printf_i>:
 8007978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	7e0f      	ldrb	r7, [r1, #24]
 800797e:	4691      	mov	r9, r2
 8007980:	2f78      	cmp	r7, #120	; 0x78
 8007982:	4680      	mov	r8, r0
 8007984:	460c      	mov	r4, r1
 8007986:	469a      	mov	sl, r3
 8007988:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800798a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800798e:	d807      	bhi.n	80079a0 <_printf_i+0x28>
 8007990:	2f62      	cmp	r7, #98	; 0x62
 8007992:	d80a      	bhi.n	80079aa <_printf_i+0x32>
 8007994:	2f00      	cmp	r7, #0
 8007996:	f000 80d5 	beq.w	8007b44 <_printf_i+0x1cc>
 800799a:	2f58      	cmp	r7, #88	; 0x58
 800799c:	f000 80c1 	beq.w	8007b22 <_printf_i+0x1aa>
 80079a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079a8:	e03a      	b.n	8007a20 <_printf_i+0xa8>
 80079aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ae:	2b15      	cmp	r3, #21
 80079b0:	d8f6      	bhi.n	80079a0 <_printf_i+0x28>
 80079b2:	a101      	add	r1, pc, #4	; (adr r1, 80079b8 <_printf_i+0x40>)
 80079b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079b8:	08007a11 	.word	0x08007a11
 80079bc:	08007a25 	.word	0x08007a25
 80079c0:	080079a1 	.word	0x080079a1
 80079c4:	080079a1 	.word	0x080079a1
 80079c8:	080079a1 	.word	0x080079a1
 80079cc:	080079a1 	.word	0x080079a1
 80079d0:	08007a25 	.word	0x08007a25
 80079d4:	080079a1 	.word	0x080079a1
 80079d8:	080079a1 	.word	0x080079a1
 80079dc:	080079a1 	.word	0x080079a1
 80079e0:	080079a1 	.word	0x080079a1
 80079e4:	08007b2b 	.word	0x08007b2b
 80079e8:	08007a51 	.word	0x08007a51
 80079ec:	08007ae5 	.word	0x08007ae5
 80079f0:	080079a1 	.word	0x080079a1
 80079f4:	080079a1 	.word	0x080079a1
 80079f8:	08007b4d 	.word	0x08007b4d
 80079fc:	080079a1 	.word	0x080079a1
 8007a00:	08007a51 	.word	0x08007a51
 8007a04:	080079a1 	.word	0x080079a1
 8007a08:	080079a1 	.word	0x080079a1
 8007a0c:	08007aed 	.word	0x08007aed
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	1d1a      	adds	r2, r3, #4
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	602a      	str	r2, [r5, #0]
 8007a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a20:	2301      	movs	r3, #1
 8007a22:	e0a0      	b.n	8007b66 <_printf_i+0x1ee>
 8007a24:	6820      	ldr	r0, [r4, #0]
 8007a26:	682b      	ldr	r3, [r5, #0]
 8007a28:	0607      	lsls	r7, r0, #24
 8007a2a:	f103 0104 	add.w	r1, r3, #4
 8007a2e:	6029      	str	r1, [r5, #0]
 8007a30:	d501      	bpl.n	8007a36 <_printf_i+0xbe>
 8007a32:	681e      	ldr	r6, [r3, #0]
 8007a34:	e003      	b.n	8007a3e <_printf_i+0xc6>
 8007a36:	0646      	lsls	r6, r0, #25
 8007a38:	d5fb      	bpl.n	8007a32 <_printf_i+0xba>
 8007a3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a3e:	2e00      	cmp	r6, #0
 8007a40:	da03      	bge.n	8007a4a <_printf_i+0xd2>
 8007a42:	232d      	movs	r3, #45	; 0x2d
 8007a44:	4276      	negs	r6, r6
 8007a46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a4a:	230a      	movs	r3, #10
 8007a4c:	4859      	ldr	r0, [pc, #356]	; (8007bb4 <_printf_i+0x23c>)
 8007a4e:	e012      	b.n	8007a76 <_printf_i+0xfe>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	6820      	ldr	r0, [r4, #0]
 8007a54:	1d19      	adds	r1, r3, #4
 8007a56:	6029      	str	r1, [r5, #0]
 8007a58:	0605      	lsls	r5, r0, #24
 8007a5a:	d501      	bpl.n	8007a60 <_printf_i+0xe8>
 8007a5c:	681e      	ldr	r6, [r3, #0]
 8007a5e:	e002      	b.n	8007a66 <_printf_i+0xee>
 8007a60:	0641      	lsls	r1, r0, #25
 8007a62:	d5fb      	bpl.n	8007a5c <_printf_i+0xe4>
 8007a64:	881e      	ldrh	r6, [r3, #0]
 8007a66:	2f6f      	cmp	r7, #111	; 0x6f
 8007a68:	bf0c      	ite	eq
 8007a6a:	2308      	moveq	r3, #8
 8007a6c:	230a      	movne	r3, #10
 8007a6e:	4851      	ldr	r0, [pc, #324]	; (8007bb4 <_printf_i+0x23c>)
 8007a70:	2100      	movs	r1, #0
 8007a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a76:	6865      	ldr	r5, [r4, #4]
 8007a78:	2d00      	cmp	r5, #0
 8007a7a:	bfa8      	it	ge
 8007a7c:	6821      	ldrge	r1, [r4, #0]
 8007a7e:	60a5      	str	r5, [r4, #8]
 8007a80:	bfa4      	itt	ge
 8007a82:	f021 0104 	bicge.w	r1, r1, #4
 8007a86:	6021      	strge	r1, [r4, #0]
 8007a88:	b90e      	cbnz	r6, 8007a8e <_printf_i+0x116>
 8007a8a:	2d00      	cmp	r5, #0
 8007a8c:	d04b      	beq.n	8007b26 <_printf_i+0x1ae>
 8007a8e:	4615      	mov	r5, r2
 8007a90:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a94:	fb03 6711 	mls	r7, r3, r1, r6
 8007a98:	5dc7      	ldrb	r7, [r0, r7]
 8007a9a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a9e:	4637      	mov	r7, r6
 8007aa0:	42bb      	cmp	r3, r7
 8007aa2:	460e      	mov	r6, r1
 8007aa4:	d9f4      	bls.n	8007a90 <_printf_i+0x118>
 8007aa6:	2b08      	cmp	r3, #8
 8007aa8:	d10b      	bne.n	8007ac2 <_printf_i+0x14a>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	07de      	lsls	r6, r3, #31
 8007aae:	d508      	bpl.n	8007ac2 <_printf_i+0x14a>
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	6861      	ldr	r1, [r4, #4]
 8007ab4:	4299      	cmp	r1, r3
 8007ab6:	bfde      	ittt	le
 8007ab8:	2330      	movle	r3, #48	; 0x30
 8007aba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007abe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ac2:	1b52      	subs	r2, r2, r5
 8007ac4:	6122      	str	r2, [r4, #16]
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4640      	mov	r0, r8
 8007acc:	f8cd a000 	str.w	sl, [sp]
 8007ad0:	aa03      	add	r2, sp, #12
 8007ad2:	f7ff fedf 	bl	8007894 <_printf_common>
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	d14a      	bne.n	8007b70 <_printf_i+0x1f8>
 8007ada:	f04f 30ff 	mov.w	r0, #4294967295
 8007ade:	b004      	add	sp, #16
 8007ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	f043 0320 	orr.w	r3, r3, #32
 8007aea:	6023      	str	r3, [r4, #0]
 8007aec:	2778      	movs	r7, #120	; 0x78
 8007aee:	4832      	ldr	r0, [pc, #200]	; (8007bb8 <_printf_i+0x240>)
 8007af0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	6829      	ldr	r1, [r5, #0]
 8007af8:	061f      	lsls	r7, r3, #24
 8007afa:	f851 6b04 	ldr.w	r6, [r1], #4
 8007afe:	d402      	bmi.n	8007b06 <_printf_i+0x18e>
 8007b00:	065f      	lsls	r7, r3, #25
 8007b02:	bf48      	it	mi
 8007b04:	b2b6      	uxthmi	r6, r6
 8007b06:	07df      	lsls	r7, r3, #31
 8007b08:	bf48      	it	mi
 8007b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8007b0e:	6029      	str	r1, [r5, #0]
 8007b10:	bf48      	it	mi
 8007b12:	6023      	strmi	r3, [r4, #0]
 8007b14:	b91e      	cbnz	r6, 8007b1e <_printf_i+0x1a6>
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	f023 0320 	bic.w	r3, r3, #32
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	2310      	movs	r3, #16
 8007b20:	e7a6      	b.n	8007a70 <_printf_i+0xf8>
 8007b22:	4824      	ldr	r0, [pc, #144]	; (8007bb4 <_printf_i+0x23c>)
 8007b24:	e7e4      	b.n	8007af0 <_printf_i+0x178>
 8007b26:	4615      	mov	r5, r2
 8007b28:	e7bd      	b.n	8007aa6 <_printf_i+0x12e>
 8007b2a:	682b      	ldr	r3, [r5, #0]
 8007b2c:	6826      	ldr	r6, [r4, #0]
 8007b2e:	1d18      	adds	r0, r3, #4
 8007b30:	6961      	ldr	r1, [r4, #20]
 8007b32:	6028      	str	r0, [r5, #0]
 8007b34:	0635      	lsls	r5, r6, #24
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	d501      	bpl.n	8007b3e <_printf_i+0x1c6>
 8007b3a:	6019      	str	r1, [r3, #0]
 8007b3c:	e002      	b.n	8007b44 <_printf_i+0x1cc>
 8007b3e:	0670      	lsls	r0, r6, #25
 8007b40:	d5fb      	bpl.n	8007b3a <_printf_i+0x1c2>
 8007b42:	8019      	strh	r1, [r3, #0]
 8007b44:	2300      	movs	r3, #0
 8007b46:	4615      	mov	r5, r2
 8007b48:	6123      	str	r3, [r4, #16]
 8007b4a:	e7bc      	b.n	8007ac6 <_printf_i+0x14e>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	2100      	movs	r1, #0
 8007b50:	1d1a      	adds	r2, r3, #4
 8007b52:	602a      	str	r2, [r5, #0]
 8007b54:	681d      	ldr	r5, [r3, #0]
 8007b56:	6862      	ldr	r2, [r4, #4]
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 f9d4 	bl	8007f06 <memchr>
 8007b5e:	b108      	cbz	r0, 8007b64 <_printf_i+0x1ec>
 8007b60:	1b40      	subs	r0, r0, r5
 8007b62:	6060      	str	r0, [r4, #4]
 8007b64:	6863      	ldr	r3, [r4, #4]
 8007b66:	6123      	str	r3, [r4, #16]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b6e:	e7aa      	b.n	8007ac6 <_printf_i+0x14e>
 8007b70:	462a      	mov	r2, r5
 8007b72:	4649      	mov	r1, r9
 8007b74:	4640      	mov	r0, r8
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	47d0      	blx	sl
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	d0ad      	beq.n	8007ada <_printf_i+0x162>
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	079b      	lsls	r3, r3, #30
 8007b82:	d413      	bmi.n	8007bac <_printf_i+0x234>
 8007b84:	68e0      	ldr	r0, [r4, #12]
 8007b86:	9b03      	ldr	r3, [sp, #12]
 8007b88:	4298      	cmp	r0, r3
 8007b8a:	bfb8      	it	lt
 8007b8c:	4618      	movlt	r0, r3
 8007b8e:	e7a6      	b.n	8007ade <_printf_i+0x166>
 8007b90:	2301      	movs	r3, #1
 8007b92:	4632      	mov	r2, r6
 8007b94:	4649      	mov	r1, r9
 8007b96:	4640      	mov	r0, r8
 8007b98:	47d0      	blx	sl
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	d09d      	beq.n	8007ada <_printf_i+0x162>
 8007b9e:	3501      	adds	r5, #1
 8007ba0:	68e3      	ldr	r3, [r4, #12]
 8007ba2:	9903      	ldr	r1, [sp, #12]
 8007ba4:	1a5b      	subs	r3, r3, r1
 8007ba6:	42ab      	cmp	r3, r5
 8007ba8:	dcf2      	bgt.n	8007b90 <_printf_i+0x218>
 8007baa:	e7eb      	b.n	8007b84 <_printf_i+0x20c>
 8007bac:	2500      	movs	r5, #0
 8007bae:	f104 0619 	add.w	r6, r4, #25
 8007bb2:	e7f5      	b.n	8007ba0 <_printf_i+0x228>
 8007bb4:	0800a0e4 	.word	0x0800a0e4
 8007bb8:	0800a0f5 	.word	0x0800a0f5

08007bbc <std>:
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	e9c0 3300 	strd	r3, r3, [r0]
 8007bc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bca:	6083      	str	r3, [r0, #8]
 8007bcc:	8181      	strh	r1, [r0, #12]
 8007bce:	6643      	str	r3, [r0, #100]	; 0x64
 8007bd0:	81c2      	strh	r2, [r0, #14]
 8007bd2:	6183      	str	r3, [r0, #24]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	2208      	movs	r2, #8
 8007bd8:	305c      	adds	r0, #92	; 0x5c
 8007bda:	f000 f914 	bl	8007e06 <memset>
 8007bde:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <std+0x58>)
 8007be0:	6224      	str	r4, [r4, #32]
 8007be2:	6263      	str	r3, [r4, #36]	; 0x24
 8007be4:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <std+0x5c>)
 8007be6:	62a3      	str	r3, [r4, #40]	; 0x28
 8007be8:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <std+0x60>)
 8007bea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bec:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <std+0x64>)
 8007bee:	6323      	str	r3, [r4, #48]	; 0x30
 8007bf0:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <std+0x68>)
 8007bf2:	429c      	cmp	r4, r3
 8007bf4:	d006      	beq.n	8007c04 <std+0x48>
 8007bf6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007bfa:	4294      	cmp	r4, r2
 8007bfc:	d002      	beq.n	8007c04 <std+0x48>
 8007bfe:	33d0      	adds	r3, #208	; 0xd0
 8007c00:	429c      	cmp	r4, r3
 8007c02:	d105      	bne.n	8007c10 <std+0x54>
 8007c04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c0c:	f000 b978 	b.w	8007f00 <__retarget_lock_init_recursive>
 8007c10:	bd10      	pop	{r4, pc}
 8007c12:	bf00      	nop
 8007c14:	08007d81 	.word	0x08007d81
 8007c18:	08007da3 	.word	0x08007da3
 8007c1c:	08007ddb 	.word	0x08007ddb
 8007c20:	08007dff 	.word	0x08007dff
 8007c24:	200013b0 	.word	0x200013b0

08007c28 <stdio_exit_handler>:
 8007c28:	4a02      	ldr	r2, [pc, #8]	; (8007c34 <stdio_exit_handler+0xc>)
 8007c2a:	4903      	ldr	r1, [pc, #12]	; (8007c38 <stdio_exit_handler+0x10>)
 8007c2c:	4803      	ldr	r0, [pc, #12]	; (8007c3c <stdio_exit_handler+0x14>)
 8007c2e:	f000 b869 	b.w	8007d04 <_fwalk_sglue>
 8007c32:	bf00      	nop
 8007c34:	20000014 	.word	0x20000014
 8007c38:	080098b5 	.word	0x080098b5
 8007c3c:	20000020 	.word	0x20000020

08007c40 <cleanup_stdio>:
 8007c40:	6841      	ldr	r1, [r0, #4]
 8007c42:	4b0c      	ldr	r3, [pc, #48]	; (8007c74 <cleanup_stdio+0x34>)
 8007c44:	b510      	push	{r4, lr}
 8007c46:	4299      	cmp	r1, r3
 8007c48:	4604      	mov	r4, r0
 8007c4a:	d001      	beq.n	8007c50 <cleanup_stdio+0x10>
 8007c4c:	f001 fe32 	bl	80098b4 <_fflush_r>
 8007c50:	68a1      	ldr	r1, [r4, #8]
 8007c52:	4b09      	ldr	r3, [pc, #36]	; (8007c78 <cleanup_stdio+0x38>)
 8007c54:	4299      	cmp	r1, r3
 8007c56:	d002      	beq.n	8007c5e <cleanup_stdio+0x1e>
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f001 fe2b 	bl	80098b4 <_fflush_r>
 8007c5e:	68e1      	ldr	r1, [r4, #12]
 8007c60:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <cleanup_stdio+0x3c>)
 8007c62:	4299      	cmp	r1, r3
 8007c64:	d004      	beq.n	8007c70 <cleanup_stdio+0x30>
 8007c66:	4620      	mov	r0, r4
 8007c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c6c:	f001 be22 	b.w	80098b4 <_fflush_r>
 8007c70:	bd10      	pop	{r4, pc}
 8007c72:	bf00      	nop
 8007c74:	200013b0 	.word	0x200013b0
 8007c78:	20001418 	.word	0x20001418
 8007c7c:	20001480 	.word	0x20001480

08007c80 <global_stdio_init.part.0>:
 8007c80:	b510      	push	{r4, lr}
 8007c82:	4b0b      	ldr	r3, [pc, #44]	; (8007cb0 <global_stdio_init.part.0+0x30>)
 8007c84:	4c0b      	ldr	r4, [pc, #44]	; (8007cb4 <global_stdio_init.part.0+0x34>)
 8007c86:	4a0c      	ldr	r2, [pc, #48]	; (8007cb8 <global_stdio_init.part.0+0x38>)
 8007c88:	4620      	mov	r0, r4
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	2104      	movs	r1, #4
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f7ff ff94 	bl	8007bbc <std>
 8007c94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c98:	2201      	movs	r2, #1
 8007c9a:	2109      	movs	r1, #9
 8007c9c:	f7ff ff8e 	bl	8007bbc <std>
 8007ca0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007caa:	2112      	movs	r1, #18
 8007cac:	f7ff bf86 	b.w	8007bbc <std>
 8007cb0:	200014e8 	.word	0x200014e8
 8007cb4:	200013b0 	.word	0x200013b0
 8007cb8:	08007c29 	.word	0x08007c29

08007cbc <__sfp_lock_acquire>:
 8007cbc:	4801      	ldr	r0, [pc, #4]	; (8007cc4 <__sfp_lock_acquire+0x8>)
 8007cbe:	f000 b920 	b.w	8007f02 <__retarget_lock_acquire_recursive>
 8007cc2:	bf00      	nop
 8007cc4:	200014f1 	.word	0x200014f1

08007cc8 <__sfp_lock_release>:
 8007cc8:	4801      	ldr	r0, [pc, #4]	; (8007cd0 <__sfp_lock_release+0x8>)
 8007cca:	f000 b91b 	b.w	8007f04 <__retarget_lock_release_recursive>
 8007cce:	bf00      	nop
 8007cd0:	200014f1 	.word	0x200014f1

08007cd4 <__sinit>:
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	f7ff fff0 	bl	8007cbc <__sfp_lock_acquire>
 8007cdc:	6a23      	ldr	r3, [r4, #32]
 8007cde:	b11b      	cbz	r3, 8007ce8 <__sinit+0x14>
 8007ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce4:	f7ff bff0 	b.w	8007cc8 <__sfp_lock_release>
 8007ce8:	4b04      	ldr	r3, [pc, #16]	; (8007cfc <__sinit+0x28>)
 8007cea:	6223      	str	r3, [r4, #32]
 8007cec:	4b04      	ldr	r3, [pc, #16]	; (8007d00 <__sinit+0x2c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f5      	bne.n	8007ce0 <__sinit+0xc>
 8007cf4:	f7ff ffc4 	bl	8007c80 <global_stdio_init.part.0>
 8007cf8:	e7f2      	b.n	8007ce0 <__sinit+0xc>
 8007cfa:	bf00      	nop
 8007cfc:	08007c41 	.word	0x08007c41
 8007d00:	200014e8 	.word	0x200014e8

08007d04 <_fwalk_sglue>:
 8007d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d08:	4607      	mov	r7, r0
 8007d0a:	4688      	mov	r8, r1
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	2600      	movs	r6, #0
 8007d10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d14:	f1b9 0901 	subs.w	r9, r9, #1
 8007d18:	d505      	bpl.n	8007d26 <_fwalk_sglue+0x22>
 8007d1a:	6824      	ldr	r4, [r4, #0]
 8007d1c:	2c00      	cmp	r4, #0
 8007d1e:	d1f7      	bne.n	8007d10 <_fwalk_sglue+0xc>
 8007d20:	4630      	mov	r0, r6
 8007d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d26:	89ab      	ldrh	r3, [r5, #12]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d907      	bls.n	8007d3c <_fwalk_sglue+0x38>
 8007d2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d30:	3301      	adds	r3, #1
 8007d32:	d003      	beq.n	8007d3c <_fwalk_sglue+0x38>
 8007d34:	4629      	mov	r1, r5
 8007d36:	4638      	mov	r0, r7
 8007d38:	47c0      	blx	r8
 8007d3a:	4306      	orrs	r6, r0
 8007d3c:	3568      	adds	r5, #104	; 0x68
 8007d3e:	e7e9      	b.n	8007d14 <_fwalk_sglue+0x10>

08007d40 <siprintf>:
 8007d40:	b40e      	push	{r1, r2, r3}
 8007d42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d46:	b500      	push	{lr}
 8007d48:	b09c      	sub	sp, #112	; 0x70
 8007d4a:	ab1d      	add	r3, sp, #116	; 0x74
 8007d4c:	9002      	str	r0, [sp, #8]
 8007d4e:	9006      	str	r0, [sp, #24]
 8007d50:	9107      	str	r1, [sp, #28]
 8007d52:	9104      	str	r1, [sp, #16]
 8007d54:	4808      	ldr	r0, [pc, #32]	; (8007d78 <siprintf+0x38>)
 8007d56:	4909      	ldr	r1, [pc, #36]	; (8007d7c <siprintf+0x3c>)
 8007d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d5c:	9105      	str	r1, [sp, #20]
 8007d5e:	6800      	ldr	r0, [r0, #0]
 8007d60:	a902      	add	r1, sp, #8
 8007d62:	9301      	str	r3, [sp, #4]
 8007d64:	f001 fc26 	bl	80095b4 <_svfiprintf_r>
 8007d68:	2200      	movs	r2, #0
 8007d6a:	9b02      	ldr	r3, [sp, #8]
 8007d6c:	701a      	strb	r2, [r3, #0]
 8007d6e:	b01c      	add	sp, #112	; 0x70
 8007d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d74:	b003      	add	sp, #12
 8007d76:	4770      	bx	lr
 8007d78:	2000006c 	.word	0x2000006c
 8007d7c:	ffff0208 	.word	0xffff0208

08007d80 <__sread>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	460c      	mov	r4, r1
 8007d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d88:	f000 f86c 	bl	8007e64 <_read_r>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	bfab      	itete	ge
 8007d90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d92:	89a3      	ldrhlt	r3, [r4, #12]
 8007d94:	181b      	addge	r3, r3, r0
 8007d96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d9a:	bfac      	ite	ge
 8007d9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d9e:	81a3      	strhlt	r3, [r4, #12]
 8007da0:	bd10      	pop	{r4, pc}

08007da2 <__swrite>:
 8007da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da6:	461f      	mov	r7, r3
 8007da8:	898b      	ldrh	r3, [r1, #12]
 8007daa:	4605      	mov	r5, r0
 8007dac:	05db      	lsls	r3, r3, #23
 8007dae:	460c      	mov	r4, r1
 8007db0:	4616      	mov	r6, r2
 8007db2:	d505      	bpl.n	8007dc0 <__swrite+0x1e>
 8007db4:	2302      	movs	r3, #2
 8007db6:	2200      	movs	r2, #0
 8007db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dbc:	f000 f840 	bl	8007e40 <_lseek_r>
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	4632      	mov	r2, r6
 8007dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	4628      	mov	r0, r5
 8007dcc:	463b      	mov	r3, r7
 8007dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd6:	f000 b857 	b.w	8007e88 <_write_r>

08007dda <__sseek>:
 8007dda:	b510      	push	{r4, lr}
 8007ddc:	460c      	mov	r4, r1
 8007dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de2:	f000 f82d 	bl	8007e40 <_lseek_r>
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	bf15      	itete	ne
 8007dec:	6560      	strne	r0, [r4, #84]	; 0x54
 8007dee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007df2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007df6:	81a3      	strheq	r3, [r4, #12]
 8007df8:	bf18      	it	ne
 8007dfa:	81a3      	strhne	r3, [r4, #12]
 8007dfc:	bd10      	pop	{r4, pc}

08007dfe <__sclose>:
 8007dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e02:	f000 b80d 	b.w	8007e20 <_close_r>

08007e06 <memset>:
 8007e06:	4603      	mov	r3, r0
 8007e08:	4402      	add	r2, r0
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d100      	bne.n	8007e10 <memset+0xa>
 8007e0e:	4770      	bx	lr
 8007e10:	f803 1b01 	strb.w	r1, [r3], #1
 8007e14:	e7f9      	b.n	8007e0a <memset+0x4>
	...

08007e18 <_localeconv_r>:
 8007e18:	4800      	ldr	r0, [pc, #0]	; (8007e1c <_localeconv_r+0x4>)
 8007e1a:	4770      	bx	lr
 8007e1c:	20000160 	.word	0x20000160

08007e20 <_close_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	2300      	movs	r3, #0
 8007e24:	4d05      	ldr	r5, [pc, #20]	; (8007e3c <_close_r+0x1c>)
 8007e26:	4604      	mov	r4, r0
 8007e28:	4608      	mov	r0, r1
 8007e2a:	602b      	str	r3, [r5, #0]
 8007e2c:	f7fa fe48 	bl	8002ac0 <_close>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d102      	bne.n	8007e3a <_close_r+0x1a>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b103      	cbz	r3, 8007e3a <_close_r+0x1a>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	200014ec 	.word	0x200014ec

08007e40 <_lseek_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4604      	mov	r4, r0
 8007e44:	4608      	mov	r0, r1
 8007e46:	4611      	mov	r1, r2
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4d05      	ldr	r5, [pc, #20]	; (8007e60 <_lseek_r+0x20>)
 8007e4c:	602a      	str	r2, [r5, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f7fa fe5a 	bl	8002b08 <_lseek>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	d102      	bne.n	8007e5e <_lseek_r+0x1e>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	b103      	cbz	r3, 8007e5e <_lseek_r+0x1e>
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	200014ec 	.word	0x200014ec

08007e64 <_read_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4604      	mov	r4, r0
 8007e68:	4608      	mov	r0, r1
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	4d05      	ldr	r5, [pc, #20]	; (8007e84 <_read_r+0x20>)
 8007e70:	602a      	str	r2, [r5, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	f7fa fdeb 	bl	8002a4e <_read>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	d102      	bne.n	8007e82 <_read_r+0x1e>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	b103      	cbz	r3, 8007e82 <_read_r+0x1e>
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	200014ec 	.word	0x200014ec

08007e88 <_write_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	4611      	mov	r1, r2
 8007e90:	2200      	movs	r2, #0
 8007e92:	4d05      	ldr	r5, [pc, #20]	; (8007ea8 <_write_r+0x20>)
 8007e94:	602a      	str	r2, [r5, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f7fa fdf6 	bl	8002a88 <_write>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d102      	bne.n	8007ea6 <_write_r+0x1e>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b103      	cbz	r3, 8007ea6 <_write_r+0x1e>
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	200014ec 	.word	0x200014ec

08007eac <__errno>:
 8007eac:	4b01      	ldr	r3, [pc, #4]	; (8007eb4 <__errno+0x8>)
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	2000006c 	.word	0x2000006c

08007eb8 <__libc_init_array>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	2600      	movs	r6, #0
 8007ebc:	4d0c      	ldr	r5, [pc, #48]	; (8007ef0 <__libc_init_array+0x38>)
 8007ebe:	4c0d      	ldr	r4, [pc, #52]	; (8007ef4 <__libc_init_array+0x3c>)
 8007ec0:	1b64      	subs	r4, r4, r5
 8007ec2:	10a4      	asrs	r4, r4, #2
 8007ec4:	42a6      	cmp	r6, r4
 8007ec6:	d109      	bne.n	8007edc <__libc_init_array+0x24>
 8007ec8:	f002 f886 	bl	8009fd8 <_init>
 8007ecc:	2600      	movs	r6, #0
 8007ece:	4d0a      	ldr	r5, [pc, #40]	; (8007ef8 <__libc_init_array+0x40>)
 8007ed0:	4c0a      	ldr	r4, [pc, #40]	; (8007efc <__libc_init_array+0x44>)
 8007ed2:	1b64      	subs	r4, r4, r5
 8007ed4:	10a4      	asrs	r4, r4, #2
 8007ed6:	42a6      	cmp	r6, r4
 8007ed8:	d105      	bne.n	8007ee6 <__libc_init_array+0x2e>
 8007eda:	bd70      	pop	{r4, r5, r6, pc}
 8007edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee0:	4798      	blx	r3
 8007ee2:	3601      	adds	r6, #1
 8007ee4:	e7ee      	b.n	8007ec4 <__libc_init_array+0xc>
 8007ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eea:	4798      	blx	r3
 8007eec:	3601      	adds	r6, #1
 8007eee:	e7f2      	b.n	8007ed6 <__libc_init_array+0x1e>
 8007ef0:	0800a444 	.word	0x0800a444
 8007ef4:	0800a444 	.word	0x0800a444
 8007ef8:	0800a444 	.word	0x0800a444
 8007efc:	0800a44c 	.word	0x0800a44c

08007f00 <__retarget_lock_init_recursive>:
 8007f00:	4770      	bx	lr

08007f02 <__retarget_lock_acquire_recursive>:
 8007f02:	4770      	bx	lr

08007f04 <__retarget_lock_release_recursive>:
 8007f04:	4770      	bx	lr

08007f06 <memchr>:
 8007f06:	4603      	mov	r3, r0
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	b2c9      	uxtb	r1, r1
 8007f0c:	4402      	add	r2, r0
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	4618      	mov	r0, r3
 8007f12:	d101      	bne.n	8007f18 <memchr+0x12>
 8007f14:	2000      	movs	r0, #0
 8007f16:	e003      	b.n	8007f20 <memchr+0x1a>
 8007f18:	7804      	ldrb	r4, [r0, #0]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	428c      	cmp	r4, r1
 8007f1e:	d1f6      	bne.n	8007f0e <memchr+0x8>
 8007f20:	bd10      	pop	{r4, pc}

08007f22 <memcpy>:
 8007f22:	440a      	add	r2, r1
 8007f24:	4291      	cmp	r1, r2
 8007f26:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f2a:	d100      	bne.n	8007f2e <memcpy+0xc>
 8007f2c:	4770      	bx	lr
 8007f2e:	b510      	push	{r4, lr}
 8007f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f34:	4291      	cmp	r1, r2
 8007f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f3a:	d1f9      	bne.n	8007f30 <memcpy+0xe>
 8007f3c:	bd10      	pop	{r4, pc}

08007f3e <quorem>:
 8007f3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f42:	6903      	ldr	r3, [r0, #16]
 8007f44:	690c      	ldr	r4, [r1, #16]
 8007f46:	4607      	mov	r7, r0
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	db7f      	blt.n	800804c <quorem+0x10e>
 8007f4c:	3c01      	subs	r4, #1
 8007f4e:	f100 0514 	add.w	r5, r0, #20
 8007f52:	f101 0814 	add.w	r8, r1, #20
 8007f56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f5a:	9301      	str	r3, [sp, #4]
 8007f5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f64:	3301      	adds	r3, #1
 8007f66:	429a      	cmp	r2, r3
 8007f68:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f74:	d331      	bcc.n	8007fda <quorem+0x9c>
 8007f76:	f04f 0e00 	mov.w	lr, #0
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	46ac      	mov	ip, r5
 8007f7e:	46f2      	mov	sl, lr
 8007f80:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f84:	b293      	uxth	r3, r2
 8007f86:	fb06 e303 	mla	r3, r6, r3, lr
 8007f8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f8e:	0c1a      	lsrs	r2, r3, #16
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	fb06 220e 	mla	r2, r6, lr, r2
 8007f96:	ebaa 0303 	sub.w	r3, sl, r3
 8007f9a:	f8dc a000 	ldr.w	sl, [ip]
 8007f9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fa2:	fa1f fa8a 	uxth.w	sl, sl
 8007fa6:	4453      	add	r3, sl
 8007fa8:	f8dc a000 	ldr.w	sl, [ip]
 8007fac:	b292      	uxth	r2, r2
 8007fae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007fb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fbc:	4581      	cmp	r9, r0
 8007fbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fc2:	f84c 3b04 	str.w	r3, [ip], #4
 8007fc6:	d2db      	bcs.n	8007f80 <quorem+0x42>
 8007fc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fcc:	b92b      	cbnz	r3, 8007fda <quorem+0x9c>
 8007fce:	9b01      	ldr	r3, [sp, #4]
 8007fd0:	3b04      	subs	r3, #4
 8007fd2:	429d      	cmp	r5, r3
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	d32d      	bcc.n	8008034 <quorem+0xf6>
 8007fd8:	613c      	str	r4, [r7, #16]
 8007fda:	4638      	mov	r0, r7
 8007fdc:	f001 f992 	bl	8009304 <__mcmp>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	db23      	blt.n	800802c <quorem+0xee>
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	3601      	adds	r6, #1
 8007fea:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fee:	f8d1 c000 	ldr.w	ip, [r1]
 8007ff2:	b293      	uxth	r3, r2
 8007ff4:	1ac3      	subs	r3, r0, r3
 8007ff6:	0c12      	lsrs	r2, r2, #16
 8007ff8:	fa1f f08c 	uxth.w	r0, ip
 8007ffc:	4403      	add	r3, r0
 8007ffe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008002:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008006:	b29b      	uxth	r3, r3
 8008008:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800800c:	45c1      	cmp	r9, r8
 800800e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008012:	f841 3b04 	str.w	r3, [r1], #4
 8008016:	d2e8      	bcs.n	8007fea <quorem+0xac>
 8008018:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800801c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008020:	b922      	cbnz	r2, 800802c <quorem+0xee>
 8008022:	3b04      	subs	r3, #4
 8008024:	429d      	cmp	r5, r3
 8008026:	461a      	mov	r2, r3
 8008028:	d30a      	bcc.n	8008040 <quorem+0x102>
 800802a:	613c      	str	r4, [r7, #16]
 800802c:	4630      	mov	r0, r6
 800802e:	b003      	add	sp, #12
 8008030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008034:	6812      	ldr	r2, [r2, #0]
 8008036:	3b04      	subs	r3, #4
 8008038:	2a00      	cmp	r2, #0
 800803a:	d1cd      	bne.n	8007fd8 <quorem+0x9a>
 800803c:	3c01      	subs	r4, #1
 800803e:	e7c8      	b.n	8007fd2 <quorem+0x94>
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	3b04      	subs	r3, #4
 8008044:	2a00      	cmp	r2, #0
 8008046:	d1f0      	bne.n	800802a <quorem+0xec>
 8008048:	3c01      	subs	r4, #1
 800804a:	e7eb      	b.n	8008024 <quorem+0xe6>
 800804c:	2000      	movs	r0, #0
 800804e:	e7ee      	b.n	800802e <quorem+0xf0>

08008050 <_dtoa_r>:
 8008050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	4616      	mov	r6, r2
 8008056:	461f      	mov	r7, r3
 8008058:	69c4      	ldr	r4, [r0, #28]
 800805a:	b099      	sub	sp, #100	; 0x64
 800805c:	4605      	mov	r5, r0
 800805e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008062:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008066:	b974      	cbnz	r4, 8008086 <_dtoa_r+0x36>
 8008068:	2010      	movs	r0, #16
 800806a:	f000 fe1d 	bl	8008ca8 <malloc>
 800806e:	4602      	mov	r2, r0
 8008070:	61e8      	str	r0, [r5, #28]
 8008072:	b920      	cbnz	r0, 800807e <_dtoa_r+0x2e>
 8008074:	21ef      	movs	r1, #239	; 0xef
 8008076:	4bac      	ldr	r3, [pc, #688]	; (8008328 <_dtoa_r+0x2d8>)
 8008078:	48ac      	ldr	r0, [pc, #688]	; (800832c <_dtoa_r+0x2dc>)
 800807a:	f001 fc6d 	bl	8009958 <__assert_func>
 800807e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008082:	6004      	str	r4, [r0, #0]
 8008084:	60c4      	str	r4, [r0, #12]
 8008086:	69eb      	ldr	r3, [r5, #28]
 8008088:	6819      	ldr	r1, [r3, #0]
 800808a:	b151      	cbz	r1, 80080a2 <_dtoa_r+0x52>
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	2301      	movs	r3, #1
 8008090:	4093      	lsls	r3, r2
 8008092:	604a      	str	r2, [r1, #4]
 8008094:	608b      	str	r3, [r1, #8]
 8008096:	4628      	mov	r0, r5
 8008098:	f000 fefa 	bl	8008e90 <_Bfree>
 800809c:	2200      	movs	r2, #0
 800809e:	69eb      	ldr	r3, [r5, #28]
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	1e3b      	subs	r3, r7, #0
 80080a4:	bfaf      	iteee	ge
 80080a6:	2300      	movge	r3, #0
 80080a8:	2201      	movlt	r2, #1
 80080aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80080ae:	9305      	strlt	r3, [sp, #20]
 80080b0:	bfa8      	it	ge
 80080b2:	f8c8 3000 	strge.w	r3, [r8]
 80080b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80080ba:	4b9d      	ldr	r3, [pc, #628]	; (8008330 <_dtoa_r+0x2e0>)
 80080bc:	bfb8      	it	lt
 80080be:	f8c8 2000 	strlt.w	r2, [r8]
 80080c2:	ea33 0309 	bics.w	r3, r3, r9
 80080c6:	d119      	bne.n	80080fc <_dtoa_r+0xac>
 80080c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80080cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080d4:	4333      	orrs	r3, r6
 80080d6:	f000 8589 	beq.w	8008bec <_dtoa_r+0xb9c>
 80080da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080dc:	b953      	cbnz	r3, 80080f4 <_dtoa_r+0xa4>
 80080de:	4b95      	ldr	r3, [pc, #596]	; (8008334 <_dtoa_r+0x2e4>)
 80080e0:	e023      	b.n	800812a <_dtoa_r+0xda>
 80080e2:	4b95      	ldr	r3, [pc, #596]	; (8008338 <_dtoa_r+0x2e8>)
 80080e4:	9303      	str	r3, [sp, #12]
 80080e6:	3308      	adds	r3, #8
 80080e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80080ea:	6013      	str	r3, [r2, #0]
 80080ec:	9803      	ldr	r0, [sp, #12]
 80080ee:	b019      	add	sp, #100	; 0x64
 80080f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f4:	4b8f      	ldr	r3, [pc, #572]	; (8008334 <_dtoa_r+0x2e4>)
 80080f6:	9303      	str	r3, [sp, #12]
 80080f8:	3303      	adds	r3, #3
 80080fa:	e7f5      	b.n	80080e8 <_dtoa_r+0x98>
 80080fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008100:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008108:	2200      	movs	r2, #0
 800810a:	2300      	movs	r3, #0
 800810c:	f7f8 fc4c 	bl	80009a8 <__aeabi_dcmpeq>
 8008110:	4680      	mov	r8, r0
 8008112:	b160      	cbz	r0, 800812e <_dtoa_r+0xde>
 8008114:	2301      	movs	r3, #1
 8008116:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008118:	6013      	str	r3, [r2, #0]
 800811a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 8562 	beq.w	8008be6 <_dtoa_r+0xb96>
 8008122:	4b86      	ldr	r3, [pc, #536]	; (800833c <_dtoa_r+0x2ec>)
 8008124:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	3b01      	subs	r3, #1
 800812a:	9303      	str	r3, [sp, #12]
 800812c:	e7de      	b.n	80080ec <_dtoa_r+0x9c>
 800812e:	ab16      	add	r3, sp, #88	; 0x58
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	ab17      	add	r3, sp, #92	; 0x5c
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	4628      	mov	r0, r5
 8008138:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800813c:	f001 f98a 	bl	8009454 <__d2b>
 8008140:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008144:	4682      	mov	sl, r0
 8008146:	2c00      	cmp	r4, #0
 8008148:	d07e      	beq.n	8008248 <_dtoa_r+0x1f8>
 800814a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800814e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008150:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008158:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800815c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008160:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008164:	4619      	mov	r1, r3
 8008166:	2200      	movs	r2, #0
 8008168:	4b75      	ldr	r3, [pc, #468]	; (8008340 <_dtoa_r+0x2f0>)
 800816a:	f7f7 fffd 	bl	8000168 <__aeabi_dsub>
 800816e:	a368      	add	r3, pc, #416	; (adr r3, 8008310 <_dtoa_r+0x2c0>)
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	f7f8 f9b0 	bl	80004d8 <__aeabi_dmul>
 8008178:	a367      	add	r3, pc, #412	; (adr r3, 8008318 <_dtoa_r+0x2c8>)
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	f7f7 fff5 	bl	800016c <__adddf3>
 8008182:	4606      	mov	r6, r0
 8008184:	4620      	mov	r0, r4
 8008186:	460f      	mov	r7, r1
 8008188:	f7f8 f93c 	bl	8000404 <__aeabi_i2d>
 800818c:	a364      	add	r3, pc, #400	; (adr r3, 8008320 <_dtoa_r+0x2d0>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f7f8 f9a1 	bl	80004d8 <__aeabi_dmul>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4630      	mov	r0, r6
 800819c:	4639      	mov	r1, r7
 800819e:	f7f7 ffe5 	bl	800016c <__adddf3>
 80081a2:	4606      	mov	r6, r0
 80081a4:	460f      	mov	r7, r1
 80081a6:	f7f8 fc47 	bl	8000a38 <__aeabi_d2iz>
 80081aa:	2200      	movs	r2, #0
 80081ac:	4683      	mov	fp, r0
 80081ae:	2300      	movs	r3, #0
 80081b0:	4630      	mov	r0, r6
 80081b2:	4639      	mov	r1, r7
 80081b4:	f7f8 fc02 	bl	80009bc <__aeabi_dcmplt>
 80081b8:	b148      	cbz	r0, 80081ce <_dtoa_r+0x17e>
 80081ba:	4658      	mov	r0, fp
 80081bc:	f7f8 f922 	bl	8000404 <__aeabi_i2d>
 80081c0:	4632      	mov	r2, r6
 80081c2:	463b      	mov	r3, r7
 80081c4:	f7f8 fbf0 	bl	80009a8 <__aeabi_dcmpeq>
 80081c8:	b908      	cbnz	r0, 80081ce <_dtoa_r+0x17e>
 80081ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80081ce:	f1bb 0f16 	cmp.w	fp, #22
 80081d2:	d857      	bhi.n	8008284 <_dtoa_r+0x234>
 80081d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081d8:	4b5a      	ldr	r3, [pc, #360]	; (8008344 <_dtoa_r+0x2f4>)
 80081da:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	f7f8 fbeb 	bl	80009bc <__aeabi_dcmplt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d04e      	beq.n	8008288 <_dtoa_r+0x238>
 80081ea:	2300      	movs	r3, #0
 80081ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80081f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80081f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80081f4:	1b1b      	subs	r3, r3, r4
 80081f6:	1e5a      	subs	r2, r3, #1
 80081f8:	bf46      	itte	mi
 80081fa:	f1c3 0901 	rsbmi	r9, r3, #1
 80081fe:	2300      	movmi	r3, #0
 8008200:	f04f 0900 	movpl.w	r9, #0
 8008204:	9209      	str	r2, [sp, #36]	; 0x24
 8008206:	bf48      	it	mi
 8008208:	9309      	strmi	r3, [sp, #36]	; 0x24
 800820a:	f1bb 0f00 	cmp.w	fp, #0
 800820e:	db3d      	blt.n	800828c <_dtoa_r+0x23c>
 8008210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008212:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008216:	445b      	add	r3, fp
 8008218:	9309      	str	r3, [sp, #36]	; 0x24
 800821a:	2300      	movs	r3, #0
 800821c:	930a      	str	r3, [sp, #40]	; 0x28
 800821e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008220:	2b09      	cmp	r3, #9
 8008222:	d867      	bhi.n	80082f4 <_dtoa_r+0x2a4>
 8008224:	2b05      	cmp	r3, #5
 8008226:	bfc4      	itt	gt
 8008228:	3b04      	subgt	r3, #4
 800822a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800822c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800822e:	bfc8      	it	gt
 8008230:	2400      	movgt	r4, #0
 8008232:	f1a3 0302 	sub.w	r3, r3, #2
 8008236:	bfd8      	it	le
 8008238:	2401      	movle	r4, #1
 800823a:	2b03      	cmp	r3, #3
 800823c:	f200 8086 	bhi.w	800834c <_dtoa_r+0x2fc>
 8008240:	e8df f003 	tbb	[pc, r3]
 8008244:	5637392c 	.word	0x5637392c
 8008248:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800824c:	441c      	add	r4, r3
 800824e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008252:	2b20      	cmp	r3, #32
 8008254:	bfc1      	itttt	gt
 8008256:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800825a:	fa09 f903 	lslgt.w	r9, r9, r3
 800825e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008262:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008266:	bfd6      	itet	le
 8008268:	f1c3 0320 	rsble	r3, r3, #32
 800826c:	ea49 0003 	orrgt.w	r0, r9, r3
 8008270:	fa06 f003 	lslle.w	r0, r6, r3
 8008274:	f7f8 f8b6 	bl	80003e4 <__aeabi_ui2d>
 8008278:	2201      	movs	r2, #1
 800827a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800827e:	3c01      	subs	r4, #1
 8008280:	9213      	str	r2, [sp, #76]	; 0x4c
 8008282:	e76f      	b.n	8008164 <_dtoa_r+0x114>
 8008284:	2301      	movs	r3, #1
 8008286:	e7b3      	b.n	80081f0 <_dtoa_r+0x1a0>
 8008288:	900f      	str	r0, [sp, #60]	; 0x3c
 800828a:	e7b2      	b.n	80081f2 <_dtoa_r+0x1a2>
 800828c:	f1cb 0300 	rsb	r3, fp, #0
 8008290:	930a      	str	r3, [sp, #40]	; 0x28
 8008292:	2300      	movs	r3, #0
 8008294:	eba9 090b 	sub.w	r9, r9, fp
 8008298:	930e      	str	r3, [sp, #56]	; 0x38
 800829a:	e7c0      	b.n	800821e <_dtoa_r+0x1ce>
 800829c:	2300      	movs	r3, #0
 800829e:	930b      	str	r3, [sp, #44]	; 0x2c
 80082a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	dc55      	bgt.n	8008352 <_dtoa_r+0x302>
 80082a6:	2301      	movs	r3, #1
 80082a8:	461a      	mov	r2, r3
 80082aa:	9306      	str	r3, [sp, #24]
 80082ac:	9308      	str	r3, [sp, #32]
 80082ae:	9223      	str	r2, [sp, #140]	; 0x8c
 80082b0:	e00b      	b.n	80082ca <_dtoa_r+0x27a>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e7f3      	b.n	800829e <_dtoa_r+0x24e>
 80082b6:	2300      	movs	r3, #0
 80082b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082bc:	445b      	add	r3, fp
 80082be:	9306      	str	r3, [sp, #24]
 80082c0:	3301      	adds	r3, #1
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	9308      	str	r3, [sp, #32]
 80082c6:	bfb8      	it	lt
 80082c8:	2301      	movlt	r3, #1
 80082ca:	2100      	movs	r1, #0
 80082cc:	2204      	movs	r2, #4
 80082ce:	69e8      	ldr	r0, [r5, #28]
 80082d0:	f102 0614 	add.w	r6, r2, #20
 80082d4:	429e      	cmp	r6, r3
 80082d6:	d940      	bls.n	800835a <_dtoa_r+0x30a>
 80082d8:	6041      	str	r1, [r0, #4]
 80082da:	4628      	mov	r0, r5
 80082dc:	f000 fd98 	bl	8008e10 <_Balloc>
 80082e0:	9003      	str	r0, [sp, #12]
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d13c      	bne.n	8008360 <_dtoa_r+0x310>
 80082e6:	4602      	mov	r2, r0
 80082e8:	f240 11af 	movw	r1, #431	; 0x1af
 80082ec:	4b16      	ldr	r3, [pc, #88]	; (8008348 <_dtoa_r+0x2f8>)
 80082ee:	e6c3      	b.n	8008078 <_dtoa_r+0x28>
 80082f0:	2301      	movs	r3, #1
 80082f2:	e7e1      	b.n	80082b8 <_dtoa_r+0x268>
 80082f4:	2401      	movs	r4, #1
 80082f6:	2300      	movs	r3, #0
 80082f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80082fa:	9322      	str	r3, [sp, #136]	; 0x88
 80082fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008300:	2200      	movs	r2, #0
 8008302:	9306      	str	r3, [sp, #24]
 8008304:	9308      	str	r3, [sp, #32]
 8008306:	2312      	movs	r3, #18
 8008308:	e7d1      	b.n	80082ae <_dtoa_r+0x25e>
 800830a:	bf00      	nop
 800830c:	f3af 8000 	nop.w
 8008310:	636f4361 	.word	0x636f4361
 8008314:	3fd287a7 	.word	0x3fd287a7
 8008318:	8b60c8b3 	.word	0x8b60c8b3
 800831c:	3fc68a28 	.word	0x3fc68a28
 8008320:	509f79fb 	.word	0x509f79fb
 8008324:	3fd34413 	.word	0x3fd34413
 8008328:	0800a113 	.word	0x0800a113
 800832c:	0800a12a 	.word	0x0800a12a
 8008330:	7ff00000 	.word	0x7ff00000
 8008334:	0800a10f 	.word	0x0800a10f
 8008338:	0800a106 	.word	0x0800a106
 800833c:	0800a0e3 	.word	0x0800a0e3
 8008340:	3ff80000 	.word	0x3ff80000
 8008344:	0800a218 	.word	0x0800a218
 8008348:	0800a182 	.word	0x0800a182
 800834c:	2301      	movs	r3, #1
 800834e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008350:	e7d4      	b.n	80082fc <_dtoa_r+0x2ac>
 8008352:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008354:	9306      	str	r3, [sp, #24]
 8008356:	9308      	str	r3, [sp, #32]
 8008358:	e7b7      	b.n	80082ca <_dtoa_r+0x27a>
 800835a:	3101      	adds	r1, #1
 800835c:	0052      	lsls	r2, r2, #1
 800835e:	e7b7      	b.n	80082d0 <_dtoa_r+0x280>
 8008360:	69eb      	ldr	r3, [r5, #28]
 8008362:	9a03      	ldr	r2, [sp, #12]
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	9b08      	ldr	r3, [sp, #32]
 8008368:	2b0e      	cmp	r3, #14
 800836a:	f200 80a8 	bhi.w	80084be <_dtoa_r+0x46e>
 800836e:	2c00      	cmp	r4, #0
 8008370:	f000 80a5 	beq.w	80084be <_dtoa_r+0x46e>
 8008374:	f1bb 0f00 	cmp.w	fp, #0
 8008378:	dd34      	ble.n	80083e4 <_dtoa_r+0x394>
 800837a:	4b9a      	ldr	r3, [pc, #616]	; (80085e4 <_dtoa_r+0x594>)
 800837c:	f00b 020f 	and.w	r2, fp, #15
 8008380:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008384:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008388:	e9d3 3400 	ldrd	r3, r4, [r3]
 800838c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008390:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008394:	d016      	beq.n	80083c4 <_dtoa_r+0x374>
 8008396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800839a:	4b93      	ldr	r3, [pc, #588]	; (80085e8 <_dtoa_r+0x598>)
 800839c:	2703      	movs	r7, #3
 800839e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083a2:	f7f8 f9c3 	bl	800072c <__aeabi_ddiv>
 80083a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083aa:	f004 040f 	and.w	r4, r4, #15
 80083ae:	4e8e      	ldr	r6, [pc, #568]	; (80085e8 <_dtoa_r+0x598>)
 80083b0:	b954      	cbnz	r4, 80083c8 <_dtoa_r+0x378>
 80083b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ba:	f7f8 f9b7 	bl	800072c <__aeabi_ddiv>
 80083be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083c2:	e029      	b.n	8008418 <_dtoa_r+0x3c8>
 80083c4:	2702      	movs	r7, #2
 80083c6:	e7f2      	b.n	80083ae <_dtoa_r+0x35e>
 80083c8:	07e1      	lsls	r1, r4, #31
 80083ca:	d508      	bpl.n	80083de <_dtoa_r+0x38e>
 80083cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083d4:	f7f8 f880 	bl	80004d8 <__aeabi_dmul>
 80083d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80083dc:	3701      	adds	r7, #1
 80083de:	1064      	asrs	r4, r4, #1
 80083e0:	3608      	adds	r6, #8
 80083e2:	e7e5      	b.n	80083b0 <_dtoa_r+0x360>
 80083e4:	f000 80a5 	beq.w	8008532 <_dtoa_r+0x4e2>
 80083e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083ec:	f1cb 0400 	rsb	r4, fp, #0
 80083f0:	4b7c      	ldr	r3, [pc, #496]	; (80085e4 <_dtoa_r+0x594>)
 80083f2:	f004 020f 	and.w	r2, r4, #15
 80083f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	f7f8 f86b 	bl	80004d8 <__aeabi_dmul>
 8008402:	2702      	movs	r7, #2
 8008404:	2300      	movs	r3, #0
 8008406:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800840a:	4e77      	ldr	r6, [pc, #476]	; (80085e8 <_dtoa_r+0x598>)
 800840c:	1124      	asrs	r4, r4, #4
 800840e:	2c00      	cmp	r4, #0
 8008410:	f040 8084 	bne.w	800851c <_dtoa_r+0x4cc>
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1d2      	bne.n	80083be <_dtoa_r+0x36e>
 8008418:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800841c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 8087 	beq.w	8008536 <_dtoa_r+0x4e6>
 8008428:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800842c:	2200      	movs	r2, #0
 800842e:	4b6f      	ldr	r3, [pc, #444]	; (80085ec <_dtoa_r+0x59c>)
 8008430:	f7f8 fac4 	bl	80009bc <__aeabi_dcmplt>
 8008434:	2800      	cmp	r0, #0
 8008436:	d07e      	beq.n	8008536 <_dtoa_r+0x4e6>
 8008438:	9b08      	ldr	r3, [sp, #32]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d07b      	beq.n	8008536 <_dtoa_r+0x4e6>
 800843e:	9b06      	ldr	r3, [sp, #24]
 8008440:	2b00      	cmp	r3, #0
 8008442:	dd38      	ble.n	80084b6 <_dtoa_r+0x466>
 8008444:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008448:	2200      	movs	r2, #0
 800844a:	4b69      	ldr	r3, [pc, #420]	; (80085f0 <_dtoa_r+0x5a0>)
 800844c:	f7f8 f844 	bl	80004d8 <__aeabi_dmul>
 8008450:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008454:	9c06      	ldr	r4, [sp, #24]
 8008456:	f10b 38ff 	add.w	r8, fp, #4294967295
 800845a:	3701      	adds	r7, #1
 800845c:	4638      	mov	r0, r7
 800845e:	f7f7 ffd1 	bl	8000404 <__aeabi_i2d>
 8008462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008466:	f7f8 f837 	bl	80004d8 <__aeabi_dmul>
 800846a:	2200      	movs	r2, #0
 800846c:	4b61      	ldr	r3, [pc, #388]	; (80085f4 <_dtoa_r+0x5a4>)
 800846e:	f7f7 fe7d 	bl	800016c <__adddf3>
 8008472:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008476:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800847a:	9611      	str	r6, [sp, #68]	; 0x44
 800847c:	2c00      	cmp	r4, #0
 800847e:	d15d      	bne.n	800853c <_dtoa_r+0x4ec>
 8008480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008484:	2200      	movs	r2, #0
 8008486:	4b5c      	ldr	r3, [pc, #368]	; (80085f8 <_dtoa_r+0x5a8>)
 8008488:	f7f7 fe6e 	bl	8000168 <__aeabi_dsub>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008494:	4633      	mov	r3, r6
 8008496:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008498:	f7f8 faae 	bl	80009f8 <__aeabi_dcmpgt>
 800849c:	2800      	cmp	r0, #0
 800849e:	f040 8295 	bne.w	80089cc <_dtoa_r+0x97c>
 80084a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80084ac:	f7f8 fa86 	bl	80009bc <__aeabi_dcmplt>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	f040 8289 	bne.w	80089c8 <_dtoa_r+0x978>
 80084b6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80084ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80084be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f2c0 8151 	blt.w	8008768 <_dtoa_r+0x718>
 80084c6:	f1bb 0f0e 	cmp.w	fp, #14
 80084ca:	f300 814d 	bgt.w	8008768 <_dtoa_r+0x718>
 80084ce:	4b45      	ldr	r3, [pc, #276]	; (80085e4 <_dtoa_r+0x594>)
 80084d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80084d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084d8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80084dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f280 80da 	bge.w	8008698 <_dtoa_r+0x648>
 80084e4:	9b08      	ldr	r3, [sp, #32]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f300 80d6 	bgt.w	8008698 <_dtoa_r+0x648>
 80084ec:	f040 826b 	bne.w	80089c6 <_dtoa_r+0x976>
 80084f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084f4:	2200      	movs	r2, #0
 80084f6:	4b40      	ldr	r3, [pc, #256]	; (80085f8 <_dtoa_r+0x5a8>)
 80084f8:	f7f7 ffee 	bl	80004d8 <__aeabi_dmul>
 80084fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008500:	f7f8 fa70 	bl	80009e4 <__aeabi_dcmpge>
 8008504:	9c08      	ldr	r4, [sp, #32]
 8008506:	4626      	mov	r6, r4
 8008508:	2800      	cmp	r0, #0
 800850a:	f040 8241 	bne.w	8008990 <_dtoa_r+0x940>
 800850e:	2331      	movs	r3, #49	; 0x31
 8008510:	9f03      	ldr	r7, [sp, #12]
 8008512:	f10b 0b01 	add.w	fp, fp, #1
 8008516:	f807 3b01 	strb.w	r3, [r7], #1
 800851a:	e23d      	b.n	8008998 <_dtoa_r+0x948>
 800851c:	07e2      	lsls	r2, r4, #31
 800851e:	d505      	bpl.n	800852c <_dtoa_r+0x4dc>
 8008520:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008524:	f7f7 ffd8 	bl	80004d8 <__aeabi_dmul>
 8008528:	2301      	movs	r3, #1
 800852a:	3701      	adds	r7, #1
 800852c:	1064      	asrs	r4, r4, #1
 800852e:	3608      	adds	r6, #8
 8008530:	e76d      	b.n	800840e <_dtoa_r+0x3be>
 8008532:	2702      	movs	r7, #2
 8008534:	e770      	b.n	8008418 <_dtoa_r+0x3c8>
 8008536:	46d8      	mov	r8, fp
 8008538:	9c08      	ldr	r4, [sp, #32]
 800853a:	e78f      	b.n	800845c <_dtoa_r+0x40c>
 800853c:	9903      	ldr	r1, [sp, #12]
 800853e:	4b29      	ldr	r3, [pc, #164]	; (80085e4 <_dtoa_r+0x594>)
 8008540:	4421      	add	r1, r4
 8008542:	9112      	str	r1, [sp, #72]	; 0x48
 8008544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008546:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800854a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800854e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008552:	2900      	cmp	r1, #0
 8008554:	d054      	beq.n	8008600 <_dtoa_r+0x5b0>
 8008556:	2000      	movs	r0, #0
 8008558:	4928      	ldr	r1, [pc, #160]	; (80085fc <_dtoa_r+0x5ac>)
 800855a:	f7f8 f8e7 	bl	800072c <__aeabi_ddiv>
 800855e:	463b      	mov	r3, r7
 8008560:	4632      	mov	r2, r6
 8008562:	f7f7 fe01 	bl	8000168 <__aeabi_dsub>
 8008566:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800856a:	9f03      	ldr	r7, [sp, #12]
 800856c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008570:	f7f8 fa62 	bl	8000a38 <__aeabi_d2iz>
 8008574:	4604      	mov	r4, r0
 8008576:	f7f7 ff45 	bl	8000404 <__aeabi_i2d>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008582:	f7f7 fdf1 	bl	8000168 <__aeabi_dsub>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	3430      	adds	r4, #48	; 0x30
 800858c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008590:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008594:	f807 4b01 	strb.w	r4, [r7], #1
 8008598:	f7f8 fa10 	bl	80009bc <__aeabi_dcmplt>
 800859c:	2800      	cmp	r0, #0
 800859e:	d173      	bne.n	8008688 <_dtoa_r+0x638>
 80085a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085a4:	2000      	movs	r0, #0
 80085a6:	4911      	ldr	r1, [pc, #68]	; (80085ec <_dtoa_r+0x59c>)
 80085a8:	f7f7 fdde 	bl	8000168 <__aeabi_dsub>
 80085ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085b0:	f7f8 fa04 	bl	80009bc <__aeabi_dcmplt>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	f040 80b6 	bne.w	8008726 <_dtoa_r+0x6d6>
 80085ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085bc:	429f      	cmp	r7, r3
 80085be:	f43f af7a 	beq.w	80084b6 <_dtoa_r+0x466>
 80085c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085c6:	2200      	movs	r2, #0
 80085c8:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <_dtoa_r+0x5a0>)
 80085ca:	f7f7 ff85 	bl	80004d8 <__aeabi_dmul>
 80085ce:	2200      	movs	r2, #0
 80085d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085d8:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <_dtoa_r+0x5a0>)
 80085da:	f7f7 ff7d 	bl	80004d8 <__aeabi_dmul>
 80085de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085e2:	e7c3      	b.n	800856c <_dtoa_r+0x51c>
 80085e4:	0800a218 	.word	0x0800a218
 80085e8:	0800a1f0 	.word	0x0800a1f0
 80085ec:	3ff00000 	.word	0x3ff00000
 80085f0:	40240000 	.word	0x40240000
 80085f4:	401c0000 	.word	0x401c0000
 80085f8:	40140000 	.word	0x40140000
 80085fc:	3fe00000 	.word	0x3fe00000
 8008600:	4630      	mov	r0, r6
 8008602:	4639      	mov	r1, r7
 8008604:	f7f7 ff68 	bl	80004d8 <__aeabi_dmul>
 8008608:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800860a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800860e:	9c03      	ldr	r4, [sp, #12]
 8008610:	9314      	str	r3, [sp, #80]	; 0x50
 8008612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008616:	f7f8 fa0f 	bl	8000a38 <__aeabi_d2iz>
 800861a:	9015      	str	r0, [sp, #84]	; 0x54
 800861c:	f7f7 fef2 	bl	8000404 <__aeabi_i2d>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008628:	f7f7 fd9e 	bl	8000168 <__aeabi_dsub>
 800862c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800862e:	4606      	mov	r6, r0
 8008630:	3330      	adds	r3, #48	; 0x30
 8008632:	f804 3b01 	strb.w	r3, [r4], #1
 8008636:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008638:	460f      	mov	r7, r1
 800863a:	429c      	cmp	r4, r3
 800863c:	f04f 0200 	mov.w	r2, #0
 8008640:	d124      	bne.n	800868c <_dtoa_r+0x63c>
 8008642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008646:	4baf      	ldr	r3, [pc, #700]	; (8008904 <_dtoa_r+0x8b4>)
 8008648:	f7f7 fd90 	bl	800016c <__adddf3>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4630      	mov	r0, r6
 8008652:	4639      	mov	r1, r7
 8008654:	f7f8 f9d0 	bl	80009f8 <__aeabi_dcmpgt>
 8008658:	2800      	cmp	r0, #0
 800865a:	d163      	bne.n	8008724 <_dtoa_r+0x6d4>
 800865c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008660:	2000      	movs	r0, #0
 8008662:	49a8      	ldr	r1, [pc, #672]	; (8008904 <_dtoa_r+0x8b4>)
 8008664:	f7f7 fd80 	bl	8000168 <__aeabi_dsub>
 8008668:	4602      	mov	r2, r0
 800866a:	460b      	mov	r3, r1
 800866c:	4630      	mov	r0, r6
 800866e:	4639      	mov	r1, r7
 8008670:	f7f8 f9a4 	bl	80009bc <__aeabi_dcmplt>
 8008674:	2800      	cmp	r0, #0
 8008676:	f43f af1e 	beq.w	80084b6 <_dtoa_r+0x466>
 800867a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800867c:	1e7b      	subs	r3, r7, #1
 800867e:	9314      	str	r3, [sp, #80]	; 0x50
 8008680:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008684:	2b30      	cmp	r3, #48	; 0x30
 8008686:	d0f8      	beq.n	800867a <_dtoa_r+0x62a>
 8008688:	46c3      	mov	fp, r8
 800868a:	e03b      	b.n	8008704 <_dtoa_r+0x6b4>
 800868c:	4b9e      	ldr	r3, [pc, #632]	; (8008908 <_dtoa_r+0x8b8>)
 800868e:	f7f7 ff23 	bl	80004d8 <__aeabi_dmul>
 8008692:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008696:	e7bc      	b.n	8008612 <_dtoa_r+0x5c2>
 8008698:	9f03      	ldr	r7, [sp, #12]
 800869a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800869e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086a2:	4640      	mov	r0, r8
 80086a4:	4649      	mov	r1, r9
 80086a6:	f7f8 f841 	bl	800072c <__aeabi_ddiv>
 80086aa:	f7f8 f9c5 	bl	8000a38 <__aeabi_d2iz>
 80086ae:	4604      	mov	r4, r0
 80086b0:	f7f7 fea8 	bl	8000404 <__aeabi_i2d>
 80086b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086b8:	f7f7 ff0e 	bl	80004d8 <__aeabi_dmul>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4640      	mov	r0, r8
 80086c2:	4649      	mov	r1, r9
 80086c4:	f7f7 fd50 	bl	8000168 <__aeabi_dsub>
 80086c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80086cc:	f807 6b01 	strb.w	r6, [r7], #1
 80086d0:	9e03      	ldr	r6, [sp, #12]
 80086d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80086d6:	1bbe      	subs	r6, r7, r6
 80086d8:	45b4      	cmp	ip, r6
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	d136      	bne.n	800874e <_dtoa_r+0x6fe>
 80086e0:	f7f7 fd44 	bl	800016c <__adddf3>
 80086e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086e8:	4680      	mov	r8, r0
 80086ea:	4689      	mov	r9, r1
 80086ec:	f7f8 f984 	bl	80009f8 <__aeabi_dcmpgt>
 80086f0:	bb58      	cbnz	r0, 800874a <_dtoa_r+0x6fa>
 80086f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086f6:	4640      	mov	r0, r8
 80086f8:	4649      	mov	r1, r9
 80086fa:	f7f8 f955 	bl	80009a8 <__aeabi_dcmpeq>
 80086fe:	b108      	cbz	r0, 8008704 <_dtoa_r+0x6b4>
 8008700:	07e3      	lsls	r3, r4, #31
 8008702:	d422      	bmi.n	800874a <_dtoa_r+0x6fa>
 8008704:	4651      	mov	r1, sl
 8008706:	4628      	mov	r0, r5
 8008708:	f000 fbc2 	bl	8008e90 <_Bfree>
 800870c:	2300      	movs	r3, #0
 800870e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008710:	703b      	strb	r3, [r7, #0]
 8008712:	f10b 0301 	add.w	r3, fp, #1
 8008716:	6013      	str	r3, [r2, #0]
 8008718:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800871a:	2b00      	cmp	r3, #0
 800871c:	f43f ace6 	beq.w	80080ec <_dtoa_r+0x9c>
 8008720:	601f      	str	r7, [r3, #0]
 8008722:	e4e3      	b.n	80080ec <_dtoa_r+0x9c>
 8008724:	4627      	mov	r7, r4
 8008726:	463b      	mov	r3, r7
 8008728:	461f      	mov	r7, r3
 800872a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800872e:	2a39      	cmp	r2, #57	; 0x39
 8008730:	d107      	bne.n	8008742 <_dtoa_r+0x6f2>
 8008732:	9a03      	ldr	r2, [sp, #12]
 8008734:	429a      	cmp	r2, r3
 8008736:	d1f7      	bne.n	8008728 <_dtoa_r+0x6d8>
 8008738:	2230      	movs	r2, #48	; 0x30
 800873a:	9903      	ldr	r1, [sp, #12]
 800873c:	f108 0801 	add.w	r8, r8, #1
 8008740:	700a      	strb	r2, [r1, #0]
 8008742:	781a      	ldrb	r2, [r3, #0]
 8008744:	3201      	adds	r2, #1
 8008746:	701a      	strb	r2, [r3, #0]
 8008748:	e79e      	b.n	8008688 <_dtoa_r+0x638>
 800874a:	46d8      	mov	r8, fp
 800874c:	e7eb      	b.n	8008726 <_dtoa_r+0x6d6>
 800874e:	2200      	movs	r2, #0
 8008750:	4b6d      	ldr	r3, [pc, #436]	; (8008908 <_dtoa_r+0x8b8>)
 8008752:	f7f7 fec1 	bl	80004d8 <__aeabi_dmul>
 8008756:	2200      	movs	r2, #0
 8008758:	2300      	movs	r3, #0
 800875a:	4680      	mov	r8, r0
 800875c:	4689      	mov	r9, r1
 800875e:	f7f8 f923 	bl	80009a8 <__aeabi_dcmpeq>
 8008762:	2800      	cmp	r0, #0
 8008764:	d09b      	beq.n	800869e <_dtoa_r+0x64e>
 8008766:	e7cd      	b.n	8008704 <_dtoa_r+0x6b4>
 8008768:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800876a:	2a00      	cmp	r2, #0
 800876c:	f000 80c4 	beq.w	80088f8 <_dtoa_r+0x8a8>
 8008770:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008772:	2a01      	cmp	r2, #1
 8008774:	f300 80a8 	bgt.w	80088c8 <_dtoa_r+0x878>
 8008778:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800877a:	2a00      	cmp	r2, #0
 800877c:	f000 80a0 	beq.w	80088c0 <_dtoa_r+0x870>
 8008780:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008784:	464f      	mov	r7, r9
 8008786:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800878a:	2101      	movs	r1, #1
 800878c:	441a      	add	r2, r3
 800878e:	4628      	mov	r0, r5
 8008790:	4499      	add	r9, r3
 8008792:	9209      	str	r2, [sp, #36]	; 0x24
 8008794:	f000 fc32 	bl	8008ffc <__i2b>
 8008798:	4606      	mov	r6, r0
 800879a:	b15f      	cbz	r7, 80087b4 <_dtoa_r+0x764>
 800879c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800879e:	2b00      	cmp	r3, #0
 80087a0:	dd08      	ble.n	80087b4 <_dtoa_r+0x764>
 80087a2:	42bb      	cmp	r3, r7
 80087a4:	bfa8      	it	ge
 80087a6:	463b      	movge	r3, r7
 80087a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087aa:	eba9 0903 	sub.w	r9, r9, r3
 80087ae:	1aff      	subs	r7, r7, r3
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	9309      	str	r3, [sp, #36]	; 0x24
 80087b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b6:	b1f3      	cbz	r3, 80087f6 <_dtoa_r+0x7a6>
 80087b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 80a0 	beq.w	8008900 <_dtoa_r+0x8b0>
 80087c0:	2c00      	cmp	r4, #0
 80087c2:	dd10      	ble.n	80087e6 <_dtoa_r+0x796>
 80087c4:	4631      	mov	r1, r6
 80087c6:	4622      	mov	r2, r4
 80087c8:	4628      	mov	r0, r5
 80087ca:	f000 fcd5 	bl	8009178 <__pow5mult>
 80087ce:	4652      	mov	r2, sl
 80087d0:	4601      	mov	r1, r0
 80087d2:	4606      	mov	r6, r0
 80087d4:	4628      	mov	r0, r5
 80087d6:	f000 fc27 	bl	8009028 <__multiply>
 80087da:	4680      	mov	r8, r0
 80087dc:	4651      	mov	r1, sl
 80087de:	4628      	mov	r0, r5
 80087e0:	f000 fb56 	bl	8008e90 <_Bfree>
 80087e4:	46c2      	mov	sl, r8
 80087e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e8:	1b1a      	subs	r2, r3, r4
 80087ea:	d004      	beq.n	80087f6 <_dtoa_r+0x7a6>
 80087ec:	4651      	mov	r1, sl
 80087ee:	4628      	mov	r0, r5
 80087f0:	f000 fcc2 	bl	8009178 <__pow5mult>
 80087f4:	4682      	mov	sl, r0
 80087f6:	2101      	movs	r1, #1
 80087f8:	4628      	mov	r0, r5
 80087fa:	f000 fbff 	bl	8008ffc <__i2b>
 80087fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008800:	4604      	mov	r4, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	f340 8082 	ble.w	800890c <_dtoa_r+0x8bc>
 8008808:	461a      	mov	r2, r3
 800880a:	4601      	mov	r1, r0
 800880c:	4628      	mov	r0, r5
 800880e:	f000 fcb3 	bl	8009178 <__pow5mult>
 8008812:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008814:	4604      	mov	r4, r0
 8008816:	2b01      	cmp	r3, #1
 8008818:	dd7b      	ble.n	8008912 <_dtoa_r+0x8c2>
 800881a:	f04f 0800 	mov.w	r8, #0
 800881e:	6923      	ldr	r3, [r4, #16]
 8008820:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008824:	6918      	ldr	r0, [r3, #16]
 8008826:	f000 fb9b 	bl	8008f60 <__hi0bits>
 800882a:	f1c0 0020 	rsb	r0, r0, #32
 800882e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008830:	4418      	add	r0, r3
 8008832:	f010 001f 	ands.w	r0, r0, #31
 8008836:	f000 8092 	beq.w	800895e <_dtoa_r+0x90e>
 800883a:	f1c0 0320 	rsb	r3, r0, #32
 800883e:	2b04      	cmp	r3, #4
 8008840:	f340 8085 	ble.w	800894e <_dtoa_r+0x8fe>
 8008844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008846:	f1c0 001c 	rsb	r0, r0, #28
 800884a:	4403      	add	r3, r0
 800884c:	4481      	add	r9, r0
 800884e:	4407      	add	r7, r0
 8008850:	9309      	str	r3, [sp, #36]	; 0x24
 8008852:	f1b9 0f00 	cmp.w	r9, #0
 8008856:	dd05      	ble.n	8008864 <_dtoa_r+0x814>
 8008858:	4651      	mov	r1, sl
 800885a:	464a      	mov	r2, r9
 800885c:	4628      	mov	r0, r5
 800885e:	f000 fce5 	bl	800922c <__lshift>
 8008862:	4682      	mov	sl, r0
 8008864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008866:	2b00      	cmp	r3, #0
 8008868:	dd05      	ble.n	8008876 <_dtoa_r+0x826>
 800886a:	4621      	mov	r1, r4
 800886c:	461a      	mov	r2, r3
 800886e:	4628      	mov	r0, r5
 8008870:	f000 fcdc 	bl	800922c <__lshift>
 8008874:	4604      	mov	r4, r0
 8008876:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d072      	beq.n	8008962 <_dtoa_r+0x912>
 800887c:	4621      	mov	r1, r4
 800887e:	4650      	mov	r0, sl
 8008880:	f000 fd40 	bl	8009304 <__mcmp>
 8008884:	2800      	cmp	r0, #0
 8008886:	da6c      	bge.n	8008962 <_dtoa_r+0x912>
 8008888:	2300      	movs	r3, #0
 800888a:	4651      	mov	r1, sl
 800888c:	220a      	movs	r2, #10
 800888e:	4628      	mov	r0, r5
 8008890:	f000 fb20 	bl	8008ed4 <__multadd>
 8008894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008896:	4682      	mov	sl, r0
 8008898:	f10b 3bff 	add.w	fp, fp, #4294967295
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 81ac 	beq.w	8008bfa <_dtoa_r+0xbaa>
 80088a2:	2300      	movs	r3, #0
 80088a4:	4631      	mov	r1, r6
 80088a6:	220a      	movs	r2, #10
 80088a8:	4628      	mov	r0, r5
 80088aa:	f000 fb13 	bl	8008ed4 <__multadd>
 80088ae:	9b06      	ldr	r3, [sp, #24]
 80088b0:	4606      	mov	r6, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f300 8093 	bgt.w	80089de <_dtoa_r+0x98e>
 80088b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	dc59      	bgt.n	8008972 <_dtoa_r+0x922>
 80088be:	e08e      	b.n	80089de <_dtoa_r+0x98e>
 80088c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80088c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088c6:	e75d      	b.n	8008784 <_dtoa_r+0x734>
 80088c8:	9b08      	ldr	r3, [sp, #32]
 80088ca:	1e5c      	subs	r4, r3, #1
 80088cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ce:	42a3      	cmp	r3, r4
 80088d0:	bfbf      	itttt	lt
 80088d2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80088d4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80088d6:	1ae3      	sublt	r3, r4, r3
 80088d8:	18d2      	addlt	r2, r2, r3
 80088da:	bfa8      	it	ge
 80088dc:	1b1c      	subge	r4, r3, r4
 80088de:	9b08      	ldr	r3, [sp, #32]
 80088e0:	bfbe      	ittt	lt
 80088e2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80088e4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80088e6:	2400      	movlt	r4, #0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bfb5      	itete	lt
 80088ec:	eba9 0703 	sublt.w	r7, r9, r3
 80088f0:	464f      	movge	r7, r9
 80088f2:	2300      	movlt	r3, #0
 80088f4:	9b08      	ldrge	r3, [sp, #32]
 80088f6:	e747      	b.n	8008788 <_dtoa_r+0x738>
 80088f8:	464f      	mov	r7, r9
 80088fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80088fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80088fe:	e74c      	b.n	800879a <_dtoa_r+0x74a>
 8008900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008902:	e773      	b.n	80087ec <_dtoa_r+0x79c>
 8008904:	3fe00000 	.word	0x3fe00000
 8008908:	40240000 	.word	0x40240000
 800890c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800890e:	2b01      	cmp	r3, #1
 8008910:	dc18      	bgt.n	8008944 <_dtoa_r+0x8f4>
 8008912:	9b04      	ldr	r3, [sp, #16]
 8008914:	b9b3      	cbnz	r3, 8008944 <_dtoa_r+0x8f4>
 8008916:	9b05      	ldr	r3, [sp, #20]
 8008918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800891c:	b993      	cbnz	r3, 8008944 <_dtoa_r+0x8f4>
 800891e:	9b05      	ldr	r3, [sp, #20]
 8008920:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008924:	0d1b      	lsrs	r3, r3, #20
 8008926:	051b      	lsls	r3, r3, #20
 8008928:	b17b      	cbz	r3, 800894a <_dtoa_r+0x8fa>
 800892a:	f04f 0801 	mov.w	r8, #1
 800892e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008930:	f109 0901 	add.w	r9, r9, #1
 8008934:	3301      	adds	r3, #1
 8008936:	9309      	str	r3, [sp, #36]	; 0x24
 8008938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800893a:	2b00      	cmp	r3, #0
 800893c:	f47f af6f 	bne.w	800881e <_dtoa_r+0x7ce>
 8008940:	2001      	movs	r0, #1
 8008942:	e774      	b.n	800882e <_dtoa_r+0x7de>
 8008944:	f04f 0800 	mov.w	r8, #0
 8008948:	e7f6      	b.n	8008938 <_dtoa_r+0x8e8>
 800894a:	4698      	mov	r8, r3
 800894c:	e7f4      	b.n	8008938 <_dtoa_r+0x8e8>
 800894e:	d080      	beq.n	8008852 <_dtoa_r+0x802>
 8008950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008952:	331c      	adds	r3, #28
 8008954:	441a      	add	r2, r3
 8008956:	4499      	add	r9, r3
 8008958:	441f      	add	r7, r3
 800895a:	9209      	str	r2, [sp, #36]	; 0x24
 800895c:	e779      	b.n	8008852 <_dtoa_r+0x802>
 800895e:	4603      	mov	r3, r0
 8008960:	e7f6      	b.n	8008950 <_dtoa_r+0x900>
 8008962:	9b08      	ldr	r3, [sp, #32]
 8008964:	2b00      	cmp	r3, #0
 8008966:	dc34      	bgt.n	80089d2 <_dtoa_r+0x982>
 8008968:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800896a:	2b02      	cmp	r3, #2
 800896c:	dd31      	ble.n	80089d2 <_dtoa_r+0x982>
 800896e:	9b08      	ldr	r3, [sp, #32]
 8008970:	9306      	str	r3, [sp, #24]
 8008972:	9b06      	ldr	r3, [sp, #24]
 8008974:	b963      	cbnz	r3, 8008990 <_dtoa_r+0x940>
 8008976:	4621      	mov	r1, r4
 8008978:	2205      	movs	r2, #5
 800897a:	4628      	mov	r0, r5
 800897c:	f000 faaa 	bl	8008ed4 <__multadd>
 8008980:	4601      	mov	r1, r0
 8008982:	4604      	mov	r4, r0
 8008984:	4650      	mov	r0, sl
 8008986:	f000 fcbd 	bl	8009304 <__mcmp>
 800898a:	2800      	cmp	r0, #0
 800898c:	f73f adbf 	bgt.w	800850e <_dtoa_r+0x4be>
 8008990:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008992:	9f03      	ldr	r7, [sp, #12]
 8008994:	ea6f 0b03 	mvn.w	fp, r3
 8008998:	f04f 0800 	mov.w	r8, #0
 800899c:	4621      	mov	r1, r4
 800899e:	4628      	mov	r0, r5
 80089a0:	f000 fa76 	bl	8008e90 <_Bfree>
 80089a4:	2e00      	cmp	r6, #0
 80089a6:	f43f aead 	beq.w	8008704 <_dtoa_r+0x6b4>
 80089aa:	f1b8 0f00 	cmp.w	r8, #0
 80089ae:	d005      	beq.n	80089bc <_dtoa_r+0x96c>
 80089b0:	45b0      	cmp	r8, r6
 80089b2:	d003      	beq.n	80089bc <_dtoa_r+0x96c>
 80089b4:	4641      	mov	r1, r8
 80089b6:	4628      	mov	r0, r5
 80089b8:	f000 fa6a 	bl	8008e90 <_Bfree>
 80089bc:	4631      	mov	r1, r6
 80089be:	4628      	mov	r0, r5
 80089c0:	f000 fa66 	bl	8008e90 <_Bfree>
 80089c4:	e69e      	b.n	8008704 <_dtoa_r+0x6b4>
 80089c6:	2400      	movs	r4, #0
 80089c8:	4626      	mov	r6, r4
 80089ca:	e7e1      	b.n	8008990 <_dtoa_r+0x940>
 80089cc:	46c3      	mov	fp, r8
 80089ce:	4626      	mov	r6, r4
 80089d0:	e59d      	b.n	800850e <_dtoa_r+0x4be>
 80089d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 80c8 	beq.w	8008b6a <_dtoa_r+0xb1a>
 80089da:	9b08      	ldr	r3, [sp, #32]
 80089dc:	9306      	str	r3, [sp, #24]
 80089de:	2f00      	cmp	r7, #0
 80089e0:	dd05      	ble.n	80089ee <_dtoa_r+0x99e>
 80089e2:	4631      	mov	r1, r6
 80089e4:	463a      	mov	r2, r7
 80089e6:	4628      	mov	r0, r5
 80089e8:	f000 fc20 	bl	800922c <__lshift>
 80089ec:	4606      	mov	r6, r0
 80089ee:	f1b8 0f00 	cmp.w	r8, #0
 80089f2:	d05b      	beq.n	8008aac <_dtoa_r+0xa5c>
 80089f4:	4628      	mov	r0, r5
 80089f6:	6871      	ldr	r1, [r6, #4]
 80089f8:	f000 fa0a 	bl	8008e10 <_Balloc>
 80089fc:	4607      	mov	r7, r0
 80089fe:	b928      	cbnz	r0, 8008a0c <_dtoa_r+0x9bc>
 8008a00:	4602      	mov	r2, r0
 8008a02:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008a06:	4b81      	ldr	r3, [pc, #516]	; (8008c0c <_dtoa_r+0xbbc>)
 8008a08:	f7ff bb36 	b.w	8008078 <_dtoa_r+0x28>
 8008a0c:	6932      	ldr	r2, [r6, #16]
 8008a0e:	f106 010c 	add.w	r1, r6, #12
 8008a12:	3202      	adds	r2, #2
 8008a14:	0092      	lsls	r2, r2, #2
 8008a16:	300c      	adds	r0, #12
 8008a18:	f7ff fa83 	bl	8007f22 <memcpy>
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	4639      	mov	r1, r7
 8008a20:	4628      	mov	r0, r5
 8008a22:	f000 fc03 	bl	800922c <__lshift>
 8008a26:	46b0      	mov	r8, r6
 8008a28:	4606      	mov	r6, r0
 8008a2a:	9b03      	ldr	r3, [sp, #12]
 8008a2c:	9a03      	ldr	r2, [sp, #12]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	9308      	str	r3, [sp, #32]
 8008a32:	9b06      	ldr	r3, [sp, #24]
 8008a34:	4413      	add	r3, r2
 8008a36:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a38:	9b04      	ldr	r3, [sp, #16]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a40:	9b08      	ldr	r3, [sp, #32]
 8008a42:	4621      	mov	r1, r4
 8008a44:	3b01      	subs	r3, #1
 8008a46:	4650      	mov	r0, sl
 8008a48:	9304      	str	r3, [sp, #16]
 8008a4a:	f7ff fa78 	bl	8007f3e <quorem>
 8008a4e:	4641      	mov	r1, r8
 8008a50:	9006      	str	r0, [sp, #24]
 8008a52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008a56:	4650      	mov	r0, sl
 8008a58:	f000 fc54 	bl	8009304 <__mcmp>
 8008a5c:	4632      	mov	r2, r6
 8008a5e:	9009      	str	r0, [sp, #36]	; 0x24
 8008a60:	4621      	mov	r1, r4
 8008a62:	4628      	mov	r0, r5
 8008a64:	f000 fc6a 	bl	800933c <__mdiff>
 8008a68:	68c2      	ldr	r2, [r0, #12]
 8008a6a:	4607      	mov	r7, r0
 8008a6c:	bb02      	cbnz	r2, 8008ab0 <_dtoa_r+0xa60>
 8008a6e:	4601      	mov	r1, r0
 8008a70:	4650      	mov	r0, sl
 8008a72:	f000 fc47 	bl	8009304 <__mcmp>
 8008a76:	4602      	mov	r2, r0
 8008a78:	4639      	mov	r1, r7
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	920c      	str	r2, [sp, #48]	; 0x30
 8008a7e:	f000 fa07 	bl	8008e90 <_Bfree>
 8008a82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a86:	9f08      	ldr	r7, [sp, #32]
 8008a88:	ea43 0102 	orr.w	r1, r3, r2
 8008a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8e:	4319      	orrs	r1, r3
 8008a90:	d110      	bne.n	8008ab4 <_dtoa_r+0xa64>
 8008a92:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008a96:	d029      	beq.n	8008aec <_dtoa_r+0xa9c>
 8008a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dd02      	ble.n	8008aa4 <_dtoa_r+0xa54>
 8008a9e:	9b06      	ldr	r3, [sp, #24]
 8008aa0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008aa4:	9b04      	ldr	r3, [sp, #16]
 8008aa6:	f883 9000 	strb.w	r9, [r3]
 8008aaa:	e777      	b.n	800899c <_dtoa_r+0x94c>
 8008aac:	4630      	mov	r0, r6
 8008aae:	e7ba      	b.n	8008a26 <_dtoa_r+0x9d6>
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	e7e1      	b.n	8008a78 <_dtoa_r+0xa28>
 8008ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	db04      	blt.n	8008ac4 <_dtoa_r+0xa74>
 8008aba:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008abc:	430b      	orrs	r3, r1
 8008abe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ac0:	430b      	orrs	r3, r1
 8008ac2:	d120      	bne.n	8008b06 <_dtoa_r+0xab6>
 8008ac4:	2a00      	cmp	r2, #0
 8008ac6:	dded      	ble.n	8008aa4 <_dtoa_r+0xa54>
 8008ac8:	4651      	mov	r1, sl
 8008aca:	2201      	movs	r2, #1
 8008acc:	4628      	mov	r0, r5
 8008ace:	f000 fbad 	bl	800922c <__lshift>
 8008ad2:	4621      	mov	r1, r4
 8008ad4:	4682      	mov	sl, r0
 8008ad6:	f000 fc15 	bl	8009304 <__mcmp>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	dc03      	bgt.n	8008ae6 <_dtoa_r+0xa96>
 8008ade:	d1e1      	bne.n	8008aa4 <_dtoa_r+0xa54>
 8008ae0:	f019 0f01 	tst.w	r9, #1
 8008ae4:	d0de      	beq.n	8008aa4 <_dtoa_r+0xa54>
 8008ae6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008aea:	d1d8      	bne.n	8008a9e <_dtoa_r+0xa4e>
 8008aec:	2339      	movs	r3, #57	; 0x39
 8008aee:	9a04      	ldr	r2, [sp, #16]
 8008af0:	7013      	strb	r3, [r2, #0]
 8008af2:	463b      	mov	r3, r7
 8008af4:	461f      	mov	r7, r3
 8008af6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	2a39      	cmp	r2, #57	; 0x39
 8008afe:	d06b      	beq.n	8008bd8 <_dtoa_r+0xb88>
 8008b00:	3201      	adds	r2, #1
 8008b02:	701a      	strb	r2, [r3, #0]
 8008b04:	e74a      	b.n	800899c <_dtoa_r+0x94c>
 8008b06:	2a00      	cmp	r2, #0
 8008b08:	dd07      	ble.n	8008b1a <_dtoa_r+0xaca>
 8008b0a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b0e:	d0ed      	beq.n	8008aec <_dtoa_r+0xa9c>
 8008b10:	9a04      	ldr	r2, [sp, #16]
 8008b12:	f109 0301 	add.w	r3, r9, #1
 8008b16:	7013      	strb	r3, [r2, #0]
 8008b18:	e740      	b.n	800899c <_dtoa_r+0x94c>
 8008b1a:	9b08      	ldr	r3, [sp, #32]
 8008b1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b1e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d042      	beq.n	8008bac <_dtoa_r+0xb5c>
 8008b26:	4651      	mov	r1, sl
 8008b28:	2300      	movs	r3, #0
 8008b2a:	220a      	movs	r2, #10
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f000 f9d1 	bl	8008ed4 <__multadd>
 8008b32:	45b0      	cmp	r8, r6
 8008b34:	4682      	mov	sl, r0
 8008b36:	f04f 0300 	mov.w	r3, #0
 8008b3a:	f04f 020a 	mov.w	r2, #10
 8008b3e:	4641      	mov	r1, r8
 8008b40:	4628      	mov	r0, r5
 8008b42:	d107      	bne.n	8008b54 <_dtoa_r+0xb04>
 8008b44:	f000 f9c6 	bl	8008ed4 <__multadd>
 8008b48:	4680      	mov	r8, r0
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	9b08      	ldr	r3, [sp, #32]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	9308      	str	r3, [sp, #32]
 8008b52:	e775      	b.n	8008a40 <_dtoa_r+0x9f0>
 8008b54:	f000 f9be 	bl	8008ed4 <__multadd>
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4680      	mov	r8, r0
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	220a      	movs	r2, #10
 8008b60:	4628      	mov	r0, r5
 8008b62:	f000 f9b7 	bl	8008ed4 <__multadd>
 8008b66:	4606      	mov	r6, r0
 8008b68:	e7f0      	b.n	8008b4c <_dtoa_r+0xafc>
 8008b6a:	9b08      	ldr	r3, [sp, #32]
 8008b6c:	9306      	str	r3, [sp, #24]
 8008b6e:	9f03      	ldr	r7, [sp, #12]
 8008b70:	4621      	mov	r1, r4
 8008b72:	4650      	mov	r0, sl
 8008b74:	f7ff f9e3 	bl	8007f3e <quorem>
 8008b78:	9b03      	ldr	r3, [sp, #12]
 8008b7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008b7e:	f807 9b01 	strb.w	r9, [r7], #1
 8008b82:	1afa      	subs	r2, r7, r3
 8008b84:	9b06      	ldr	r3, [sp, #24]
 8008b86:	4293      	cmp	r3, r2
 8008b88:	dd07      	ble.n	8008b9a <_dtoa_r+0xb4a>
 8008b8a:	4651      	mov	r1, sl
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	220a      	movs	r2, #10
 8008b90:	4628      	mov	r0, r5
 8008b92:	f000 f99f 	bl	8008ed4 <__multadd>
 8008b96:	4682      	mov	sl, r0
 8008b98:	e7ea      	b.n	8008b70 <_dtoa_r+0xb20>
 8008b9a:	9b06      	ldr	r3, [sp, #24]
 8008b9c:	f04f 0800 	mov.w	r8, #0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bfcc      	ite	gt
 8008ba4:	461f      	movgt	r7, r3
 8008ba6:	2701      	movle	r7, #1
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	441f      	add	r7, r3
 8008bac:	4651      	mov	r1, sl
 8008bae:	2201      	movs	r2, #1
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	f000 fb3b 	bl	800922c <__lshift>
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	4682      	mov	sl, r0
 8008bba:	f000 fba3 	bl	8009304 <__mcmp>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	dc97      	bgt.n	8008af2 <_dtoa_r+0xaa2>
 8008bc2:	d102      	bne.n	8008bca <_dtoa_r+0xb7a>
 8008bc4:	f019 0f01 	tst.w	r9, #1
 8008bc8:	d193      	bne.n	8008af2 <_dtoa_r+0xaa2>
 8008bca:	463b      	mov	r3, r7
 8008bcc:	461f      	mov	r7, r3
 8008bce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bd2:	2a30      	cmp	r2, #48	; 0x30
 8008bd4:	d0fa      	beq.n	8008bcc <_dtoa_r+0xb7c>
 8008bd6:	e6e1      	b.n	800899c <_dtoa_r+0x94c>
 8008bd8:	9a03      	ldr	r2, [sp, #12]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d18a      	bne.n	8008af4 <_dtoa_r+0xaa4>
 8008bde:	2331      	movs	r3, #49	; 0x31
 8008be0:	f10b 0b01 	add.w	fp, fp, #1
 8008be4:	e797      	b.n	8008b16 <_dtoa_r+0xac6>
 8008be6:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <_dtoa_r+0xbc0>)
 8008be8:	f7ff ba9f 	b.w	800812a <_dtoa_r+0xda>
 8008bec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f47f aa77 	bne.w	80080e2 <_dtoa_r+0x92>
 8008bf4:	4b07      	ldr	r3, [pc, #28]	; (8008c14 <_dtoa_r+0xbc4>)
 8008bf6:	f7ff ba98 	b.w	800812a <_dtoa_r+0xda>
 8008bfa:	9b06      	ldr	r3, [sp, #24]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	dcb6      	bgt.n	8008b6e <_dtoa_r+0xb1e>
 8008c00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	f73f aeb5 	bgt.w	8008972 <_dtoa_r+0x922>
 8008c08:	e7b1      	b.n	8008b6e <_dtoa_r+0xb1e>
 8008c0a:	bf00      	nop
 8008c0c:	0800a182 	.word	0x0800a182
 8008c10:	0800a0e2 	.word	0x0800a0e2
 8008c14:	0800a106 	.word	0x0800a106

08008c18 <_free_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	2900      	cmp	r1, #0
 8008c1e:	d040      	beq.n	8008ca2 <_free_r+0x8a>
 8008c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c24:	1f0c      	subs	r4, r1, #4
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	bfb8      	it	lt
 8008c2a:	18e4      	addlt	r4, r4, r3
 8008c2c:	f000 f8e4 	bl	8008df8 <__malloc_lock>
 8008c30:	4a1c      	ldr	r2, [pc, #112]	; (8008ca4 <_free_r+0x8c>)
 8008c32:	6813      	ldr	r3, [r2, #0]
 8008c34:	b933      	cbnz	r3, 8008c44 <_free_r+0x2c>
 8008c36:	6063      	str	r3, [r4, #4]
 8008c38:	6014      	str	r4, [r2, #0]
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c40:	f000 b8e0 	b.w	8008e04 <__malloc_unlock>
 8008c44:	42a3      	cmp	r3, r4
 8008c46:	d908      	bls.n	8008c5a <_free_r+0x42>
 8008c48:	6820      	ldr	r0, [r4, #0]
 8008c4a:	1821      	adds	r1, r4, r0
 8008c4c:	428b      	cmp	r3, r1
 8008c4e:	bf01      	itttt	eq
 8008c50:	6819      	ldreq	r1, [r3, #0]
 8008c52:	685b      	ldreq	r3, [r3, #4]
 8008c54:	1809      	addeq	r1, r1, r0
 8008c56:	6021      	streq	r1, [r4, #0]
 8008c58:	e7ed      	b.n	8008c36 <_free_r+0x1e>
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	b10b      	cbz	r3, 8008c64 <_free_r+0x4c>
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	d9fa      	bls.n	8008c5a <_free_r+0x42>
 8008c64:	6811      	ldr	r1, [r2, #0]
 8008c66:	1850      	adds	r0, r2, r1
 8008c68:	42a0      	cmp	r0, r4
 8008c6a:	d10b      	bne.n	8008c84 <_free_r+0x6c>
 8008c6c:	6820      	ldr	r0, [r4, #0]
 8008c6e:	4401      	add	r1, r0
 8008c70:	1850      	adds	r0, r2, r1
 8008c72:	4283      	cmp	r3, r0
 8008c74:	6011      	str	r1, [r2, #0]
 8008c76:	d1e0      	bne.n	8008c3a <_free_r+0x22>
 8008c78:	6818      	ldr	r0, [r3, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	4408      	add	r0, r1
 8008c7e:	6010      	str	r0, [r2, #0]
 8008c80:	6053      	str	r3, [r2, #4]
 8008c82:	e7da      	b.n	8008c3a <_free_r+0x22>
 8008c84:	d902      	bls.n	8008c8c <_free_r+0x74>
 8008c86:	230c      	movs	r3, #12
 8008c88:	602b      	str	r3, [r5, #0]
 8008c8a:	e7d6      	b.n	8008c3a <_free_r+0x22>
 8008c8c:	6820      	ldr	r0, [r4, #0]
 8008c8e:	1821      	adds	r1, r4, r0
 8008c90:	428b      	cmp	r3, r1
 8008c92:	bf01      	itttt	eq
 8008c94:	6819      	ldreq	r1, [r3, #0]
 8008c96:	685b      	ldreq	r3, [r3, #4]
 8008c98:	1809      	addeq	r1, r1, r0
 8008c9a:	6021      	streq	r1, [r4, #0]
 8008c9c:	6063      	str	r3, [r4, #4]
 8008c9e:	6054      	str	r4, [r2, #4]
 8008ca0:	e7cb      	b.n	8008c3a <_free_r+0x22>
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	200014f4 	.word	0x200014f4

08008ca8 <malloc>:
 8008ca8:	4b02      	ldr	r3, [pc, #8]	; (8008cb4 <malloc+0xc>)
 8008caa:	4601      	mov	r1, r0
 8008cac:	6818      	ldr	r0, [r3, #0]
 8008cae:	f000 b823 	b.w	8008cf8 <_malloc_r>
 8008cb2:	bf00      	nop
 8008cb4:	2000006c 	.word	0x2000006c

08008cb8 <sbrk_aligned>:
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	4e0e      	ldr	r6, [pc, #56]	; (8008cf4 <sbrk_aligned+0x3c>)
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	6831      	ldr	r1, [r6, #0]
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	b911      	cbnz	r1, 8008cca <sbrk_aligned+0x12>
 8008cc4:	f000 fe38 	bl	8009938 <_sbrk_r>
 8008cc8:	6030      	str	r0, [r6, #0]
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4628      	mov	r0, r5
 8008cce:	f000 fe33 	bl	8009938 <_sbrk_r>
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	d00a      	beq.n	8008cec <sbrk_aligned+0x34>
 8008cd6:	1cc4      	adds	r4, r0, #3
 8008cd8:	f024 0403 	bic.w	r4, r4, #3
 8008cdc:	42a0      	cmp	r0, r4
 8008cde:	d007      	beq.n	8008cf0 <sbrk_aligned+0x38>
 8008ce0:	1a21      	subs	r1, r4, r0
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 fe28 	bl	8009938 <_sbrk_r>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d101      	bne.n	8008cf0 <sbrk_aligned+0x38>
 8008cec:	f04f 34ff 	mov.w	r4, #4294967295
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}
 8008cf4:	200014f8 	.word	0x200014f8

08008cf8 <_malloc_r>:
 8008cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cfc:	1ccd      	adds	r5, r1, #3
 8008cfe:	f025 0503 	bic.w	r5, r5, #3
 8008d02:	3508      	adds	r5, #8
 8008d04:	2d0c      	cmp	r5, #12
 8008d06:	bf38      	it	cc
 8008d08:	250c      	movcc	r5, #12
 8008d0a:	2d00      	cmp	r5, #0
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	db01      	blt.n	8008d14 <_malloc_r+0x1c>
 8008d10:	42a9      	cmp	r1, r5
 8008d12:	d905      	bls.n	8008d20 <_malloc_r+0x28>
 8008d14:	230c      	movs	r3, #12
 8008d16:	2600      	movs	r6, #0
 8008d18:	603b      	str	r3, [r7, #0]
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008df4 <_malloc_r+0xfc>
 8008d24:	f000 f868 	bl	8008df8 <__malloc_lock>
 8008d28:	f8d8 3000 	ldr.w	r3, [r8]
 8008d2c:	461c      	mov	r4, r3
 8008d2e:	bb5c      	cbnz	r4, 8008d88 <_malloc_r+0x90>
 8008d30:	4629      	mov	r1, r5
 8008d32:	4638      	mov	r0, r7
 8008d34:	f7ff ffc0 	bl	8008cb8 <sbrk_aligned>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	d155      	bne.n	8008dea <_malloc_r+0xf2>
 8008d3e:	f8d8 4000 	ldr.w	r4, [r8]
 8008d42:	4626      	mov	r6, r4
 8008d44:	2e00      	cmp	r6, #0
 8008d46:	d145      	bne.n	8008dd4 <_malloc_r+0xdc>
 8008d48:	2c00      	cmp	r4, #0
 8008d4a:	d048      	beq.n	8008dde <_malloc_r+0xe6>
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	4631      	mov	r1, r6
 8008d50:	4638      	mov	r0, r7
 8008d52:	eb04 0903 	add.w	r9, r4, r3
 8008d56:	f000 fdef 	bl	8009938 <_sbrk_r>
 8008d5a:	4581      	cmp	r9, r0
 8008d5c:	d13f      	bne.n	8008dde <_malloc_r+0xe6>
 8008d5e:	6821      	ldr	r1, [r4, #0]
 8008d60:	4638      	mov	r0, r7
 8008d62:	1a6d      	subs	r5, r5, r1
 8008d64:	4629      	mov	r1, r5
 8008d66:	f7ff ffa7 	bl	8008cb8 <sbrk_aligned>
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	d037      	beq.n	8008dde <_malloc_r+0xe6>
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	442b      	add	r3, r5
 8008d72:	6023      	str	r3, [r4, #0]
 8008d74:	f8d8 3000 	ldr.w	r3, [r8]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d038      	beq.n	8008dee <_malloc_r+0xf6>
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	42a2      	cmp	r2, r4
 8008d80:	d12b      	bne.n	8008dda <_malloc_r+0xe2>
 8008d82:	2200      	movs	r2, #0
 8008d84:	605a      	str	r2, [r3, #4]
 8008d86:	e00f      	b.n	8008da8 <_malloc_r+0xb0>
 8008d88:	6822      	ldr	r2, [r4, #0]
 8008d8a:	1b52      	subs	r2, r2, r5
 8008d8c:	d41f      	bmi.n	8008dce <_malloc_r+0xd6>
 8008d8e:	2a0b      	cmp	r2, #11
 8008d90:	d917      	bls.n	8008dc2 <_malloc_r+0xca>
 8008d92:	1961      	adds	r1, r4, r5
 8008d94:	42a3      	cmp	r3, r4
 8008d96:	6025      	str	r5, [r4, #0]
 8008d98:	bf18      	it	ne
 8008d9a:	6059      	strne	r1, [r3, #4]
 8008d9c:	6863      	ldr	r3, [r4, #4]
 8008d9e:	bf08      	it	eq
 8008da0:	f8c8 1000 	streq.w	r1, [r8]
 8008da4:	5162      	str	r2, [r4, r5]
 8008da6:	604b      	str	r3, [r1, #4]
 8008da8:	4638      	mov	r0, r7
 8008daa:	f104 060b 	add.w	r6, r4, #11
 8008dae:	f000 f829 	bl	8008e04 <__malloc_unlock>
 8008db2:	f026 0607 	bic.w	r6, r6, #7
 8008db6:	1d23      	adds	r3, r4, #4
 8008db8:	1af2      	subs	r2, r6, r3
 8008dba:	d0ae      	beq.n	8008d1a <_malloc_r+0x22>
 8008dbc:	1b9b      	subs	r3, r3, r6
 8008dbe:	50a3      	str	r3, [r4, r2]
 8008dc0:	e7ab      	b.n	8008d1a <_malloc_r+0x22>
 8008dc2:	42a3      	cmp	r3, r4
 8008dc4:	6862      	ldr	r2, [r4, #4]
 8008dc6:	d1dd      	bne.n	8008d84 <_malloc_r+0x8c>
 8008dc8:	f8c8 2000 	str.w	r2, [r8]
 8008dcc:	e7ec      	b.n	8008da8 <_malloc_r+0xb0>
 8008dce:	4623      	mov	r3, r4
 8008dd0:	6864      	ldr	r4, [r4, #4]
 8008dd2:	e7ac      	b.n	8008d2e <_malloc_r+0x36>
 8008dd4:	4634      	mov	r4, r6
 8008dd6:	6876      	ldr	r6, [r6, #4]
 8008dd8:	e7b4      	b.n	8008d44 <_malloc_r+0x4c>
 8008dda:	4613      	mov	r3, r2
 8008ddc:	e7cc      	b.n	8008d78 <_malloc_r+0x80>
 8008dde:	230c      	movs	r3, #12
 8008de0:	4638      	mov	r0, r7
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	f000 f80e 	bl	8008e04 <__malloc_unlock>
 8008de8:	e797      	b.n	8008d1a <_malloc_r+0x22>
 8008dea:	6025      	str	r5, [r4, #0]
 8008dec:	e7dc      	b.n	8008da8 <_malloc_r+0xb0>
 8008dee:	605b      	str	r3, [r3, #4]
 8008df0:	deff      	udf	#255	; 0xff
 8008df2:	bf00      	nop
 8008df4:	200014f4 	.word	0x200014f4

08008df8 <__malloc_lock>:
 8008df8:	4801      	ldr	r0, [pc, #4]	; (8008e00 <__malloc_lock+0x8>)
 8008dfa:	f7ff b882 	b.w	8007f02 <__retarget_lock_acquire_recursive>
 8008dfe:	bf00      	nop
 8008e00:	200014f0 	.word	0x200014f0

08008e04 <__malloc_unlock>:
 8008e04:	4801      	ldr	r0, [pc, #4]	; (8008e0c <__malloc_unlock+0x8>)
 8008e06:	f7ff b87d 	b.w	8007f04 <__retarget_lock_release_recursive>
 8008e0a:	bf00      	nop
 8008e0c:	200014f0 	.word	0x200014f0

08008e10 <_Balloc>:
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	69c6      	ldr	r6, [r0, #28]
 8008e14:	4604      	mov	r4, r0
 8008e16:	460d      	mov	r5, r1
 8008e18:	b976      	cbnz	r6, 8008e38 <_Balloc+0x28>
 8008e1a:	2010      	movs	r0, #16
 8008e1c:	f7ff ff44 	bl	8008ca8 <malloc>
 8008e20:	4602      	mov	r2, r0
 8008e22:	61e0      	str	r0, [r4, #28]
 8008e24:	b920      	cbnz	r0, 8008e30 <_Balloc+0x20>
 8008e26:	216b      	movs	r1, #107	; 0x6b
 8008e28:	4b17      	ldr	r3, [pc, #92]	; (8008e88 <_Balloc+0x78>)
 8008e2a:	4818      	ldr	r0, [pc, #96]	; (8008e8c <_Balloc+0x7c>)
 8008e2c:	f000 fd94 	bl	8009958 <__assert_func>
 8008e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e34:	6006      	str	r6, [r0, #0]
 8008e36:	60c6      	str	r6, [r0, #12]
 8008e38:	69e6      	ldr	r6, [r4, #28]
 8008e3a:	68f3      	ldr	r3, [r6, #12]
 8008e3c:	b183      	cbz	r3, 8008e60 <_Balloc+0x50>
 8008e3e:	69e3      	ldr	r3, [r4, #28]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e46:	b9b8      	cbnz	r0, 8008e78 <_Balloc+0x68>
 8008e48:	2101      	movs	r1, #1
 8008e4a:	fa01 f605 	lsl.w	r6, r1, r5
 8008e4e:	1d72      	adds	r2, r6, #5
 8008e50:	4620      	mov	r0, r4
 8008e52:	0092      	lsls	r2, r2, #2
 8008e54:	f000 fd9e 	bl	8009994 <_calloc_r>
 8008e58:	b160      	cbz	r0, 8008e74 <_Balloc+0x64>
 8008e5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e5e:	e00e      	b.n	8008e7e <_Balloc+0x6e>
 8008e60:	2221      	movs	r2, #33	; 0x21
 8008e62:	2104      	movs	r1, #4
 8008e64:	4620      	mov	r0, r4
 8008e66:	f000 fd95 	bl	8009994 <_calloc_r>
 8008e6a:	69e3      	ldr	r3, [r4, #28]
 8008e6c:	60f0      	str	r0, [r6, #12]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e4      	bne.n	8008e3e <_Balloc+0x2e>
 8008e74:	2000      	movs	r0, #0
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
 8008e78:	6802      	ldr	r2, [r0, #0]
 8008e7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e7e:	2300      	movs	r3, #0
 8008e80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e84:	e7f7      	b.n	8008e76 <_Balloc+0x66>
 8008e86:	bf00      	nop
 8008e88:	0800a113 	.word	0x0800a113
 8008e8c:	0800a193 	.word	0x0800a193

08008e90 <_Bfree>:
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	69c6      	ldr	r6, [r0, #28]
 8008e94:	4605      	mov	r5, r0
 8008e96:	460c      	mov	r4, r1
 8008e98:	b976      	cbnz	r6, 8008eb8 <_Bfree+0x28>
 8008e9a:	2010      	movs	r0, #16
 8008e9c:	f7ff ff04 	bl	8008ca8 <malloc>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	61e8      	str	r0, [r5, #28]
 8008ea4:	b920      	cbnz	r0, 8008eb0 <_Bfree+0x20>
 8008ea6:	218f      	movs	r1, #143	; 0x8f
 8008ea8:	4b08      	ldr	r3, [pc, #32]	; (8008ecc <_Bfree+0x3c>)
 8008eaa:	4809      	ldr	r0, [pc, #36]	; (8008ed0 <_Bfree+0x40>)
 8008eac:	f000 fd54 	bl	8009958 <__assert_func>
 8008eb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008eb4:	6006      	str	r6, [r0, #0]
 8008eb6:	60c6      	str	r6, [r0, #12]
 8008eb8:	b13c      	cbz	r4, 8008eca <_Bfree+0x3a>
 8008eba:	69eb      	ldr	r3, [r5, #28]
 8008ebc:	6862      	ldr	r2, [r4, #4]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ec4:	6021      	str	r1, [r4, #0]
 8008ec6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008eca:	bd70      	pop	{r4, r5, r6, pc}
 8008ecc:	0800a113 	.word	0x0800a113
 8008ed0:	0800a193 	.word	0x0800a193

08008ed4 <__multadd>:
 8008ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed8:	4607      	mov	r7, r0
 8008eda:	460c      	mov	r4, r1
 8008edc:	461e      	mov	r6, r3
 8008ede:	2000      	movs	r0, #0
 8008ee0:	690d      	ldr	r5, [r1, #16]
 8008ee2:	f101 0c14 	add.w	ip, r1, #20
 8008ee6:	f8dc 3000 	ldr.w	r3, [ip]
 8008eea:	3001      	adds	r0, #1
 8008eec:	b299      	uxth	r1, r3
 8008eee:	fb02 6101 	mla	r1, r2, r1, r6
 8008ef2:	0c1e      	lsrs	r6, r3, #16
 8008ef4:	0c0b      	lsrs	r3, r1, #16
 8008ef6:	fb02 3306 	mla	r3, r2, r6, r3
 8008efa:	b289      	uxth	r1, r1
 8008efc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f00:	4285      	cmp	r5, r0
 8008f02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f06:	f84c 1b04 	str.w	r1, [ip], #4
 8008f0a:	dcec      	bgt.n	8008ee6 <__multadd+0x12>
 8008f0c:	b30e      	cbz	r6, 8008f52 <__multadd+0x7e>
 8008f0e:	68a3      	ldr	r3, [r4, #8]
 8008f10:	42ab      	cmp	r3, r5
 8008f12:	dc19      	bgt.n	8008f48 <__multadd+0x74>
 8008f14:	6861      	ldr	r1, [r4, #4]
 8008f16:	4638      	mov	r0, r7
 8008f18:	3101      	adds	r1, #1
 8008f1a:	f7ff ff79 	bl	8008e10 <_Balloc>
 8008f1e:	4680      	mov	r8, r0
 8008f20:	b928      	cbnz	r0, 8008f2e <__multadd+0x5a>
 8008f22:	4602      	mov	r2, r0
 8008f24:	21ba      	movs	r1, #186	; 0xba
 8008f26:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <__multadd+0x84>)
 8008f28:	480c      	ldr	r0, [pc, #48]	; (8008f5c <__multadd+0x88>)
 8008f2a:	f000 fd15 	bl	8009958 <__assert_func>
 8008f2e:	6922      	ldr	r2, [r4, #16]
 8008f30:	f104 010c 	add.w	r1, r4, #12
 8008f34:	3202      	adds	r2, #2
 8008f36:	0092      	lsls	r2, r2, #2
 8008f38:	300c      	adds	r0, #12
 8008f3a:	f7fe fff2 	bl	8007f22 <memcpy>
 8008f3e:	4621      	mov	r1, r4
 8008f40:	4638      	mov	r0, r7
 8008f42:	f7ff ffa5 	bl	8008e90 <_Bfree>
 8008f46:	4644      	mov	r4, r8
 8008f48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f4c:	3501      	adds	r5, #1
 8008f4e:	615e      	str	r6, [r3, #20]
 8008f50:	6125      	str	r5, [r4, #16]
 8008f52:	4620      	mov	r0, r4
 8008f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f58:	0800a182 	.word	0x0800a182
 8008f5c:	0800a193 	.word	0x0800a193

08008f60 <__hi0bits>:
 8008f60:	0c02      	lsrs	r2, r0, #16
 8008f62:	0412      	lsls	r2, r2, #16
 8008f64:	4603      	mov	r3, r0
 8008f66:	b9ca      	cbnz	r2, 8008f9c <__hi0bits+0x3c>
 8008f68:	0403      	lsls	r3, r0, #16
 8008f6a:	2010      	movs	r0, #16
 8008f6c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008f70:	bf04      	itt	eq
 8008f72:	021b      	lsleq	r3, r3, #8
 8008f74:	3008      	addeq	r0, #8
 8008f76:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008f7a:	bf04      	itt	eq
 8008f7c:	011b      	lsleq	r3, r3, #4
 8008f7e:	3004      	addeq	r0, #4
 8008f80:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008f84:	bf04      	itt	eq
 8008f86:	009b      	lsleq	r3, r3, #2
 8008f88:	3002      	addeq	r0, #2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	db05      	blt.n	8008f9a <__hi0bits+0x3a>
 8008f8e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008f92:	f100 0001 	add.w	r0, r0, #1
 8008f96:	bf08      	it	eq
 8008f98:	2020      	moveq	r0, #32
 8008f9a:	4770      	bx	lr
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	e7e5      	b.n	8008f6c <__hi0bits+0xc>

08008fa0 <__lo0bits>:
 8008fa0:	6803      	ldr	r3, [r0, #0]
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	f013 0007 	ands.w	r0, r3, #7
 8008fa8:	d00b      	beq.n	8008fc2 <__lo0bits+0x22>
 8008faa:	07d9      	lsls	r1, r3, #31
 8008fac:	d421      	bmi.n	8008ff2 <__lo0bits+0x52>
 8008fae:	0798      	lsls	r0, r3, #30
 8008fb0:	bf49      	itett	mi
 8008fb2:	085b      	lsrmi	r3, r3, #1
 8008fb4:	089b      	lsrpl	r3, r3, #2
 8008fb6:	2001      	movmi	r0, #1
 8008fb8:	6013      	strmi	r3, [r2, #0]
 8008fba:	bf5c      	itt	pl
 8008fbc:	2002      	movpl	r0, #2
 8008fbe:	6013      	strpl	r3, [r2, #0]
 8008fc0:	4770      	bx	lr
 8008fc2:	b299      	uxth	r1, r3
 8008fc4:	b909      	cbnz	r1, 8008fca <__lo0bits+0x2a>
 8008fc6:	2010      	movs	r0, #16
 8008fc8:	0c1b      	lsrs	r3, r3, #16
 8008fca:	b2d9      	uxtb	r1, r3
 8008fcc:	b909      	cbnz	r1, 8008fd2 <__lo0bits+0x32>
 8008fce:	3008      	adds	r0, #8
 8008fd0:	0a1b      	lsrs	r3, r3, #8
 8008fd2:	0719      	lsls	r1, r3, #28
 8008fd4:	bf04      	itt	eq
 8008fd6:	091b      	lsreq	r3, r3, #4
 8008fd8:	3004      	addeq	r0, #4
 8008fda:	0799      	lsls	r1, r3, #30
 8008fdc:	bf04      	itt	eq
 8008fde:	089b      	lsreq	r3, r3, #2
 8008fe0:	3002      	addeq	r0, #2
 8008fe2:	07d9      	lsls	r1, r3, #31
 8008fe4:	d403      	bmi.n	8008fee <__lo0bits+0x4e>
 8008fe6:	085b      	lsrs	r3, r3, #1
 8008fe8:	f100 0001 	add.w	r0, r0, #1
 8008fec:	d003      	beq.n	8008ff6 <__lo0bits+0x56>
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	4770      	bx	lr
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	4770      	bx	lr
 8008ff6:	2020      	movs	r0, #32
 8008ff8:	4770      	bx	lr
	...

08008ffc <__i2b>:
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	460c      	mov	r4, r1
 8009000:	2101      	movs	r1, #1
 8009002:	f7ff ff05 	bl	8008e10 <_Balloc>
 8009006:	4602      	mov	r2, r0
 8009008:	b928      	cbnz	r0, 8009016 <__i2b+0x1a>
 800900a:	f240 1145 	movw	r1, #325	; 0x145
 800900e:	4b04      	ldr	r3, [pc, #16]	; (8009020 <__i2b+0x24>)
 8009010:	4804      	ldr	r0, [pc, #16]	; (8009024 <__i2b+0x28>)
 8009012:	f000 fca1 	bl	8009958 <__assert_func>
 8009016:	2301      	movs	r3, #1
 8009018:	6144      	str	r4, [r0, #20]
 800901a:	6103      	str	r3, [r0, #16]
 800901c:	bd10      	pop	{r4, pc}
 800901e:	bf00      	nop
 8009020:	0800a182 	.word	0x0800a182
 8009024:	0800a193 	.word	0x0800a193

08009028 <__multiply>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	4691      	mov	r9, r2
 800902e:	690a      	ldr	r2, [r1, #16]
 8009030:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009034:	460c      	mov	r4, r1
 8009036:	429a      	cmp	r2, r3
 8009038:	bfbe      	ittt	lt
 800903a:	460b      	movlt	r3, r1
 800903c:	464c      	movlt	r4, r9
 800903e:	4699      	movlt	r9, r3
 8009040:	6927      	ldr	r7, [r4, #16]
 8009042:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009046:	68a3      	ldr	r3, [r4, #8]
 8009048:	6861      	ldr	r1, [r4, #4]
 800904a:	eb07 060a 	add.w	r6, r7, sl
 800904e:	42b3      	cmp	r3, r6
 8009050:	b085      	sub	sp, #20
 8009052:	bfb8      	it	lt
 8009054:	3101      	addlt	r1, #1
 8009056:	f7ff fedb 	bl	8008e10 <_Balloc>
 800905a:	b930      	cbnz	r0, 800906a <__multiply+0x42>
 800905c:	4602      	mov	r2, r0
 800905e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009062:	4b43      	ldr	r3, [pc, #268]	; (8009170 <__multiply+0x148>)
 8009064:	4843      	ldr	r0, [pc, #268]	; (8009174 <__multiply+0x14c>)
 8009066:	f000 fc77 	bl	8009958 <__assert_func>
 800906a:	f100 0514 	add.w	r5, r0, #20
 800906e:	462b      	mov	r3, r5
 8009070:	2200      	movs	r2, #0
 8009072:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009076:	4543      	cmp	r3, r8
 8009078:	d321      	bcc.n	80090be <__multiply+0x96>
 800907a:	f104 0314 	add.w	r3, r4, #20
 800907e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009082:	f109 0314 	add.w	r3, r9, #20
 8009086:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800908a:	9202      	str	r2, [sp, #8]
 800908c:	1b3a      	subs	r2, r7, r4
 800908e:	3a15      	subs	r2, #21
 8009090:	f022 0203 	bic.w	r2, r2, #3
 8009094:	3204      	adds	r2, #4
 8009096:	f104 0115 	add.w	r1, r4, #21
 800909a:	428f      	cmp	r7, r1
 800909c:	bf38      	it	cc
 800909e:	2204      	movcc	r2, #4
 80090a0:	9201      	str	r2, [sp, #4]
 80090a2:	9a02      	ldr	r2, [sp, #8]
 80090a4:	9303      	str	r3, [sp, #12]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d80c      	bhi.n	80090c4 <__multiply+0x9c>
 80090aa:	2e00      	cmp	r6, #0
 80090ac:	dd03      	ble.n	80090b6 <__multiply+0x8e>
 80090ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d05a      	beq.n	800916c <__multiply+0x144>
 80090b6:	6106      	str	r6, [r0, #16]
 80090b8:	b005      	add	sp, #20
 80090ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090be:	f843 2b04 	str.w	r2, [r3], #4
 80090c2:	e7d8      	b.n	8009076 <__multiply+0x4e>
 80090c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80090c8:	f1ba 0f00 	cmp.w	sl, #0
 80090cc:	d023      	beq.n	8009116 <__multiply+0xee>
 80090ce:	46a9      	mov	r9, r5
 80090d0:	f04f 0c00 	mov.w	ip, #0
 80090d4:	f104 0e14 	add.w	lr, r4, #20
 80090d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80090dc:	f8d9 1000 	ldr.w	r1, [r9]
 80090e0:	fa1f fb82 	uxth.w	fp, r2
 80090e4:	b289      	uxth	r1, r1
 80090e6:	fb0a 110b 	mla	r1, sl, fp, r1
 80090ea:	4461      	add	r1, ip
 80090ec:	f8d9 c000 	ldr.w	ip, [r9]
 80090f0:	0c12      	lsrs	r2, r2, #16
 80090f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80090f6:	fb0a c202 	mla	r2, sl, r2, ip
 80090fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80090fe:	b289      	uxth	r1, r1
 8009100:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009104:	4577      	cmp	r7, lr
 8009106:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800910a:	f849 1b04 	str.w	r1, [r9], #4
 800910e:	d8e3      	bhi.n	80090d8 <__multiply+0xb0>
 8009110:	9a01      	ldr	r2, [sp, #4]
 8009112:	f845 c002 	str.w	ip, [r5, r2]
 8009116:	9a03      	ldr	r2, [sp, #12]
 8009118:	3304      	adds	r3, #4
 800911a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800911e:	f1b9 0f00 	cmp.w	r9, #0
 8009122:	d021      	beq.n	8009168 <__multiply+0x140>
 8009124:	46ae      	mov	lr, r5
 8009126:	f04f 0a00 	mov.w	sl, #0
 800912a:	6829      	ldr	r1, [r5, #0]
 800912c:	f104 0c14 	add.w	ip, r4, #20
 8009130:	f8bc b000 	ldrh.w	fp, [ip]
 8009134:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009138:	b289      	uxth	r1, r1
 800913a:	fb09 220b 	mla	r2, r9, fp, r2
 800913e:	4452      	add	r2, sl
 8009140:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009144:	f84e 1b04 	str.w	r1, [lr], #4
 8009148:	f85c 1b04 	ldr.w	r1, [ip], #4
 800914c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009150:	f8be 1000 	ldrh.w	r1, [lr]
 8009154:	4567      	cmp	r7, ip
 8009156:	fb09 110a 	mla	r1, r9, sl, r1
 800915a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800915e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009162:	d8e5      	bhi.n	8009130 <__multiply+0x108>
 8009164:	9a01      	ldr	r2, [sp, #4]
 8009166:	50a9      	str	r1, [r5, r2]
 8009168:	3504      	adds	r5, #4
 800916a:	e79a      	b.n	80090a2 <__multiply+0x7a>
 800916c:	3e01      	subs	r6, #1
 800916e:	e79c      	b.n	80090aa <__multiply+0x82>
 8009170:	0800a182 	.word	0x0800a182
 8009174:	0800a193 	.word	0x0800a193

08009178 <__pow5mult>:
 8009178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800917c:	4615      	mov	r5, r2
 800917e:	f012 0203 	ands.w	r2, r2, #3
 8009182:	4606      	mov	r6, r0
 8009184:	460f      	mov	r7, r1
 8009186:	d007      	beq.n	8009198 <__pow5mult+0x20>
 8009188:	4c25      	ldr	r4, [pc, #148]	; (8009220 <__pow5mult+0xa8>)
 800918a:	3a01      	subs	r2, #1
 800918c:	2300      	movs	r3, #0
 800918e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009192:	f7ff fe9f 	bl	8008ed4 <__multadd>
 8009196:	4607      	mov	r7, r0
 8009198:	10ad      	asrs	r5, r5, #2
 800919a:	d03d      	beq.n	8009218 <__pow5mult+0xa0>
 800919c:	69f4      	ldr	r4, [r6, #28]
 800919e:	b97c      	cbnz	r4, 80091c0 <__pow5mult+0x48>
 80091a0:	2010      	movs	r0, #16
 80091a2:	f7ff fd81 	bl	8008ca8 <malloc>
 80091a6:	4602      	mov	r2, r0
 80091a8:	61f0      	str	r0, [r6, #28]
 80091aa:	b928      	cbnz	r0, 80091b8 <__pow5mult+0x40>
 80091ac:	f240 11b3 	movw	r1, #435	; 0x1b3
 80091b0:	4b1c      	ldr	r3, [pc, #112]	; (8009224 <__pow5mult+0xac>)
 80091b2:	481d      	ldr	r0, [pc, #116]	; (8009228 <__pow5mult+0xb0>)
 80091b4:	f000 fbd0 	bl	8009958 <__assert_func>
 80091b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091bc:	6004      	str	r4, [r0, #0]
 80091be:	60c4      	str	r4, [r0, #12]
 80091c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80091c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091c8:	b94c      	cbnz	r4, 80091de <__pow5mult+0x66>
 80091ca:	f240 2171 	movw	r1, #625	; 0x271
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7ff ff14 	bl	8008ffc <__i2b>
 80091d4:	2300      	movs	r3, #0
 80091d6:	4604      	mov	r4, r0
 80091d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80091dc:	6003      	str	r3, [r0, #0]
 80091de:	f04f 0900 	mov.w	r9, #0
 80091e2:	07eb      	lsls	r3, r5, #31
 80091e4:	d50a      	bpl.n	80091fc <__pow5mult+0x84>
 80091e6:	4639      	mov	r1, r7
 80091e8:	4622      	mov	r2, r4
 80091ea:	4630      	mov	r0, r6
 80091ec:	f7ff ff1c 	bl	8009028 <__multiply>
 80091f0:	4680      	mov	r8, r0
 80091f2:	4639      	mov	r1, r7
 80091f4:	4630      	mov	r0, r6
 80091f6:	f7ff fe4b 	bl	8008e90 <_Bfree>
 80091fa:	4647      	mov	r7, r8
 80091fc:	106d      	asrs	r5, r5, #1
 80091fe:	d00b      	beq.n	8009218 <__pow5mult+0xa0>
 8009200:	6820      	ldr	r0, [r4, #0]
 8009202:	b938      	cbnz	r0, 8009214 <__pow5mult+0x9c>
 8009204:	4622      	mov	r2, r4
 8009206:	4621      	mov	r1, r4
 8009208:	4630      	mov	r0, r6
 800920a:	f7ff ff0d 	bl	8009028 <__multiply>
 800920e:	6020      	str	r0, [r4, #0]
 8009210:	f8c0 9000 	str.w	r9, [r0]
 8009214:	4604      	mov	r4, r0
 8009216:	e7e4      	b.n	80091e2 <__pow5mult+0x6a>
 8009218:	4638      	mov	r0, r7
 800921a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800921e:	bf00      	nop
 8009220:	0800a2e0 	.word	0x0800a2e0
 8009224:	0800a113 	.word	0x0800a113
 8009228:	0800a193 	.word	0x0800a193

0800922c <__lshift>:
 800922c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009230:	460c      	mov	r4, r1
 8009232:	4607      	mov	r7, r0
 8009234:	4691      	mov	r9, r2
 8009236:	6923      	ldr	r3, [r4, #16]
 8009238:	6849      	ldr	r1, [r1, #4]
 800923a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800923e:	68a3      	ldr	r3, [r4, #8]
 8009240:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009244:	f108 0601 	add.w	r6, r8, #1
 8009248:	42b3      	cmp	r3, r6
 800924a:	db0b      	blt.n	8009264 <__lshift+0x38>
 800924c:	4638      	mov	r0, r7
 800924e:	f7ff fddf 	bl	8008e10 <_Balloc>
 8009252:	4605      	mov	r5, r0
 8009254:	b948      	cbnz	r0, 800926a <__lshift+0x3e>
 8009256:	4602      	mov	r2, r0
 8009258:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800925c:	4b27      	ldr	r3, [pc, #156]	; (80092fc <__lshift+0xd0>)
 800925e:	4828      	ldr	r0, [pc, #160]	; (8009300 <__lshift+0xd4>)
 8009260:	f000 fb7a 	bl	8009958 <__assert_func>
 8009264:	3101      	adds	r1, #1
 8009266:	005b      	lsls	r3, r3, #1
 8009268:	e7ee      	b.n	8009248 <__lshift+0x1c>
 800926a:	2300      	movs	r3, #0
 800926c:	f100 0114 	add.w	r1, r0, #20
 8009270:	f100 0210 	add.w	r2, r0, #16
 8009274:	4618      	mov	r0, r3
 8009276:	4553      	cmp	r3, sl
 8009278:	db33      	blt.n	80092e2 <__lshift+0xb6>
 800927a:	6920      	ldr	r0, [r4, #16]
 800927c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009280:	f104 0314 	add.w	r3, r4, #20
 8009284:	f019 091f 	ands.w	r9, r9, #31
 8009288:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800928c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009290:	d02b      	beq.n	80092ea <__lshift+0xbe>
 8009292:	468a      	mov	sl, r1
 8009294:	2200      	movs	r2, #0
 8009296:	f1c9 0e20 	rsb	lr, r9, #32
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	fa00 f009 	lsl.w	r0, r0, r9
 80092a0:	4310      	orrs	r0, r2
 80092a2:	f84a 0b04 	str.w	r0, [sl], #4
 80092a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092aa:	459c      	cmp	ip, r3
 80092ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80092b0:	d8f3      	bhi.n	800929a <__lshift+0x6e>
 80092b2:	ebac 0304 	sub.w	r3, ip, r4
 80092b6:	3b15      	subs	r3, #21
 80092b8:	f023 0303 	bic.w	r3, r3, #3
 80092bc:	3304      	adds	r3, #4
 80092be:	f104 0015 	add.w	r0, r4, #21
 80092c2:	4584      	cmp	ip, r0
 80092c4:	bf38      	it	cc
 80092c6:	2304      	movcc	r3, #4
 80092c8:	50ca      	str	r2, [r1, r3]
 80092ca:	b10a      	cbz	r2, 80092d0 <__lshift+0xa4>
 80092cc:	f108 0602 	add.w	r6, r8, #2
 80092d0:	3e01      	subs	r6, #1
 80092d2:	4638      	mov	r0, r7
 80092d4:	4621      	mov	r1, r4
 80092d6:	612e      	str	r6, [r5, #16]
 80092d8:	f7ff fdda 	bl	8008e90 <_Bfree>
 80092dc:	4628      	mov	r0, r5
 80092de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80092e6:	3301      	adds	r3, #1
 80092e8:	e7c5      	b.n	8009276 <__lshift+0x4a>
 80092ea:	3904      	subs	r1, #4
 80092ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80092f0:	459c      	cmp	ip, r3
 80092f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80092f6:	d8f9      	bhi.n	80092ec <__lshift+0xc0>
 80092f8:	e7ea      	b.n	80092d0 <__lshift+0xa4>
 80092fa:	bf00      	nop
 80092fc:	0800a182 	.word	0x0800a182
 8009300:	0800a193 	.word	0x0800a193

08009304 <__mcmp>:
 8009304:	4603      	mov	r3, r0
 8009306:	690a      	ldr	r2, [r1, #16]
 8009308:	6900      	ldr	r0, [r0, #16]
 800930a:	b530      	push	{r4, r5, lr}
 800930c:	1a80      	subs	r0, r0, r2
 800930e:	d10d      	bne.n	800932c <__mcmp+0x28>
 8009310:	3314      	adds	r3, #20
 8009312:	3114      	adds	r1, #20
 8009314:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009318:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800931c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009320:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009324:	4295      	cmp	r5, r2
 8009326:	d002      	beq.n	800932e <__mcmp+0x2a>
 8009328:	d304      	bcc.n	8009334 <__mcmp+0x30>
 800932a:	2001      	movs	r0, #1
 800932c:	bd30      	pop	{r4, r5, pc}
 800932e:	42a3      	cmp	r3, r4
 8009330:	d3f4      	bcc.n	800931c <__mcmp+0x18>
 8009332:	e7fb      	b.n	800932c <__mcmp+0x28>
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	e7f8      	b.n	800932c <__mcmp+0x28>
	...

0800933c <__mdiff>:
 800933c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009340:	460d      	mov	r5, r1
 8009342:	4607      	mov	r7, r0
 8009344:	4611      	mov	r1, r2
 8009346:	4628      	mov	r0, r5
 8009348:	4614      	mov	r4, r2
 800934a:	f7ff ffdb 	bl	8009304 <__mcmp>
 800934e:	1e06      	subs	r6, r0, #0
 8009350:	d111      	bne.n	8009376 <__mdiff+0x3a>
 8009352:	4631      	mov	r1, r6
 8009354:	4638      	mov	r0, r7
 8009356:	f7ff fd5b 	bl	8008e10 <_Balloc>
 800935a:	4602      	mov	r2, r0
 800935c:	b928      	cbnz	r0, 800936a <__mdiff+0x2e>
 800935e:	f240 2137 	movw	r1, #567	; 0x237
 8009362:	4b3a      	ldr	r3, [pc, #232]	; (800944c <__mdiff+0x110>)
 8009364:	483a      	ldr	r0, [pc, #232]	; (8009450 <__mdiff+0x114>)
 8009366:	f000 faf7 	bl	8009958 <__assert_func>
 800936a:	2301      	movs	r3, #1
 800936c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009370:	4610      	mov	r0, r2
 8009372:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009376:	bfa4      	itt	ge
 8009378:	4623      	movge	r3, r4
 800937a:	462c      	movge	r4, r5
 800937c:	4638      	mov	r0, r7
 800937e:	6861      	ldr	r1, [r4, #4]
 8009380:	bfa6      	itte	ge
 8009382:	461d      	movge	r5, r3
 8009384:	2600      	movge	r6, #0
 8009386:	2601      	movlt	r6, #1
 8009388:	f7ff fd42 	bl	8008e10 <_Balloc>
 800938c:	4602      	mov	r2, r0
 800938e:	b918      	cbnz	r0, 8009398 <__mdiff+0x5c>
 8009390:	f240 2145 	movw	r1, #581	; 0x245
 8009394:	4b2d      	ldr	r3, [pc, #180]	; (800944c <__mdiff+0x110>)
 8009396:	e7e5      	b.n	8009364 <__mdiff+0x28>
 8009398:	f102 0814 	add.w	r8, r2, #20
 800939c:	46c2      	mov	sl, r8
 800939e:	f04f 0c00 	mov.w	ip, #0
 80093a2:	6927      	ldr	r7, [r4, #16]
 80093a4:	60c6      	str	r6, [r0, #12]
 80093a6:	692e      	ldr	r6, [r5, #16]
 80093a8:	f104 0014 	add.w	r0, r4, #20
 80093ac:	f105 0914 	add.w	r9, r5, #20
 80093b0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80093b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80093b8:	3410      	adds	r4, #16
 80093ba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80093be:	f859 3b04 	ldr.w	r3, [r9], #4
 80093c2:	fa1f f18b 	uxth.w	r1, fp
 80093c6:	4461      	add	r1, ip
 80093c8:	fa1f fc83 	uxth.w	ip, r3
 80093cc:	0c1b      	lsrs	r3, r3, #16
 80093ce:	eba1 010c 	sub.w	r1, r1, ip
 80093d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80093da:	b289      	uxth	r1, r1
 80093dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80093e0:	454e      	cmp	r6, r9
 80093e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80093e6:	f84a 1b04 	str.w	r1, [sl], #4
 80093ea:	d8e6      	bhi.n	80093ba <__mdiff+0x7e>
 80093ec:	1b73      	subs	r3, r6, r5
 80093ee:	3b15      	subs	r3, #21
 80093f0:	f023 0303 	bic.w	r3, r3, #3
 80093f4:	3515      	adds	r5, #21
 80093f6:	3304      	adds	r3, #4
 80093f8:	42ae      	cmp	r6, r5
 80093fa:	bf38      	it	cc
 80093fc:	2304      	movcc	r3, #4
 80093fe:	4418      	add	r0, r3
 8009400:	4443      	add	r3, r8
 8009402:	461e      	mov	r6, r3
 8009404:	4605      	mov	r5, r0
 8009406:	4575      	cmp	r5, lr
 8009408:	d30e      	bcc.n	8009428 <__mdiff+0xec>
 800940a:	f10e 0103 	add.w	r1, lr, #3
 800940e:	1a09      	subs	r1, r1, r0
 8009410:	f021 0103 	bic.w	r1, r1, #3
 8009414:	3803      	subs	r0, #3
 8009416:	4586      	cmp	lr, r0
 8009418:	bf38      	it	cc
 800941a:	2100      	movcc	r1, #0
 800941c:	440b      	add	r3, r1
 800941e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009422:	b189      	cbz	r1, 8009448 <__mdiff+0x10c>
 8009424:	6117      	str	r7, [r2, #16]
 8009426:	e7a3      	b.n	8009370 <__mdiff+0x34>
 8009428:	f855 8b04 	ldr.w	r8, [r5], #4
 800942c:	fa1f f188 	uxth.w	r1, r8
 8009430:	4461      	add	r1, ip
 8009432:	140c      	asrs	r4, r1, #16
 8009434:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009438:	b289      	uxth	r1, r1
 800943a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800943e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009442:	f846 1b04 	str.w	r1, [r6], #4
 8009446:	e7de      	b.n	8009406 <__mdiff+0xca>
 8009448:	3f01      	subs	r7, #1
 800944a:	e7e8      	b.n	800941e <__mdiff+0xe2>
 800944c:	0800a182 	.word	0x0800a182
 8009450:	0800a193 	.word	0x0800a193

08009454 <__d2b>:
 8009454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009456:	2101      	movs	r1, #1
 8009458:	4617      	mov	r7, r2
 800945a:	461c      	mov	r4, r3
 800945c:	9e08      	ldr	r6, [sp, #32]
 800945e:	f7ff fcd7 	bl	8008e10 <_Balloc>
 8009462:	4605      	mov	r5, r0
 8009464:	b930      	cbnz	r0, 8009474 <__d2b+0x20>
 8009466:	4602      	mov	r2, r0
 8009468:	f240 310f 	movw	r1, #783	; 0x30f
 800946c:	4b22      	ldr	r3, [pc, #136]	; (80094f8 <__d2b+0xa4>)
 800946e:	4823      	ldr	r0, [pc, #140]	; (80094fc <__d2b+0xa8>)
 8009470:	f000 fa72 	bl	8009958 <__assert_func>
 8009474:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009478:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800947c:	bb24      	cbnz	r4, 80094c8 <__d2b+0x74>
 800947e:	2f00      	cmp	r7, #0
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	d026      	beq.n	80094d2 <__d2b+0x7e>
 8009484:	4668      	mov	r0, sp
 8009486:	9700      	str	r7, [sp, #0]
 8009488:	f7ff fd8a 	bl	8008fa0 <__lo0bits>
 800948c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009490:	b1e8      	cbz	r0, 80094ce <__d2b+0x7a>
 8009492:	f1c0 0320 	rsb	r3, r0, #32
 8009496:	fa02 f303 	lsl.w	r3, r2, r3
 800949a:	430b      	orrs	r3, r1
 800949c:	40c2      	lsrs	r2, r0
 800949e:	616b      	str	r3, [r5, #20]
 80094a0:	9201      	str	r2, [sp, #4]
 80094a2:	9b01      	ldr	r3, [sp, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	bf14      	ite	ne
 80094a8:	2102      	movne	r1, #2
 80094aa:	2101      	moveq	r1, #1
 80094ac:	61ab      	str	r3, [r5, #24]
 80094ae:	6129      	str	r1, [r5, #16]
 80094b0:	b1bc      	cbz	r4, 80094e2 <__d2b+0x8e>
 80094b2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80094b6:	4404      	add	r4, r0
 80094b8:	6034      	str	r4, [r6, #0]
 80094ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c0:	6018      	str	r0, [r3, #0]
 80094c2:	4628      	mov	r0, r5
 80094c4:	b003      	add	sp, #12
 80094c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094cc:	e7d7      	b.n	800947e <__d2b+0x2a>
 80094ce:	6169      	str	r1, [r5, #20]
 80094d0:	e7e7      	b.n	80094a2 <__d2b+0x4e>
 80094d2:	a801      	add	r0, sp, #4
 80094d4:	f7ff fd64 	bl	8008fa0 <__lo0bits>
 80094d8:	9b01      	ldr	r3, [sp, #4]
 80094da:	2101      	movs	r1, #1
 80094dc:	616b      	str	r3, [r5, #20]
 80094de:	3020      	adds	r0, #32
 80094e0:	e7e5      	b.n	80094ae <__d2b+0x5a>
 80094e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094e6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80094ea:	6030      	str	r0, [r6, #0]
 80094ec:	6918      	ldr	r0, [r3, #16]
 80094ee:	f7ff fd37 	bl	8008f60 <__hi0bits>
 80094f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80094f6:	e7e2      	b.n	80094be <__d2b+0x6a>
 80094f8:	0800a182 	.word	0x0800a182
 80094fc:	0800a193 	.word	0x0800a193

08009500 <__ssputs_r>:
 8009500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009504:	461f      	mov	r7, r3
 8009506:	688e      	ldr	r6, [r1, #8]
 8009508:	4682      	mov	sl, r0
 800950a:	42be      	cmp	r6, r7
 800950c:	460c      	mov	r4, r1
 800950e:	4690      	mov	r8, r2
 8009510:	680b      	ldr	r3, [r1, #0]
 8009512:	d82c      	bhi.n	800956e <__ssputs_r+0x6e>
 8009514:	898a      	ldrh	r2, [r1, #12]
 8009516:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800951a:	d026      	beq.n	800956a <__ssputs_r+0x6a>
 800951c:	6965      	ldr	r5, [r4, #20]
 800951e:	6909      	ldr	r1, [r1, #16]
 8009520:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009524:	eba3 0901 	sub.w	r9, r3, r1
 8009528:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800952c:	1c7b      	adds	r3, r7, #1
 800952e:	444b      	add	r3, r9
 8009530:	106d      	asrs	r5, r5, #1
 8009532:	429d      	cmp	r5, r3
 8009534:	bf38      	it	cc
 8009536:	461d      	movcc	r5, r3
 8009538:	0553      	lsls	r3, r2, #21
 800953a:	d527      	bpl.n	800958c <__ssputs_r+0x8c>
 800953c:	4629      	mov	r1, r5
 800953e:	f7ff fbdb 	bl	8008cf8 <_malloc_r>
 8009542:	4606      	mov	r6, r0
 8009544:	b360      	cbz	r0, 80095a0 <__ssputs_r+0xa0>
 8009546:	464a      	mov	r2, r9
 8009548:	6921      	ldr	r1, [r4, #16]
 800954a:	f7fe fcea 	bl	8007f22 <memcpy>
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009558:	81a3      	strh	r3, [r4, #12]
 800955a:	6126      	str	r6, [r4, #16]
 800955c:	444e      	add	r6, r9
 800955e:	6026      	str	r6, [r4, #0]
 8009560:	463e      	mov	r6, r7
 8009562:	6165      	str	r5, [r4, #20]
 8009564:	eba5 0509 	sub.w	r5, r5, r9
 8009568:	60a5      	str	r5, [r4, #8]
 800956a:	42be      	cmp	r6, r7
 800956c:	d900      	bls.n	8009570 <__ssputs_r+0x70>
 800956e:	463e      	mov	r6, r7
 8009570:	4632      	mov	r2, r6
 8009572:	4641      	mov	r1, r8
 8009574:	6820      	ldr	r0, [r4, #0]
 8009576:	f000 f9c5 	bl	8009904 <memmove>
 800957a:	2000      	movs	r0, #0
 800957c:	68a3      	ldr	r3, [r4, #8]
 800957e:	1b9b      	subs	r3, r3, r6
 8009580:	60a3      	str	r3, [r4, #8]
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	4433      	add	r3, r6
 8009586:	6023      	str	r3, [r4, #0]
 8009588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958c:	462a      	mov	r2, r5
 800958e:	f000 fa27 	bl	80099e0 <_realloc_r>
 8009592:	4606      	mov	r6, r0
 8009594:	2800      	cmp	r0, #0
 8009596:	d1e0      	bne.n	800955a <__ssputs_r+0x5a>
 8009598:	4650      	mov	r0, sl
 800959a:	6921      	ldr	r1, [r4, #16]
 800959c:	f7ff fb3c 	bl	8008c18 <_free_r>
 80095a0:	230c      	movs	r3, #12
 80095a2:	f8ca 3000 	str.w	r3, [sl]
 80095a6:	89a3      	ldrh	r3, [r4, #12]
 80095a8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095b0:	81a3      	strh	r3, [r4, #12]
 80095b2:	e7e9      	b.n	8009588 <__ssputs_r+0x88>

080095b4 <_svfiprintf_r>:
 80095b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b8:	4698      	mov	r8, r3
 80095ba:	898b      	ldrh	r3, [r1, #12]
 80095bc:	4607      	mov	r7, r0
 80095be:	061b      	lsls	r3, r3, #24
 80095c0:	460d      	mov	r5, r1
 80095c2:	4614      	mov	r4, r2
 80095c4:	b09d      	sub	sp, #116	; 0x74
 80095c6:	d50e      	bpl.n	80095e6 <_svfiprintf_r+0x32>
 80095c8:	690b      	ldr	r3, [r1, #16]
 80095ca:	b963      	cbnz	r3, 80095e6 <_svfiprintf_r+0x32>
 80095cc:	2140      	movs	r1, #64	; 0x40
 80095ce:	f7ff fb93 	bl	8008cf8 <_malloc_r>
 80095d2:	6028      	str	r0, [r5, #0]
 80095d4:	6128      	str	r0, [r5, #16]
 80095d6:	b920      	cbnz	r0, 80095e2 <_svfiprintf_r+0x2e>
 80095d8:	230c      	movs	r3, #12
 80095da:	603b      	str	r3, [r7, #0]
 80095dc:	f04f 30ff 	mov.w	r0, #4294967295
 80095e0:	e0d0      	b.n	8009784 <_svfiprintf_r+0x1d0>
 80095e2:	2340      	movs	r3, #64	; 0x40
 80095e4:	616b      	str	r3, [r5, #20]
 80095e6:	2300      	movs	r3, #0
 80095e8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ea:	2320      	movs	r3, #32
 80095ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095f0:	2330      	movs	r3, #48	; 0x30
 80095f2:	f04f 0901 	mov.w	r9, #1
 80095f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095fa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800979c <_svfiprintf_r+0x1e8>
 80095fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009602:	4623      	mov	r3, r4
 8009604:	469a      	mov	sl, r3
 8009606:	f813 2b01 	ldrb.w	r2, [r3], #1
 800960a:	b10a      	cbz	r2, 8009610 <_svfiprintf_r+0x5c>
 800960c:	2a25      	cmp	r2, #37	; 0x25
 800960e:	d1f9      	bne.n	8009604 <_svfiprintf_r+0x50>
 8009610:	ebba 0b04 	subs.w	fp, sl, r4
 8009614:	d00b      	beq.n	800962e <_svfiprintf_r+0x7a>
 8009616:	465b      	mov	r3, fp
 8009618:	4622      	mov	r2, r4
 800961a:	4629      	mov	r1, r5
 800961c:	4638      	mov	r0, r7
 800961e:	f7ff ff6f 	bl	8009500 <__ssputs_r>
 8009622:	3001      	adds	r0, #1
 8009624:	f000 80a9 	beq.w	800977a <_svfiprintf_r+0x1c6>
 8009628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800962a:	445a      	add	r2, fp
 800962c:	9209      	str	r2, [sp, #36]	; 0x24
 800962e:	f89a 3000 	ldrb.w	r3, [sl]
 8009632:	2b00      	cmp	r3, #0
 8009634:	f000 80a1 	beq.w	800977a <_svfiprintf_r+0x1c6>
 8009638:	2300      	movs	r3, #0
 800963a:	f04f 32ff 	mov.w	r2, #4294967295
 800963e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009642:	f10a 0a01 	add.w	sl, sl, #1
 8009646:	9304      	str	r3, [sp, #16]
 8009648:	9307      	str	r3, [sp, #28]
 800964a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800964e:	931a      	str	r3, [sp, #104]	; 0x68
 8009650:	4654      	mov	r4, sl
 8009652:	2205      	movs	r2, #5
 8009654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009658:	4850      	ldr	r0, [pc, #320]	; (800979c <_svfiprintf_r+0x1e8>)
 800965a:	f7fe fc54 	bl	8007f06 <memchr>
 800965e:	9a04      	ldr	r2, [sp, #16]
 8009660:	b9d8      	cbnz	r0, 800969a <_svfiprintf_r+0xe6>
 8009662:	06d0      	lsls	r0, r2, #27
 8009664:	bf44      	itt	mi
 8009666:	2320      	movmi	r3, #32
 8009668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800966c:	0711      	lsls	r1, r2, #28
 800966e:	bf44      	itt	mi
 8009670:	232b      	movmi	r3, #43	; 0x2b
 8009672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009676:	f89a 3000 	ldrb.w	r3, [sl]
 800967a:	2b2a      	cmp	r3, #42	; 0x2a
 800967c:	d015      	beq.n	80096aa <_svfiprintf_r+0xf6>
 800967e:	4654      	mov	r4, sl
 8009680:	2000      	movs	r0, #0
 8009682:	f04f 0c0a 	mov.w	ip, #10
 8009686:	9a07      	ldr	r2, [sp, #28]
 8009688:	4621      	mov	r1, r4
 800968a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800968e:	3b30      	subs	r3, #48	; 0x30
 8009690:	2b09      	cmp	r3, #9
 8009692:	d94d      	bls.n	8009730 <_svfiprintf_r+0x17c>
 8009694:	b1b0      	cbz	r0, 80096c4 <_svfiprintf_r+0x110>
 8009696:	9207      	str	r2, [sp, #28]
 8009698:	e014      	b.n	80096c4 <_svfiprintf_r+0x110>
 800969a:	eba0 0308 	sub.w	r3, r0, r8
 800969e:	fa09 f303 	lsl.w	r3, r9, r3
 80096a2:	4313      	orrs	r3, r2
 80096a4:	46a2      	mov	sl, r4
 80096a6:	9304      	str	r3, [sp, #16]
 80096a8:	e7d2      	b.n	8009650 <_svfiprintf_r+0x9c>
 80096aa:	9b03      	ldr	r3, [sp, #12]
 80096ac:	1d19      	adds	r1, r3, #4
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	9103      	str	r1, [sp, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	bfbb      	ittet	lt
 80096b6:	425b      	neglt	r3, r3
 80096b8:	f042 0202 	orrlt.w	r2, r2, #2
 80096bc:	9307      	strge	r3, [sp, #28]
 80096be:	9307      	strlt	r3, [sp, #28]
 80096c0:	bfb8      	it	lt
 80096c2:	9204      	strlt	r2, [sp, #16]
 80096c4:	7823      	ldrb	r3, [r4, #0]
 80096c6:	2b2e      	cmp	r3, #46	; 0x2e
 80096c8:	d10c      	bne.n	80096e4 <_svfiprintf_r+0x130>
 80096ca:	7863      	ldrb	r3, [r4, #1]
 80096cc:	2b2a      	cmp	r3, #42	; 0x2a
 80096ce:	d134      	bne.n	800973a <_svfiprintf_r+0x186>
 80096d0:	9b03      	ldr	r3, [sp, #12]
 80096d2:	3402      	adds	r4, #2
 80096d4:	1d1a      	adds	r2, r3, #4
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	9203      	str	r2, [sp, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	bfb8      	it	lt
 80096de:	f04f 33ff 	movlt.w	r3, #4294967295
 80096e2:	9305      	str	r3, [sp, #20]
 80096e4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80097a0 <_svfiprintf_r+0x1ec>
 80096e8:	2203      	movs	r2, #3
 80096ea:	4650      	mov	r0, sl
 80096ec:	7821      	ldrb	r1, [r4, #0]
 80096ee:	f7fe fc0a 	bl	8007f06 <memchr>
 80096f2:	b138      	cbz	r0, 8009704 <_svfiprintf_r+0x150>
 80096f4:	2240      	movs	r2, #64	; 0x40
 80096f6:	9b04      	ldr	r3, [sp, #16]
 80096f8:	eba0 000a 	sub.w	r0, r0, sl
 80096fc:	4082      	lsls	r2, r0
 80096fe:	4313      	orrs	r3, r2
 8009700:	3401      	adds	r4, #1
 8009702:	9304      	str	r3, [sp, #16]
 8009704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009708:	2206      	movs	r2, #6
 800970a:	4826      	ldr	r0, [pc, #152]	; (80097a4 <_svfiprintf_r+0x1f0>)
 800970c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009710:	f7fe fbf9 	bl	8007f06 <memchr>
 8009714:	2800      	cmp	r0, #0
 8009716:	d038      	beq.n	800978a <_svfiprintf_r+0x1d6>
 8009718:	4b23      	ldr	r3, [pc, #140]	; (80097a8 <_svfiprintf_r+0x1f4>)
 800971a:	bb1b      	cbnz	r3, 8009764 <_svfiprintf_r+0x1b0>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	3307      	adds	r3, #7
 8009720:	f023 0307 	bic.w	r3, r3, #7
 8009724:	3308      	adds	r3, #8
 8009726:	9303      	str	r3, [sp, #12]
 8009728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800972a:	4433      	add	r3, r6
 800972c:	9309      	str	r3, [sp, #36]	; 0x24
 800972e:	e768      	b.n	8009602 <_svfiprintf_r+0x4e>
 8009730:	460c      	mov	r4, r1
 8009732:	2001      	movs	r0, #1
 8009734:	fb0c 3202 	mla	r2, ip, r2, r3
 8009738:	e7a6      	b.n	8009688 <_svfiprintf_r+0xd4>
 800973a:	2300      	movs	r3, #0
 800973c:	f04f 0c0a 	mov.w	ip, #10
 8009740:	4619      	mov	r1, r3
 8009742:	3401      	adds	r4, #1
 8009744:	9305      	str	r3, [sp, #20]
 8009746:	4620      	mov	r0, r4
 8009748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800974c:	3a30      	subs	r2, #48	; 0x30
 800974e:	2a09      	cmp	r2, #9
 8009750:	d903      	bls.n	800975a <_svfiprintf_r+0x1a6>
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0c6      	beq.n	80096e4 <_svfiprintf_r+0x130>
 8009756:	9105      	str	r1, [sp, #20]
 8009758:	e7c4      	b.n	80096e4 <_svfiprintf_r+0x130>
 800975a:	4604      	mov	r4, r0
 800975c:	2301      	movs	r3, #1
 800975e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009762:	e7f0      	b.n	8009746 <_svfiprintf_r+0x192>
 8009764:	ab03      	add	r3, sp, #12
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	462a      	mov	r2, r5
 800976a:	4638      	mov	r0, r7
 800976c:	4b0f      	ldr	r3, [pc, #60]	; (80097ac <_svfiprintf_r+0x1f8>)
 800976e:	a904      	add	r1, sp, #16
 8009770:	f7fd fe62 	bl	8007438 <_printf_float>
 8009774:	1c42      	adds	r2, r0, #1
 8009776:	4606      	mov	r6, r0
 8009778:	d1d6      	bne.n	8009728 <_svfiprintf_r+0x174>
 800977a:	89ab      	ldrh	r3, [r5, #12]
 800977c:	065b      	lsls	r3, r3, #25
 800977e:	f53f af2d 	bmi.w	80095dc <_svfiprintf_r+0x28>
 8009782:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009784:	b01d      	add	sp, #116	; 0x74
 8009786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978a:	ab03      	add	r3, sp, #12
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	462a      	mov	r2, r5
 8009790:	4638      	mov	r0, r7
 8009792:	4b06      	ldr	r3, [pc, #24]	; (80097ac <_svfiprintf_r+0x1f8>)
 8009794:	a904      	add	r1, sp, #16
 8009796:	f7fe f8ef 	bl	8007978 <_printf_i>
 800979a:	e7eb      	b.n	8009774 <_svfiprintf_r+0x1c0>
 800979c:	0800a2ec 	.word	0x0800a2ec
 80097a0:	0800a2f2 	.word	0x0800a2f2
 80097a4:	0800a2f6 	.word	0x0800a2f6
 80097a8:	08007439 	.word	0x08007439
 80097ac:	08009501 	.word	0x08009501

080097b0 <__sflush_r>:
 80097b0:	898a      	ldrh	r2, [r1, #12]
 80097b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b4:	4605      	mov	r5, r0
 80097b6:	0710      	lsls	r0, r2, #28
 80097b8:	460c      	mov	r4, r1
 80097ba:	d457      	bmi.n	800986c <__sflush_r+0xbc>
 80097bc:	684b      	ldr	r3, [r1, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	dc04      	bgt.n	80097cc <__sflush_r+0x1c>
 80097c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	dc01      	bgt.n	80097cc <__sflush_r+0x1c>
 80097c8:	2000      	movs	r0, #0
 80097ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ce:	2e00      	cmp	r6, #0
 80097d0:	d0fa      	beq.n	80097c8 <__sflush_r+0x18>
 80097d2:	2300      	movs	r3, #0
 80097d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097d8:	682f      	ldr	r7, [r5, #0]
 80097da:	6a21      	ldr	r1, [r4, #32]
 80097dc:	602b      	str	r3, [r5, #0]
 80097de:	d032      	beq.n	8009846 <__sflush_r+0x96>
 80097e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097e2:	89a3      	ldrh	r3, [r4, #12]
 80097e4:	075a      	lsls	r2, r3, #29
 80097e6:	d505      	bpl.n	80097f4 <__sflush_r+0x44>
 80097e8:	6863      	ldr	r3, [r4, #4]
 80097ea:	1ac0      	subs	r0, r0, r3
 80097ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097ee:	b10b      	cbz	r3, 80097f4 <__sflush_r+0x44>
 80097f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097f2:	1ac0      	subs	r0, r0, r3
 80097f4:	2300      	movs	r3, #0
 80097f6:	4602      	mov	r2, r0
 80097f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097fa:	4628      	mov	r0, r5
 80097fc:	6a21      	ldr	r1, [r4, #32]
 80097fe:	47b0      	blx	r6
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	d106      	bne.n	8009814 <__sflush_r+0x64>
 8009806:	6829      	ldr	r1, [r5, #0]
 8009808:	291d      	cmp	r1, #29
 800980a:	d82b      	bhi.n	8009864 <__sflush_r+0xb4>
 800980c:	4a28      	ldr	r2, [pc, #160]	; (80098b0 <__sflush_r+0x100>)
 800980e:	410a      	asrs	r2, r1
 8009810:	07d6      	lsls	r6, r2, #31
 8009812:	d427      	bmi.n	8009864 <__sflush_r+0xb4>
 8009814:	2200      	movs	r2, #0
 8009816:	6062      	str	r2, [r4, #4]
 8009818:	6922      	ldr	r2, [r4, #16]
 800981a:	04d9      	lsls	r1, r3, #19
 800981c:	6022      	str	r2, [r4, #0]
 800981e:	d504      	bpl.n	800982a <__sflush_r+0x7a>
 8009820:	1c42      	adds	r2, r0, #1
 8009822:	d101      	bne.n	8009828 <__sflush_r+0x78>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b903      	cbnz	r3, 800982a <__sflush_r+0x7a>
 8009828:	6560      	str	r0, [r4, #84]	; 0x54
 800982a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800982c:	602f      	str	r7, [r5, #0]
 800982e:	2900      	cmp	r1, #0
 8009830:	d0ca      	beq.n	80097c8 <__sflush_r+0x18>
 8009832:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009836:	4299      	cmp	r1, r3
 8009838:	d002      	beq.n	8009840 <__sflush_r+0x90>
 800983a:	4628      	mov	r0, r5
 800983c:	f7ff f9ec 	bl	8008c18 <_free_r>
 8009840:	2000      	movs	r0, #0
 8009842:	6360      	str	r0, [r4, #52]	; 0x34
 8009844:	e7c1      	b.n	80097ca <__sflush_r+0x1a>
 8009846:	2301      	movs	r3, #1
 8009848:	4628      	mov	r0, r5
 800984a:	47b0      	blx	r6
 800984c:	1c41      	adds	r1, r0, #1
 800984e:	d1c8      	bne.n	80097e2 <__sflush_r+0x32>
 8009850:	682b      	ldr	r3, [r5, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0c5      	beq.n	80097e2 <__sflush_r+0x32>
 8009856:	2b1d      	cmp	r3, #29
 8009858:	d001      	beq.n	800985e <__sflush_r+0xae>
 800985a:	2b16      	cmp	r3, #22
 800985c:	d101      	bne.n	8009862 <__sflush_r+0xb2>
 800985e:	602f      	str	r7, [r5, #0]
 8009860:	e7b2      	b.n	80097c8 <__sflush_r+0x18>
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	e7ae      	b.n	80097ca <__sflush_r+0x1a>
 800986c:	690f      	ldr	r7, [r1, #16]
 800986e:	2f00      	cmp	r7, #0
 8009870:	d0aa      	beq.n	80097c8 <__sflush_r+0x18>
 8009872:	0793      	lsls	r3, r2, #30
 8009874:	bf18      	it	ne
 8009876:	2300      	movne	r3, #0
 8009878:	680e      	ldr	r6, [r1, #0]
 800987a:	bf08      	it	eq
 800987c:	694b      	ldreq	r3, [r1, #20]
 800987e:	1bf6      	subs	r6, r6, r7
 8009880:	600f      	str	r7, [r1, #0]
 8009882:	608b      	str	r3, [r1, #8]
 8009884:	2e00      	cmp	r6, #0
 8009886:	dd9f      	ble.n	80097c8 <__sflush_r+0x18>
 8009888:	4633      	mov	r3, r6
 800988a:	463a      	mov	r2, r7
 800988c:	4628      	mov	r0, r5
 800988e:	6a21      	ldr	r1, [r4, #32]
 8009890:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009894:	47e0      	blx	ip
 8009896:	2800      	cmp	r0, #0
 8009898:	dc06      	bgt.n	80098a8 <__sflush_r+0xf8>
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	f04f 30ff 	mov.w	r0, #4294967295
 80098a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	e790      	b.n	80097ca <__sflush_r+0x1a>
 80098a8:	4407      	add	r7, r0
 80098aa:	1a36      	subs	r6, r6, r0
 80098ac:	e7ea      	b.n	8009884 <__sflush_r+0xd4>
 80098ae:	bf00      	nop
 80098b0:	dfbffffe 	.word	0xdfbffffe

080098b4 <_fflush_r>:
 80098b4:	b538      	push	{r3, r4, r5, lr}
 80098b6:	690b      	ldr	r3, [r1, #16]
 80098b8:	4605      	mov	r5, r0
 80098ba:	460c      	mov	r4, r1
 80098bc:	b913      	cbnz	r3, 80098c4 <_fflush_r+0x10>
 80098be:	2500      	movs	r5, #0
 80098c0:	4628      	mov	r0, r5
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	b118      	cbz	r0, 80098ce <_fflush_r+0x1a>
 80098c6:	6a03      	ldr	r3, [r0, #32]
 80098c8:	b90b      	cbnz	r3, 80098ce <_fflush_r+0x1a>
 80098ca:	f7fe fa03 	bl	8007cd4 <__sinit>
 80098ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d0f3      	beq.n	80098be <_fflush_r+0xa>
 80098d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098d8:	07d0      	lsls	r0, r2, #31
 80098da:	d404      	bmi.n	80098e6 <_fflush_r+0x32>
 80098dc:	0599      	lsls	r1, r3, #22
 80098de:	d402      	bmi.n	80098e6 <_fflush_r+0x32>
 80098e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098e2:	f7fe fb0e 	bl	8007f02 <__retarget_lock_acquire_recursive>
 80098e6:	4628      	mov	r0, r5
 80098e8:	4621      	mov	r1, r4
 80098ea:	f7ff ff61 	bl	80097b0 <__sflush_r>
 80098ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098f0:	4605      	mov	r5, r0
 80098f2:	07da      	lsls	r2, r3, #31
 80098f4:	d4e4      	bmi.n	80098c0 <_fflush_r+0xc>
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	059b      	lsls	r3, r3, #22
 80098fa:	d4e1      	bmi.n	80098c0 <_fflush_r+0xc>
 80098fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098fe:	f7fe fb01 	bl	8007f04 <__retarget_lock_release_recursive>
 8009902:	e7dd      	b.n	80098c0 <_fflush_r+0xc>

08009904 <memmove>:
 8009904:	4288      	cmp	r0, r1
 8009906:	b510      	push	{r4, lr}
 8009908:	eb01 0402 	add.w	r4, r1, r2
 800990c:	d902      	bls.n	8009914 <memmove+0x10>
 800990e:	4284      	cmp	r4, r0
 8009910:	4623      	mov	r3, r4
 8009912:	d807      	bhi.n	8009924 <memmove+0x20>
 8009914:	1e43      	subs	r3, r0, #1
 8009916:	42a1      	cmp	r1, r4
 8009918:	d008      	beq.n	800992c <memmove+0x28>
 800991a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800991e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009922:	e7f8      	b.n	8009916 <memmove+0x12>
 8009924:	4601      	mov	r1, r0
 8009926:	4402      	add	r2, r0
 8009928:	428a      	cmp	r2, r1
 800992a:	d100      	bne.n	800992e <memmove+0x2a>
 800992c:	bd10      	pop	{r4, pc}
 800992e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009936:	e7f7      	b.n	8009928 <memmove+0x24>

08009938 <_sbrk_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	2300      	movs	r3, #0
 800993c:	4d05      	ldr	r5, [pc, #20]	; (8009954 <_sbrk_r+0x1c>)
 800993e:	4604      	mov	r4, r0
 8009940:	4608      	mov	r0, r1
 8009942:	602b      	str	r3, [r5, #0]
 8009944:	f7f9 f8ec 	bl	8002b20 <_sbrk>
 8009948:	1c43      	adds	r3, r0, #1
 800994a:	d102      	bne.n	8009952 <_sbrk_r+0x1a>
 800994c:	682b      	ldr	r3, [r5, #0]
 800994e:	b103      	cbz	r3, 8009952 <_sbrk_r+0x1a>
 8009950:	6023      	str	r3, [r4, #0]
 8009952:	bd38      	pop	{r3, r4, r5, pc}
 8009954:	200014ec 	.word	0x200014ec

08009958 <__assert_func>:
 8009958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800995a:	4614      	mov	r4, r2
 800995c:	461a      	mov	r2, r3
 800995e:	4b09      	ldr	r3, [pc, #36]	; (8009984 <__assert_func+0x2c>)
 8009960:	4605      	mov	r5, r0
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68d8      	ldr	r0, [r3, #12]
 8009966:	b14c      	cbz	r4, 800997c <__assert_func+0x24>
 8009968:	4b07      	ldr	r3, [pc, #28]	; (8009988 <__assert_func+0x30>)
 800996a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800996e:	9100      	str	r1, [sp, #0]
 8009970:	462b      	mov	r3, r5
 8009972:	4906      	ldr	r1, [pc, #24]	; (800998c <__assert_func+0x34>)
 8009974:	f000 f870 	bl	8009a58 <fiprintf>
 8009978:	f000 f880 	bl	8009a7c <abort>
 800997c:	4b04      	ldr	r3, [pc, #16]	; (8009990 <__assert_func+0x38>)
 800997e:	461c      	mov	r4, r3
 8009980:	e7f3      	b.n	800996a <__assert_func+0x12>
 8009982:	bf00      	nop
 8009984:	2000006c 	.word	0x2000006c
 8009988:	0800a307 	.word	0x0800a307
 800998c:	0800a314 	.word	0x0800a314
 8009990:	0800a342 	.word	0x0800a342

08009994 <_calloc_r>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	fba1 5402 	umull	r5, r4, r1, r2
 800999a:	b934      	cbnz	r4, 80099aa <_calloc_r+0x16>
 800999c:	4629      	mov	r1, r5
 800999e:	f7ff f9ab 	bl	8008cf8 <_malloc_r>
 80099a2:	4606      	mov	r6, r0
 80099a4:	b928      	cbnz	r0, 80099b2 <_calloc_r+0x1e>
 80099a6:	4630      	mov	r0, r6
 80099a8:	bd70      	pop	{r4, r5, r6, pc}
 80099aa:	220c      	movs	r2, #12
 80099ac:	2600      	movs	r6, #0
 80099ae:	6002      	str	r2, [r0, #0]
 80099b0:	e7f9      	b.n	80099a6 <_calloc_r+0x12>
 80099b2:	462a      	mov	r2, r5
 80099b4:	4621      	mov	r1, r4
 80099b6:	f7fe fa26 	bl	8007e06 <memset>
 80099ba:	e7f4      	b.n	80099a6 <_calloc_r+0x12>

080099bc <__ascii_mbtowc>:
 80099bc:	b082      	sub	sp, #8
 80099be:	b901      	cbnz	r1, 80099c2 <__ascii_mbtowc+0x6>
 80099c0:	a901      	add	r1, sp, #4
 80099c2:	b142      	cbz	r2, 80099d6 <__ascii_mbtowc+0x1a>
 80099c4:	b14b      	cbz	r3, 80099da <__ascii_mbtowc+0x1e>
 80099c6:	7813      	ldrb	r3, [r2, #0]
 80099c8:	600b      	str	r3, [r1, #0]
 80099ca:	7812      	ldrb	r2, [r2, #0]
 80099cc:	1e10      	subs	r0, r2, #0
 80099ce:	bf18      	it	ne
 80099d0:	2001      	movne	r0, #1
 80099d2:	b002      	add	sp, #8
 80099d4:	4770      	bx	lr
 80099d6:	4610      	mov	r0, r2
 80099d8:	e7fb      	b.n	80099d2 <__ascii_mbtowc+0x16>
 80099da:	f06f 0001 	mvn.w	r0, #1
 80099de:	e7f8      	b.n	80099d2 <__ascii_mbtowc+0x16>

080099e0 <_realloc_r>:
 80099e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e4:	4680      	mov	r8, r0
 80099e6:	4614      	mov	r4, r2
 80099e8:	460e      	mov	r6, r1
 80099ea:	b921      	cbnz	r1, 80099f6 <_realloc_r+0x16>
 80099ec:	4611      	mov	r1, r2
 80099ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099f2:	f7ff b981 	b.w	8008cf8 <_malloc_r>
 80099f6:	b92a      	cbnz	r2, 8009a04 <_realloc_r+0x24>
 80099f8:	f7ff f90e 	bl	8008c18 <_free_r>
 80099fc:	4625      	mov	r5, r4
 80099fe:	4628      	mov	r0, r5
 8009a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a04:	f000 f841 	bl	8009a8a <_malloc_usable_size_r>
 8009a08:	4284      	cmp	r4, r0
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	d802      	bhi.n	8009a14 <_realloc_r+0x34>
 8009a0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a12:	d812      	bhi.n	8009a3a <_realloc_r+0x5a>
 8009a14:	4621      	mov	r1, r4
 8009a16:	4640      	mov	r0, r8
 8009a18:	f7ff f96e 	bl	8008cf8 <_malloc_r>
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d0ed      	beq.n	80099fe <_realloc_r+0x1e>
 8009a22:	42bc      	cmp	r4, r7
 8009a24:	4622      	mov	r2, r4
 8009a26:	4631      	mov	r1, r6
 8009a28:	bf28      	it	cs
 8009a2a:	463a      	movcs	r2, r7
 8009a2c:	f7fe fa79 	bl	8007f22 <memcpy>
 8009a30:	4631      	mov	r1, r6
 8009a32:	4640      	mov	r0, r8
 8009a34:	f7ff f8f0 	bl	8008c18 <_free_r>
 8009a38:	e7e1      	b.n	80099fe <_realloc_r+0x1e>
 8009a3a:	4635      	mov	r5, r6
 8009a3c:	e7df      	b.n	80099fe <_realloc_r+0x1e>

08009a3e <__ascii_wctomb>:
 8009a3e:	4603      	mov	r3, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	b141      	cbz	r1, 8009a56 <__ascii_wctomb+0x18>
 8009a44:	2aff      	cmp	r2, #255	; 0xff
 8009a46:	d904      	bls.n	8009a52 <__ascii_wctomb+0x14>
 8009a48:	228a      	movs	r2, #138	; 0x8a
 8009a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	4770      	bx	lr
 8009a52:	2001      	movs	r0, #1
 8009a54:	700a      	strb	r2, [r1, #0]
 8009a56:	4770      	bx	lr

08009a58 <fiprintf>:
 8009a58:	b40e      	push	{r1, r2, r3}
 8009a5a:	b503      	push	{r0, r1, lr}
 8009a5c:	4601      	mov	r1, r0
 8009a5e:	ab03      	add	r3, sp, #12
 8009a60:	4805      	ldr	r0, [pc, #20]	; (8009a78 <fiprintf+0x20>)
 8009a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a66:	6800      	ldr	r0, [r0, #0]
 8009a68:	9301      	str	r3, [sp, #4]
 8009a6a:	f000 f83d 	bl	8009ae8 <_vfiprintf_r>
 8009a6e:	b002      	add	sp, #8
 8009a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a74:	b003      	add	sp, #12
 8009a76:	4770      	bx	lr
 8009a78:	2000006c 	.word	0x2000006c

08009a7c <abort>:
 8009a7c:	2006      	movs	r0, #6
 8009a7e:	b508      	push	{r3, lr}
 8009a80:	f000 fa0a 	bl	8009e98 <raise>
 8009a84:	2001      	movs	r0, #1
 8009a86:	f7f8 ffd8 	bl	8002a3a <_exit>

08009a8a <_malloc_usable_size_r>:
 8009a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a8e:	1f18      	subs	r0, r3, #4
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	bfbc      	itt	lt
 8009a94:	580b      	ldrlt	r3, [r1, r0]
 8009a96:	18c0      	addlt	r0, r0, r3
 8009a98:	4770      	bx	lr

08009a9a <__sfputc_r>:
 8009a9a:	6893      	ldr	r3, [r2, #8]
 8009a9c:	b410      	push	{r4}
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	6093      	str	r3, [r2, #8]
 8009aa4:	da07      	bge.n	8009ab6 <__sfputc_r+0x1c>
 8009aa6:	6994      	ldr	r4, [r2, #24]
 8009aa8:	42a3      	cmp	r3, r4
 8009aaa:	db01      	blt.n	8009ab0 <__sfputc_r+0x16>
 8009aac:	290a      	cmp	r1, #10
 8009aae:	d102      	bne.n	8009ab6 <__sfputc_r+0x1c>
 8009ab0:	bc10      	pop	{r4}
 8009ab2:	f000 b933 	b.w	8009d1c <__swbuf_r>
 8009ab6:	6813      	ldr	r3, [r2, #0]
 8009ab8:	1c58      	adds	r0, r3, #1
 8009aba:	6010      	str	r0, [r2, #0]
 8009abc:	7019      	strb	r1, [r3, #0]
 8009abe:	4608      	mov	r0, r1
 8009ac0:	bc10      	pop	{r4}
 8009ac2:	4770      	bx	lr

08009ac4 <__sfputs_r>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460f      	mov	r7, r1
 8009aca:	4614      	mov	r4, r2
 8009acc:	18d5      	adds	r5, r2, r3
 8009ace:	42ac      	cmp	r4, r5
 8009ad0:	d101      	bne.n	8009ad6 <__sfputs_r+0x12>
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	e007      	b.n	8009ae6 <__sfputs_r+0x22>
 8009ad6:	463a      	mov	r2, r7
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ade:	f7ff ffdc 	bl	8009a9a <__sfputc_r>
 8009ae2:	1c43      	adds	r3, r0, #1
 8009ae4:	d1f3      	bne.n	8009ace <__sfputs_r+0xa>
 8009ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ae8 <_vfiprintf_r>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	460d      	mov	r5, r1
 8009aee:	4614      	mov	r4, r2
 8009af0:	4698      	mov	r8, r3
 8009af2:	4606      	mov	r6, r0
 8009af4:	b09d      	sub	sp, #116	; 0x74
 8009af6:	b118      	cbz	r0, 8009b00 <_vfiprintf_r+0x18>
 8009af8:	6a03      	ldr	r3, [r0, #32]
 8009afa:	b90b      	cbnz	r3, 8009b00 <_vfiprintf_r+0x18>
 8009afc:	f7fe f8ea 	bl	8007cd4 <__sinit>
 8009b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b02:	07d9      	lsls	r1, r3, #31
 8009b04:	d405      	bmi.n	8009b12 <_vfiprintf_r+0x2a>
 8009b06:	89ab      	ldrh	r3, [r5, #12]
 8009b08:	059a      	lsls	r2, r3, #22
 8009b0a:	d402      	bmi.n	8009b12 <_vfiprintf_r+0x2a>
 8009b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b0e:	f7fe f9f8 	bl	8007f02 <__retarget_lock_acquire_recursive>
 8009b12:	89ab      	ldrh	r3, [r5, #12]
 8009b14:	071b      	lsls	r3, r3, #28
 8009b16:	d501      	bpl.n	8009b1c <_vfiprintf_r+0x34>
 8009b18:	692b      	ldr	r3, [r5, #16]
 8009b1a:	b99b      	cbnz	r3, 8009b44 <_vfiprintf_r+0x5c>
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f000 f93a 	bl	8009d98 <__swsetup_r>
 8009b24:	b170      	cbz	r0, 8009b44 <_vfiprintf_r+0x5c>
 8009b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b28:	07dc      	lsls	r4, r3, #31
 8009b2a:	d504      	bpl.n	8009b36 <_vfiprintf_r+0x4e>
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b30:	b01d      	add	sp, #116	; 0x74
 8009b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b36:	89ab      	ldrh	r3, [r5, #12]
 8009b38:	0598      	lsls	r0, r3, #22
 8009b3a:	d4f7      	bmi.n	8009b2c <_vfiprintf_r+0x44>
 8009b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b3e:	f7fe f9e1 	bl	8007f04 <__retarget_lock_release_recursive>
 8009b42:	e7f3      	b.n	8009b2c <_vfiprintf_r+0x44>
 8009b44:	2300      	movs	r3, #0
 8009b46:	9309      	str	r3, [sp, #36]	; 0x24
 8009b48:	2320      	movs	r3, #32
 8009b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b4e:	2330      	movs	r3, #48	; 0x30
 8009b50:	f04f 0901 	mov.w	r9, #1
 8009b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b58:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009d08 <_vfiprintf_r+0x220>
 8009b5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b60:	4623      	mov	r3, r4
 8009b62:	469a      	mov	sl, r3
 8009b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b68:	b10a      	cbz	r2, 8009b6e <_vfiprintf_r+0x86>
 8009b6a:	2a25      	cmp	r2, #37	; 0x25
 8009b6c:	d1f9      	bne.n	8009b62 <_vfiprintf_r+0x7a>
 8009b6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b72:	d00b      	beq.n	8009b8c <_vfiprintf_r+0xa4>
 8009b74:	465b      	mov	r3, fp
 8009b76:	4622      	mov	r2, r4
 8009b78:	4629      	mov	r1, r5
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	f7ff ffa2 	bl	8009ac4 <__sfputs_r>
 8009b80:	3001      	adds	r0, #1
 8009b82:	f000 80a9 	beq.w	8009cd8 <_vfiprintf_r+0x1f0>
 8009b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b88:	445a      	add	r2, fp
 8009b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 80a1 	beq.w	8009cd8 <_vfiprintf_r+0x1f0>
 8009b96:	2300      	movs	r3, #0
 8009b98:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ba0:	f10a 0a01 	add.w	sl, sl, #1
 8009ba4:	9304      	str	r3, [sp, #16]
 8009ba6:	9307      	str	r3, [sp, #28]
 8009ba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bac:	931a      	str	r3, [sp, #104]	; 0x68
 8009bae:	4654      	mov	r4, sl
 8009bb0:	2205      	movs	r2, #5
 8009bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb6:	4854      	ldr	r0, [pc, #336]	; (8009d08 <_vfiprintf_r+0x220>)
 8009bb8:	f7fe f9a5 	bl	8007f06 <memchr>
 8009bbc:	9a04      	ldr	r2, [sp, #16]
 8009bbe:	b9d8      	cbnz	r0, 8009bf8 <_vfiprintf_r+0x110>
 8009bc0:	06d1      	lsls	r1, r2, #27
 8009bc2:	bf44      	itt	mi
 8009bc4:	2320      	movmi	r3, #32
 8009bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bca:	0713      	lsls	r3, r2, #28
 8009bcc:	bf44      	itt	mi
 8009bce:	232b      	movmi	r3, #43	; 0x2b
 8009bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bda:	d015      	beq.n	8009c08 <_vfiprintf_r+0x120>
 8009bdc:	4654      	mov	r4, sl
 8009bde:	2000      	movs	r0, #0
 8009be0:	f04f 0c0a 	mov.w	ip, #10
 8009be4:	9a07      	ldr	r2, [sp, #28]
 8009be6:	4621      	mov	r1, r4
 8009be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bec:	3b30      	subs	r3, #48	; 0x30
 8009bee:	2b09      	cmp	r3, #9
 8009bf0:	d94d      	bls.n	8009c8e <_vfiprintf_r+0x1a6>
 8009bf2:	b1b0      	cbz	r0, 8009c22 <_vfiprintf_r+0x13a>
 8009bf4:	9207      	str	r2, [sp, #28]
 8009bf6:	e014      	b.n	8009c22 <_vfiprintf_r+0x13a>
 8009bf8:	eba0 0308 	sub.w	r3, r0, r8
 8009bfc:	fa09 f303 	lsl.w	r3, r9, r3
 8009c00:	4313      	orrs	r3, r2
 8009c02:	46a2      	mov	sl, r4
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	e7d2      	b.n	8009bae <_vfiprintf_r+0xc6>
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	1d19      	adds	r1, r3, #4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	9103      	str	r1, [sp, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	bfbb      	ittet	lt
 8009c14:	425b      	neglt	r3, r3
 8009c16:	f042 0202 	orrlt.w	r2, r2, #2
 8009c1a:	9307      	strge	r3, [sp, #28]
 8009c1c:	9307      	strlt	r3, [sp, #28]
 8009c1e:	bfb8      	it	lt
 8009c20:	9204      	strlt	r2, [sp, #16]
 8009c22:	7823      	ldrb	r3, [r4, #0]
 8009c24:	2b2e      	cmp	r3, #46	; 0x2e
 8009c26:	d10c      	bne.n	8009c42 <_vfiprintf_r+0x15a>
 8009c28:	7863      	ldrb	r3, [r4, #1]
 8009c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c2c:	d134      	bne.n	8009c98 <_vfiprintf_r+0x1b0>
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	3402      	adds	r4, #2
 8009c32:	1d1a      	adds	r2, r3, #4
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	9203      	str	r2, [sp, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bfb8      	it	lt
 8009c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c40:	9305      	str	r3, [sp, #20]
 8009c42:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d0c <_vfiprintf_r+0x224>
 8009c46:	2203      	movs	r2, #3
 8009c48:	4650      	mov	r0, sl
 8009c4a:	7821      	ldrb	r1, [r4, #0]
 8009c4c:	f7fe f95b 	bl	8007f06 <memchr>
 8009c50:	b138      	cbz	r0, 8009c62 <_vfiprintf_r+0x17a>
 8009c52:	2240      	movs	r2, #64	; 0x40
 8009c54:	9b04      	ldr	r3, [sp, #16]
 8009c56:	eba0 000a 	sub.w	r0, r0, sl
 8009c5a:	4082      	lsls	r2, r0
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	3401      	adds	r4, #1
 8009c60:	9304      	str	r3, [sp, #16]
 8009c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c66:	2206      	movs	r2, #6
 8009c68:	4829      	ldr	r0, [pc, #164]	; (8009d10 <_vfiprintf_r+0x228>)
 8009c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c6e:	f7fe f94a 	bl	8007f06 <memchr>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d03f      	beq.n	8009cf6 <_vfiprintf_r+0x20e>
 8009c76:	4b27      	ldr	r3, [pc, #156]	; (8009d14 <_vfiprintf_r+0x22c>)
 8009c78:	bb1b      	cbnz	r3, 8009cc2 <_vfiprintf_r+0x1da>
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	3307      	adds	r3, #7
 8009c7e:	f023 0307 	bic.w	r3, r3, #7
 8009c82:	3308      	adds	r3, #8
 8009c84:	9303      	str	r3, [sp, #12]
 8009c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c88:	443b      	add	r3, r7
 8009c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c8c:	e768      	b.n	8009b60 <_vfiprintf_r+0x78>
 8009c8e:	460c      	mov	r4, r1
 8009c90:	2001      	movs	r0, #1
 8009c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c96:	e7a6      	b.n	8009be6 <_vfiprintf_r+0xfe>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f04f 0c0a 	mov.w	ip, #10
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	3401      	adds	r4, #1
 8009ca2:	9305      	str	r3, [sp, #20]
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009caa:	3a30      	subs	r2, #48	; 0x30
 8009cac:	2a09      	cmp	r2, #9
 8009cae:	d903      	bls.n	8009cb8 <_vfiprintf_r+0x1d0>
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d0c6      	beq.n	8009c42 <_vfiprintf_r+0x15a>
 8009cb4:	9105      	str	r1, [sp, #20]
 8009cb6:	e7c4      	b.n	8009c42 <_vfiprintf_r+0x15a>
 8009cb8:	4604      	mov	r4, r0
 8009cba:	2301      	movs	r3, #1
 8009cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cc0:	e7f0      	b.n	8009ca4 <_vfiprintf_r+0x1bc>
 8009cc2:	ab03      	add	r3, sp, #12
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	462a      	mov	r2, r5
 8009cc8:	4630      	mov	r0, r6
 8009cca:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <_vfiprintf_r+0x230>)
 8009ccc:	a904      	add	r1, sp, #16
 8009cce:	f7fd fbb3 	bl	8007438 <_printf_float>
 8009cd2:	4607      	mov	r7, r0
 8009cd4:	1c78      	adds	r0, r7, #1
 8009cd6:	d1d6      	bne.n	8009c86 <_vfiprintf_r+0x19e>
 8009cd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cda:	07d9      	lsls	r1, r3, #31
 8009cdc:	d405      	bmi.n	8009cea <_vfiprintf_r+0x202>
 8009cde:	89ab      	ldrh	r3, [r5, #12]
 8009ce0:	059a      	lsls	r2, r3, #22
 8009ce2:	d402      	bmi.n	8009cea <_vfiprintf_r+0x202>
 8009ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ce6:	f7fe f90d 	bl	8007f04 <__retarget_lock_release_recursive>
 8009cea:	89ab      	ldrh	r3, [r5, #12]
 8009cec:	065b      	lsls	r3, r3, #25
 8009cee:	f53f af1d 	bmi.w	8009b2c <_vfiprintf_r+0x44>
 8009cf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cf4:	e71c      	b.n	8009b30 <_vfiprintf_r+0x48>
 8009cf6:	ab03      	add	r3, sp, #12
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	462a      	mov	r2, r5
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <_vfiprintf_r+0x230>)
 8009d00:	a904      	add	r1, sp, #16
 8009d02:	f7fd fe39 	bl	8007978 <_printf_i>
 8009d06:	e7e4      	b.n	8009cd2 <_vfiprintf_r+0x1ea>
 8009d08:	0800a2ec 	.word	0x0800a2ec
 8009d0c:	0800a2f2 	.word	0x0800a2f2
 8009d10:	0800a2f6 	.word	0x0800a2f6
 8009d14:	08007439 	.word	0x08007439
 8009d18:	08009ac5 	.word	0x08009ac5

08009d1c <__swbuf_r>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	460e      	mov	r6, r1
 8009d20:	4614      	mov	r4, r2
 8009d22:	4605      	mov	r5, r0
 8009d24:	b118      	cbz	r0, 8009d2e <__swbuf_r+0x12>
 8009d26:	6a03      	ldr	r3, [r0, #32]
 8009d28:	b90b      	cbnz	r3, 8009d2e <__swbuf_r+0x12>
 8009d2a:	f7fd ffd3 	bl	8007cd4 <__sinit>
 8009d2e:	69a3      	ldr	r3, [r4, #24]
 8009d30:	60a3      	str	r3, [r4, #8]
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	071a      	lsls	r2, r3, #28
 8009d36:	d525      	bpl.n	8009d84 <__swbuf_r+0x68>
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	b31b      	cbz	r3, 8009d84 <__swbuf_r+0x68>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	6922      	ldr	r2, [r4, #16]
 8009d40:	b2f6      	uxtb	r6, r6
 8009d42:	1a98      	subs	r0, r3, r2
 8009d44:	6963      	ldr	r3, [r4, #20]
 8009d46:	4637      	mov	r7, r6
 8009d48:	4283      	cmp	r3, r0
 8009d4a:	dc04      	bgt.n	8009d56 <__swbuf_r+0x3a>
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f7ff fdb0 	bl	80098b4 <_fflush_r>
 8009d54:	b9e0      	cbnz	r0, 8009d90 <__swbuf_r+0x74>
 8009d56:	68a3      	ldr	r3, [r4, #8]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	60a3      	str	r3, [r4, #8]
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	6022      	str	r2, [r4, #0]
 8009d62:	701e      	strb	r6, [r3, #0]
 8009d64:	6962      	ldr	r2, [r4, #20]
 8009d66:	1c43      	adds	r3, r0, #1
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d004      	beq.n	8009d76 <__swbuf_r+0x5a>
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	07db      	lsls	r3, r3, #31
 8009d70:	d506      	bpl.n	8009d80 <__swbuf_r+0x64>
 8009d72:	2e0a      	cmp	r6, #10
 8009d74:	d104      	bne.n	8009d80 <__swbuf_r+0x64>
 8009d76:	4621      	mov	r1, r4
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f7ff fd9b 	bl	80098b4 <_fflush_r>
 8009d7e:	b938      	cbnz	r0, 8009d90 <__swbuf_r+0x74>
 8009d80:	4638      	mov	r0, r7
 8009d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d84:	4621      	mov	r1, r4
 8009d86:	4628      	mov	r0, r5
 8009d88:	f000 f806 	bl	8009d98 <__swsetup_r>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d0d5      	beq.n	8009d3c <__swbuf_r+0x20>
 8009d90:	f04f 37ff 	mov.w	r7, #4294967295
 8009d94:	e7f4      	b.n	8009d80 <__swbuf_r+0x64>
	...

08009d98 <__swsetup_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	4b2a      	ldr	r3, [pc, #168]	; (8009e44 <__swsetup_r+0xac>)
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	6818      	ldr	r0, [r3, #0]
 8009da0:	460c      	mov	r4, r1
 8009da2:	b118      	cbz	r0, 8009dac <__swsetup_r+0x14>
 8009da4:	6a03      	ldr	r3, [r0, #32]
 8009da6:	b90b      	cbnz	r3, 8009dac <__swsetup_r+0x14>
 8009da8:	f7fd ff94 	bl	8007cd4 <__sinit>
 8009dac:	89a3      	ldrh	r3, [r4, #12]
 8009dae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009db2:	0718      	lsls	r0, r3, #28
 8009db4:	d422      	bmi.n	8009dfc <__swsetup_r+0x64>
 8009db6:	06d9      	lsls	r1, r3, #27
 8009db8:	d407      	bmi.n	8009dca <__swsetup_r+0x32>
 8009dba:	2309      	movs	r3, #9
 8009dbc:	602b      	str	r3, [r5, #0]
 8009dbe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc6:	81a3      	strh	r3, [r4, #12]
 8009dc8:	e034      	b.n	8009e34 <__swsetup_r+0x9c>
 8009dca:	0758      	lsls	r0, r3, #29
 8009dcc:	d512      	bpl.n	8009df4 <__swsetup_r+0x5c>
 8009dce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dd0:	b141      	cbz	r1, 8009de4 <__swsetup_r+0x4c>
 8009dd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dd6:	4299      	cmp	r1, r3
 8009dd8:	d002      	beq.n	8009de0 <__swsetup_r+0x48>
 8009dda:	4628      	mov	r0, r5
 8009ddc:	f7fe ff1c 	bl	8008c18 <_free_r>
 8009de0:	2300      	movs	r3, #0
 8009de2:	6363      	str	r3, [r4, #52]	; 0x34
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	2300      	movs	r3, #0
 8009dee:	6063      	str	r3, [r4, #4]
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f043 0308 	orr.w	r3, r3, #8
 8009dfa:	81a3      	strh	r3, [r4, #12]
 8009dfc:	6923      	ldr	r3, [r4, #16]
 8009dfe:	b94b      	cbnz	r3, 8009e14 <__swsetup_r+0x7c>
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e0a:	d003      	beq.n	8009e14 <__swsetup_r+0x7c>
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f000 f883 	bl	8009f1a <__smakebuf_r>
 8009e14:	89a0      	ldrh	r0, [r4, #12]
 8009e16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e1a:	f010 0301 	ands.w	r3, r0, #1
 8009e1e:	d00a      	beq.n	8009e36 <__swsetup_r+0x9e>
 8009e20:	2300      	movs	r3, #0
 8009e22:	60a3      	str	r3, [r4, #8]
 8009e24:	6963      	ldr	r3, [r4, #20]
 8009e26:	425b      	negs	r3, r3
 8009e28:	61a3      	str	r3, [r4, #24]
 8009e2a:	6923      	ldr	r3, [r4, #16]
 8009e2c:	b943      	cbnz	r3, 8009e40 <__swsetup_r+0xa8>
 8009e2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e32:	d1c4      	bne.n	8009dbe <__swsetup_r+0x26>
 8009e34:	bd38      	pop	{r3, r4, r5, pc}
 8009e36:	0781      	lsls	r1, r0, #30
 8009e38:	bf58      	it	pl
 8009e3a:	6963      	ldrpl	r3, [r4, #20]
 8009e3c:	60a3      	str	r3, [r4, #8]
 8009e3e:	e7f4      	b.n	8009e2a <__swsetup_r+0x92>
 8009e40:	2000      	movs	r0, #0
 8009e42:	e7f7      	b.n	8009e34 <__swsetup_r+0x9c>
 8009e44:	2000006c 	.word	0x2000006c

08009e48 <_raise_r>:
 8009e48:	291f      	cmp	r1, #31
 8009e4a:	b538      	push	{r3, r4, r5, lr}
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	460d      	mov	r5, r1
 8009e50:	d904      	bls.n	8009e5c <_raise_r+0x14>
 8009e52:	2316      	movs	r3, #22
 8009e54:	6003      	str	r3, [r0, #0]
 8009e56:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009e5e:	b112      	cbz	r2, 8009e66 <_raise_r+0x1e>
 8009e60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e64:	b94b      	cbnz	r3, 8009e7a <_raise_r+0x32>
 8009e66:	4620      	mov	r0, r4
 8009e68:	f000 f830 	bl	8009ecc <_getpid_r>
 8009e6c:	462a      	mov	r2, r5
 8009e6e:	4601      	mov	r1, r0
 8009e70:	4620      	mov	r0, r4
 8009e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e76:	f000 b817 	b.w	8009ea8 <_kill_r>
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d00a      	beq.n	8009e94 <_raise_r+0x4c>
 8009e7e:	1c59      	adds	r1, r3, #1
 8009e80:	d103      	bne.n	8009e8a <_raise_r+0x42>
 8009e82:	2316      	movs	r3, #22
 8009e84:	6003      	str	r3, [r0, #0]
 8009e86:	2001      	movs	r0, #1
 8009e88:	e7e7      	b.n	8009e5a <_raise_r+0x12>
 8009e8a:	2400      	movs	r4, #0
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e92:	4798      	blx	r3
 8009e94:	2000      	movs	r0, #0
 8009e96:	e7e0      	b.n	8009e5a <_raise_r+0x12>

08009e98 <raise>:
 8009e98:	4b02      	ldr	r3, [pc, #8]	; (8009ea4 <raise+0xc>)
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	f7ff bfd3 	b.w	8009e48 <_raise_r>
 8009ea2:	bf00      	nop
 8009ea4:	2000006c 	.word	0x2000006c

08009ea8 <_kill_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	2300      	movs	r3, #0
 8009eac:	4d06      	ldr	r5, [pc, #24]	; (8009ec8 <_kill_r+0x20>)
 8009eae:	4604      	mov	r4, r0
 8009eb0:	4608      	mov	r0, r1
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	602b      	str	r3, [r5, #0]
 8009eb6:	f7f8 fdb0 	bl	8002a1a <_kill>
 8009eba:	1c43      	adds	r3, r0, #1
 8009ebc:	d102      	bne.n	8009ec4 <_kill_r+0x1c>
 8009ebe:	682b      	ldr	r3, [r5, #0]
 8009ec0:	b103      	cbz	r3, 8009ec4 <_kill_r+0x1c>
 8009ec2:	6023      	str	r3, [r4, #0]
 8009ec4:	bd38      	pop	{r3, r4, r5, pc}
 8009ec6:	bf00      	nop
 8009ec8:	200014ec 	.word	0x200014ec

08009ecc <_getpid_r>:
 8009ecc:	f7f8 bd9e 	b.w	8002a0c <_getpid>

08009ed0 <__swhatbuf_r>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed8:	4615      	mov	r5, r2
 8009eda:	2900      	cmp	r1, #0
 8009edc:	461e      	mov	r6, r3
 8009ede:	b096      	sub	sp, #88	; 0x58
 8009ee0:	da0c      	bge.n	8009efc <__swhatbuf_r+0x2c>
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009eea:	bf0c      	ite	eq
 8009eec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009ef0:	2340      	movne	r3, #64	; 0x40
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	6031      	str	r1, [r6, #0]
 8009ef6:	602b      	str	r3, [r5, #0]
 8009ef8:	b016      	add	sp, #88	; 0x58
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	466a      	mov	r2, sp
 8009efe:	f000 f849 	bl	8009f94 <_fstat_r>
 8009f02:	2800      	cmp	r0, #0
 8009f04:	dbed      	blt.n	8009ee2 <__swhatbuf_r+0x12>
 8009f06:	9901      	ldr	r1, [sp, #4]
 8009f08:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009f0c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009f10:	4259      	negs	r1, r3
 8009f12:	4159      	adcs	r1, r3
 8009f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f18:	e7eb      	b.n	8009ef2 <__swhatbuf_r+0x22>

08009f1a <__smakebuf_r>:
 8009f1a:	898b      	ldrh	r3, [r1, #12]
 8009f1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f1e:	079d      	lsls	r5, r3, #30
 8009f20:	4606      	mov	r6, r0
 8009f22:	460c      	mov	r4, r1
 8009f24:	d507      	bpl.n	8009f36 <__smakebuf_r+0x1c>
 8009f26:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	6123      	str	r3, [r4, #16]
 8009f2e:	2301      	movs	r3, #1
 8009f30:	6163      	str	r3, [r4, #20]
 8009f32:	b002      	add	sp, #8
 8009f34:	bd70      	pop	{r4, r5, r6, pc}
 8009f36:	466a      	mov	r2, sp
 8009f38:	ab01      	add	r3, sp, #4
 8009f3a:	f7ff ffc9 	bl	8009ed0 <__swhatbuf_r>
 8009f3e:	9900      	ldr	r1, [sp, #0]
 8009f40:	4605      	mov	r5, r0
 8009f42:	4630      	mov	r0, r6
 8009f44:	f7fe fed8 	bl	8008cf8 <_malloc_r>
 8009f48:	b948      	cbnz	r0, 8009f5e <__smakebuf_r+0x44>
 8009f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f4e:	059a      	lsls	r2, r3, #22
 8009f50:	d4ef      	bmi.n	8009f32 <__smakebuf_r+0x18>
 8009f52:	f023 0303 	bic.w	r3, r3, #3
 8009f56:	f043 0302 	orr.w	r3, r3, #2
 8009f5a:	81a3      	strh	r3, [r4, #12]
 8009f5c:	e7e3      	b.n	8009f26 <__smakebuf_r+0xc>
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	6020      	str	r0, [r4, #0]
 8009f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f66:	81a3      	strh	r3, [r4, #12]
 8009f68:	9b00      	ldr	r3, [sp, #0]
 8009f6a:	6120      	str	r0, [r4, #16]
 8009f6c:	6163      	str	r3, [r4, #20]
 8009f6e:	9b01      	ldr	r3, [sp, #4]
 8009f70:	b15b      	cbz	r3, 8009f8a <__smakebuf_r+0x70>
 8009f72:	4630      	mov	r0, r6
 8009f74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f78:	f000 f81e 	bl	8009fb8 <_isatty_r>
 8009f7c:	b128      	cbz	r0, 8009f8a <__smakebuf_r+0x70>
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	f023 0303 	bic.w	r3, r3, #3
 8009f84:	f043 0301 	orr.w	r3, r3, #1
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	431d      	orrs	r5, r3
 8009f8e:	81a5      	strh	r5, [r4, #12]
 8009f90:	e7cf      	b.n	8009f32 <__smakebuf_r+0x18>
	...

08009f94 <_fstat_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	2300      	movs	r3, #0
 8009f98:	4d06      	ldr	r5, [pc, #24]	; (8009fb4 <_fstat_r+0x20>)
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	602b      	str	r3, [r5, #0]
 8009fa2:	f7f8 fd98 	bl	8002ad6 <_fstat>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d102      	bne.n	8009fb0 <_fstat_r+0x1c>
 8009faa:	682b      	ldr	r3, [r5, #0]
 8009fac:	b103      	cbz	r3, 8009fb0 <_fstat_r+0x1c>
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	bd38      	pop	{r3, r4, r5, pc}
 8009fb2:	bf00      	nop
 8009fb4:	200014ec 	.word	0x200014ec

08009fb8 <_isatty_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	2300      	movs	r3, #0
 8009fbc:	4d05      	ldr	r5, [pc, #20]	; (8009fd4 <_isatty_r+0x1c>)
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	602b      	str	r3, [r5, #0]
 8009fc4:	f7f8 fd96 	bl	8002af4 <_isatty>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	d102      	bne.n	8009fd2 <_isatty_r+0x1a>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	b103      	cbz	r3, 8009fd2 <_isatty_r+0x1a>
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	bd38      	pop	{r3, r4, r5, pc}
 8009fd4:	200014ec 	.word	0x200014ec

08009fd8 <_init>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	bf00      	nop
 8009fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fde:	bc08      	pop	{r3}
 8009fe0:	469e      	mov	lr, r3
 8009fe2:	4770      	bx	lr

08009fe4 <_fini>:
 8009fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe6:	bf00      	nop
 8009fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fea:	bc08      	pop	{r3}
 8009fec:	469e      	mov	lr, r3
 8009fee:	4770      	bx	lr
