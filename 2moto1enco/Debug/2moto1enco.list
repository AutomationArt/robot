
2moto1enco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d4  080044d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080044d4  080044d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044d4  080044d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  080044e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080044e8  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b5e7  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd5  00000000  00000000  0002b65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  0002d438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000991  00000000  00000000  0002e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e3b  00000000  00000000  0002ea29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc2d  00000000  00000000  00046864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a1b0  00000000  00000000  00054491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003698  00000000  00000000  000de644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e1cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004498 	.word	0x08004498

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004498 	.word	0x08004498

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_d2f>:
 80005d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005e0:	bf24      	itt	cs
 80005e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005ea:	d90d      	bls.n	8000608 <__aeabi_d2f+0x30>
 80005ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000600:	bf08      	it	eq
 8000602:	f020 0001 	biceq.w	r0, r0, #1
 8000606:	4770      	bx	lr
 8000608:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800060c:	d121      	bne.n	8000652 <__aeabi_d2f+0x7a>
 800060e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000612:	bfbc      	itt	lt
 8000614:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000618:	4770      	bxlt	lr
 800061a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000622:	f1c2 0218 	rsb	r2, r2, #24
 8000626:	f1c2 0c20 	rsb	ip, r2, #32
 800062a:	fa10 f30c 	lsls.w	r3, r0, ip
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	bf18      	it	ne
 8000634:	f040 0001 	orrne.w	r0, r0, #1
 8000638:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800063c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000640:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000644:	ea40 000c 	orr.w	r0, r0, ip
 8000648:	fa23 f302 	lsr.w	r3, r3, r2
 800064c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000650:	e7cc      	b.n	80005ec <__aeabi_d2f+0x14>
 8000652:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000656:	d107      	bne.n	8000668 <__aeabi_d2f+0x90>
 8000658:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800065c:	bf1e      	ittt	ne
 800065e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000662:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000666:	4770      	bxne	lr
 8000668:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800066c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_frsub>:
 8000678:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800067c:	e002      	b.n	8000684 <__addsf3>
 800067e:	bf00      	nop

08000680 <__aeabi_fsub>:
 8000680:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000684 <__addsf3>:
 8000684:	0042      	lsls	r2, r0, #1
 8000686:	bf1f      	itttt	ne
 8000688:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800068c:	ea92 0f03 	teqne	r2, r3
 8000690:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000694:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000698:	d06a      	beq.n	8000770 <__addsf3+0xec>
 800069a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800069e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006a2:	bfc1      	itttt	gt
 80006a4:	18d2      	addgt	r2, r2, r3
 80006a6:	4041      	eorgt	r1, r0
 80006a8:	4048      	eorgt	r0, r1
 80006aa:	4041      	eorgt	r1, r0
 80006ac:	bfb8      	it	lt
 80006ae:	425b      	neglt	r3, r3
 80006b0:	2b19      	cmp	r3, #25
 80006b2:	bf88      	it	hi
 80006b4:	4770      	bxhi	lr
 80006b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4240      	negne	r0, r0
 80006c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006d2:	bf18      	it	ne
 80006d4:	4249      	negne	r1, r1
 80006d6:	ea92 0f03 	teq	r2, r3
 80006da:	d03f      	beq.n	800075c <__addsf3+0xd8>
 80006dc:	f1a2 0201 	sub.w	r2, r2, #1
 80006e0:	fa41 fc03 	asr.w	ip, r1, r3
 80006e4:	eb10 000c 	adds.w	r0, r0, ip
 80006e8:	f1c3 0320 	rsb	r3, r3, #32
 80006ec:	fa01 f103 	lsl.w	r1, r1, r3
 80006f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006f4:	d502      	bpl.n	80006fc <__addsf3+0x78>
 80006f6:	4249      	negs	r1, r1
 80006f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000700:	d313      	bcc.n	800072a <__addsf3+0xa6>
 8000702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000706:	d306      	bcc.n	8000716 <__addsf3+0x92>
 8000708:	0840      	lsrs	r0, r0, #1
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	f102 0201 	add.w	r2, r2, #1
 8000712:	2afe      	cmp	r2, #254	; 0xfe
 8000714:	d251      	bcs.n	80007ba <__addsf3+0x136>
 8000716:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800071a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800071e:	bf08      	it	eq
 8000720:	f020 0001 	biceq.w	r0, r0, #1
 8000724:	ea40 0003 	orr.w	r0, r0, r3
 8000728:	4770      	bx	lr
 800072a:	0049      	lsls	r1, r1, #1
 800072c:	eb40 0000 	adc.w	r0, r0, r0
 8000730:	3a01      	subs	r2, #1
 8000732:	bf28      	it	cs
 8000734:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000738:	d2ed      	bcs.n	8000716 <__addsf3+0x92>
 800073a:	fab0 fc80 	clz	ip, r0
 800073e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000742:	ebb2 020c 	subs.w	r2, r2, ip
 8000746:	fa00 f00c 	lsl.w	r0, r0, ip
 800074a:	bfaa      	itet	ge
 800074c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000750:	4252      	neglt	r2, r2
 8000752:	4318      	orrge	r0, r3
 8000754:	bfbc      	itt	lt
 8000756:	40d0      	lsrlt	r0, r2
 8000758:	4318      	orrlt	r0, r3
 800075a:	4770      	bx	lr
 800075c:	f092 0f00 	teq	r2, #0
 8000760:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000764:	bf06      	itte	eq
 8000766:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800076a:	3201      	addeq	r2, #1
 800076c:	3b01      	subne	r3, #1
 800076e:	e7b5      	b.n	80006dc <__addsf3+0x58>
 8000770:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000774:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000778:	bf18      	it	ne
 800077a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077e:	d021      	beq.n	80007c4 <__addsf3+0x140>
 8000780:	ea92 0f03 	teq	r2, r3
 8000784:	d004      	beq.n	8000790 <__addsf3+0x10c>
 8000786:	f092 0f00 	teq	r2, #0
 800078a:	bf08      	it	eq
 800078c:	4608      	moveq	r0, r1
 800078e:	4770      	bx	lr
 8000790:	ea90 0f01 	teq	r0, r1
 8000794:	bf1c      	itt	ne
 8000796:	2000      	movne	r0, #0
 8000798:	4770      	bxne	lr
 800079a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800079e:	d104      	bne.n	80007aa <__addsf3+0x126>
 80007a0:	0040      	lsls	r0, r0, #1
 80007a2:	bf28      	it	cs
 80007a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007a8:	4770      	bx	lr
 80007aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007ae:	bf3c      	itt	cc
 80007b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007b4:	4770      	bxcc	lr
 80007b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c2:	4770      	bx	lr
 80007c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007c8:	bf16      	itet	ne
 80007ca:	4608      	movne	r0, r1
 80007cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007d0:	4601      	movne	r1, r0
 80007d2:	0242      	lsls	r2, r0, #9
 80007d4:	bf06      	itte	eq
 80007d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007da:	ea90 0f01 	teqeq	r0, r1
 80007de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_ui2f>:
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e004      	b.n	80007f4 <__aeabi_i2f+0x8>
 80007ea:	bf00      	nop

080007ec <__aeabi_i2f>:
 80007ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	ea5f 0c00 	movs.w	ip, r0
 80007f8:	bf08      	it	eq
 80007fa:	4770      	bxeq	lr
 80007fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000800:	4601      	mov	r1, r0
 8000802:	f04f 0000 	mov.w	r0, #0
 8000806:	e01c      	b.n	8000842 <__aeabi_l2f+0x2a>

08000808 <__aeabi_ul2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	e00a      	b.n	800082c <__aeabi_l2f+0x14>
 8000816:	bf00      	nop

08000818 <__aeabi_l2f>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000824:	d502      	bpl.n	800082c <__aeabi_l2f+0x14>
 8000826:	4240      	negs	r0, r0
 8000828:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082c:	ea5f 0c01 	movs.w	ip, r1
 8000830:	bf02      	ittt	eq
 8000832:	4684      	moveq	ip, r0
 8000834:	4601      	moveq	r1, r0
 8000836:	2000      	moveq	r0, #0
 8000838:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800083c:	bf08      	it	eq
 800083e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000842:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000846:	fabc f28c 	clz	r2, ip
 800084a:	3a08      	subs	r2, #8
 800084c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000850:	db10      	blt.n	8000874 <__aeabi_l2f+0x5c>
 8000852:	fa01 fc02 	lsl.w	ip, r1, r2
 8000856:	4463      	add	r3, ip
 8000858:	fa00 fc02 	lsl.w	ip, r0, r2
 800085c:	f1c2 0220 	rsb	r2, r2, #32
 8000860:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000864:	fa20 f202 	lsr.w	r2, r0, r2
 8000868:	eb43 0002 	adc.w	r0, r3, r2
 800086c:	bf08      	it	eq
 800086e:	f020 0001 	biceq.w	r0, r0, #1
 8000872:	4770      	bx	lr
 8000874:	f102 0220 	add.w	r2, r2, #32
 8000878:	fa01 fc02 	lsl.w	ip, r1, r2
 800087c:	f1c2 0220 	rsb	r2, r2, #32
 8000880:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000884:	fa21 f202 	lsr.w	r2, r1, r2
 8000888:	eb43 0002 	adc.w	r0, r3, r2
 800088c:	bf08      	it	eq
 800088e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000892:	4770      	bx	lr

08000894 <__aeabi_fmul>:
 8000894:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000898:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800089c:	bf1e      	ittt	ne
 800089e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008a2:	ea92 0f0c 	teqne	r2, ip
 80008a6:	ea93 0f0c 	teqne	r3, ip
 80008aa:	d06f      	beq.n	800098c <__aeabi_fmul+0xf8>
 80008ac:	441a      	add	r2, r3
 80008ae:	ea80 0c01 	eor.w	ip, r0, r1
 80008b2:	0240      	lsls	r0, r0, #9
 80008b4:	bf18      	it	ne
 80008b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008ba:	d01e      	beq.n	80008fa <__aeabi_fmul+0x66>
 80008bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008c8:	fba0 3101 	umull	r3, r1, r0, r1
 80008cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008d4:	bf3e      	ittt	cc
 80008d6:	0049      	lslcc	r1, r1, #1
 80008d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008dc:	005b      	lslcc	r3, r3, #1
 80008de:	ea40 0001 	orr.w	r0, r0, r1
 80008e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008e6:	2afd      	cmp	r2, #253	; 0xfd
 80008e8:	d81d      	bhi.n	8000926 <__aeabi_fmul+0x92>
 80008ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008f2:	bf08      	it	eq
 80008f4:	f020 0001 	biceq.w	r0, r0, #1
 80008f8:	4770      	bx	lr
 80008fa:	f090 0f00 	teq	r0, #0
 80008fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000902:	bf08      	it	eq
 8000904:	0249      	lsleq	r1, r1, #9
 8000906:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800090a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800090e:	3a7f      	subs	r2, #127	; 0x7f
 8000910:	bfc2      	ittt	gt
 8000912:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000916:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800091a:	4770      	bxgt	lr
 800091c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	3a01      	subs	r2, #1
 8000926:	dc5d      	bgt.n	80009e4 <__aeabi_fmul+0x150>
 8000928:	f112 0f19 	cmn.w	r2, #25
 800092c:	bfdc      	itt	le
 800092e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000932:	4770      	bxle	lr
 8000934:	f1c2 0200 	rsb	r2, r2, #0
 8000938:	0041      	lsls	r1, r0, #1
 800093a:	fa21 f102 	lsr.w	r1, r1, r2
 800093e:	f1c2 0220 	rsb	r2, r2, #32
 8000942:	fa00 fc02 	lsl.w	ip, r0, r2
 8000946:	ea5f 0031 	movs.w	r0, r1, rrx
 800094a:	f140 0000 	adc.w	r0, r0, #0
 800094e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000952:	bf08      	it	eq
 8000954:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000958:	4770      	bx	lr
 800095a:	f092 0f00 	teq	r2, #0
 800095e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0040      	lsleq	r0, r0, #1
 8000966:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800096a:	3a01      	subeq	r2, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xce>
 800096e:	ea40 000c 	orr.w	r0, r0, ip
 8000972:	f093 0f00 	teq	r3, #0
 8000976:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097a:	bf02      	ittt	eq
 800097c:	0049      	lsleq	r1, r1, #1
 800097e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000982:	3b01      	subeq	r3, #1
 8000984:	d0f9      	beq.n	800097a <__aeabi_fmul+0xe6>
 8000986:	ea41 010c 	orr.w	r1, r1, ip
 800098a:	e78f      	b.n	80008ac <__aeabi_fmul+0x18>
 800098c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000990:	ea92 0f0c 	teq	r2, ip
 8000994:	bf18      	it	ne
 8000996:	ea93 0f0c 	teqne	r3, ip
 800099a:	d00a      	beq.n	80009b2 <__aeabi_fmul+0x11e>
 800099c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009a0:	bf18      	it	ne
 80009a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009a6:	d1d8      	bne.n	800095a <__aeabi_fmul+0xc6>
 80009a8:	ea80 0001 	eor.w	r0, r0, r1
 80009ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	4770      	bx	lr
 80009b2:	f090 0f00 	teq	r0, #0
 80009b6:	bf17      	itett	ne
 80009b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009bc:	4608      	moveq	r0, r1
 80009be:	f091 0f00 	teqne	r1, #0
 80009c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009c6:	d014      	beq.n	80009f2 <__aeabi_fmul+0x15e>
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d101      	bne.n	80009d2 <__aeabi_fmul+0x13e>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	d10f      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009d2:	ea93 0f0c 	teq	r3, ip
 80009d6:	d103      	bne.n	80009e0 <__aeabi_fmul+0x14c>
 80009d8:	024b      	lsls	r3, r1, #9
 80009da:	bf18      	it	ne
 80009dc:	4608      	movne	r0, r1
 80009de:	d108      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009e0:	ea80 0001 	eor.w	r0, r0, r1
 80009e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f0:	4770      	bx	lr
 80009f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bx	lr

080009fc <__aeabi_fdiv>:
 80009fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a04:	bf1e      	ittt	ne
 8000a06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a0a:	ea92 0f0c 	teqne	r2, ip
 8000a0e:	ea93 0f0c 	teqne	r3, ip
 8000a12:	d069      	beq.n	8000ae8 <__aeabi_fdiv+0xec>
 8000a14:	eba2 0203 	sub.w	r2, r2, r3
 8000a18:	ea80 0c01 	eor.w	ip, r0, r1
 8000a1c:	0249      	lsls	r1, r1, #9
 8000a1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a22:	d037      	beq.n	8000a94 <__aeabi_fdiv+0x98>
 8000a24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a34:	428b      	cmp	r3, r1
 8000a36:	bf38      	it	cc
 8000a38:	005b      	lslcc	r3, r3, #1
 8000a3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a42:	428b      	cmp	r3, r1
 8000a44:	bf24      	itt	cs
 8000a46:	1a5b      	subcs	r3, r3, r1
 8000a48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a50:	bf24      	itt	cs
 8000a52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a5e:	bf24      	itt	cs
 8000a60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a6c:	bf24      	itt	cs
 8000a6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	bf18      	it	ne
 8000a7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a7e:	d1e0      	bne.n	8000a42 <__aeabi_fdiv+0x46>
 8000a80:	2afd      	cmp	r2, #253	; 0xfd
 8000a82:	f63f af50 	bhi.w	8000926 <__aeabi_fmul+0x92>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a8c:	bf08      	it	eq
 8000a8e:	f020 0001 	biceq.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a9c:	327f      	adds	r2, #127	; 0x7f
 8000a9e:	bfc2      	ittt	gt
 8000aa0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000aa4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000aa8:	4770      	bxgt	lr
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f04f 0300 	mov.w	r3, #0
 8000ab2:	3a01      	subs	r2, #1
 8000ab4:	e737      	b.n	8000926 <__aeabi_fmul+0x92>
 8000ab6:	f092 0f00 	teq	r2, #0
 8000aba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0040      	lsleq	r0, r0, #1
 8000ac2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ac6:	3a01      	subeq	r2, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xc2>
 8000aca:	ea40 000c 	orr.w	r0, r0, ip
 8000ace:	f093 0f00 	teq	r3, #0
 8000ad2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad6:	bf02      	ittt	eq
 8000ad8:	0049      	lsleq	r1, r1, #1
 8000ada:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ade:	3b01      	subeq	r3, #1
 8000ae0:	d0f9      	beq.n	8000ad6 <__aeabi_fdiv+0xda>
 8000ae2:	ea41 010c 	orr.w	r1, r1, ip
 8000ae6:	e795      	b.n	8000a14 <__aeabi_fdiv+0x18>
 8000ae8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000aec:	ea92 0f0c 	teq	r2, ip
 8000af0:	d108      	bne.n	8000b04 <__aeabi_fdiv+0x108>
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	f47f af7d 	bne.w	80009f2 <__aeabi_fmul+0x15e>
 8000af8:	ea93 0f0c 	teq	r3, ip
 8000afc:	f47f af70 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e776      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b04:	ea93 0f0c 	teq	r3, ip
 8000b08:	d104      	bne.n	8000b14 <__aeabi_fdiv+0x118>
 8000b0a:	024b      	lsls	r3, r1, #9
 8000b0c:	f43f af4c 	beq.w	80009a8 <__aeabi_fmul+0x114>
 8000b10:	4608      	mov	r0, r1
 8000b12:	e76e      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b18:	bf18      	it	ne
 8000b1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b1e:	d1ca      	bne.n	8000ab6 <__aeabi_fdiv+0xba>
 8000b20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b24:	f47f af5c 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b2c:	f47f af3c 	bne.w	80009a8 <__aeabi_fmul+0x114>
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b32:	bf00      	nop

08000b34 <__gesf2>:
 8000b34:	f04f 3cff 	mov.w	ip, #4294967295
 8000b38:	e006      	b.n	8000b48 <__cmpsf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__lesf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	e002      	b.n	8000b48 <__cmpsf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__cmpsf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b58:	bf18      	it	ne
 8000b5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5e:	d011      	beq.n	8000b84 <__cmpsf2+0x40>
 8000b60:	b001      	add	sp, #4
 8000b62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b66:	bf18      	it	ne
 8000b68:	ea90 0f01 	teqne	r0, r1
 8000b6c:	bf58      	it	pl
 8000b6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b72:	bf88      	it	hi
 8000b74:	17c8      	asrhi	r0, r1, #31
 8000b76:	bf38      	it	cc
 8000b78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b7c:	bf18      	it	ne
 8000b7e:	f040 0001 	orrne.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	d102      	bne.n	8000b90 <__cmpsf2+0x4c>
 8000b8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b8e:	d105      	bne.n	8000b9c <__cmpsf2+0x58>
 8000b90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b94:	d1e4      	bne.n	8000b60 <__cmpsf2+0x1c>
 8000b96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b9a:	d0e1      	beq.n	8000b60 <__cmpsf2+0x1c>
 8000b9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_cfrcmple>:
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4661      	mov	r1, ip
 8000baa:	e7ff      	b.n	8000bac <__aeabi_cfcmpeq>

08000bac <__aeabi_cfcmpeq>:
 8000bac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bae:	f7ff ffc9 	bl	8000b44 <__cmpsf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	bf48      	it	mi
 8000bb6:	f110 0f00 	cmnmi.w	r0, #0
 8000bba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bbc <__aeabi_fcmpeq>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff fff4 	bl	8000bac <__aeabi_cfcmpeq>
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2001      	moveq	r0, #1
 8000bc8:	2000      	movne	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fcmplt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffea 	bl	8000bac <__aeabi_cfcmpeq>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_fcmple>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffe0 	bl	8000bac <__aeabi_cfcmpeq>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fcmpge>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffd2 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fcmpgt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffc8 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_f2iz>:
 8000c20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c28:	d30f      	bcc.n	8000c4a <__aeabi_f2iz+0x2a>
 8000c2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c32:	d90d      	bls.n	8000c50 <__aeabi_f2iz+0x30>
 8000c34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c3c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c40:	fa23 f002 	lsr.w	r0, r3, r2
 8000c44:	bf18      	it	ne
 8000c46:	4240      	negne	r0, r0
 8000c48:	4770      	bx	lr
 8000c4a:	f04f 0000 	mov.w	r0, #0
 8000c4e:	4770      	bx	lr
 8000c50:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c54:	d101      	bne.n	8000c5a <__aeabi_f2iz+0x3a>
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	d105      	bne.n	8000c66 <__aeabi_f2iz+0x46>
 8000c5a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c5e:	bf08      	it	eq
 8000c60:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	4770      	bx	lr

08000c6c <__aeabi_f2uiz>:
 8000c6c:	0042      	lsls	r2, r0, #1
 8000c6e:	d20e      	bcs.n	8000c8e <__aeabi_f2uiz+0x22>
 8000c70:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c74:	d30b      	bcc.n	8000c8e <__aeabi_f2uiz+0x22>
 8000c76:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c7a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c7e:	d409      	bmi.n	8000c94 <__aeabi_f2uiz+0x28>
 8000c80:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c88:	fa23 f002 	lsr.w	r0, r3, r2
 8000c8c:	4770      	bx	lr
 8000c8e:	f04f 0000 	mov.w	r0, #0
 8000c92:	4770      	bx	lr
 8000c94:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c98:	d101      	bne.n	8000c9e <__aeabi_f2uiz+0x32>
 8000c9a:	0242      	lsls	r2, r0, #9
 8000c9c:	d102      	bne.n	8000ca4 <__aeabi_f2uiz+0x38>
 8000c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca2:	4770      	bx	lr
 8000ca4:	f04f 0000 	mov.w	r0, #0
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <DWT_Delay_ms+0x44>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000cba:	f001 fec3 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <DWT_Delay_ms+0x48>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	099b      	lsrs	r3, r3, #6
 8000cc8:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000cd4:	bf00      	nop
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <DWT_Delay_ms+0x44>)
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	1ad2      	subs	r2, r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d3f8      	bcc.n	8000cd6 <DWT_Delay_ms+0x2a>
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e0001000 	.word	0xe0001000
 8000cf4:	10624dd3 	.word	0x10624dd3

08000cf8 <setCSLine>:

#define ENCODER_RESOLUTION_12_BIT 4096
#define ENCODER_RESOLUTION_14_BIT 16384

void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	807b      	strh	r3, [r7, #2]
 8000d04:	4613      	mov	r3, r2
 8000d06:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8000d08:	787a      	ldrb	r2, [r7, #1]
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f001 fab4 	bl	800227c <HAL_GPIO_WritePin>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine,
		TIM_HandleTypeDef *timer) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	461a      	mov	r2, r3
 8000d28:	460b      	mov	r3, r1
 8000d2a:	72fb      	strb	r3, [r7, #11]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 8000d30:	893b      	ldrh	r3, [r7, #8]
 8000d32:	2200      	movs	r2, #0
 8000d34:	4619      	mov	r1, r3
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffde 	bl	8000cf8 <setCSLine>
	delay(timer, docDelay);
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d40:	f000 f924 	bl	8000f8c <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8000d44:	f107 0217 	add.w	r2, r7, #23
 8000d48:	f107 010b 	add.w	r1, r7, #11
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2301      	movs	r3, #1
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f001 ff3c 	bl	8002bd0 <HAL_SPI_TransmitReceive>
	delay(timer, docDelay);
 8000d58:	2103      	movs	r1, #3
 8000d5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d5c:	f000 f916 	bl	8000f8c <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 8000d60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d64:	893b      	ldrh	r3, [r7, #8]
 8000d66:	4619      	mov	r1, r3
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ffc5 	bl	8000cf8 <setCSLine>
	return data;
 8000d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	460b      	mov	r3, r1
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	717b      	strb	r3, [r7, #5]
	uint16_t currentPosition = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0,
 8000d92:	88fa      	ldrh	r2, [r7, #6]
 8000d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	2100      	movs	r1, #0
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f7ff ffba 	bl	8000d1c <spiWriteRead>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	84fb      	strh	r3, [r7, #38]	; 0x26
			timer) << 8;
	delay(timer, docDelay);
 8000db0:	2103      	movs	r1, #3
 8000db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000db4:	f000 f8ea 	bl	8000f8c <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1,
 8000db8:	88fa      	ldrh	r2, [r7, #6]
 8000dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	68f8      	ldr	r0, [r7, #12]
 8000dca:	f7ff ffa7 	bl	8000d1c <spiWriteRead>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	84fb      	strh	r3, [r7, #38]	; 0x26
			timer);
	for (int i = 0; i < 16; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
 8000ddc:	e010      	b.n	8000e00 <getPositionSPI+0x88>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 8000dde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	fa42 f303 	asr.w	r3, r2, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	b2d9      	uxtb	r1, r3
 8000dee:	f107 0210 	add.w	r2, r7, #16
 8000df2:	6a3b      	ldr	r3, [r7, #32]
 8000df4:	4413      	add	r3, r2
 8000df6:	460a      	mov	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8000dfa:	6a3b      	ldr	r3, [r7, #32]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	623b      	str	r3, [r7, #32]
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	2b0f      	cmp	r3, #15
 8000e04:	ddeb      	ble.n	8000dde <getPositionSPI+0x66>
	if ((binaryArray[15]
 8000e06:	7ffb      	ldrb	r3, [r7, #31]
 8000e08:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8000e0a:	7f7a      	ldrb	r2, [r7, #29]
 8000e0c:	7efb      	ldrb	r3, [r7, #27]
 8000e0e:	4053      	eors	r3, r2
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	7e7b      	ldrb	r3, [r7, #25]
 8000e14:	4053      	eors	r3, r2
 8000e16:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8000e1a:	4053      	eors	r3, r2
 8000e1c:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8000e1e:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8000e20:	4053      	eors	r3, r2
 8000e22:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8000e24:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8000e26:	4053      	eors	r3, r2
 8000e28:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 8000e2a:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	bf0c      	ite	eq
 8000e30:	2301      	moveq	r3, #1
 8000e32:	2300      	movne	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d11e      	bne.n	8000e78 <getPositionSPI+0x100>
			&& (binaryArray[14]
 8000e3a:	7fbb      	ldrb	r3, [r7, #30]
 8000e3c:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8000e3e:	7f3a      	ldrb	r2, [r7, #28]
 8000e40:	7ebb      	ldrb	r3, [r7, #26]
 8000e42:	4053      	eors	r3, r2
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	7e3b      	ldrb	r3, [r7, #24]
 8000e48:	4053      	eors	r3, r2
 8000e4a:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8000e4c:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8000e4e:	4053      	eors	r3, r2
 8000e50:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8000e52:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8000e54:	4053      	eors	r3, r2
 8000e56:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8000e58:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8000e5a:	4053      	eors	r3, r2
 8000e5c:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 8000e5e:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	bf0c      	ite	eq
 8000e64:	2301      	moveq	r3, #1
 8000e66:	2300      	movne	r3, #0
 8000e68:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	d104      	bne.n	8000e78 <getPositionSPI+0x100>
		currentPosition &= 0x3FFF;
 8000e6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000e74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e76:	e002      	b.n	8000e7e <getPositionSPI+0x106>
	} else {
		currentPosition = 0xFFFF; //bad position
 8000e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7c:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 8000e7e:	797b      	ldrb	r3, [r7, #5]
 8000e80:	2b0c      	cmp	r3, #12
 8000e82:	d107      	bne.n	8000e94 <getPositionSPI+0x11c>
 8000e84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d002      	beq.n	8000e94 <getPositionSPI+0x11c>
		currentPosition = currentPosition >> 2;
 8000e8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 8000e94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <setZeroSPI>:

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, TIM_HandleTypeDef *timer) {
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af02      	add	r7, sp, #8
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	80fb      	strh	r3, [r7, #6]

	spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 8000eae:	88fa      	ldrh	r2, [r7, #6]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff ff2c 	bl	8000d1c <spiWriteRead>
	delay(timer, docDelay);
 8000ec4:	2103      	movs	r1, #3
 8000ec6:	6838      	ldr	r0, [r7, #0]
 8000ec8:	f000 f860 	bl	8000f8c <delay>
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1, timer);
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	9301      	str	r3, [sp, #4]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	2170      	movs	r1, #112	; 0x70
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f7ff ff1d 	bl	8000d1c <spiWriteRead>
	delay(timer, docDelayLong + docDelayLong);
 8000ee2:	2178      	movs	r1, #120	; 0x78
 8000ee4:	6838      	ldr	r0, [r7, #0]
 8000ee6:	f000 f851 	bl	8000f8c <delay>

}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <calculateAngle>:

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	80fb      	strh	r3, [r7, #6]
 8000f00:	4613      	mov	r3, r2
 8000f02:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]

	if (bitDepth == 12) {
 8000f0a:	797b      	ldrb	r3, [r7, #5]
 8000f0c:	2b0c      	cmp	r3, #12
 8000f0e:	d111      	bne.n	8000f34 <calculateAngle+0x40>
		angle = ((float) encoderValue / ENCODER_RESOLUTION_12_BIT) * 360.0;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fc66 	bl	80007e4 <__aeabi_ui2f>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fd6c 	bl	80009fc <__aeabi_fdiv>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4917      	ldr	r1, [pc, #92]	; (8000f84 <calculateAngle+0x90>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fcb3 	bl	8000894 <__aeabi_fmul>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	e013      	b.n	8000f5c <calculateAngle+0x68>
	} else if (bitDepth == 14) {
 8000f34:	797b      	ldrb	r3, [r7, #5]
 8000f36:	2b0e      	cmp	r3, #14
 8000f38:	d110      	bne.n	8000f5c <calculateAngle+0x68>
		angle = ((float) encoderValue / ENCODER_RESOLUTION_14_BIT) * 360.0;
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fc51 	bl	80007e4 <__aeabi_ui2f>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fd57 	bl	80009fc <__aeabi_fdiv>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	490c      	ldr	r1, [pc, #48]	; (8000f84 <calculateAngle+0x90>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fc9e 	bl	8000894 <__aeabi_fmul>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	angle = roundf(angle * 5.0) / 5.0;
 8000f5c:	490a      	ldr	r1, [pc, #40]	; (8000f88 <calculateAngle+0x94>)
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff fc98 	bl	8000894 <__aeabi_fmul>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 fa72 	bl	8004450 <roundf>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4906      	ldr	r1, [pc, #24]	; (8000f88 <calculateAngle+0x94>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fd43 	bl	80009fc <__aeabi_fdiv>
 8000f76:	4603      	mov	r3, r0
 8000f78:	60fb      	str	r3, [r7, #12]

	return angle;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	43b40000 	.word	0x43b40000
 8000f88:	40a00000 	.word	0x40a00000

08000f8c <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1, timer);
	delay(timer, docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(TIM_HandleTypeDef *timer, uint32_t delayTime) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]

	DWT_Delay_ms(delayTime);
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f7ff fe88 	bl	8000cac <DWT_Delay_ms>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <DWT_Delay_Init+0x58>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <DWT_Delay_Init+0x58>)
 8000fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fb2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <DWT_Delay_Init+0x58>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <DWT_Delay_Init+0x58>)
 8000fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fbe:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <DWT_Delay_Init+0x5c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <DWT_Delay_Init+0x5c>)
 8000fc6:	f023 0301 	bic.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <DWT_Delay_Init+0x5c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <DWT_Delay_Init+0x5c>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <DWT_Delay_Init+0x5c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000fde:	bf00      	nop
    __ASM volatile ("NOP");
 8000fe0:	bf00      	nop
    __ASM volatile ("NOP");
 8000fe2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <DWT_Delay_Init+0x5c>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000fec:	2300      	movs	r3, #0
 8000fee:	e000      	b.n	8000ff2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000ff0:	2301      	movs	r3, #1
    }
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000edf0 	.word	0xe000edf0
 8001000:	e0001000 	.word	0xe0001000

08001004 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

int cntImpulse1 = 0, cntImpulse2 = 0, step1=0, step2=0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) /*CallBack, вызванный при окончании периода Ш�?М*/
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a18      	ldr	r2, [pc, #96]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d112      	bne.n	800103c <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		++cntImpulse1;
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	4a16      	ldr	r2, [pc, #88]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800101e:	6013      	str	r3, [r2, #0]

		if (cntImpulse1 >= step1) {
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	db1e      	blt.n	800106a <HAL_TIM_PeriodElapsedCallback+0x66>
		//	HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800102c:	2108      	movs	r1, #8
 800102e:	4814      	ldr	r0, [pc, #80]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001030:	f002 fae2 	bl	80035f8 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 8001034:	4812      	ldr	r0, [pc, #72]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001036:	f002 f9bf 	bl	80033b8 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
			HAL_TIM_Base_Stop_IT(&htim2);

		}
	}
}
 800103a:	e016      	b.n	800106a <HAL_TIM_PeriodElapsedCallback+0x66>
	} else if (htim->Instance == TIM2) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001044:	d111      	bne.n	800106a <HAL_TIM_PeriodElapsedCallback+0x66>
		++cntImpulse2;
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800104e:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= step2) {
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	db06      	blt.n	800106a <HAL_TIM_PeriodElapsedCallback+0x66>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800105c:	2108      	movs	r1, #8
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001060:	f002 faca 	bl	80035f8 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001066:	f002 f9a7 	bl	80033b8 <HAL_TIM_Base_Stop_IT>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40012c00 	.word	0x40012c00
 8001078:	20000158 	.word	0x20000158
 800107c:	20000160 	.word	0x20000160
 8001080:	20000080 	.word	0x20000080
 8001084:	2000015c 	.word	0x2000015c
 8001088:	20000164 	.word	0x20000164
 800108c:	200000c8 	.word	0x200000c8

08001090 <steppingyakkazavmaxim>:

int steppingyakkazavmaxim(float stepM1, float stepM2) {
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]

	step1=stepM1;
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fdc0 	bl	8000c20 <__aeabi_f2iz>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a6c      	ldr	r2, [pc, #432]	; (8001254 <steppingyakkazavmaxim+0x1c4>)
 80010a4:	6013      	str	r3, [r2, #0]
	step2=stepM2;
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f7ff fdba 	bl	8000c20 <__aeabi_f2iz>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a6a      	ldr	r2, [pc, #424]	; (8001258 <steppingyakkazavmaxim+0x1c8>)
 80010b0:	6013      	str	r3, [r2, #0]

	//числа 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80010b2:	2108      	movs	r1, #8
 80010b4:	4869      	ldr	r0, [pc, #420]	; (800125c <steppingyakkazavmaxim+0x1cc>)
 80010b6:	f002 fa9f 	bl	80035f8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80010ba:	2108      	movs	r1, #8
 80010bc:	4868      	ldr	r0, [pc, #416]	; (8001260 <steppingyakkazavmaxim+0x1d0>)
 80010be:	f002 fa9b 	bl	80035f8 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 80010c2:	4866      	ldr	r0, [pc, #408]	; (800125c <steppingyakkazavmaxim+0x1cc>)
 80010c4:	f002 f978 	bl	80033b8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 80010c8:	4865      	ldr	r0, [pc, #404]	; (8001260 <steppingyakkazavmaxim+0x1d0>)
 80010ca:	f002 f975 	bl	80033b8 <HAL_TIM_Base_Stop_IT>

	//  частота шим = входящая частота / период (arr)
	//  125 000 (125 килогерц)  = 16 000 000 / 128
	// (1/60)*1000 = частота 16 (герц);
float periodM1=60; //мікросекунд
 80010ce:	4b65      	ldr	r3, [pc, #404]	; (8001264 <steppingyakkazavmaxim+0x1d4>)
 80010d0:	61fb      	str	r3, [r7, #28]
uint32_t psc=1800;
 80010d2:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80010d6:	61bb      	str	r3, [r7, #24]

if(stepM1>stepM2){
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fd96 	bl	8000c0c <__aeabi_fcmpgt>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d04e      	beq.n	8001184 <steppingyakkazavmaxim+0xf4>

	htim1.Instance->PSC = psc;
 80010e6:	4b5d      	ldr	r3, [pc, #372]	; (800125c <steppingyakkazavmaxim+0x1cc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	629a      	str	r2, [r3, #40]	; 0x28
	htim1.Instance->ARR = periodM1;
 80010ee:	4b5b      	ldr	r3, [pc, #364]	; (800125c <steppingyakkazavmaxim+0x1cc>)
 80010f0:	681c      	ldr	r4, [r3, #0]
 80010f2:	69f8      	ldr	r0, [r7, #28]
 80010f4:	f7ff fdba 	bl	8000c6c <__aeabi_f2uiz>
 80010f8:	4603      	mov	r3, r0
 80010fa:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim1.Instance->CCR3 = periodM1/2;
 80010fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001100:	69f8      	ldr	r0, [r7, #28]
 8001102:	f7ff fc7b 	bl	80009fc <__aeabi_fdiv>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	4b54      	ldr	r3, [pc, #336]	; (800125c <steppingyakkazavmaxim+0x1cc>)
 800110c:	681c      	ldr	r4, [r3, #0]
 800110e:	4610      	mov	r0, r2
 8001110:	f7ff fdac 	bl	8000c6c <__aeabi_f2uiz>
 8001114:	4603      	mov	r3, r0
 8001116:	63e3      	str	r3, [r4, #60]	; 0x3c

	float delimiter= stepM1/stepM2;
 8001118:	6839      	ldr	r1, [r7, #0]
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fc6e 	bl	80009fc <__aeabi_fdiv>
 8001120:	4603      	mov	r3, r0
 8001122:	60fb      	str	r3, [r7, #12]
	float mnoj= ceil(periodM1*delimiter);
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	69f8      	ldr	r0, [r7, #28]
 8001128:	f7ff fbb4 	bl	8000894 <__aeabi_fmul>
 800112c:	4603      	mov	r3, r0
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f972 	bl	8000418 <__aeabi_f2d>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f003 f908 	bl	8004350 <ceil>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fa46 	bl	80005d8 <__aeabi_d2f>
 800114c:	4603      	mov	r3, r0
 800114e:	60bb      	str	r3, [r7, #8]

	htim2.Instance->PSC = psc;
 8001150:	4b43      	ldr	r3, [pc, #268]	; (8001260 <steppingyakkazavmaxim+0x1d0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
	htim2.Instance->ARR = mnoj;
 8001158:	4b41      	ldr	r3, [pc, #260]	; (8001260 <steppingyakkazavmaxim+0x1d0>)
 800115a:	681c      	ldr	r4, [r3, #0]
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f7ff fd85 	bl	8000c6c <__aeabi_f2uiz>
 8001162:	4603      	mov	r3, r0
 8001164:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim2.Instance->CCR3 = mnoj/2;
 8001166:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800116a:	68b8      	ldr	r0, [r7, #8]
 800116c:	f7ff fc46 	bl	80009fc <__aeabi_fdiv>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <steppingyakkazavmaxim+0x1d0>)
 8001176:	681c      	ldr	r4, [r3, #0]
 8001178:	4610      	mov	r0, r2
 800117a:	f7ff fd77 	bl	8000c6c <__aeabi_f2uiz>
 800117e:	4603      	mov	r3, r0
 8001180:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001182:	e054      	b.n	800122e <steppingyakkazavmaxim+0x19e>

} else if (stepM1<stepM2) {
 8001184:	6839      	ldr	r1, [r7, #0]
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fd22 	bl	8000bd0 <__aeabi_fcmplt>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d04d      	beq.n	800122e <steppingyakkazavmaxim+0x19e>
//	uint16_t impMore = (72000000/psc_max)/1000; 						//імпульсів кроків за секунду для мотора з більшої кількістю кроків  КРОКІВ НА СЕКУНДУ
//	uint16_t allSecMore = (stepM2/impMore)*1000;		 				//загальний час роботи мотора із більшої кількістю кроків  мілісекунд
//	uint16_t stepSecM1 =  (stepM1/allSecMore)*1000; 					//кроків на секунду на двигуна LESS  250
//	uint16_t PSCmLess= 72000000 / (stepSecM1 * 1000); 					//дільник для мотора LESS

	htim2.Instance->PSC = psc;
 8001192:	4b33      	ldr	r3, [pc, #204]	; (8001260 <steppingyakkazavmaxim+0x1d0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
	htim2.Instance->ARR = periodM1;
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <steppingyakkazavmaxim+0x1d0>)
 800119c:	681c      	ldr	r4, [r3, #0]
 800119e:	69f8      	ldr	r0, [r7, #28]
 80011a0:	f7ff fd64 	bl	8000c6c <__aeabi_f2uiz>
 80011a4:	4603      	mov	r3, r0
 80011a6:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim2.Instance->CCR3 = periodM1/2;
 80011a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011ac:	69f8      	ldr	r0, [r7, #28]
 80011ae:	f7ff fc25 	bl	80009fc <__aeabi_fdiv>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <steppingyakkazavmaxim+0x1d0>)
 80011b8:	681c      	ldr	r4, [r3, #0]
 80011ba:	4610      	mov	r0, r2
 80011bc:	f7ff fd56 	bl	8000c6c <__aeabi_f2uiz>
 80011c0:	4603      	mov	r3, r0
 80011c2:	63e3      	str	r3, [r4, #60]	; 0x3c

	float delimiter= stepM2/stepM1;
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	6838      	ldr	r0, [r7, #0]
 80011c8:	f7ff fc18 	bl	80009fc <__aeabi_fdiv>
 80011cc:	4603      	mov	r3, r0
 80011ce:	617b      	str	r3, [r7, #20]
	float mnoj= ceil(periodM1*delimiter);
 80011d0:	6979      	ldr	r1, [r7, #20]
 80011d2:	69f8      	ldr	r0, [r7, #28]
 80011d4:	f7ff fb5e 	bl	8000894 <__aeabi_fmul>
 80011d8:	4603      	mov	r3, r0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f91c 	bl	8000418 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f003 f8b2 	bl	8004350 <ceil>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff f9f0 	bl	80005d8 <__aeabi_d2f>
 80011f8:	4603      	mov	r3, r0
 80011fa:	613b      	str	r3, [r7, #16]

	htim1.Instance->PSC = psc;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <steppingyakkazavmaxim+0x1cc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
	htim1.Instance->ARR = mnoj;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <steppingyakkazavmaxim+0x1cc>)
 8001206:	681c      	ldr	r4, [r3, #0]
 8001208:	6938      	ldr	r0, [r7, #16]
 800120a:	f7ff fd2f 	bl	8000c6c <__aeabi_f2uiz>
 800120e:	4603      	mov	r3, r0
 8001210:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim1.Instance->CCR3 = mnoj/2;
 8001212:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001216:	6938      	ldr	r0, [r7, #16]
 8001218:	f7ff fbf0 	bl	80009fc <__aeabi_fdiv>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <steppingyakkazavmaxim+0x1cc>)
 8001222:	681c      	ldr	r4, [r3, #0]
 8001224:	4610      	mov	r0, r2
 8001226:	f7ff fd21 	bl	8000c6c <__aeabi_f2uiz>
 800122a:	4603      	mov	r3, r0
 800122c:	63e3      	str	r3, [r4, #60]	; 0x3c

}

	//Старт таймера та переривань

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800122e:	2108      	movs	r1, #8
 8001230:	480a      	ldr	r0, [pc, #40]	; (800125c <steppingyakkazavmaxim+0x1cc>)
 8001232:	f002 f93f 	bl	80034b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001236:	2108      	movs	r1, #8
 8001238:	4809      	ldr	r0, [pc, #36]	; (8001260 <steppingyakkazavmaxim+0x1d0>)
 800123a:	f002 f93b 	bl	80034b4 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 800123e:	4807      	ldr	r0, [pc, #28]	; (800125c <steppingyakkazavmaxim+0x1cc>)
 8001240:	f002 f868 	bl	8003314 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001244:	4806      	ldr	r0, [pc, #24]	; (8001260 <steppingyakkazavmaxim+0x1d0>)
 8001246:	f002 f865 	bl	8003314 <HAL_TIM_Base_Start_IT>

	return 0;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3724      	adds	r7, #36	; 0x24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	20000160 	.word	0x20000160
 8001258:	20000164 	.word	0x20000164
 800125c:	20000080 	.word	0x20000080
 8001260:	200000c8 	.word	0x200000c8
 8001264:	42700000 	.word	0x42700000

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 fc75 	bl	8001b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f867 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f000 fa0f 	bl	8001698 <MX_GPIO_Init>
  MX_TIM1_Init();
 800127a:	f000 f8e1 	bl	8001440 <MX_TIM1_Init>
  MX_TIM2_Init();
 800127e:	f000 f963 	bl	8001548 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001282:	f000 f9bb 	bl	80015fc <MX_TIM3_Init>
  MX_SPI1_Init();
 8001286:	f000 f8a5 	bl	80013d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 800128a:	f7ff fe8b 	bl	8000fa4 <DWT_Delay_Init>

  HAL_TIM_Base_Init(&htim1);
 800128e:	4825      	ldr	r0, [pc, #148]	; (8001324 <main+0xbc>)
 8001290:	f001 fff0 	bl	8003274 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Init(&htim2);
 8001294:	4824      	ldr	r0, [pc, #144]	; (8001328 <main+0xc0>)
 8001296:	f001 ffed 	bl	8003274 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Init(&htim3);
 800129a:	4824      	ldr	r0, [pc, #144]	; (800132c <main+0xc4>)
 800129c:	f001 ffea 	bl	8003274 <HAL_TIM_Base_Init>

  char buf[4];
  char bufAngle[8];

  uint16_t posnow=0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	82fb      	strh	r3, [r7, #22]
  float angle = 0;
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]

  	HAL_Delay(300); //при старте 200 милисек не хотел ебать?
 80012aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012ae:	f000 fcb7 	bl	8001c20 <HAL_Delay>
 	posnow = getPositionSPI(&hspi1, CS_GPIO_Port, CS_Pin, 14, &htim3);
 80012b2:	4b1e      	ldr	r3, [pc, #120]	; (800132c <main+0xc4>)
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	230e      	movs	r3, #14
 80012b8:	2201      	movs	r2, #1
 80012ba:	491d      	ldr	r1, [pc, #116]	; (8001330 <main+0xc8>)
 80012bc:	481d      	ldr	r0, [pc, #116]	; (8001334 <main+0xcc>)
 80012be:	f7ff fd5b 	bl	8000d78 <getPositionSPI>
 80012c2:	4603      	mov	r3, r0
 80012c4:	82fb      	strh	r3, [r7, #22]
  //	resetAMT22(&hspi1, CS_GPIO_Port, CS_Pin, &htim3);
  	setZeroSPI(&hspi1, CS_GPIO_Port, CS_Pin, &htim3); //воно само зчитає поточну позицію и засейвить її в пам'ять
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <main+0xc4>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	4919      	ldr	r1, [pc, #100]	; (8001330 <main+0xc8>)
 80012cc:	4819      	ldr	r0, [pc, #100]	; (8001334 <main+0xcc>)
 80012ce:	f7ff fde6 	bl	8000e9e <setZeroSPI>
  	HAL_Delay(250);  //250   мілісек після встановлення нуля полюбасу
 80012d2:	20fa      	movs	r0, #250	; 0xfa
 80012d4:	f000 fca4 	bl	8001c20 <HAL_Delay>

  	HAL_GPIO_WritePin(En_GPIO_Port,En_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2120      	movs	r1, #32
 80012dc:	4816      	ldr	r0, [pc, #88]	; (8001338 <main+0xd0>)
 80012de:	f000 ffcd 	bl	800227c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Dir_GPIO_Port,Dir_Pin, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	2140      	movs	r1, #64	; 0x40
 80012e6:	4814      	ldr	r0, [pc, #80]	; (8001338 <main+0xd0>)
 80012e8:	f000 ffc8 	bl	800227c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Dir2_GPIO_Port,Dir2_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <main+0xc8>)
 80012f4:	f000 ffc2 	bl	800227c <HAL_GPIO_WritePin>

    steppingyakkazavmaxim(4534, 10300);
 80012f8:	4910      	ldr	r1, [pc, #64]	; (800133c <main+0xd4>)
 80012fa:	4811      	ldr	r0, [pc, #68]	; (8001340 <main+0xd8>)
 80012fc:	f7ff fec8 	bl	8001090 <steppingyakkazavmaxim>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

	  posnow = getPositionSPI(&hspi1, CS_GPIO_Port, CS_Pin, 14, &htim3);
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <main+0xc4>)
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	230e      	movs	r3, #14
 8001306:	2201      	movs	r2, #1
 8001308:	4909      	ldr	r1, [pc, #36]	; (8001330 <main+0xc8>)
 800130a:	480a      	ldr	r0, [pc, #40]	; (8001334 <main+0xcc>)
 800130c:	f7ff fd34 	bl	8000d78 <getPositionSPI>
 8001310:	4603      	mov	r3, r0
 8001312:	82fb      	strh	r3, [r7, #22]
	  angle = calculateAngle(posnow, 14); //або 14
 8001314:	8afb      	ldrh	r3, [r7, #22]
 8001316:	210e      	movs	r1, #14
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fdeb 	bl	8000ef4 <calculateAngle>
 800131e:	6138      	str	r0, [r7, #16]
	  posnow = getPositionSPI(&hspi1, CS_GPIO_Port, CS_Pin, 14, &htim3);
 8001320:	e7ee      	b.n	8001300 <main+0x98>
 8001322:	bf00      	nop
 8001324:	20000080 	.word	0x20000080
 8001328:	200000c8 	.word	0x200000c8
 800132c:	20000110 	.word	0x20000110
 8001330:	40010c00 	.word	0x40010c00
 8001334:	20000028 	.word	0x20000028
 8001338:	40010800 	.word	0x40010800
 800133c:	4620f000 	.word	0x4620f000
 8001340:	458db000 	.word	0x458db000

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b090      	sub	sp, #64	; 0x40
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0318 	add.w	r3, r7, #24
 800134e:	2228      	movs	r2, #40	; 0x28
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f002 ffcf 	bl	80042f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001366:	2301      	movs	r3, #1
 8001368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001374:	2301      	movs	r3, #1
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001378:	2302      	movs	r3, #2
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001380:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001382:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	4618      	mov	r0, r3
 800138e:	f000 ff8d 	bl	80022ac <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001398:	f000 fa02 	bl	80017a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139c:	230f      	movs	r3, #15
 800139e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a0:	2302      	movs	r3, #2
 80013a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2102      	movs	r1, #2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 f9fa 	bl	80027b0 <HAL_RCC_ClockConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013c2:	f000 f9ed 	bl	80017a0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80013c6:	f001 fadd 	bl	8002984 <HAL_RCC_EnableCSS>
}
 80013ca:	bf00      	nop
 80013cc:	3740      	adds	r7, #64	; 0x40
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_SPI1_Init+0x64>)
 80013da:	4a18      	ldr	r2, [pc, #96]	; (800143c <MX_SPI1_Init+0x68>)
 80013dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <MX_SPI1_Init+0x64>)
 80013e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_SPI1_Init+0x64>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_SPI1_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_SPI1_Init+0x64>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_SPI1_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_SPI1_Init+0x64>)
 8001400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001404:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_SPI1_Init+0x64>)
 8001408:	2218      	movs	r2, #24
 800140a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MX_SPI1_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_SPI1_Init+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_SPI1_Init+0x64>)
 800141a:	2200      	movs	r2, #0
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_SPI1_Init+0x64>)
 8001420:	220a      	movs	r2, #10
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_SPI1_Init+0x64>)
 8001426:	f001 fb4f 	bl	8002ac8 <HAL_SPI_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001430:	f000 f9b6 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000028 	.word	0x20000028
 800143c:	40013000 	.word	0x40013000

08001440 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b092      	sub	sp, #72	; 0x48
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001446:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2220      	movs	r2, #32
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f002 ff43 	bl	80042f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001470:	4b33      	ldr	r3, [pc, #204]	; (8001540 <MX_TIM1_Init+0x100>)
 8001472:	4a34      	ldr	r2, [pc, #208]	; (8001544 <MX_TIM1_Init+0x104>)
 8001474:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8001476:	4b32      	ldr	r3, [pc, #200]	; (8001540 <MX_TIM1_Init+0x100>)
 8001478:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800147c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <MX_TIM1_Init+0x100>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <MX_TIM1_Init+0x100>)
 8001486:	f240 32e7 	movw	r2, #999	; 0x3e7
 800148a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148c:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <MX_TIM1_Init+0x100>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001492:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <MX_TIM1_Init+0x100>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b29      	ldr	r3, [pc, #164]	; (8001540 <MX_TIM1_Init+0x100>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800149e:	4828      	ldr	r0, [pc, #160]	; (8001540 <MX_TIM1_Init+0x100>)
 80014a0:	f001 ffb8 	bl	8003414 <HAL_TIM_PWM_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014aa:	f000 f979 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ba:	4619      	mov	r1, r3
 80014bc:	4820      	ldr	r0, [pc, #128]	; (8001540 <MX_TIM1_Init+0x100>)
 80014be:	f002 fe59 	bl	8004174 <HAL_TIMEx_MasterConfigSynchronization>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80014c8:	f000 f96a 	bl	80017a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014cc:	2360      	movs	r3, #96	; 0x60
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014d8:	2300      	movs	r3, #0
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	2208      	movs	r2, #8
 80014ee:	4619      	mov	r1, r3
 80014f0:	4813      	ldr	r0, [pc, #76]	; (8001540 <MX_TIM1_Init+0x100>)
 80014f2:	f002 f9ed 	bl	80038d0 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80014fc:	f000 f950 	bl	80017a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001518:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <MX_TIM1_Init+0x100>)
 8001524:	f002 fe84 	bl	8004230 <HAL_TIMEx_ConfigBreakDeadTime>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800152e:	f000 f937 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001532:	4803      	ldr	r0, [pc, #12]	; (8001540 <MX_TIM1_Init+0x100>)
 8001534:	f000 fa3c 	bl	80019b0 <HAL_TIM_MspPostInit>

}
 8001538:	bf00      	nop
 800153a:	3748      	adds	r7, #72	; 0x48
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000080 	.word	0x20000080
 8001544:	40012c00 	.word	0x40012c00

08001548 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <MX_TIM2_Init+0xb0>)
 800156c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001570:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <MX_TIM2_Init+0xb0>)
 8001574:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001578:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_TIM2_Init+0xb0>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_TIM2_Init+0xb0>)
 8001582:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001586:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_TIM2_Init+0xb0>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_TIM2_Init+0xb0>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001594:	4818      	ldr	r0, [pc, #96]	; (80015f8 <MX_TIM2_Init+0xb0>)
 8001596:	f001 ff3d 	bl	8003414 <HAL_TIM_PWM_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80015a0:	f000 f8fe 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	4619      	mov	r1, r3
 80015b2:	4811      	ldr	r0, [pc, #68]	; (80015f8 <MX_TIM2_Init+0xb0>)
 80015b4:	f002 fdde 	bl	8004174 <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80015be:	f000 f8ef 	bl	80017a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c2:	2360      	movs	r3, #96	; 0x60
 80015c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2208      	movs	r2, #8
 80015d6:	4619      	mov	r1, r3
 80015d8:	4807      	ldr	r0, [pc, #28]	; (80015f8 <MX_TIM2_Init+0xb0>)
 80015da:	f002 f979 	bl	80038d0 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80015e4:	f000 f8dc 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <MX_TIM2_Init+0xb0>)
 80015ea:	f000 f9e1 	bl	80019b0 <HAL_TIM_MspPostInit>

}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200000c8 	.word	0x200000c8

080015fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_TIM3_Init+0x94>)
 800161a:	4a1e      	ldr	r2, [pc, #120]	; (8001694 <MX_TIM3_Init+0x98>)
 800161c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_TIM3_Init+0x94>)
 8001620:	2247      	movs	r2, #71	; 0x47
 8001622:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_TIM3_Init+0x94>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_TIM3_Init+0x94>)
 800162c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001630:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_TIM3_Init+0x94>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_TIM3_Init+0x94>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800163e:	4814      	ldr	r0, [pc, #80]	; (8001690 <MX_TIM3_Init+0x94>)
 8001640:	f001 fe18 	bl	8003274 <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800164a:	f000 f8a9 	bl	80017a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001652:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_TIM3_Init+0x94>)
 800165c:	f002 f9fa 	bl	8003a54 <HAL_TIM_ConfigClockSource>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001666:	f000 f89b 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001672:	463b      	mov	r3, r7
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_TIM3_Init+0x94>)
 8001678:	f002 fd7c 	bl	8004174 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001682:	f000 f88d 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000110 	.word	0x20000110
 8001694:	40000400 	.word	0x40000400

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	4b38      	ldr	r3, [pc, #224]	; (8001790 <MX_GPIO_Init+0xf8>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a37      	ldr	r2, [pc, #220]	; (8001790 <MX_GPIO_Init+0xf8>)
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b35      	ldr	r3, [pc, #212]	; (8001790 <MX_GPIO_Init+0xf8>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c4:	4b32      	ldr	r3, [pc, #200]	; (8001790 <MX_GPIO_Init+0xf8>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a31      	ldr	r2, [pc, #196]	; (8001790 <MX_GPIO_Init+0xf8>)
 80016ca:	f043 0320 	orr.w	r3, r3, #32
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <MX_GPIO_Init+0xf8>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0320 	and.w	r3, r3, #32
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <MX_GPIO_Init+0xf8>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a2b      	ldr	r2, [pc, #172]	; (8001790 <MX_GPIO_Init+0xf8>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b29      	ldr	r3, [pc, #164]	; (8001790 <MX_GPIO_Init+0xf8>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f4:	4b26      	ldr	r3, [pc, #152]	; (8001790 <MX_GPIO_Init+0xf8>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a25      	ldr	r2, [pc, #148]	; (8001790 <MX_GPIO_Init+0xf8>)
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b23      	ldr	r3, [pc, #140]	; (8001790 <MX_GPIO_Init+0xf8>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001712:	4820      	ldr	r0, [pc, #128]	; (8001794 <MX_GPIO_Init+0xfc>)
 8001714:	f000 fdb2 	bl	800227c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, En_Pin|Dir_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	2160      	movs	r1, #96	; 0x60
 800171c:	481e      	ldr	r0, [pc, #120]	; (8001798 <MX_GPIO_Init+0x100>)
 800171e:	f000 fdad 	bl	800227c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|Dir2_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f240 4101 	movw	r1, #1025	; 0x401
 8001728:	481c      	ldr	r0, [pc, #112]	; (800179c <MX_GPIO_Init+0x104>)
 800172a:	f000 fda7 	bl	800227c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 800172e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4619      	mov	r1, r3
 8001746:	4813      	ldr	r0, [pc, #76]	; (8001794 <MX_GPIO_Init+0xfc>)
 8001748:	f000 fc14 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : En_Pin Dir_Pin */
  GPIO_InitStruct.Pin = En_Pin|Dir_Pin;
 800174c:	2360      	movs	r3, #96	; 0x60
 800174e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2302      	movs	r3, #2
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4619      	mov	r1, r3
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <MX_GPIO_Init+0x100>)
 8001764:	f000 fc06 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin Dir2_Pin */
  GPIO_InitStruct.Pin = CS_Pin|Dir2_Pin;
 8001768:	f240 4301 	movw	r3, #1025	; 0x401
 800176c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2302      	movs	r3, #2
 8001778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	4619      	mov	r1, r3
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <MX_GPIO_Init+0x104>)
 8001782:	f000 fbf7 	bl	8001f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001786:	bf00      	nop
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000
 8001794:	40011000 	.word	0x40011000
 8001798:	40010800 	.word	0x40010800
 800179c:	40010c00 	.word	0x40010c00

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017a8:	e7fe      	b.n	80017a8 <Error_Handler+0x8>
	...

080017ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_MspInit+0x6c>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <HAL_MspInit+0x6c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6193      	str	r3, [r2, #24]
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <HAL_MspInit+0x6c>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_MspInit+0x6c>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <HAL_MspInit+0x6c>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_MspInit+0x6c>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2005      	movs	r0, #5
 80017e8:	f000 fb15 	bl	8001e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80017ec:	2005      	movs	r0, #5
 80017ee:	f000 fb2e 	bl	8001e4e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_MspInit+0x70>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_MspInit+0x70>)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000
 800181c:	40010000 	.word	0x40010000

08001820 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <HAL_SPI_MspInit+0xb4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d145      	bne.n	80018cc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_SPI_MspInit+0xb8>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a24      	ldr	r2, [pc, #144]	; (80018d8 <HAL_SPI_MspInit+0xb8>)
 8001846:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_SPI_MspInit+0xb8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <HAL_SPI_MspInit+0xb8>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <HAL_SPI_MspInit+0xb8>)
 800185e:	f043 0308 	orr.w	r3, r3, #8
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_SPI_MspInit+0xb8>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001870:	2328      	movs	r3, #40	; 0x28
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	4816      	ldr	r0, [pc, #88]	; (80018dc <HAL_SPI_MspInit+0xbc>)
 8001884:	f000 fb76 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001888:	2310      	movs	r3, #16
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4810      	ldr	r0, [pc, #64]	; (80018dc <HAL_SPI_MspInit+0xbc>)
 800189c:	f000 fb6a 	bl	8001f74 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_SPI_MspInit+0xc0>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_SPI_MspInit+0xc0>)
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2023      	movs	r0, #35	; 0x23
 80018c2:	f000 faa8 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80018c6:	2023      	movs	r0, #35	; 0x23
 80018c8:	f000 fac1 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40013000 	.word	0x40013000
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010c00 	.word	0x40010c00
 80018e0:	40010000 	.word	0x40010000

080018e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1a      	ldr	r2, [pc, #104]	; (800195c <HAL_TIM_PWM_MspInit+0x78>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d114      	bne.n	8001920 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_TIM_PWM_MspInit+0x7c>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_TIM_PWM_MspInit+0x7c>)
 80018fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001900:	6193      	str	r3, [r2, #24]
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_TIM_PWM_MspInit+0x7c>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	2019      	movs	r0, #25
 8001914:	f000 fa7f 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001918:	2019      	movs	r0, #25
 800191a:	f000 fa98 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800191e:	e018      	b.n	8001952 <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001928:	d113      	bne.n	8001952 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_TIM_PWM_MspInit+0x7c>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_TIM_PWM_MspInit+0x7c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	61d3      	str	r3, [r2, #28]
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_TIM_PWM_MspInit+0x7c>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	201c      	movs	r0, #28
 8001948:	f000 fa65 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800194c:	201c      	movs	r0, #28
 800194e:	f000 fa7e 	bl	8001e4e <HAL_NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40012c00 	.word	0x40012c00
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <HAL_TIM_Base_MspInit+0x44>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d113      	bne.n	800199e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_TIM_Base_MspInit+0x48>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <HAL_TIM_Base_MspInit+0x48>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_TIM_Base_MspInit+0x48>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	201d      	movs	r0, #29
 8001994:	f000 fa3f 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001998:	201d      	movs	r0, #29
 800199a:	f000 fa58 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a1f      	ldr	r2, [pc, #124]	; (8001a48 <HAL_TIM_MspPostInit+0x98>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d119      	bne.n	8001a04 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <HAL_TIM_MspPostInit+0x9c>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a1d      	ldr	r2, [pc, #116]	; (8001a4c <HAL_TIM_MspPostInit+0x9c>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_TIM_MspPostInit+0x9c>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	4619      	mov	r1, r3
 80019fc:	4814      	ldr	r0, [pc, #80]	; (8001a50 <HAL_TIM_MspPostInit+0xa0>)
 80019fe:	f000 fab9 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a02:	e01c      	b.n	8001a3e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0c:	d117      	bne.n	8001a3e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_TIM_MspPostInit+0x9c>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <HAL_TIM_MspPostInit+0x9c>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	6193      	str	r3, [r2, #24]
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_TIM_MspPostInit+0x9c>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a26:	2304      	movs	r3, #4
 8001a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_TIM_MspPostInit+0xa0>)
 8001a3a:	f000 fa9b 	bl	8001f74 <HAL_GPIO_Init>
}
 8001a3e:	bf00      	nop
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40012c00 	.word	0x40012c00
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010800 	.word	0x40010800

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001a58:	f000 fffe 	bl	8002a58 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <NMI_Handler+0x8>

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9e:	f000 f8a3 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
	...

08001ab4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <TIM1_UP_IRQHandler+0x10>)
 8001aba:	f001 fe01 	bl	80036c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000080 	.word	0x20000080

08001ac8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <TIM2_IRQHandler+0x10>)
 8001ace:	f001 fdf7 	bl	80036c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200000c8 	.word	0x200000c8

08001adc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <TIM3_IRQHandler+0x10>)
 8001ae2:	f001 fded 	bl	80036c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000110 	.word	0x20000110

08001af0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <SPI1_IRQHandler+0x10>)
 8001af6:	f001 fa1b 	bl	8002f30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000028 	.word	0x20000028

08001b04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b10:	f7ff fff8 	bl	8001b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b14:	480b      	ldr	r0, [pc, #44]	; (8001b44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b16:	490c      	ldr	r1, [pc, #48]	; (8001b48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b18:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b1c:	e002      	b.n	8001b24 <LoopCopyDataInit>

08001b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b22:	3304      	adds	r3, #4

08001b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b28:	d3f9      	bcc.n	8001b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b2c:	4c09      	ldr	r4, [pc, #36]	; (8001b54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b30:	e001      	b.n	8001b36 <LoopFillZerobss>

08001b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b34:	3204      	adds	r2, #4

08001b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b38:	d3fb      	bcc.n	8001b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f002 fbe5 	bl	8004308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b3e:	f7ff fb93 	bl	8001268 <main>
  bx lr
 8001b42:	4770      	bx	lr
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b4c:	080044dc 	.word	0x080044dc
  ldr r2, =_sbss
 8001b50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b54:	2000016c 	.word	0x2000016c

08001b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC1_2_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_Init+0x28>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_Init+0x28>)
 8001b66:	f043 0310 	orr.w	r3, r3, #16
 8001b6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f000 f947 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b72:	200f      	movs	r0, #15
 8001b74:	f000 f808 	bl	8001b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b78:	f7ff fe18 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40022000 	.word	0x40022000

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x54>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_InitTick+0x58>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f95f 	bl	8001e6a <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00e      	b.n	8001bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d80a      	bhi.n	8001bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f000 f927 	bl	8001e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_InitTick+0x5c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000008 	.word	0x20000008
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_IncTick+0x1c>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_IncTick+0x20>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a03      	ldr	r2, [pc, #12]	; (8001c08 <HAL_IncTick+0x20>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000168 	.word	0x20000168

08001c0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b02      	ldr	r3, [pc, #8]	; (8001c1c <HAL_GetTick+0x10>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	20000168 	.word	0x20000168

08001c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff fff0 	bl	8001c0c <HAL_GetTick>
 8001c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c38:	d005      	beq.n	8001c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_Delay+0x44>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c46:	bf00      	nop
 8001c48:	f7ff ffe0 	bl	8001c0c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d8f7      	bhi.n	8001c48 <HAL_Delay+0x28>
  {
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4906      	ldr	r1, [pc, #24]	; (8001d00 <__NVIC_EnableIRQ+0x34>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f7ff ff90 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff2d 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff42 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff90 	bl	8001d58 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5f 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff35 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffa2 	bl	8001dbc <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d005      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
 8001ea6:	e051      	b.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 020e 	bic.w	r2, r2, #14
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <HAL_DMA_Abort_IT+0xd4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d029      	beq.n	8001f26 <HAL_DMA_Abort_IT+0xa2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a21      	ldr	r2, [pc, #132]	; (8001f5c <HAL_DMA_Abort_IT+0xd8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d022      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x9e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <HAL_DMA_Abort_IT+0xdc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01a      	beq.n	8001f1c <HAL_DMA_Abort_IT+0x98>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <HAL_DMA_Abort_IT+0xe0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d012      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x92>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <HAL_DMA_Abort_IT+0xe4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00a      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x8c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_DMA_Abort_IT+0xe8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d102      	bne.n	8001f0a <HAL_DMA_Abort_IT+0x86>
 8001f04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f08:	e00e      	b.n	8001f28 <HAL_DMA_Abort_IT+0xa4>
 8001f0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f0e:	e00b      	b.n	8001f28 <HAL_DMA_Abort_IT+0xa4>
 8001f10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f14:	e008      	b.n	8001f28 <HAL_DMA_Abort_IT+0xa4>
 8001f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1a:	e005      	b.n	8001f28 <HAL_DMA_Abort_IT+0xa4>
 8001f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f20:	e002      	b.n	8001f28 <HAL_DMA_Abort_IT+0xa4>
 8001f22:	2310      	movs	r3, #16
 8001f24:	e000      	b.n	8001f28 <HAL_DMA_Abort_IT+0xa4>
 8001f26:	2301      	movs	r3, #1
 8001f28:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <HAL_DMA_Abort_IT+0xec>)
 8001f2a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
    } 
  }
  return status;
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40020008 	.word	0x40020008
 8001f5c:	4002001c 	.word	0x4002001c
 8001f60:	40020030 	.word	0x40020030
 8001f64:	40020044 	.word	0x40020044
 8001f68:	40020058 	.word	0x40020058
 8001f6c:	4002006c 	.word	0x4002006c
 8001f70:	40020000 	.word	0x40020000

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b08b      	sub	sp, #44	; 0x2c
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f86:	e169      	b.n	800225c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f040 8158 	bne.w	8002256 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4a9a      	ldr	r2, [pc, #616]	; (8002214 <HAL_GPIO_Init+0x2a0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d05e      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fb0:	4a98      	ldr	r2, [pc, #608]	; (8002214 <HAL_GPIO_Init+0x2a0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d875      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fb6:	4a98      	ldr	r2, [pc, #608]	; (8002218 <HAL_GPIO_Init+0x2a4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d058      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fbc:	4a96      	ldr	r2, [pc, #600]	; (8002218 <HAL_GPIO_Init+0x2a4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d86f      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fc2:	4a96      	ldr	r2, [pc, #600]	; (800221c <HAL_GPIO_Init+0x2a8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d052      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fc8:	4a94      	ldr	r2, [pc, #592]	; (800221c <HAL_GPIO_Init+0x2a8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d869      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fce:	4a94      	ldr	r2, [pc, #592]	; (8002220 <HAL_GPIO_Init+0x2ac>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d04c      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fd4:	4a92      	ldr	r2, [pc, #584]	; (8002220 <HAL_GPIO_Init+0x2ac>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d863      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fda:	4a92      	ldr	r2, [pc, #584]	; (8002224 <HAL_GPIO_Init+0x2b0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d046      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fe0:	4a90      	ldr	r2, [pc, #576]	; (8002224 <HAL_GPIO_Init+0x2b0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d85d      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d82a      	bhi.n	8002040 <HAL_GPIO_Init+0xcc>
 8001fea:	2b12      	cmp	r3, #18
 8001fec:	d859      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fee:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <HAL_GPIO_Init+0x80>)
 8001ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff4:	0800206f 	.word	0x0800206f
 8001ff8:	08002049 	.word	0x08002049
 8001ffc:	0800205b 	.word	0x0800205b
 8002000:	0800209d 	.word	0x0800209d
 8002004:	080020a3 	.word	0x080020a3
 8002008:	080020a3 	.word	0x080020a3
 800200c:	080020a3 	.word	0x080020a3
 8002010:	080020a3 	.word	0x080020a3
 8002014:	080020a3 	.word	0x080020a3
 8002018:	080020a3 	.word	0x080020a3
 800201c:	080020a3 	.word	0x080020a3
 8002020:	080020a3 	.word	0x080020a3
 8002024:	080020a3 	.word	0x080020a3
 8002028:	080020a3 	.word	0x080020a3
 800202c:	080020a3 	.word	0x080020a3
 8002030:	080020a3 	.word	0x080020a3
 8002034:	080020a3 	.word	0x080020a3
 8002038:	08002051 	.word	0x08002051
 800203c:	08002065 	.word	0x08002065
 8002040:	4a79      	ldr	r2, [pc, #484]	; (8002228 <HAL_GPIO_Init+0x2b4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002046:	e02c      	b.n	80020a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	623b      	str	r3, [r7, #32]
          break;
 800204e:	e029      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	3304      	adds	r3, #4
 8002056:	623b      	str	r3, [r7, #32]
          break;
 8002058:	e024      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	3308      	adds	r3, #8
 8002060:	623b      	str	r3, [r7, #32]
          break;
 8002062:	e01f      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	330c      	adds	r3, #12
 800206a:	623b      	str	r3, [r7, #32]
          break;
 800206c:	e01a      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002076:	2304      	movs	r3, #4
 8002078:	623b      	str	r3, [r7, #32]
          break;
 800207a:	e013      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d105      	bne.n	8002090 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002084:	2308      	movs	r3, #8
 8002086:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	611a      	str	r2, [r3, #16]
          break;
 800208e:	e009      	b.n	80020a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002090:	2308      	movs	r3, #8
 8002092:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	615a      	str	r2, [r3, #20]
          break;
 800209a:	e003      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
          break;
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          break;
 80020a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d801      	bhi.n	80020ae <HAL_GPIO_Init+0x13a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	e001      	b.n	80020b2 <HAL_GPIO_Init+0x13e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3304      	adds	r3, #4
 80020b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2bff      	cmp	r3, #255	; 0xff
 80020b8:	d802      	bhi.n	80020c0 <HAL_GPIO_Init+0x14c>
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	e002      	b.n	80020c6 <HAL_GPIO_Init+0x152>
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	3b08      	subs	r3, #8
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	210f      	movs	r1, #15
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	401a      	ands	r2, r3
 80020d8:	6a39      	ldr	r1, [r7, #32]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	431a      	orrs	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80b1 	beq.w	8002256 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020f4:	4b4d      	ldr	r3, [pc, #308]	; (800222c <HAL_GPIO_Init+0x2b8>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4a4c      	ldr	r2, [pc, #304]	; (800222c <HAL_GPIO_Init+0x2b8>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6193      	str	r3, [r2, #24]
 8002100:	4b4a      	ldr	r3, [pc, #296]	; (800222c <HAL_GPIO_Init+0x2b8>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800210c:	4a48      	ldr	r2, [pc, #288]	; (8002230 <HAL_GPIO_Init+0x2bc>)
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002118:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	220f      	movs	r2, #15
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4013      	ands	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a40      	ldr	r2, [pc, #256]	; (8002234 <HAL_GPIO_Init+0x2c0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d013      	beq.n	8002160 <HAL_GPIO_Init+0x1ec>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3f      	ldr	r2, [pc, #252]	; (8002238 <HAL_GPIO_Init+0x2c4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d00d      	beq.n	800215c <HAL_GPIO_Init+0x1e8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a3e      	ldr	r2, [pc, #248]	; (800223c <HAL_GPIO_Init+0x2c8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d007      	beq.n	8002158 <HAL_GPIO_Init+0x1e4>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <HAL_GPIO_Init+0x2cc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d101      	bne.n	8002154 <HAL_GPIO_Init+0x1e0>
 8002150:	2303      	movs	r3, #3
 8002152:	e006      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002154:	2304      	movs	r3, #4
 8002156:	e004      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002158:	2302      	movs	r3, #2
 800215a:	e002      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002160:	2300      	movs	r3, #0
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	f002 0203 	and.w	r2, r2, #3
 8002168:	0092      	lsls	r2, r2, #2
 800216a:	4093      	lsls	r3, r2
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002172:	492f      	ldr	r1, [pc, #188]	; (8002230 <HAL_GPIO_Init+0x2bc>)
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800218c:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	492c      	ldr	r1, [pc, #176]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	608b      	str	r3, [r1, #8]
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800219a:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	4928      	ldr	r1, [pc, #160]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	4922      	ldr	r1, [pc, #136]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	491e      	ldr	r1, [pc, #120]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4918      	ldr	r1, [pc, #96]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	4914      	ldr	r1, [pc, #80]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d021      	beq.n	8002248 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	490e      	ldr	r1, [pc, #56]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
 8002210:	e021      	b.n	8002256 <HAL_GPIO_Init+0x2e2>
 8002212:	bf00      	nop
 8002214:	10320000 	.word	0x10320000
 8002218:	10310000 	.word	0x10310000
 800221c:	10220000 	.word	0x10220000
 8002220:	10210000 	.word	0x10210000
 8002224:	10120000 	.word	0x10120000
 8002228:	10110000 	.word	0x10110000
 800222c:	40021000 	.word	0x40021000
 8002230:	40010000 	.word	0x40010000
 8002234:	40010800 	.word	0x40010800
 8002238:	40010c00 	.word	0x40010c00
 800223c:	40011000 	.word	0x40011000
 8002240:	40011400 	.word	0x40011400
 8002244:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_GPIO_Init+0x304>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	43db      	mvns	r3, r3
 8002250:	4909      	ldr	r1, [pc, #36]	; (8002278 <HAL_GPIO_Init+0x304>)
 8002252:	4013      	ands	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	3301      	adds	r3, #1
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	fa22 f303 	lsr.w	r3, r2, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	f47f ae8e 	bne.w	8001f88 <HAL_GPIO_Init+0x14>
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	372c      	adds	r7, #44	; 0x2c
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40010400 	.word	0x40010400

0800227c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
 8002288:	4613      	mov	r3, r2
 800228a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800228c:	787b      	ldrb	r3, [r7, #1]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002298:	e003      	b.n	80022a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800229a:	887b      	ldrh	r3, [r7, #2]
 800229c:	041a      	lsls	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	611a      	str	r2, [r3, #16]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e272      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8087 	beq.w	80023da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022cc:	4b92      	ldr	r3, [pc, #584]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d00c      	beq.n	80022f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022d8:	4b8f      	ldr	r3, [pc, #572]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d112      	bne.n	800230a <HAL_RCC_OscConfig+0x5e>
 80022e4:	4b8c      	ldr	r3, [pc, #560]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f0:	d10b      	bne.n	800230a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f2:	4b89      	ldr	r3, [pc, #548]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d06c      	beq.n	80023d8 <HAL_RCC_OscConfig+0x12c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d168      	bne.n	80023d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e24c      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x76>
 8002314:	4b80      	ldr	r3, [pc, #512]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a7f      	ldr	r2, [pc, #508]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	e02e      	b.n	8002380 <HAL_RCC_OscConfig+0xd4>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x98>
 800232a:	4b7b      	ldr	r3, [pc, #492]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a7a      	ldr	r2, [pc, #488]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b78      	ldr	r3, [pc, #480]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a77      	ldr	r2, [pc, #476]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800233c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e01d      	b.n	8002380 <HAL_RCC_OscConfig+0xd4>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0xbc>
 800234e:	4b72      	ldr	r3, [pc, #456]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a71      	ldr	r2, [pc, #452]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b6f      	ldr	r3, [pc, #444]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a6e      	ldr	r2, [pc, #440]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e00b      	b.n	8002380 <HAL_RCC_OscConfig+0xd4>
 8002368:	4b6b      	ldr	r3, [pc, #428]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a6a      	ldr	r2, [pc, #424]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800236e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b68      	ldr	r3, [pc, #416]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a67      	ldr	r2, [pc, #412]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800237a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d013      	beq.n	80023b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7ff fc40 	bl	8001c0c <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002390:	f7ff fc3c 	bl	8001c0c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e200      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b5d      	ldr	r3, [pc, #372]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0xe4>
 80023ae:	e014      	b.n	80023da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff fc2c 	bl	8001c0c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff fc28 	bl	8001c0c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e1ec      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ca:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x10c>
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d063      	beq.n	80024ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023e6:	4b4c      	ldr	r3, [pc, #304]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023f2:	4b49      	ldr	r3, [pc, #292]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d11c      	bne.n	8002438 <HAL_RCC_OscConfig+0x18c>
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d116      	bne.n	8002438 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	4b43      	ldr	r3, [pc, #268]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_RCC_OscConfig+0x176>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d001      	beq.n	8002422 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e1c0      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4939      	ldr	r1, [pc, #228]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	e03a      	b.n	80024ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d020      	beq.n	8002482 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002440:	4b36      	ldr	r3, [pc, #216]	; (800251c <HAL_RCC_OscConfig+0x270>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7ff fbe1 	bl	8001c0c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244e:	f7ff fbdd 	bl	8001c0c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1a1      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246c:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4927      	ldr	r1, [pc, #156]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]
 8002480:	e015      	b.n	80024ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002482:	4b26      	ldr	r3, [pc, #152]	; (800251c <HAL_RCC_OscConfig+0x270>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff fbc0 	bl	8001c0c <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002490:	f7ff fbbc 	bl	8001c0c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e180      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d03a      	beq.n	8002530 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d019      	beq.n	80024f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c2:	4b17      	ldr	r3, [pc, #92]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c8:	f7ff fba0 	bl	8001c0c <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d0:	f7ff fb9c 	bl	8001c0c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e160      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f000 fac6 	bl	8002a80 <RCC_Delay>
 80024f4:	e01c      	b.n	8002530 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fc:	f7ff fb86 	bl	8001c0c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002502:	e00f      	b.n	8002524 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002504:	f7ff fb82 	bl	8001c0c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d908      	bls.n	8002524 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e146      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	42420000 	.word	0x42420000
 8002520:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	4b92      	ldr	r3, [pc, #584]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1e9      	bne.n	8002504 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a6 	beq.w	800268a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002542:	4b8b      	ldr	r3, [pc, #556]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10d      	bne.n	800256a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	4b88      	ldr	r3, [pc, #544]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a87      	ldr	r2, [pc, #540]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	61d3      	str	r3, [r2, #28]
 800255a:	4b85      	ldr	r3, [pc, #532]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	4b82      	ldr	r3, [pc, #520]	; (8002774 <HAL_RCC_OscConfig+0x4c8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d118      	bne.n	80025a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002576:	4b7f      	ldr	r3, [pc, #508]	; (8002774 <HAL_RCC_OscConfig+0x4c8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a7e      	ldr	r2, [pc, #504]	; (8002774 <HAL_RCC_OscConfig+0x4c8>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002582:	f7ff fb43 	bl	8001c0c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258a:	f7ff fb3f 	bl	8001c0c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b64      	cmp	r3, #100	; 0x64
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e103      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	4b75      	ldr	r3, [pc, #468]	; (8002774 <HAL_RCC_OscConfig+0x4c8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x312>
 80025b0:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4a6e      	ldr	r2, [pc, #440]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6213      	str	r3, [r2, #32]
 80025bc:	e02d      	b.n	800261a <HAL_RCC_OscConfig+0x36e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x334>
 80025c6:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a69      	ldr	r2, [pc, #420]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	6213      	str	r3, [r2, #32]
 80025d2:	4b67      	ldr	r3, [pc, #412]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4a66      	ldr	r2, [pc, #408]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	f023 0304 	bic.w	r3, r3, #4
 80025dc:	6213      	str	r3, [r2, #32]
 80025de:	e01c      	b.n	800261a <HAL_RCC_OscConfig+0x36e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2b05      	cmp	r3, #5
 80025e6:	d10c      	bne.n	8002602 <HAL_RCC_OscConfig+0x356>
 80025e8:	4b61      	ldr	r3, [pc, #388]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4a60      	ldr	r2, [pc, #384]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	6213      	str	r3, [r2, #32]
 80025f4:	4b5e      	ldr	r3, [pc, #376]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4a5d      	ldr	r2, [pc, #372]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6213      	str	r3, [r2, #32]
 8002600:	e00b      	b.n	800261a <HAL_RCC_OscConfig+0x36e>
 8002602:	4b5b      	ldr	r3, [pc, #364]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4a5a      	ldr	r2, [pc, #360]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	6213      	str	r3, [r2, #32]
 800260e:	4b58      	ldr	r3, [pc, #352]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4a57      	ldr	r2, [pc, #348]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	f023 0304 	bic.w	r3, r3, #4
 8002618:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d015      	beq.n	800264e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7ff faf3 	bl	8001c0c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7ff faef 	bl	8001c0c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	; 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e0b1      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002640:	4b4b      	ldr	r3, [pc, #300]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ee      	beq.n	800262a <HAL_RCC_OscConfig+0x37e>
 800264c:	e014      	b.n	8002678 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264e:	f7ff fadd 	bl	8001c0c <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7ff fad9 	bl	8001c0c <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e09b      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266c:	4b40      	ldr	r3, [pc, #256]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ee      	bne.n	8002656 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d105      	bne.n	800268a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267e:	4b3c      	ldr	r3, [pc, #240]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	4a3b      	ldr	r2, [pc, #236]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002688:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8087 	beq.w	80027a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002694:	4b36      	ldr	r3, [pc, #216]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b08      	cmp	r3, #8
 800269e:	d061      	beq.n	8002764 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d146      	bne.n	8002736 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a8:	4b33      	ldr	r3, [pc, #204]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7ff faad 	bl	8001c0c <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b6:	f7ff faa9 	bl	8001c0c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e06d      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c8:	4b29      	ldr	r3, [pc, #164]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f0      	bne.n	80026b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026dc:	d108      	bne.n	80026f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	4921      	ldr	r1, [pc, #132]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f0:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a19      	ldr	r1, [r3, #32]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	430b      	orrs	r3, r1
 8002702:	491b      	ldr	r1, [pc, #108]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002708:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7ff fa7d 	bl	8001c0c <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002716:	f7ff fa79 	bl	8001c0c <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e03d      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x46a>
 8002734:	e035      	b.n	80027a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff fa66 	bl	8001c0c <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002744:	f7ff fa62 	bl	8001c0c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e026      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x498>
 8002762:	e01e      	b.n	80027a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d107      	bne.n	800277c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e019      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
 8002770:	40021000 	.word	0x40021000
 8002774:	40007000 	.word	0x40007000
 8002778:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_OscConfig+0x500>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	429a      	cmp	r2, r3
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000

080027b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0d0      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b6a      	ldr	r3, [pc, #424]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d910      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0207 	bic.w	r2, r3, #7
 80027da:	4965      	ldr	r1, [pc, #404]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b63      	ldr	r3, [pc, #396]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0b8      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800280c:	4b59      	ldr	r3, [pc, #356]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4a58      	ldr	r2, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002816:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002824:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800282e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002830:	4b50      	ldr	r3, [pc, #320]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	494d      	ldr	r1, [pc, #308]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d040      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d115      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e07f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	4b41      	ldr	r3, [pc, #260]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e073      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e06b      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288e:	4b39      	ldr	r3, [pc, #228]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f023 0203 	bic.w	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4936      	ldr	r1, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a0:	f7ff f9b4 	bl	8001c0c <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	e00a      	b.n	80028be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a8:	f7ff f9b0 	bl	8001c0c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e053      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 020c 	and.w	r2, r3, #12
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1eb      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d210      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0207 	bic.w	r2, r3, #7
 80028e6:	4922      	ldr	r1, [pc, #136]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e032      	b.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4916      	ldr	r1, [pc, #88]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	490e      	ldr	r1, [pc, #56]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800293e:	f000 f82d 	bl	800299c <HAL_RCC_GetSysClockFreq>
 8002942:	4602      	mov	r2, r0
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	490a      	ldr	r1, [pc, #40]	; (8002978 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	5ccb      	ldrb	r3, [r1, r3]
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1cc>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_RCC_ClockConfig+0x1d0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff f912 	bl	8001b88 <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40022000 	.word	0x40022000
 8002974:	40021000 	.word	0x40021000
 8002978:	080044b0 	.word	0x080044b0
 800297c:	20000000 	.word	0x20000000
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002988:	4b03      	ldr	r3, [pc, #12]	; (8002998 <HAL_RCC_EnableCSS+0x14>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	4242004c 	.word	0x4242004c

0800299c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029b6:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x94>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d002      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x30>
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x36>
 80029ca:	e027      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ce:	613b      	str	r3, [r7, #16]
      break;
 80029d0:	e027      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	0c9b      	lsrs	r3, r3, #18
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	4a17      	ldr	r2, [pc, #92]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029dc:	5cd3      	ldrb	r3, [r2, r3]
 80029de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d010      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x94>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	0c5b      	lsrs	r3, r3, #17
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xa0>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a0d      	ldr	r2, [pc, #52]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x98>)
 80029fe:	fb03 f202 	mul.w	r2, r3, r2
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	e004      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a10:	fb02 f303 	mul.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	613b      	str	r3, [r7, #16]
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a1e:	613b      	str	r3, [r7, #16]
      break;
 8002a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a22:	693b      	ldr	r3, [r7, #16]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	007a1200 	.word	0x007a1200
 8002a38:	080044c0 	.word	0x080044c0
 8002a3c:	080044d0 	.word	0x080044d0
 8002a40:	003d0900 	.word	0x003d0900

08002a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a48:	4b02      	ldr	r3, [pc, #8]	; (8002a54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	20000000 	.word	0x20000000

08002a58 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	2b80      	cmp	r3, #128	; 0x80
 8002a66:	d104      	bne.n	8002a72 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002a68:	f000 f828 	bl	8002abc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_RCC_NMI_IRQHandler+0x24>)
 8002a6e:	2280      	movs	r2, #128	; 0x80
 8002a70:	701a      	strb	r2, [r3, #0]
  }
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	4002100a 	.word	0x4002100a

08002a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <RCC_Delay+0x34>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <RCC_Delay+0x38>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	0a5b      	lsrs	r3, r3, #9
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a9c:	bf00      	nop
  }
  while (Delay --);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e5a      	subs	r2, r3, #1
 8002aa2:	60fa      	str	r2, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f9      	bne.n	8002a9c <RCC_Delay+0x1c>
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	10624dd3 	.word	0x10624dd3

08002abc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e076      	b.n	8002bc8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d108      	bne.n	8002af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aea:	d009      	beq.n	8002b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
 8002af2:	e005      	b.n	8002b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe fe80 	bl	8001820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	ea42 0103 	orr.w	r1, r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	0c1a      	lsrs	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f002 0204 	and.w	r2, r2, #4
 8002ba6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69da      	ldr	r2, [r3, #28]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08c      	sub	sp, #48	; 0x30
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bde:	2301      	movs	r3, #1
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_SPI_TransmitReceive+0x26>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e198      	b.n	8002f28 <HAL_SPI_TransmitReceive+0x358>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bfe:	f7ff f805 	bl	8001c0c <HAL_GetTick>
 8002c02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c14:	887b      	ldrh	r3, [r7, #2]
 8002c16:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d00f      	beq.n	8002c40 <HAL_SPI_TransmitReceive+0x70>
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c26:	d107      	bne.n	8002c38 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <HAL_SPI_TransmitReceive+0x68>
 8002c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d003      	beq.n	8002c40 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c3e:	e16d      	b.n	8002f1c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_SPI_TransmitReceive+0x82>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_SPI_TransmitReceive+0x82>
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d103      	bne.n	8002c5a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c58:	e160      	b.n	8002f1c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d003      	beq.n	8002c6e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2205      	movs	r2, #5
 8002c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	887a      	ldrh	r2, [r7, #2]
 8002c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	887a      	ldrh	r2, [r7, #2]
 8002c96:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b40      	cmp	r3, #64	; 0x40
 8002cb0:	d007      	beq.n	8002cc2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cca:	d17c      	bne.n	8002dc6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_SPI_TransmitReceive+0x10a>
 8002cd4:	8b7b      	ldrh	r3, [r7, #26]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d16a      	bne.n	8002db0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	881a      	ldrh	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	1c9a      	adds	r2, r3, #2
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cfe:	e057      	b.n	8002db0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d11b      	bne.n	8002d46 <HAL_SPI_TransmitReceive+0x176>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d016      	beq.n	8002d46 <HAL_SPI_TransmitReceive+0x176>
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d113      	bne.n	8002d46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	881a      	ldrh	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	1c9a      	adds	r2, r3, #2
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d119      	bne.n	8002d88 <HAL_SPI_TransmitReceive+0x1b8>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d014      	beq.n	8002d88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	b292      	uxth	r2, r2
 8002d6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	1c9a      	adds	r2, r3, #2
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d84:	2301      	movs	r3, #1
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d88:	f7fe ff40 	bl	8001c0c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d80b      	bhi.n	8002db0 <HAL_SPI_TransmitReceive+0x1e0>
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9e:	d007      	beq.n	8002db0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002dae:	e0b5      	b.n	8002f1c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1a2      	bne.n	8002d00 <HAL_SPI_TransmitReceive+0x130>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d19d      	bne.n	8002d00 <HAL_SPI_TransmitReceive+0x130>
 8002dc4:	e080      	b.n	8002ec8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_SPI_TransmitReceive+0x204>
 8002dce:	8b7b      	ldrh	r3, [r7, #26]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d16f      	bne.n	8002eb4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	7812      	ldrb	r2, [r2, #0]
 8002de0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dfa:	e05b      	b.n	8002eb4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d11c      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x274>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d017      	beq.n	8002e44 <HAL_SPI_TransmitReceive+0x274>
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d114      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	330c      	adds	r3, #12
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d119      	bne.n	8002e86 <HAL_SPI_TransmitReceive+0x2b6>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d014      	beq.n	8002e86 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e82:	2301      	movs	r3, #1
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e86:	f7fe fec1 	bl	8001c0c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d803      	bhi.n	8002e9e <HAL_SPI_TransmitReceive+0x2ce>
 8002e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d102      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x2d4>
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002eb2:	e033      	b.n	8002f1c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d19e      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x22c>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d199      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f9b3 	bl	8003238 <SPI_EndRxTxTransaction>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d006      	beq.n	8002ee6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ee4:	e01a      	b.n	8002f1c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10a      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f12:	e003      	b.n	8002f1c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3730      	adds	r7, #48	; 0x30
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10e      	bne.n	8002f70 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d004      	beq.n	8002f70 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
    return;
 8002f6e:	e0b7      	b.n	80030e0 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d009      	beq.n	8002f8e <HAL_SPI_IRQHandler+0x5e>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d004      	beq.n	8002f8e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
    return;
 8002f8c:	e0a8      	b.n	80030e0 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <HAL_SPI_IRQHandler+0x74>
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 809e 	beq.w	80030e0 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8098 	beq.w	80030e0 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d023      	beq.n	8003002 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d011      	beq.n	8002fea <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	f043 0204 	orr.w	r2, r3, #4
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	e00b      	b.n	8003002 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]
        return;
 8003000:	e06e      	b.n	80030e0 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d014      	beq.n	8003036 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	f043 0201 	orr.w	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303a:	2b00      	cmp	r3, #0
 800303c:	d04f      	beq.n	80030de <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800304c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d104      	bne.n	800306a <HAL_SPI_IRQHandler+0x13a>
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d034      	beq.n	80030d4 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0203 	bic.w	r2, r2, #3
 8003078:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307e:	2b00      	cmp	r3, #0
 8003080:	d011      	beq.n	80030a6 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	4a18      	ldr	r2, [pc, #96]	; (80030e8 <HAL_SPI_IRQHandler+0x1b8>)
 8003088:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fef8 	bl	8001e84 <HAL_DMA_Abort_IT>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d016      	beq.n	80030dc <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b2:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <HAL_SPI_IRQHandler+0x1b8>)
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fee2 	bl	8001e84 <HAL_DMA_Abort_IT>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80030d2:	e003      	b.n	80030dc <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f809 	bl	80030ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80030da:	e000      	b.n	80030de <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 80030dc:	bf00      	nop
    return;
 80030de:	bf00      	nop
  }
}
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	080030ff 	.word	0x080030ff

080030ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7ff ffe7 	bl	80030ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003138:	f7fe fd68 	bl	8001c0c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	4413      	add	r3, r2
 8003146:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003148:	f7fe fd60 	bl	8001c0c <HAL_GetTick>
 800314c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800314e:	4b39      	ldr	r3, [pc, #228]	; (8003234 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	015b      	lsls	r3, r3, #5
 8003154:	0d1b      	lsrs	r3, r3, #20
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	fb02 f303 	mul.w	r3, r2, r3
 800315c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800315e:	e054      	b.n	800320a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d050      	beq.n	800320a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003168:	f7fe fd50 	bl	8001c0c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	429a      	cmp	r2, r3
 8003176:	d902      	bls.n	800317e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d13d      	bne.n	80031fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800318c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003196:	d111      	bne.n	80031bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a0:	d004      	beq.n	80031ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031aa:	d107      	bne.n	80031bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c4:	d10f      	bne.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e017      	b.n	800322a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3b01      	subs	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4013      	ands	r3, r2
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	429a      	cmp	r2, r3
 8003226:	d19b      	bne.n	8003160 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000000 	.word	0x20000000

08003238 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2200      	movs	r2, #0
 800324c:	2180      	movs	r1, #128	; 0x80
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f7ff ff6a 	bl	8003128 <SPI_WaitFlagStateUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d007      	beq.n	800326a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e000      	b.n	800326c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e041      	b.n	800330a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fe fb62 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4619      	mov	r1, r3
 80032b2:	4610      	mov	r0, r2
 80032b4:	f000 fcba 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d001      	beq.n	800332c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e03a      	b.n	80033a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a18      	ldr	r2, [pc, #96]	; (80033ac <HAL_TIM_Base_Start_IT+0x98>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x58>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003356:	d009      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x58>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x58>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d111      	bne.n	8003390 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b06      	cmp	r3, #6
 800337c:	d010      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338e:	e007      	b.n	80033a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800

080033b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0201 	bic.w	r2, r2, #1
 80033ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6a1a      	ldr	r2, [r3, #32]
 80033d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10f      	bne.n	8003400 <HAL_TIM_Base_Stop_IT+0x48>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a1a      	ldr	r2, [r3, #32]
 80033e6:	f240 4344 	movw	r3, #1092	; 0x444
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d107      	bne.n	8003400 <HAL_TIM_Base_Stop_IT+0x48>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e041      	b.n	80034aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe fa52 	bl	80018e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f000 fbea 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_TIM_PWM_Start+0x24>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e022      	b.n	800351e <HAL_TIM_PWM_Start+0x6a>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d109      	bne.n	80034f2 <HAL_TIM_PWM_Start+0x3e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	bf14      	ite	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	2300      	moveq	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	e015      	b.n	800351e <HAL_TIM_PWM_Start+0x6a>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d109      	bne.n	800350c <HAL_TIM_PWM_Start+0x58>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e008      	b.n	800351e <HAL_TIM_PWM_Start+0x6a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e05e      	b.n	80035e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <HAL_TIM_PWM_Start+0x82>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003534:	e013      	b.n	800355e <HAL_TIM_PWM_Start+0xaa>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d104      	bne.n	8003546 <HAL_TIM_PWM_Start+0x92>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003544:	e00b      	b.n	800355e <HAL_TIM_PWM_Start+0xaa>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d104      	bne.n	8003556 <HAL_TIM_PWM_Start+0xa2>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003554:	e003      	b.n	800355e <HAL_TIM_PWM_Start+0xaa>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2201      	movs	r2, #1
 8003564:	6839      	ldr	r1, [r7, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fde0 	bl	800412c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1e      	ldr	r2, [pc, #120]	; (80035ec <HAL_TIM_PWM_Start+0x138>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d107      	bne.n	8003586 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_TIM_PWM_Start+0x138>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00e      	beq.n	80035ae <HAL_TIM_PWM_Start+0xfa>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d009      	beq.n	80035ae <HAL_TIM_PWM_Start+0xfa>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <HAL_TIM_PWM_Start+0x13c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_TIM_PWM_Start+0xfa>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <HAL_TIM_PWM_Start+0x140>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d111      	bne.n	80035d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b06      	cmp	r3, #6
 80035be:	d010      	beq.n	80035e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d0:	e007      	b.n	80035e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40000400 	.word	0x40000400
 80035f4:	40000800 	.word	0x40000800

080035f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2200      	movs	r2, #0
 8003608:	6839      	ldr	r1, [r7, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fd8e 	bl	800412c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a29      	ldr	r2, [pc, #164]	; (80036bc <HAL_TIM_PWM_Stop+0xc4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d117      	bne.n	800364a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a1a      	ldr	r2, [r3, #32]
 8003620:	f241 1311 	movw	r3, #4369	; 0x1111
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10f      	bne.n	800364a <HAL_TIM_PWM_Stop+0x52>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a1a      	ldr	r2, [r3, #32]
 8003630:	f240 4344 	movw	r3, #1092	; 0x444
 8003634:	4013      	ands	r3, r2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d107      	bne.n	800364a <HAL_TIM_PWM_Stop+0x52>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a1a      	ldr	r2, [r3, #32]
 8003650:	f241 1311 	movw	r3, #4369	; 0x1111
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <HAL_TIM_PWM_Stop+0x82>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6a1a      	ldr	r2, [r3, #32]
 8003660:	f240 4344 	movw	r3, #1092	; 0x444
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_TIM_PWM_Stop+0x82>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <HAL_TIM_PWM_Stop+0x92>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003688:	e013      	b.n	80036b2 <HAL_TIM_PWM_Stop+0xba>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d104      	bne.n	800369a <HAL_TIM_PWM_Stop+0xa2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003698:	e00b      	b.n	80036b2 <HAL_TIM_PWM_Stop+0xba>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d104      	bne.n	80036aa <HAL_TIM_PWM_Stop+0xb2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a8:	e003      	b.n	80036b2 <HAL_TIM_PWM_Stop+0xba>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40012c00 	.word	0x40012c00

080036c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0202 	mvn.w	r2, #2
 80036ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fa76 	bl	8003bf4 <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fa69 	bl	8003be2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fa78 	bl	8003c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b04      	cmp	r3, #4
 8003728:	d122      	bne.n	8003770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b04      	cmp	r3, #4
 8003736:	d11b      	bne.n	8003770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0204 	mvn.w	r2, #4
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2202      	movs	r2, #2
 8003746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fa4c 	bl	8003bf4 <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fa3f 	bl	8003be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fa4e 	bl	8003c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b08      	cmp	r3, #8
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b08      	cmp	r3, #8
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0208 	mvn.w	r2, #8
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2204      	movs	r2, #4
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fa22 	bl	8003bf4 <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fa15 	bl	8003be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fa24 	bl	8003c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b10      	cmp	r3, #16
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0210 	mvn.w	r2, #16
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2208      	movs	r2, #8
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f9f8 	bl	8003bf4 <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9eb 	bl	8003be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f9fa 	bl	8003c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0201 	mvn.w	r2, #1
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fd fbe0 	bl	8001004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d10e      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d107      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fd3a 	bl	80042e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d10e      	bne.n	800389c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d107      	bne.n	800389c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9be 	bl	8003c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d10e      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d107      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0220 	mvn.w	r2, #32
 80038c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fd05 	bl	80042d2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e0ae      	b.n	8003a4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	f200 809f 	bhi.w	8003a3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038fe:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003939 	.word	0x08003939
 8003908:	08003a3d 	.word	0x08003a3d
 800390c:	08003a3d 	.word	0x08003a3d
 8003910:	08003a3d 	.word	0x08003a3d
 8003914:	08003979 	.word	0x08003979
 8003918:	08003a3d 	.word	0x08003a3d
 800391c:	08003a3d 	.word	0x08003a3d
 8003920:	08003a3d 	.word	0x08003a3d
 8003924:	080039bb 	.word	0x080039bb
 8003928:	08003a3d 	.word	0x08003a3d
 800392c:	08003a3d 	.word	0x08003a3d
 8003930:	08003a3d 	.word	0x08003a3d
 8003934:	080039fb 	.word	0x080039fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f9d6 	bl	8003cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0208 	orr.w	r2, r2, #8
 8003952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0204 	bic.w	r2, r2, #4
 8003962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6999      	ldr	r1, [r3, #24]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	619a      	str	r2, [r3, #24]
      break;
 8003976:	e064      	b.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fa1c 	bl	8003dbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6999      	ldr	r1, [r3, #24]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	021a      	lsls	r2, r3, #8
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	619a      	str	r2, [r3, #24]
      break;
 80039b8:	e043      	b.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fa65 	bl	8003e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0208 	orr.w	r2, r2, #8
 80039d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0204 	bic.w	r2, r2, #4
 80039e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69d9      	ldr	r1, [r3, #28]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	61da      	str	r2, [r3, #28]
      break;
 80039f8:	e023      	b.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 faaf 	bl	8003f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69d9      	ldr	r1, [r3, #28]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	021a      	lsls	r2, r3, #8
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	61da      	str	r2, [r3, #28]
      break;
 8003a3a:	e002      	b.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIM_ConfigClockSource+0x1c>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e0b4      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x186>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa8:	d03e      	beq.n	8003b28 <HAL_TIM_ConfigClockSource+0xd4>
 8003aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aae:	f200 8087 	bhi.w	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab6:	f000 8086 	beq.w	8003bc6 <HAL_TIM_ConfigClockSource+0x172>
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abe:	d87f      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b70      	cmp	r3, #112	; 0x70
 8003ac2:	d01a      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0xa6>
 8003ac4:	2b70      	cmp	r3, #112	; 0x70
 8003ac6:	d87b      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b60      	cmp	r3, #96	; 0x60
 8003aca:	d050      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x11a>
 8003acc:	2b60      	cmp	r3, #96	; 0x60
 8003ace:	d877      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b50      	cmp	r3, #80	; 0x50
 8003ad2:	d03c      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0xfa>
 8003ad4:	2b50      	cmp	r3, #80	; 0x50
 8003ad6:	d873      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b40      	cmp	r3, #64	; 0x40
 8003ada:	d058      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x13a>
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d86f      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b30      	cmp	r3, #48	; 0x30
 8003ae2:	d064      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x15a>
 8003ae4:	2b30      	cmp	r3, #48	; 0x30
 8003ae6:	d86b      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d060      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x15a>
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d867      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d05c      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x15a>
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d05a      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x15a>
 8003af8:	e062      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b0a:	f000 faf0 	bl	80040ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	609a      	str	r2, [r3, #8]
      break;
 8003b26:	e04f      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b38:	f000 fad9 	bl	80040ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b4a:	609a      	str	r2, [r3, #8]
      break;
 8003b4c:	e03c      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f000 fa50 	bl	8004000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2150      	movs	r1, #80	; 0x50
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 faa7 	bl	80040ba <TIM_ITRx_SetConfig>
      break;
 8003b6c:	e02c      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f000 fa6e 	bl	800405c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2160      	movs	r1, #96	; 0x60
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fa97 	bl	80040ba <TIM_ITRx_SetConfig>
      break;
 8003b8c:	e01c      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f000 fa30 	bl	8004000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2140      	movs	r1, #64	; 0x40
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fa87 	bl	80040ba <TIM_ITRx_SetConfig>
      break;
 8003bac:	e00c      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f000 fa7e 	bl	80040ba <TIM_ITRx_SetConfig>
      break;
 8003bbe:	e003      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc4:	e000      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr

08003c06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr
	...

08003c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <TIM_Base_SetConfig+0xb8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00b      	beq.n	8003c5c <TIM_Base_SetConfig+0x30>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4a:	d007      	beq.n	8003c5c <TIM_Base_SetConfig+0x30>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a26      	ldr	r2, [pc, #152]	; (8003ce8 <TIM_Base_SetConfig+0xbc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d003      	beq.n	8003c5c <TIM_Base_SetConfig+0x30>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a25      	ldr	r2, [pc, #148]	; (8003cec <TIM_Base_SetConfig+0xc0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d108      	bne.n	8003c6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <TIM_Base_SetConfig+0xb8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00b      	beq.n	8003c8e <TIM_Base_SetConfig+0x62>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7c:	d007      	beq.n	8003c8e <TIM_Base_SetConfig+0x62>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <TIM_Base_SetConfig+0xbc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d003      	beq.n	8003c8e <TIM_Base_SetConfig+0x62>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a18      	ldr	r2, [pc, #96]	; (8003cec <TIM_Base_SetConfig+0xc0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d108      	bne.n	8003ca0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <TIM_Base_SetConfig+0xb8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d103      	bne.n	8003cd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	615a      	str	r2, [r3, #20]
}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	40012c00 	.word	0x40012c00
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40000800 	.word	0x40000800

08003cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f023 0201 	bic.w	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f023 0302 	bic.w	r3, r3, #2
 8003d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a1c      	ldr	r2, [pc, #112]	; (8003db8 <TIM_OC1_SetConfig+0xc8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d10c      	bne.n	8003d66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0308 	bic.w	r3, r3, #8
 8003d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <TIM_OC1_SetConfig+0xc8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d111      	bne.n	8003d92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	621a      	str	r2, [r3, #32]
}
 8003dac:	bf00      	nop
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40012c00 	.word	0x40012c00

08003dbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f023 0210 	bic.w	r2, r3, #16
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 0320 	bic.w	r3, r3, #32
 8003e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <TIM_OC2_SetConfig+0xd0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10d      	bne.n	8003e38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <TIM_OC2_SetConfig+0xd0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d113      	bne.n	8003e68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	40012c00 	.word	0x40012c00

08003e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0303 	bic.w	r3, r3, #3
 8003ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <TIM_OC3_SetConfig+0xd0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d10d      	bne.n	8003f0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <TIM_OC3_SetConfig+0xd0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d113      	bne.n	8003f3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	621a      	str	r2, [r3, #32]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40012c00 	.word	0x40012c00

08003f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	031b      	lsls	r3, r3, #12
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a0f      	ldr	r2, [pc, #60]	; (8003ffc <TIM_OC4_SetConfig+0x98>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d109      	bne.n	8003fd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	019b      	lsls	r3, r3, #6
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	621a      	str	r2, [r3, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr
 8003ffc:	40012c00 	.word	0x40012c00

08004000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0201 	bic.w	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800402a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f023 030a 	bic.w	r3, r3, #10
 800403c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f023 0210 	bic.w	r2, r3, #16
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	031b      	lsls	r3, r3, #12
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004098:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	621a      	str	r2, [r3, #32]
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b085      	sub	sp, #20
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f043 0307 	orr.w	r3, r3, #7
 80040dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	609a      	str	r2, [r3, #8]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr

080040ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b087      	sub	sp, #28
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004108:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	021a      	lsls	r2, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	431a      	orrs	r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4313      	orrs	r3, r2
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	609a      	str	r2, [r3, #8]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr

0800412c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2201      	movs	r2, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	43db      	mvns	r3, r3
 800414e:	401a      	ands	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004188:	2302      	movs	r3, #2
 800418a:	e046      	b.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a16      	ldr	r2, [pc, #88]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d8:	d009      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a10      	ldr	r2, [pc, #64]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10c      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40000400 	.word	0x40000400
 800422c:	40000800 	.word	0x40000800

08004230 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004248:	2302      	movs	r3, #2
 800424a:	e03d      	b.n	80042c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr

080042d2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <memset>:
 80042f6:	4603      	mov	r3, r0
 80042f8:	4402      	add	r2, r0
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d100      	bne.n	8004300 <memset+0xa>
 80042fe:	4770      	bx	lr
 8004300:	f803 1b01 	strb.w	r1, [r3], #1
 8004304:	e7f9      	b.n	80042fa <memset+0x4>
	...

08004308 <__libc_init_array>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	2600      	movs	r6, #0
 800430c:	4d0c      	ldr	r5, [pc, #48]	; (8004340 <__libc_init_array+0x38>)
 800430e:	4c0d      	ldr	r4, [pc, #52]	; (8004344 <__libc_init_array+0x3c>)
 8004310:	1b64      	subs	r4, r4, r5
 8004312:	10a4      	asrs	r4, r4, #2
 8004314:	42a6      	cmp	r6, r4
 8004316:	d109      	bne.n	800432c <__libc_init_array+0x24>
 8004318:	f000 f8be 	bl	8004498 <_init>
 800431c:	2600      	movs	r6, #0
 800431e:	4d0a      	ldr	r5, [pc, #40]	; (8004348 <__libc_init_array+0x40>)
 8004320:	4c0a      	ldr	r4, [pc, #40]	; (800434c <__libc_init_array+0x44>)
 8004322:	1b64      	subs	r4, r4, r5
 8004324:	10a4      	asrs	r4, r4, #2
 8004326:	42a6      	cmp	r6, r4
 8004328:	d105      	bne.n	8004336 <__libc_init_array+0x2e>
 800432a:	bd70      	pop	{r4, r5, r6, pc}
 800432c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004330:	4798      	blx	r3
 8004332:	3601      	adds	r6, #1
 8004334:	e7ee      	b.n	8004314 <__libc_init_array+0xc>
 8004336:	f855 3b04 	ldr.w	r3, [r5], #4
 800433a:	4798      	blx	r3
 800433c:	3601      	adds	r6, #1
 800433e:	e7f2      	b.n	8004326 <__libc_init_array+0x1e>
 8004340:	080044d4 	.word	0x080044d4
 8004344:	080044d4 	.word	0x080044d4
 8004348:	080044d4 	.word	0x080044d4
 800434c:	080044d8 	.word	0x080044d8

08004350 <ceil>:
 8004350:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004358:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800435c:	2e13      	cmp	r6, #19
 800435e:	460b      	mov	r3, r1
 8004360:	4607      	mov	r7, r0
 8004362:	460c      	mov	r4, r1
 8004364:	4605      	mov	r5, r0
 8004366:	dc30      	bgt.n	80043ca <ceil+0x7a>
 8004368:	2e00      	cmp	r6, #0
 800436a:	da12      	bge.n	8004392 <ceil+0x42>
 800436c:	a334      	add	r3, pc, #208	; (adr r3, 8004440 <ceil+0xf0>)
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f7fb fef3 	bl	800015c <__adddf3>
 8004376:	2200      	movs	r2, #0
 8004378:	2300      	movs	r3, #0
 800437a:	f7fc f923 	bl	80005c4 <__aeabi_dcmpgt>
 800437e:	b128      	cbz	r0, 800438c <ceil+0x3c>
 8004380:	2c00      	cmp	r4, #0
 8004382:	db54      	blt.n	800442e <ceil+0xde>
 8004384:	433c      	orrs	r4, r7
 8004386:	d056      	beq.n	8004436 <ceil+0xe6>
 8004388:	2500      	movs	r5, #0
 800438a:	4c2f      	ldr	r4, [pc, #188]	; (8004448 <ceil+0xf8>)
 800438c:	4623      	mov	r3, r4
 800438e:	462f      	mov	r7, r5
 8004390:	e025      	b.n	80043de <ceil+0x8e>
 8004392:	4a2e      	ldr	r2, [pc, #184]	; (800444c <ceil+0xfc>)
 8004394:	fa42 f806 	asr.w	r8, r2, r6
 8004398:	ea01 0208 	and.w	r2, r1, r8
 800439c:	4302      	orrs	r2, r0
 800439e:	d01e      	beq.n	80043de <ceil+0x8e>
 80043a0:	a327      	add	r3, pc, #156	; (adr r3, 8004440 <ceil+0xf0>)
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f7fb fed9 	bl	800015c <__adddf3>
 80043aa:	2200      	movs	r2, #0
 80043ac:	2300      	movs	r3, #0
 80043ae:	f7fc f909 	bl	80005c4 <__aeabi_dcmpgt>
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d0ea      	beq.n	800438c <ceil+0x3c>
 80043b6:	2c00      	cmp	r4, #0
 80043b8:	bfc2      	ittt	gt
 80043ba:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80043be:	4133      	asrgt	r3, r6
 80043c0:	18e4      	addgt	r4, r4, r3
 80043c2:	2500      	movs	r5, #0
 80043c4:	ea24 0408 	bic.w	r4, r4, r8
 80043c8:	e7e0      	b.n	800438c <ceil+0x3c>
 80043ca:	2e33      	cmp	r6, #51	; 0x33
 80043cc:	dd0b      	ble.n	80043e6 <ceil+0x96>
 80043ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80043d2:	d104      	bne.n	80043de <ceil+0x8e>
 80043d4:	4602      	mov	r2, r0
 80043d6:	f7fb fec1 	bl	800015c <__adddf3>
 80043da:	4607      	mov	r7, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4638      	mov	r0, r7
 80043e0:	4619      	mov	r1, r3
 80043e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043e6:	f04f 38ff 	mov.w	r8, #4294967295
 80043ea:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80043ee:	fa28 f802 	lsr.w	r8, r8, r2
 80043f2:	ea10 0f08 	tst.w	r0, r8
 80043f6:	d0f2      	beq.n	80043de <ceil+0x8e>
 80043f8:	a311      	add	r3, pc, #68	; (adr r3, 8004440 <ceil+0xf0>)
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f7fb fead 	bl	800015c <__adddf3>
 8004402:	2200      	movs	r2, #0
 8004404:	2300      	movs	r3, #0
 8004406:	f7fc f8dd 	bl	80005c4 <__aeabi_dcmpgt>
 800440a:	2800      	cmp	r0, #0
 800440c:	d0be      	beq.n	800438c <ceil+0x3c>
 800440e:	2c00      	cmp	r4, #0
 8004410:	dd0a      	ble.n	8004428 <ceil+0xd8>
 8004412:	2e14      	cmp	r6, #20
 8004414:	d101      	bne.n	800441a <ceil+0xca>
 8004416:	3401      	adds	r4, #1
 8004418:	e006      	b.n	8004428 <ceil+0xd8>
 800441a:	2301      	movs	r3, #1
 800441c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004420:	40b3      	lsls	r3, r6
 8004422:	441d      	add	r5, r3
 8004424:	42af      	cmp	r7, r5
 8004426:	d8f6      	bhi.n	8004416 <ceil+0xc6>
 8004428:	ea25 0508 	bic.w	r5, r5, r8
 800442c:	e7ae      	b.n	800438c <ceil+0x3c>
 800442e:	2500      	movs	r5, #0
 8004430:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004434:	e7aa      	b.n	800438c <ceil+0x3c>
 8004436:	4625      	mov	r5, r4
 8004438:	e7a8      	b.n	800438c <ceil+0x3c>
 800443a:	bf00      	nop
 800443c:	f3af 8000 	nop.w
 8004440:	8800759c 	.word	0x8800759c
 8004444:	7e37e43c 	.word	0x7e37e43c
 8004448:	3ff00000 	.word	0x3ff00000
 800444c:	000fffff 	.word	0x000fffff

08004450 <roundf>:
 8004450:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004454:	3b7f      	subs	r3, #127	; 0x7f
 8004456:	2b16      	cmp	r3, #22
 8004458:	4601      	mov	r1, r0
 800445a:	b510      	push	{r4, lr}
 800445c:	dc14      	bgt.n	8004488 <roundf+0x38>
 800445e:	2b00      	cmp	r3, #0
 8004460:	da07      	bge.n	8004472 <roundf+0x22>
 8004462:	3301      	adds	r3, #1
 8004464:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8004468:	d101      	bne.n	800446e <roundf+0x1e>
 800446a:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800446e:	4608      	mov	r0, r1
 8004470:	bd10      	pop	{r4, pc}
 8004472:	4a08      	ldr	r2, [pc, #32]	; (8004494 <roundf+0x44>)
 8004474:	411a      	asrs	r2, r3
 8004476:	4210      	tst	r0, r2
 8004478:	d0f9      	beq.n	800446e <roundf+0x1e>
 800447a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800447e:	4119      	asrs	r1, r3
 8004480:	4401      	add	r1, r0
 8004482:	ea21 0102 	bic.w	r1, r1, r2
 8004486:	e7f2      	b.n	800446e <roundf+0x1e>
 8004488:	2b80      	cmp	r3, #128	; 0x80
 800448a:	d1f0      	bne.n	800446e <roundf+0x1e>
 800448c:	f7fc f8fa 	bl	8000684 <__addsf3>
 8004490:	4601      	mov	r1, r0
 8004492:	e7ec      	b.n	800446e <roundf+0x1e>
 8004494:	007fffff 	.word	0x007fffff

08004498 <_init>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr

080044a4 <_fini>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	bf00      	nop
 80044a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044aa:	bc08      	pop	{r3}
 80044ac:	469e      	mov	lr, r3
 80044ae:	4770      	bx	lr
