
uartok.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080032e4  080032e4  000132e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003310  08003310  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003310  08003310  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003310  08003310  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003310  08003310  00013310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003314  08003314  00013314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08003324  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08003324  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c4f6  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e5a  00000000  00000000  0002c56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000960  00000000  00000000  0002e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000720  00000000  00000000  0002ed28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f0c  00000000  00000000  0002f448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a2c1  00000000  00000000  00047354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080f85  00000000  00000000  00051615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002594  00000000  00000000  000d259c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d4b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080032cc 	.word	0x080032cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080032cc 	.word	0x080032cc

0800014c <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000150:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800015a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800015c:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <DWT_Delay_Init+0x58>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	4a10      	ldr	r2, [pc, #64]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000166:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000168:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016e:	f023 0301 	bic.w	r3, r3, #1
 8000172:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000186:	bf00      	nop
    __ASM volatile ("NOP");
 8000188:	bf00      	nop
    __ASM volatile ("NOP");
 800018a:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000194:	2300      	movs	r3, #0
 8000196:	e000      	b.n	800019a <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000198:	2301      	movs	r3, #1
    }
}
 800019a:	4618      	mov	r0, r3
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	e000edf0 	.word	0xe000edf0
 80001a8:	e0001000 	.word	0xe0001000

080001ac <_ZL12DWT_Delay_usm>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <_ZL12DWT_Delay_usm+0x50>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80001ba:	f002 f84b 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a0f      	ldr	r2, [pc, #60]	; (8000200 <_ZL12DWT_Delay_usm+0x54>)
 80001c2:	fba2 2303 	umull	r2, r3, r2, r3
 80001c6:	0c9b      	lsrs	r3, r3, #18
 80001c8:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	68ba      	ldr	r2, [r7, #8]
 80001ce:	fb02 f303 	mul.w	r3, r2, r3
 80001d2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80001d4:	bf00      	nop
 80001d6:	4b09      	ldr	r3, [pc, #36]	; (80001fc <_ZL12DWT_Delay_usm+0x50>)
 80001d8:	685a      	ldr	r2, [r3, #4]
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	1ad2      	subs	r2, r2, r3
 80001de:	6879      	ldr	r1, [r7, #4]
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	1acb      	subs	r3, r1, r3
 80001e4:	429a      	cmp	r2, r3
 80001e6:	bf34      	ite	cc
 80001e8:	2301      	movcc	r3, #1
 80001ea:	2300      	movcs	r3, #0
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d1f1      	bne.n	80001d6 <_ZL12DWT_Delay_usm+0x2a>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	e0001000 	.word	0xe0001000
 8000200:	431bde83 	.word	0x431bde83

08000204 <_ZN7TMC2209C1Ev>:
//
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "main.h"

TMC2209::TMC2209() {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2203      	movs	r2, #3
 8000210:	f883 2020 	strb.w	r2, [r3, #32]
	serial_baud_rate_ = 115200;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800021a:	601a      	str	r2, [r3, #0]
	serial_address_ = SERIAL_ADDRESS_0;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	711a      	strb	r2, [r3, #4]
	hardware_enable_pin_ = -1;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000228:	80da      	strh	r2, [r3, #6]
	cool_step_enabled_ = false;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2200      	movs	r2, #0
 800022e:	761a      	strb	r2, [r3, #24]
}
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4618      	mov	r0, r3
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>:

void TMC2209::setup(UART_HandleTypeDef *tmc_uart,long serial_baud_rate, SerialAddress serial_address) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
 8000248:	70fb      	strb	r3, [r7, #3]
	tmcuart=tmc_uart;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	68ba      	ldr	r2, [r7, #8]
 800024e:	609a      	str	r2, [r3, #8]
	initialize(serial_baud_rate, serial_address);
 8000250:	78fb      	ldrb	r3, [r7, #3]
 8000252:	461a      	mov	r2, r3
 8000254:	6879      	ldr	r1, [r7, #4]
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f000 f9e4 	bl	8000624 <_ZN7TMC220910initializeElNS_13SerialAddressE>
}
 800025c:	bf00      	nop
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <_ZN7TMC22096enableEv>:

//  pinMode(hardware_enable_pin_, OUTPUT);
//  digitalWrite(hardware_enable_pin_, HIGH);
}

void TMC2209::enable() {
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000272:	2b00      	cmp	r3, #0
 8000274:	db04      	blt.n	8000280 <_ZN7TMC22096enableEv+0x1c>
		HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2102      	movs	r1, #2
 800027a:	480a      	ldr	r0, [pc, #40]	; (80002a4 <_ZN7TMC22096enableEv+0x40>)
 800027c:	f001 fbf8 	bl	8001a70 <HAL_GPIO_WritePin>
		//  digitalWrite(hardware_enable_pin_, LOW);
	}
	chopper_config_.toff = toff_;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000286:	f003 030f 	and.w	r3, r3, #15
 800028a:	b2d9      	uxtb	r1, r3
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	7f13      	ldrb	r3, [r2, #28]
 8000290:	f361 0303 	bfi	r3, r1, #0, #4
 8000294:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 fc43 	bl	8000b22 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40010c00 	.word	0x40010c00

080002a8 <_ZN7TMC22097disableEv>:

void TMC2209::disable() {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db04      	blt.n	80002c4 <_ZN7TMC22097disableEv+0x1c>
		//digitalWrite(hardware_enable_pin_, HIGH);
		HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	2102      	movs	r1, #2
 80002be:	4807      	ldr	r0, [pc, #28]	; (80002dc <_ZN7TMC22097disableEv+0x34>)
 80002c0:	f001 fbd6 	bl	8001a70 <HAL_GPIO_WritePin>
	}
	chopper_config_.toff = TOFF_DISABLE;
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	7f13      	ldrb	r3, [r2, #28]
 80002c8:	f36f 0303 	bfc	r3, #0, #4
 80002cc:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f000 fc27 	bl	8000b22 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40010c00 	.word	0x40010c00

080002e0 <_ZN7TMC220930disableAutomaticCurrentScalingEv>:
void TMC2209::enableAutomaticCurrentScaling() {
	pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
	writeStoredPwmConfig();
}

void TMC2209::disableAutomaticCurrentScaling() {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80002ee:	f36f 0382 	bfc	r3, #2, #1
 80002f2:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	writeStoredPwmConfig();
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f000 fc2f 	bl	8000b5a <_ZN7TMC220920writeStoredPwmConfigEv>
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <_ZN7TMC220934disableAutomaticGradientAdaptationEv>:
void TMC2209::enableAutomaticGradientAdaptation() {
	pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
	writeStoredPwmConfig();
}

void TMC2209::disableAutomaticGradientAdaptation() {
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8000312:	f36f 03c3 	bfc	r3, #3, #1
 8000316:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	writeStoredPwmConfig();
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f000 fc1d 	bl	8000b5a <_ZN7TMC220920writeStoredPwmConfigEv>
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <_ZN7TMC220910getVersionEv>:
	writeStoredGlobalConfig();
}

// bidirectional methods

uint8_t TMC2209::getVersion() {
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	Input input;
	input.bytes = read(ADDRESS_IOIN);
 8000330:	2106      	movs	r1, #6
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f000 fac5 	bl	80008c2 <_ZN7TMC22094readEh>
 8000338:	4603      	mov	r3, r0
 800033a:	60fb      	str	r3, [r7, #12]

	return input.version;
 800033c:	7bfb      	ldrb	r3, [r7, #15]
}
 800033e:	4618      	mov	r0, r3
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <_ZN7TMC220915isCommunicatingEv>:

bool TMC2209::isCommunicating() {
 8000346:	b580      	push	{r7, lr}
 8000348:	b082      	sub	sp, #8
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
	return (getVersion() == VERSION);
 800034e:	6878      	ldr	r0, [r7, #4]
 8000350:	f7ff ffea 	bl	8000328 <_ZN7TMC220910getVersionEv>
 8000354:	4603      	mov	r3, r0
 8000356:	2b21      	cmp	r3, #33	; 0x21
 8000358:	bf0c      	ite	eq
 800035a:	2301      	moveq	r3, #1
 800035c:	2300      	movne	r3, #0
 800035e:	b2db      	uxtb	r3, r3
}
 8000360:	4618      	mov	r0, r3
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <_ZN7TMC220920getMicrostepsPerStepEv>:
	input.bytes = read(ADDRESS_IOIN);

	return input.enn;
}

uint16_t TMC2209::getMicrostepsPerStep() {
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	uint16_t microsteps_per_step_exponent;
	switch (chopper_config_.mres) {
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	7fdb      	ldrb	r3, [r3, #31]
 8000374:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000378:	b2db      	uxtb	r3, r3
 800037a:	3b01      	subs	r3, #1
 800037c:	2b07      	cmp	r3, #7
 800037e:	d82b      	bhi.n	80003d8 <_ZN7TMC220920getMicrostepsPerStepEv+0x70>
 8000380:	a201      	add	r2, pc, #4	; (adr r2, 8000388 <_ZN7TMC220920getMicrostepsPerStepEv+0x20>)
 8000382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000386:	bf00      	nop
 8000388:	080003d3 	.word	0x080003d3
 800038c:	080003cd 	.word	0x080003cd
 8000390:	080003c7 	.word	0x080003c7
 8000394:	080003c1 	.word	0x080003c1
 8000398:	080003bb 	.word	0x080003bb
 800039c:	080003b5 	.word	0x080003b5
 80003a0:	080003af 	.word	0x080003af
 80003a4:	080003a9 	.word	0x080003a9
	case MRES_001: {
		microsteps_per_step_exponent = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	81fb      	strh	r3, [r7, #14]
		break;
 80003ac:	e017      	b.n	80003de <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_002: {
		microsteps_per_step_exponent = 1;
 80003ae:	2301      	movs	r3, #1
 80003b0:	81fb      	strh	r3, [r7, #14]
		break;
 80003b2:	e014      	b.n	80003de <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_004: {
		microsteps_per_step_exponent = 2;
 80003b4:	2302      	movs	r3, #2
 80003b6:	81fb      	strh	r3, [r7, #14]
		break;
 80003b8:	e011      	b.n	80003de <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_008: {
		microsteps_per_step_exponent = 3;
 80003ba:	2303      	movs	r3, #3
 80003bc:	81fb      	strh	r3, [r7, #14]
		break;
 80003be:	e00e      	b.n	80003de <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_016: {
		microsteps_per_step_exponent = 4;
 80003c0:	2304      	movs	r3, #4
 80003c2:	81fb      	strh	r3, [r7, #14]
		break;
 80003c4:	e00b      	b.n	80003de <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_032: {
		microsteps_per_step_exponent = 5;
 80003c6:	2305      	movs	r3, #5
 80003c8:	81fb      	strh	r3, [r7, #14]
		break;
 80003ca:	e008      	b.n	80003de <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_064: {
		microsteps_per_step_exponent = 6;
 80003cc:	2306      	movs	r3, #6
 80003ce:	81fb      	strh	r3, [r7, #14]
		break;
 80003d0:	e005      	b.n	80003de <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_128: {
		microsteps_per_step_exponent = 7;
 80003d2:	2307      	movs	r3, #7
 80003d4:	81fb      	strh	r3, [r7, #14]
		break;
 80003d6:	e002      	b.n	80003de <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_256:
	default: {
		microsteps_per_step_exponent = 8;
 80003d8:	2308      	movs	r3, #8
 80003da:	81fb      	strh	r3, [r7, #14]
		break;
 80003dc:	bf00      	nop
	}
	}
	return 1 << microsteps_per_step_exponent;
 80003de:	89fb      	ldrh	r3, [r7, #14]
 80003e0:	2201      	movs	r2, #1
 80003e2:	fa02 f303 	lsl.w	r3, r2, r3
 80003e6:	b29b      	uxth	r3, r3
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3714      	adds	r7, #20
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop

080003f4 <_ZN7TMC220911getSettingsEv>:

TMC2209::Settings TMC2209::getSettings() {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
	Settings settings;
	settings.is_communicating = isCommunicating();
 80003fe:	6838      	ldr	r0, [r7, #0]
 8000400:	f7ff ffa1 	bl	8000346 <_ZN7TMC220915isCommunicatingEv>
 8000404:	4603      	mov	r3, r0
 8000406:	461a      	mov	r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	701a      	strb	r2, [r3, #0]

	if (settings.is_communicating) {
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	f000 80c3 	beq.w	800059c <_ZN7TMC220911getSettingsEv+0x1a8>
		readAndStoreRegisters();
 8000416:	6838      	ldr	r0, [r7, #0]
 8000418:	f000 f9be 	bl	8000798 <_ZN7TMC220921readAndStoreRegistersEv>

		settings.is_setup = global_config_.pdn_disable;
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	7b1b      	ldrb	r3, [r3, #12]
 8000420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2b00      	cmp	r3, #0
 8000428:	bf14      	ite	ne
 800042a:	2301      	movne	r3, #1
 800042c:	2300      	moveq	r3, #0
 800042e:	b2da      	uxtb	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	705a      	strb	r2, [r3, #1]
		settings.software_enabled = (chopper_config_.toff > TOFF_DISABLE);
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	7f1b      	ldrb	r3, [r3, #28]
 8000438:	f003 030f 	and.w	r3, r3, #15
 800043c:	b2db      	uxtb	r3, r3
 800043e:	2b00      	cmp	r3, #0
 8000440:	bf14      	ite	ne
 8000442:	2301      	movne	r3, #1
 8000444:	2300      	moveq	r3, #0
 8000446:	b2da      	uxtb	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	709a      	strb	r2, [r3, #2]
		settings.microsteps_per_step = getMicrostepsPerStep();
 800044c:	6838      	ldr	r0, [r7, #0]
 800044e:	f7ff ff8b 	bl	8000368 <_ZN7TMC220920getMicrostepsPerStepEv>
 8000452:	4603      	mov	r3, r0
 8000454:	461a      	mov	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	809a      	strh	r2, [r3, #4]
		settings.inverse_motor_direction_enabled = global_config_.shaft;
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	7b1b      	ldrb	r3, [r3, #12]
 800045e:	f003 0308 	and.w	r3, r3, #8
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2b00      	cmp	r3, #0
 8000466:	bf14      	ite	ne
 8000468:	2301      	movne	r3, #1
 800046a:	2300      	moveq	r3, #0
 800046c:	b2da      	uxtb	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	719a      	strb	r2, [r3, #6]
		settings.stealth_chop_enabled = not global_config_.enable_spread_cycle;
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	7b1b      	ldrb	r3, [r3, #12]
 8000476:	f003 0304 	and.w	r3, r3, #4
 800047a:	b2db      	uxtb	r3, r3
 800047c:	2b00      	cmp	r3, #0
 800047e:	bf0c      	ite	eq
 8000480:	2301      	moveq	r3, #1
 8000482:	2300      	movne	r3, #0
 8000484:	b2da      	uxtb	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	71da      	strb	r2, [r3, #7]
		settings.standstill_mode = pwm_config_.freewheel;
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000490:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8000494:	b2db      	uxtb	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	721a      	strb	r2, [r3, #8]
		settings.irun_percent = currentSettingToPercent(driver_current_.irun);
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	7c5b      	ldrb	r3, [r3, #17]
 80004a0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4619      	mov	r1, r3
 80004a8:	6838      	ldr	r0, [r7, #0]
 80004aa:	f000 faa1 	bl	80009f0 <_ZN7TMC220923currentSettingToPercentEh>
 80004ae:	4603      	mov	r3, r0
 80004b0:	461a      	mov	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	725a      	strb	r2, [r3, #9]
		settings.irun_register_value = driver_current_.irun;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	7c5b      	ldrb	r3, [r3, #17]
 80004ba:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	461a      	mov	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	729a      	strb	r2, [r3, #10]
		settings.ihold_percent = currentSettingToPercent(driver_current_.ihold);
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	7c1b      	ldrb	r3, [r3, #16]
 80004ca:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	4619      	mov	r1, r3
 80004d2:	6838      	ldr	r0, [r7, #0]
 80004d4:	f000 fa8c 	bl	80009f0 <_ZN7TMC220923currentSettingToPercentEh>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	72da      	strb	r2, [r3, #11]
		settings.ihold_register_value = driver_current_.ihold;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	7c1b      	ldrb	r3, [r3, #16]
 80004e4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	461a      	mov	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	731a      	strb	r2, [r3, #12]
		settings.iholddelay_percent = holdDelaySettingToPercent(
				driver_current_.iholddelay);
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	7c9b      	ldrb	r3, [r3, #18]
 80004f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80004f8:	b2db      	uxtb	r3, r3
		settings.iholddelay_percent = holdDelaySettingToPercent(
 80004fa:	4619      	mov	r1, r3
 80004fc:	6838      	ldr	r0, [r7, #0]
 80004fe:	f000 fab1 	bl	8000a64 <_ZN7TMC220925holdDelaySettingToPercentEh>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	735a      	strb	r2, [r3, #13]
		settings.iholddelay_register_value = driver_current_.iholddelay;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	7c9b      	ldrb	r3, [r3, #18]
 800050e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000512:	b2db      	uxtb	r3, r3
 8000514:	461a      	mov	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	739a      	strb	r2, [r3, #14]
		settings.automatic_current_scaling_enabled = pwm_config_.pwm_autoscale;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	bf14      	ite	ne
 800052a:	2301      	movne	r3, #1
 800052c:	2300      	moveq	r3, #0
 800052e:	b2da      	uxtb	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	73da      	strb	r2, [r3, #15]
		settings.automatic_gradient_adaptation_enabled =
				pwm_config_.pwm_autograd;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800053a:	f003 0308 	and.w	r3, r3, #8
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	bf14      	ite	ne
 8000544:	2301      	movne	r3, #1
 8000546:	2300      	moveq	r3, #0
 8000548:	b2da      	uxtb	r2, r3
		settings.automatic_gradient_adaptation_enabled =
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	741a      	strb	r2, [r3, #16]
		settings.pwm_offset = pwm_config_.pwm_offset;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	745a      	strb	r2, [r3, #17]
		settings.pwm_gradient = pwm_config_.pwm_grad;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	749a      	strb	r2, [r3, #18]
		settings.cool_step_enabled = cool_step_enabled_;
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	7e1a      	ldrb	r2, [r3, #24]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	74da      	strb	r2, [r3, #19]
		settings.analog_current_scaling_enabled = global_config_.i_scale_analog;
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	7b1b      	ldrb	r3, [r3, #12]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	bf14      	ite	ne
 8000578:	2301      	movne	r3, #1
 800057a:	2300      	moveq	r3, #0
 800057c:	b2da      	uxtb	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	751a      	strb	r2, [r3, #20]
		settings.internal_sense_resistors_enabled =
				global_config_.internal_rsense;
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	7b1b      	ldrb	r3, [r3, #12]
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	b2db      	uxtb	r3, r3
 800058c:	2b00      	cmp	r3, #0
 800058e:	bf14      	ite	ne
 8000590:	2301      	movne	r3, #1
 8000592:	2300      	moveq	r3, #0
 8000594:	b2da      	uxtb	r2, r3
		settings.internal_sense_resistors_enabled =
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	755a      	strb	r2, [r3, #21]
		settings.cool_step_enabled = false;
		settings.analog_current_scaling_enabled = false;
		settings.internal_sense_resistors_enabled = false;
	}

	return settings;
 800059a:	e03e      	b.n	800061a <_ZN7TMC220911getSettingsEv+0x226>
		settings.is_setup = false;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	705a      	strb	r2, [r3, #1]
		settings.software_enabled = false;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	709a      	strb	r2, [r3, #2]
		settings.microsteps_per_step = 0;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	809a      	strh	r2, [r3, #4]
		settings.inverse_motor_direction_enabled = false;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2200      	movs	r2, #0
 80005b2:	719a      	strb	r2, [r3, #6]
		settings.stealth_chop_enabled = false;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	71da      	strb	r2, [r3, #7]
		settings.standstill_mode = pwm_config_.freewheel;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80005c0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	461a      	mov	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	721a      	strb	r2, [r3, #8]
		settings.irun_percent = 0;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	725a      	strb	r2, [r3, #9]
		settings.irun_register_value = 0;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	729a      	strb	r2, [r3, #10]
		settings.ihold_percent = 0;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	72da      	strb	r2, [r3, #11]
		settings.ihold_register_value = 0;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	731a      	strb	r2, [r3, #12]
		settings.iholddelay_percent = 0;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	735a      	strb	r2, [r3, #13]
		settings.iholddelay_register_value = 0;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	739a      	strb	r2, [r3, #14]
		settings.automatic_current_scaling_enabled = false;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	73da      	strb	r2, [r3, #15]
		settings.automatic_gradient_adaptation_enabled = false;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	741a      	strb	r2, [r3, #16]
		settings.pwm_offset = 0;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	745a      	strb	r2, [r3, #17]
		settings.pwm_gradient = 0;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	749a      	strb	r2, [r3, #18]
		settings.cool_step_enabled = false;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	74da      	strb	r2, [r3, #19]
		settings.analog_current_scaling_enabled = false;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	751a      	strb	r2, [r3, #20]
		settings.internal_sense_resistors_enabled = false;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	755a      	strb	r2, [r3, #21]
	return settings;
 800061a:	bf00      	nop
}
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <_ZN7TMC220910initializeElNS_13SerialAddressE>:
uint16_t TMC2209::getMicrostepCounter() {
	return read(ADDRESS_MSCNT);
}

// private
void TMC2209::initialize(long serial_baud_rate, SerialAddress serial_address) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	4613      	mov	r3, r2
 8000630:	71fb      	strb	r3, [r7, #7]
	serial_baud_rate_ = serial_baud_rate;
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	601a      	str	r2, [r3, #0]

	setOperationModeToSerial(serial_address);
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4619      	mov	r1, r3
 800063c:	68f8      	ldr	r0, [r7, #12]
 800063e:	f000 f884 	bl	800074a <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>
	//setRegistersToDefaults();

	minimizeMotorCurrent();
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f000 f8c2 	bl	80007cc <_ZN7TMC220920minimizeMotorCurrentEv>
	disable();
 8000648:	68f8      	ldr	r0, [r7, #12]
 800064a:	f7ff fe2d 	bl	80002a8 <_ZN7TMC22097disableEv>
	disableAutomaticCurrentScaling();
 800064e:	68f8      	ldr	r0, [r7, #12]
 8000650:	f7ff fe46 	bl	80002e0 <_ZN7TMC220930disableAutomaticCurrentScalingEv>
	disableAutomaticGradientAdaptation();
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	f7ff fe55 	bl	8000304 <_ZN7TMC220934disableAutomaticGradientAdaptationEv>
}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <_ZN7TMC220915serialAvailableEv>:

int TMC2209::serialAvailable() {
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]

	if (tmcuart->Instance != NULL)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d005      	beq.n	8000680 <_ZN7TMC220915serialAvailableEv+0x1e>
	{
	 // return HAL_UART_GetRxCount(&tmcuart);
	return (tmcuart->Instance->DR >> 8);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	e7ff      	b.n	8000680 <_ZN7TMC220915serialAvailableEv+0x1e>

//	 return HAL_UART_GetRxCount(&tmcuart);

//	return (__HAL_UART_GET_FLAG(tmcuart, UART_FLAG_RXNE) != RESET);

}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <_ZN7TMC220911serialWriteEh>:

size_t TMC2209::serialWrite(uint8_t c) {
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	460b      	mov	r3, r1
 8000694:	70fb      	strb	r3, [r7, #3]
//	if (hardware_serial_ptr_ != nullptr) {
//		return hardware_serial_ptr_->write(c);
//	}
	 if (tmcuart->Instance != NULL)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d013      	beq.n	80006c8 <_ZN7TMC220911serialWriteEh+0x3e>
	  {
	    if (HAL_UART_Transmit(tmcuart, &c, 1, HAL_MAX_DELAY) == HAL_OK)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6898      	ldr	r0, [r3, #8]
 80006a4:	1cf9      	adds	r1, r7, #3
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	2201      	movs	r2, #1
 80006ac:	f001 fe72 	bl	8002394 <HAL_UART_Transmit>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	bf0c      	ite	eq
 80006b6:	2301      	moveq	r3, #1
 80006b8:	2300      	movne	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <_ZN7TMC220911serialWriteEh+0x3a>
	    {
	      return 1; // Возвращаем количество отправленных байт (в данном случае 1)
 80006c0:	2301      	movs	r3, #1
 80006c2:	e002      	b.n	80006ca <_ZN7TMC220911serialWriteEh+0x40>
	    }
	    else
	    {
	      // Обработка ошибки передачи данных
	      return 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	e000      	b.n	80006ca <_ZN7TMC220911serialWriteEh+0x40>
	    }
	  }
	  return 0;
 80006c8:	2300      	movs	r3, #0


	// HAL_UART_Transmit_IT(tmcuart, &c, 1);

	return 0;
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <_ZN7TMC220910serialReadEv>:

int TMC2209::serialRead() {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b084      	sub	sp, #16
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
//	if (hardware_serial_ptr_ != nullptr) {
//		return hardware_serial_ptr_->read();
//	}
	if (tmcuart->Instance != NULL)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d015      	beq.n	8000710 <_ZN7TMC220910serialReadEv+0x3e>
	  {
	    uint8_t data;
	    if (HAL_UART_Receive(tmcuart, &data, 1, HAL_MAX_DELAY) == HAL_OK)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6898      	ldr	r0, [r3, #8]
 80006e8:	f107 010f 	add.w	r1, r7, #15
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	2201      	movs	r2, #1
 80006f2:	f001 fed2 	bl	800249a <HAL_UART_Receive>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf0c      	ite	eq
 80006fc:	2301      	moveq	r3, #1
 80006fe:	2300      	movne	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <_ZN7TMC220910serialReadEv+0x38>
	    {
	      return data; // Возвращаем считанный байт данных
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	e004      	b.n	8000714 <_ZN7TMC220910serialReadEv+0x42>
	    }
	    else
	    {
	      return -1; // Возвращаем -1 в случае ошибки
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	e001      	b.n	8000714 <_ZN7TMC220910serialReadEv+0x42>
	    }
	  }
	  return -1;
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
//	uint8_t byte;
//	HAL_UART_Receive_IT(tmcuart, &byte, 1);
//	return byte;
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <_ZN7TMC220911serialFlushEv>:

void TMC2209::serialFlush() {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
//	if (hardware_serial_ptr_ != nullptr) {
//		return hardware_serial_ptr_->flush();
//	}
	 //__HAL_UART_FLUSH_DRREGISTER(tmcuart); // Очистка регистра приема данных

	 if (tmcuart->Instance != NULL)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d009      	beq.n	8000742 <_ZN7TMC220911serialFlushEv+0x26>
	  {
	    HAL_UART_AbortReceive(tmcuart); // Прерываем прием данных
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	4618      	mov	r0, r3
 8000734:	f001 ffab 	bl	800268e <HAL_UART_AbortReceive>
	    HAL_UART_AbortTransmit(tmcuart); // Прерываем передачу данных
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	4618      	mov	r0, r3
 800073e:	f001 ff3e 	bl	80025be <HAL_UART_AbortTransmit>
	  }

//	  tmcuart->RxXferCount = 0;

}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>:

void TMC2209::setOperationModeToSerial(SerialAddress serial_address) {
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	460b      	mov	r3, r1
 8000754:	70fb      	strb	r3, [r7, #3]
	serial_address_ = serial_address;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	78fa      	ldrb	r2, [r7, #3]
 800075a:	711a      	strb	r2, [r3, #4]

	global_config_.bytes = 0;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
	global_config_.i_scale_analog = 0;
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	7b13      	ldrb	r3, [r2, #12]
 8000766:	f36f 0300 	bfc	r3, #0, #1
 800076a:	7313      	strb	r3, [r2, #12]
	global_config_.pdn_disable = 1;
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	7b13      	ldrb	r3, [r2, #12]
 8000770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000774:	7313      	strb	r3, [r2, #12]
	global_config_.mstep_reg_select = 1;
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	7b13      	ldrb	r3, [r2, #12]
 800077a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077e:	7313      	strb	r3, [r2, #12]
	global_config_.multistep_filt = 1;
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	7b53      	ldrb	r3, [r2, #13]
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	7353      	strb	r3, [r2, #13]

	writeStoredGlobalConfig();
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 f981 	bl	8000a92 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN7TMC220921readAndStoreRegistersEv>:
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
}

void TMC2209::readAndStoreRegisters() {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	global_config_.bytes = readGlobalConfigBytes();
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 f985 	bl	8000ab0 <_ZN7TMC220921readGlobalConfigBytesEv>
 80007a6:	4602      	mov	r2, r0
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	60da      	str	r2, [r3, #12]
	chopper_config_.bytes = readChopperConfigBytes();
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 f9c7 	bl	8000b40 <_ZN7TMC220922readChopperConfigBytesEv>
 80007b2:	4602      	mov	r2, r0
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	61da      	str	r2, [r3, #28]
	pwm_config_.bytes = readPwmConfigBytes();
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f000 f9dd 	bl	8000b78 <_ZN7TMC220918readPwmConfigBytesEv>
 80007be:	4602      	mov	r2, r0
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <_ZN7TMC220920minimizeMotorCurrentEv>:
	global_config.bytes = readGlobalConfigBytes();

	return global_config.pdn_disable;
}

void TMC2209::minimizeMotorCurrent() {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	driver_current_.irun = CURRENT_SETTING_MIN;
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	7c53      	ldrb	r3, [r2, #17]
 80007d8:	f36f 0304 	bfc	r3, #0, #5
 80007dc:	7453      	strb	r3, [r2, #17]
	driver_current_.ihold = CURRENT_SETTING_MIN;
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	7c13      	ldrb	r3, [r2, #16]
 80007e2:	f36f 0304 	bfc	r3, #0, #5
 80007e6:	7413      	strb	r3, [r2, #16]
	writeStoredDriverCurrent();
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 f96e 	bl	8000aca <_ZN7TMC220924writeStoredDriverCurrentEv>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <_ZN7TMC220911reverseDataEm>:

uint32_t TMC2209::reverseData(uint32_t data) {
 80007f6:	b480      	push	{r7}
 80007f8:	b085      	sub	sp, #20
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	6039      	str	r1, [r7, #0]
	uint32_t reversed_data = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8000804:	2300      	movs	r3, #0
 8000806:	72fb      	strb	r3, [r7, #11]
 8000808:	e016      	b.n	8000838 <_ZN7TMC220911reverseDataEm+0x42>
		right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 800080a:	7afb      	ldrb	r3, [r7, #11]
 800080c:	f1c3 0303 	rsb	r3, r3, #3
 8000810:	b2db      	uxtb	r3, r3
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	72bb      	strb	r3, [r7, #10]
		left_shift = i * BITS_PER_BYTE;
 8000816:	7afb      	ldrb	r3, [r7, #11]
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 800081c:	7abb      	ldrb	r3, [r7, #10]
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	fa22 f303 	lsr.w	r3, r2, r3
 8000824:	b2da      	uxtb	r2, r3
 8000826:	7a7b      	ldrb	r3, [r7, #9]
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	68fa      	ldr	r2, [r7, #12]
 800082e:	4313      	orrs	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8000832:	7afb      	ldrb	r3, [r7, #11]
 8000834:	3301      	adds	r3, #1
 8000836:	72fb      	strb	r3, [r7, #11]
 8000838:	7afb      	ldrb	r3, [r7, #11]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d9e5      	bls.n	800080a <_ZN7TMC220911reverseDataEm+0x14>
	}
	return reversed_data;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <_ZN7TMC22095writeEhm>:
	for (uint8_t i = 0; i < datagram_size; ++i) {
		byte = serialRead();
	}
}

void TMC2209::write(uint8_t register_address, uint32_t data) {
 800084a:	b580      	push	{r7, lr}
 800084c:	b086      	sub	sp, #24
 800084e:	af00      	add	r7, sp, #0
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	460b      	mov	r3, r1
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 8000858:	f04f 0200 	mov.w	r2, #0
 800085c:	f04f 0300 	mov.w	r3, #0
 8000860:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 8000864:	7c3b      	ldrb	r3, [r7, #16]
 8000866:	2205      	movs	r2, #5
 8000868:	f362 0303 	bfi	r3, r2, #0, #4
 800086c:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = serial_address_;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 8000874:	7afb      	ldrb	r3, [r7, #11]
 8000876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800087a:	b2da      	uxtb	r2, r3
 800087c:	7cbb      	ldrb	r3, [r7, #18]
 800087e:	f362 0306 	bfi	r3, r2, #0, #7
 8000882:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 8000884:	7cbb      	ldrb	r3, [r7, #18]
 8000886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088a:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data);
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f7ff ffb1 	bl	80007f6 <_ZN7TMC220911reverseDataEm>
 8000894:	4603      	mov	r3, r0
 8000896:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = calculateCrc(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 800089a:	f107 0310 	add.w	r3, r7, #16
 800089e:	2208      	movs	r2, #8
 80008a0:	4619      	mov	r1, r3
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f000 f975 	bl	8000b92 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>
 80008a8:	4603      	mov	r3, r0
 80008aa:	75fb      	strb	r3, [r7, #23]
	sendDatagramUnidirectional(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	2208      	movs	r2, #8
 80008b2:	4619      	mov	r1, r3
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f000 f9bb 	bl	8000c30 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <_ZN7TMC22094readEh>:

uint32_t TMC2209::read(uint8_t register_address) {
 80008c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008c6:	b08b      	sub	sp, #44	; 0x2c
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
	ReadRequestDatagram read_request_datagram;
	read_request_datagram.bytes = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
	read_request_datagram.sync = SYNC;
 80008d4:	7d3b      	ldrb	r3, [r7, #20]
 80008d6:	2205      	movs	r2, #5
 80008d8:	f362 0303 	bfi	r3, r2, #0, #4
 80008dc:	753b      	strb	r3, [r7, #20]
	read_request_datagram.serial_address = serial_address_;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	791b      	ldrb	r3, [r3, #4]
 80008e2:	757b      	strb	r3, [r7, #21]
	read_request_datagram.register_address = register_address;
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	7dbb      	ldrb	r3, [r7, #22]
 80008ee:	f362 0306 	bfi	r3, r2, #0, #7
 80008f2:	75bb      	strb	r3, [r7, #22]
	read_request_datagram.rw = RW_READ;
 80008f4:	7dbb      	ldrb	r3, [r7, #22]
 80008f6:	f36f 13c7 	bfc	r3, #7, #1
 80008fa:	75bb      	strb	r3, [r7, #22]
	read_request_datagram.crc = calculateCrc(read_request_datagram,	READ_REQUEST_DATAGRAM_SIZE);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2204      	movs	r2, #4
 8000902:	4619      	mov	r1, r3
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f000 f9c3 	bl	8000c90 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h>
 800090a:	4603      	mov	r3, r0
 800090c:	75fb      	strb	r3, [r7, #23]

	sendDatagramBidirectional(read_request_datagram, READ_REQUEST_DATAGRAM_SIZE);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2204      	movs	r2, #4
 8000914:	4619      	mov	r1, r3
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 f9fb 	bl	8000d12 <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h>

	uint32_t reply_delay = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
	while ((serialAvailable() < WRITE_READ_REPLY_DATAGRAM_SIZE)
 8000920:	e005      	b.n	800092e <_ZN7TMC22094readEh+0x6c>
			and (reply_delay < REPLY_DELAY_MAX_MICROSECONDS)) {
	//	delayMicroseconds(REPLY_DELAY_INC_MICROSECONDS);

		DWT_Delay_us(REPLY_DELAY_INC_MICROSECONDS);
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff fc42 	bl	80001ac <_ZL12DWT_Delay_usm>

		reply_delay += REPLY_DELAY_INC_MICROSECONDS;
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	3301      	adds	r3, #1
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
	while ((serialAvailable() < WRITE_READ_REPLY_DATAGRAM_SIZE)
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff fe97 	bl	8000662 <_ZN7TMC220915serialAvailableEv>
 8000934:	4603      	mov	r3, r0
			and (reply_delay < REPLY_DELAY_MAX_MICROSECONDS)) {
 8000936:	2b07      	cmp	r3, #7
 8000938:	dc06      	bgt.n	8000948 <_ZN7TMC22094readEh+0x86>
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000940:	4293      	cmp	r3, r2
 8000942:	d801      	bhi.n	8000948 <_ZN7TMC22094readEh+0x86>
 8000944:	2301      	movs	r3, #1
 8000946:	e000      	b.n	800094a <_ZN7TMC22094readEh+0x88>
 8000948:	2300      	movs	r3, #0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1e9      	bne.n	8000922 <_ZN7TMC22094readEh+0x60>
	}

	if (reply_delay >= REPLY_DELAY_MAX_MICROSECONDS) {
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	f242 720f 	movw	r2, #9999	; 0x270f
 8000954:	4293      	cmp	r3, r2
 8000956:	d901      	bls.n	800095c <_ZN7TMC22094readEh+0x9a>
		return 0;
 8000958:	2300      	movs	r3, #0
 800095a:	e044      	b.n	80009e6 <_ZN7TMC22094readEh+0x124>
	}

	uint64_t byte;
	uint8_t byte_count = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	WriteReadReplyDatagram read_reply_datagram;
	read_reply_datagram.bytes = 0;
 8000962:	f04f 0200 	mov.w	r2, #0
 8000966:	f04f 0300 	mov.w	r3, #0
 800096a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i) {
 800096e:	2300      	movs	r3, #0
 8000970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000974:	e02b      	b.n	80009ce <_ZN7TMC22094readEh+0x10c>
		byte = serialRead();
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff feab 	bl	80006d2 <_ZN7TMC220910serialReadEv>
 800097c:	4603      	mov	r3, r0
 800097e:	17da      	asrs	r2, r3, #31
 8000980:	469a      	mov	sl, r3
 8000982:	4693      	mov	fp, r2
 8000984:	e9c7 ab06 	strd	sl, fp, [r7, #24]
		read_reply_datagram.bytes |= (byte << (byte_count++ * BITS_PER_BYTE));
 8000988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 8000992:	00d9      	lsls	r1, r3, #3
 8000994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000998:	f1a1 0620 	sub.w	r6, r1, #32
 800099c:	f1c1 0020 	rsb	r0, r1, #32
 80009a0:	fa03 f501 	lsl.w	r5, r3, r1
 80009a4:	fa02 f606 	lsl.w	r6, r2, r6
 80009a8:	4335      	orrs	r5, r6
 80009aa:	fa22 f000 	lsr.w	r0, r2, r0
 80009ae:	4305      	orrs	r5, r0
 80009b0:	fa02 f401 	lsl.w	r4, r2, r1
 80009b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80009b8:	ea44 0802 	orr.w	r8, r4, r2
 80009bc:	ea45 0903 	orr.w	r9, r5, r3
 80009c0:	e9c7 8902 	strd	r8, r9, [r7, #8]
	for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i) {
 80009c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80009c8:	3301      	adds	r3, #1
 80009ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80009ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80009d2:	2b07      	cmp	r3, #7
 80009d4:	d9cf      	bls.n	8000976 <_ZN7TMC22094readEh+0xb4>
	}

	return reverseData(read_reply_datagram.data);
 80009d6:	f8d7 300b 	ldr.w	r3, [r7, #11]
 80009da:	4619      	mov	r1, r3
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff0a 	bl	80007f6 <_ZN7TMC220911reverseDataEm>
 80009e2:	4603      	mov	r3, r0
 80009e4:	bf00      	nop
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	372c      	adds	r7, #44	; 0x2c
 80009ea:	46bd      	mov	sp, r7
 80009ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080009f0 <_ZN7TMC220923currentSettingToPercentEh>:
	uint8_t current_setting = map(constrained_percent, PERCENT_MIN, PERCENT_MAX,
			CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
	return current_setting;
}

uint8_t TMC2209::currentSettingToPercent(uint8_t current_setting) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af02      	add	r7, sp, #8
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
	uint8_t percent = map(current_setting, CURRENT_SETTING_MIN,
 80009fc:	78f9      	ldrb	r1, [r7, #3]
 80009fe:	2364      	movs	r3, #100	; 0x64
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	2300      	movs	r3, #0
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	231f      	movs	r3, #31
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f807 	bl	8000a1e <_ZN7TMC22093mapEhhhhh>
 8000a10:	4603      	mov	r3, r0
 8000a12:	73fb      	strb	r3, [r7, #15]
			CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
	return percent;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <_ZN7TMC22093mapEhhhhh>:

uint8_t TMC2209::map(uint8_t x, uint8_t in_min,  uint8_t in_max, uint8_t out_min, uint8_t out_max){
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	4608      	mov	r0, r1
 8000a28:	4611      	mov	r1, r2
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	70fb      	strb	r3, [r7, #3]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70bb      	strb	r3, [r7, #2]
 8000a34:	4613      	mov	r3, r2
 8000a36:	707b      	strb	r3, [r7, #1]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000a38:	78fa      	ldrb	r2, [r7, #3]
 8000a3a:	78bb      	ldrb	r3, [r7, #2]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	7d39      	ldrb	r1, [r7, #20]
 8000a40:	7c3a      	ldrb	r2, [r7, #16]
 8000a42:	1a8a      	subs	r2, r1, r2
 8000a44:	fb03 f202 	mul.w	r2, r3, r2
 8000a48:	7879      	ldrb	r1, [r7, #1]
 8000a4a:	78bb      	ldrb	r3, [r7, #2]
 8000a4c:	1acb      	subs	r3, r1, r3
 8000a4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	7c3b      	ldrb	r3, [r7, #16]
 8000a56:	4413      	add	r3, r2
 8000a58:	b2db      	uxtb	r3, r3
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <_ZN7TMC220925holdDelaySettingToPercentEh>:
	uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
	uint8_t hold_delay_setting = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, HOLD_DELAY_MIN, HOLD_DELAY_MAX);
	return hold_delay_setting;
}

uint8_t TMC2209::holdDelaySettingToPercent(uint8_t hold_delay_setting) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	70fb      	strb	r3, [r7, #3]
	uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
 8000a70:	78f9      	ldrb	r1, [r7, #3]
 8000a72:	2364      	movs	r3, #100	; 0x64
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	2300      	movs	r3, #0
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ffcd 	bl	8000a1e <_ZN7TMC22093mapEhhhhh>
 8000a84:	4603      	mov	r3, r0
 8000a86:	73fb      	strb	r3, [r7, #15]
	return percent;
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <_ZN7TMC220923writeStoredGlobalConfigEv>:

void TMC2209::writeStoredGlobalConfig() {
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fed1 	bl	800084a <_ZN7TMC22095writeEhm>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <_ZN7TMC220921readGlobalConfigBytesEv>:

uint32_t TMC2209::readGlobalConfigBytes() {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	return read(ADDRESS_GCONF);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ff01 	bl	80008c2 <_ZN7TMC22094readEh>
 8000ac0:	4603      	mov	r3, r0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <_ZN7TMC220924writeStoredDriverCurrentEv>:

void TMC2209::writeStoredDriverCurrent() {
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	2110      	movs	r1, #16
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff feb5 	bl	800084a <_ZN7TMC22095writeEhm>

	if (driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7c5b      	ldrb	r3, [r3, #17]
 8000ae4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b13      	cmp	r3, #19
 8000aec:	d905      	bls.n	8000afa <_ZN7TMC220924writeStoredDriverCurrentEv+0x30>
		cool_config_.seimin = SEIMIN_UPPER_SETTING;
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	7d53      	ldrb	r3, [r2, #21]
 8000af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af6:	7553      	strb	r3, [r2, #21]
 8000af8:	e004      	b.n	8000b04 <_ZN7TMC220924writeStoredDriverCurrentEv+0x3a>
	} else {
		cool_config_.seimin = SEIMIN_LOWER_SETTING;
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	7d53      	ldrb	r3, [r2, #21]
 8000afe:	f36f 13c7 	bfc	r3, #7, #1
 8000b02:	7553      	strb	r3, [r2, #21]
	}
	if (cool_step_enabled_) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7e1b      	ldrb	r3, [r3, #24]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d006      	beq.n	8000b1a <_ZN7TMC220924writeStoredDriverCurrentEv+0x50>
		write(ADDRESS_COOLCONF, cool_config_.bytes);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	461a      	mov	r2, r3
 8000b12:	2142      	movs	r1, #66	; 0x42
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fe98 	bl	800084a <_ZN7TMC22095writeEhm>
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_ZN7TMC220924writeStoredChopperConfigEv>:

void TMC2209::writeStoredChopperConfig() {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	216c      	movs	r1, #108	; 0x6c
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff fe89 	bl	800084a <_ZN7TMC22095writeEhm>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_ZN7TMC220922readChopperConfigBytesEv>:

uint32_t TMC2209::readChopperConfigBytes() {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	return read(ADDRESS_CHOPCONF);
 8000b48:	216c      	movs	r1, #108	; 0x6c
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff feb9 	bl	80008c2 <_ZN7TMC22094readEh>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_ZN7TMC220920writeStoredPwmConfigEv>:

void TMC2209::writeStoredPwmConfig() {
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b66:	461a      	mov	r2, r3
 8000b68:	2170      	movs	r1, #112	; 0x70
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff fe6d 	bl	800084a <_ZN7TMC22095writeEhm>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZN7TMC220918readPwmConfigBytesEv>:

uint32_t TMC2209::readPwmConfigBytes() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	return read(ADDRESS_PWMCONF);
 8000b80:	2170      	movs	r1, #112	; 0x70
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff fe9d 	bl	80008c2 <_ZN7TMC22094readEh>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 8000b92:	b4f0      	push	{r4, r5, r6, r7}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	757b      	strb	r3, [r7, #21]
 8000ba8:	e037      	b.n	8000c1a <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x88>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb0:	7d79      	ldrb	r1, [r7, #21]
 8000bb2:	00c9      	lsls	r1, r1, #3
 8000bb4:	f1c1 0620 	rsb	r6, r1, #32
 8000bb8:	f1a1 0020 	sub.w	r0, r1, #32
 8000bbc:	fa22 f401 	lsr.w	r4, r2, r1
 8000bc0:	fa03 f606 	lsl.w	r6, r3, r6
 8000bc4:	4334      	orrs	r4, r6
 8000bc6:	fa23 f000 	lsr.w	r0, r3, r0
 8000bca:	4304      	orrs	r4, r0
 8000bcc:	fa23 f501 	lsr.w	r5, r3, r1
 8000bd0:	4623      	mov	r3, r4
 8000bd2:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	753b      	strb	r3, [r7, #20]
 8000bd8:	e019      	b.n	8000c0e <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x7c>
			if ((crc >> 7) ^ (byte & 0x01)) {
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
 8000bdc:	09db      	lsrs	r3, r3, #7
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	7dbb      	ldrb	r3, [r7, #22]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d007      	beq.n	8000bfc <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x6a>
				crc = (crc << 1) ^ 0x07;
 8000bec:	7dfb      	ldrb	r3, [r7, #23]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	f083 0307 	eor.w	r3, r3, #7
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	75fb      	strb	r3, [r7, #23]
 8000bfa:	e002      	b.n	8000c02 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x70>
				crc = crc << 1;
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 8000c02:	7dbb      	ldrb	r3, [r7, #22]
 8000c04:	085b      	lsrs	r3, r3, #1
 8000c06:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8000c08:	7d3b      	ldrb	r3, [r7, #20]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	753b      	strb	r3, [r7, #20]
 8000c0e:	7d3b      	ldrb	r3, [r7, #20]
 8000c10:	2b07      	cmp	r3, #7
 8000c12:	d9e2      	bls.n	8000bda <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x48>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8000c14:	7d7b      	ldrb	r3, [r7, #21]
 8000c16:	3301      	adds	r3, #1
 8000c18:	757b      	strb	r3, [r7, #21]
 8000c1a:	7d7a      	ldrb	r2, [r7, #21]
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbc2      	blt.n	8000baa <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x18>
	return crc;
 8000c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bcf0      	pop	{r4, r5, r6, r7}
 8000c2e:	4770      	bx	lr

08000c30 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagramUnidirectional(Datagram &datagram, uint8_t datagram_size) {
 8000c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < datagram_size; ++i) {
 8000c3e:	2300      	movs	r3, #0
 8000c40:	75fb      	strb	r3, [r7, #23]
 8000c42:	e01c      	b.n	8000c7e <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h+0x4e>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4a:	7df9      	ldrb	r1, [r7, #23]
 8000c4c:	00c9      	lsls	r1, r1, #3
 8000c4e:	f1c1 0620 	rsb	r6, r1, #32
 8000c52:	f1a1 0020 	sub.w	r0, r1, #32
 8000c56:	fa22 f401 	lsr.w	r4, r2, r1
 8000c5a:	fa03 f606 	lsl.w	r6, r3, r6
 8000c5e:	4334      	orrs	r4, r6
 8000c60:	fa23 f000 	lsr.w	r0, r3, r0
 8000c64:	4304      	orrs	r4, r0
 8000c66:	fa23 f501 	lsr.w	r5, r3, r1
 8000c6a:	4623      	mov	r3, r4
 8000c6c:	75bb      	strb	r3, [r7, #22]
		serialWrite(byte);
 8000c6e:	7dbb      	ldrb	r3, [r7, #22]
 8000c70:	4619      	mov	r1, r3
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f7ff fd09 	bl	800068a <_ZN7TMC220911serialWriteEh>
	for (uint8_t i = 0; i < datagram_size; ++i) {
 8000c78:	7dfb      	ldrb	r3, [r7, #23]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	75fb      	strb	r3, [r7, #23]
 8000c7e:	7dfa      	ldrb	r2, [r7, #23]
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d3de      	bcc.n	8000c44 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h+0x14>
}
 8000c86:	bf00      	nop
 8000c88:	bf00      	nop
 8000c8a:	371c      	adds	r7, #28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c90 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 8000c90:	b480      	push	{r7}
 8000c92:	b087      	sub	sp, #28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	757b      	strb	r3, [r7, #21]
 8000ca6:	e029      	b.n	8000cfc <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x6c>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	7d7b      	ldrb	r3, [r7, #21]
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb4:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	753b      	strb	r3, [r7, #20]
 8000cba:	e019      	b.n	8000cf0 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x60>
			if ((crc >> 7) ^ (byte & 0x01)) {
 8000cbc:	7dfb      	ldrb	r3, [r7, #23]
 8000cbe:	09db      	lsrs	r3, r3, #7
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	7dbb      	ldrb	r3, [r7, #22]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d007      	beq.n	8000cde <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x4e>
				crc = (crc << 1) ^ 0x07;
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	f083 0307 	eor.w	r3, r3, #7
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	75fb      	strb	r3, [r7, #23]
 8000cdc:	e002      	b.n	8000ce4 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x54>
				crc = crc << 1;
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 8000ce4:	7dbb      	ldrb	r3, [r7, #22]
 8000ce6:	085b      	lsrs	r3, r3, #1
 8000ce8:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8000cea:	7d3b      	ldrb	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	753b      	strb	r3, [r7, #20]
 8000cf0:	7d3b      	ldrb	r3, [r7, #20]
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	d9e2      	bls.n	8000cbc <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x2c>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8000cf6:	7d7b      	ldrb	r3, [r7, #21]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	757b      	strb	r3, [r7, #21]
 8000cfc:	7d7a      	ldrb	r2, [r7, #21]
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	429a      	cmp	r2, r3
 8000d04:	dbd0      	blt.n	8000ca8 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x18>
	return crc;
 8000d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	371c      	adds	r7, #28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h>:
void TMC2209::sendDatagramBidirectional(Datagram &datagram, uint8_t datagram_size) {
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b088      	sub	sp, #32
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71fb      	strb	r3, [r7, #7]
	serialFlush();
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f7ff fcfb 	bl	800071c <_ZN7TMC220911serialFlushEv>
	while (serialAvailable() > 0) {
 8000d26:	e004      	b.n	8000d32 <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h+0x20>
		byte = serialRead();
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f7ff fcd2 	bl	80006d2 <_ZN7TMC220910serialReadEv>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	75bb      	strb	r3, [r7, #22]
	while (serialAvailable() > 0) {
 8000d32:	68f8      	ldr	r0, [r7, #12]
 8000d34:	f7ff fc95 	bl	8000662 <_ZN7TMC220915serialAvailableEv>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	bfcc      	ite	gt
 8000d3e:	2301      	movgt	r3, #1
 8000d40:	2300      	movle	r3, #0
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1ef      	bne.n	8000d28 <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h+0x16>
	for (uint8_t i = 0; i < datagram_size; ++i) {
 8000d48:	2300      	movs	r3, #0
 8000d4a:	77fb      	strb	r3, [r7, #31]
 8000d4c:	e00e      	b.n	8000d6c <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h+0x5a>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	7ffb      	ldrb	r3, [r7, #31]
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5a:	75bb      	strb	r3, [r7, #22]
		serialWrite(byte);
 8000d5c:	7dbb      	ldrb	r3, [r7, #22]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f7ff fc92 	bl	800068a <_ZN7TMC220911serialWriteEh>
	for (uint8_t i = 0; i < datagram_size; ++i) {
 8000d66:	7ffb      	ldrb	r3, [r7, #31]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	77fb      	strb	r3, [r7, #31]
 8000d6c:	7ffa      	ldrb	r2, [r7, #31]
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d3ec      	bcc.n	8000d4e <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h+0x3c>
	serialFlush();
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f7ff fcd1 	bl	800071c <_ZN7TMC220911serialFlushEv>
	uint32_t echo_delay = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
	while ((serialAvailable() < datagram_size)
 8000d7e:	e005      	b.n	8000d8c <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h+0x7a>
		DWT_Delay_us(ECHO_DELAY_INC_MICROSECONDS);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff fa13 	bl	80001ac <_ZL12DWT_Delay_usm>
		echo_delay += ECHO_DELAY_INC_MICROSECONDS;
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	61bb      	str	r3, [r7, #24]
	while ((serialAvailable() < datagram_size)
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f7ff fc68 	bl	8000662 <_ZN7TMC220915serialAvailableEv>
 8000d92:	4602      	mov	r2, r0
 8000d94:	79fb      	ldrb	r3, [r7, #7]
			and (echo_delay < ECHO_DELAY_MAX_MICROSECONDS)) {
 8000d96:	429a      	cmp	r2, r3
 8000d98:	da05      	bge.n	8000da6 <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h+0x94>
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000da0:	d201      	bcs.n	8000da6 <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h+0x94>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h+0x96>
 8000da6:	2300      	movs	r3, #0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1e9      	bne.n	8000d80 <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h+0x6e>
	if (echo_delay >= ECHO_DELAY_MAX_MICROSECONDS) {
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000db2:	d20f      	bcs.n	8000dd4 <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h+0xc2>
	for (uint8_t i = 0; i < datagram_size; ++i) {
 8000db4:	2300      	movs	r3, #0
 8000db6:	75fb      	strb	r3, [r7, #23]
 8000db8:	e007      	b.n	8000dca <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h+0xb8>
		byte = serialRead();
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f7ff fc89 	bl	80006d2 <_ZN7TMC220910serialReadEv>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < datagram_size; ++i) {
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	75fb      	strb	r3, [r7, #23]
 8000dca:	7dfa      	ldrb	r2, [r7, #23]
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d3f3      	bcc.n	8000dba <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h+0xa8>
 8000dd2:	e000      	b.n	8000dd6 <_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h+0xc4>
		return;
 8000dd4:	bf00      	nop
}
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <DWT_Delay_ms+0x4c>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000dea:	f001 fa33 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <DWT_Delay_ms+0x50>)
 8000df2:	fba2 2303 	umull	r2, r3, r2, r3
 8000df6:	099b      	lsrs	r3, r3, #6
 8000df8:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000e04:	bf00      	nop
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <DWT_Delay_ms+0x4c>)
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	1ad2      	subs	r2, r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	bf34      	ite	cc
 8000e14:	2301      	movcc	r3, #1
 8000e16:	2300      	movcs	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f3      	bne.n	8000e06 <DWT_Delay_ms+0x2a>
}
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	e0001000 	.word	0xe0001000
 8000e2c:	10624dd3 	.word	0x10624dd3

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b092      	sub	sp, #72	; 0x48
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e36:	f000 fa4d 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3a:	f000 f879 	bl	8000f30 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  DWT_Delay_Init();
 8000e3e:	f7ff f985 	bl	800014c <DWT_Delay_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e42:	f000 f8ef 	bl	8001024 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000e46:	f000 f8bf 	bl	8000fc8 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  	HAL_UART_Init(&huart2);
 8000e4a:	4836      	ldr	r0, [pc, #216]	; (8000f24 <main+0xf4>)
 8000e4c:	f001 fa52 	bl	80022f4 <HAL_UART_Init>
    HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2102      	movs	r1, #2
 8000e54:	4834      	ldr	r0, [pc, #208]	; (8000f28 <main+0xf8>)
 8000e56:	f000 fe0b 	bl	8001a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4832      	ldr	r0, [pc, #200]	; (8000f28 <main+0xf8>)
 8000e60:	f000 fe06 	bl	8001a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6a:	4830      	ldr	r0, [pc, #192]	; (8000f2c <main+0xfc>)
 8000e6c:	f000 fe00 	bl	8001a70 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e74:	f000 fa90 	bl	8001398 <HAL_Delay>
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e7e:	482b      	ldr	r0, [pc, #172]	; (8000f2c <main+0xfc>)
 8000e80:	f000 fdf6 	bl	8001a70 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e88:	f000 fa86 	bl	8001398 <HAL_Delay>

	TMC2209 tmcd;
 8000e8c:	f107 0318 	add.w	r3, r7, #24
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff f9b7 	bl	8000204 <_ZN7TMC2209C1Ev>
	tmcd.setup(&huart2, 115200, tmcd.SERIAL_ADDRESS_3);
 8000e96:	f107 0018 	add.w	r0, r7, #24
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea0:	4920      	ldr	r1, [pc, #128]	; (8000f24 <main+0xf4>)
 8000ea2:	f7ff f9cb 	bl	800023c <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd.enable();
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff f9da 	bl	8000264 <_ZN7TMC22096enableEv>

	bool communication = false;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
//			HAL_Delay(1);
//
//		}
//		HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
//
		communication = tmcd.isCommunicating();
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fa43 	bl	8000346 <_ZN7TMC220915isCommunicatingEv>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
//		bool issetup=tmcd.isSetupAndCommunicating();
//		bool isnotsetup=tmcd.isCommunicatingButNotSetup();
		uint8_t version=tmcd.getVersion();
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fa2c 	bl	8000328 <_ZN7TMC220910getVersionEv>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		TMC2209::Settings settings = tmcd.getSettings();
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	f107 0218 	add.w	r2, r7, #24
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fa88 	bl	80003f4 <_ZN7TMC220911getSettingsEv>
		if (communication) {
 8000ee4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d011      	beq.n	8000f10 <main+0xe0>
			for(int i=0; i<=20; i++){
 8000eec:	2300      	movs	r3, #0
 8000eee:	647b      	str	r3, [r7, #68]	; 0x44
 8000ef0:	e00b      	b.n	8000f0a <main+0xda>
				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8000ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <main+0xfc>)
 8000ef8:	f000 fdd2 	bl	8001aa0 <HAL_GPIO_TogglePin>
				DWT_Delay_ms(500);
 8000efc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f00:	f7ff ff6c 	bl	8000ddc <DWT_Delay_ms>
			for(int i=0; i<=20; i++){
 8000f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f06:	3301      	adds	r3, #1
 8000f08:	647b      	str	r3, [r7, #68]	; 0x44
 8000f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f0c:	2b14      	cmp	r3, #20
 8000f0e:	ddf0      	ble.n	8000ef2 <main+0xc2>
			}
		}
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8000f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <main+0xfc>)
 8000f16:	f000 fdc3 	bl	8001aa0 <HAL_GPIO_TogglePin>
		DWT_Delay_ms(500);
 8000f1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f1e:	f7ff ff5d 	bl	8000ddc <DWT_Delay_ms>
	//	HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
 8000f22:	e7c8      	b.n	8000eb6 <main+0x86>
 8000f24:	20000028 	.word	0x20000028
 8000f28:	40010c00 	.word	0x40010c00
 8000f2c:	40011000 	.word	0x40011000

08000f30 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b090      	sub	sp, #64	; 0x40
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0318 	add.w	r3, r7, #24
 8000f3a:	2228      	movs	r2, #40	; 0x28
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 f998 	bl	8003274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f56:	2301      	movs	r3, #1
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f62:	2300      	movs	r3, #0
 8000f64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f66:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fdaf 	bl	8001ad4 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	bf14      	ite	ne
 8000f7c:	2301      	movne	r3, #1
 8000f7e:	2300      	moveq	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8000f86:	f000 f8af 	bl	80010e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 f817 	bl	8001fd8 <HAL_RCC_ClockConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000fba:	f000 f895 	bl	80010e8 <Error_Handler>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3740      	adds	r7, #64	; 0x40
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ffe:	4807      	ldr	r0, [pc, #28]	; (800101c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001000:	f001 f978 	bl	80022f4 <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	bf14      	ite	ne
 800100a:	2301      	movne	r3, #1
 800100c:	2300      	moveq	r3, #0
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001014:	f000 f868 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000028 	.word	0x20000028
 8001020:	40004400 	.word	0x40004400

08001024 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001038:	4b28      	ldr	r3, [pc, #160]	; (80010dc <_ZL12MX_GPIO_Initv+0xb8>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a27      	ldr	r2, [pc, #156]	; (80010dc <_ZL12MX_GPIO_Initv+0xb8>)
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b25      	ldr	r3, [pc, #148]	; (80010dc <_ZL12MX_GPIO_Initv+0xb8>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0310 	and.w	r3, r3, #16
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <_ZL12MX_GPIO_Initv+0xb8>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a21      	ldr	r2, [pc, #132]	; (80010dc <_ZL12MX_GPIO_Initv+0xb8>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <_ZL12MX_GPIO_Initv+0xb8>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <_ZL12MX_GPIO_Initv+0xb8>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <_ZL12MX_GPIO_Initv+0xb8>)
 800106e:	f043 0308 	orr.w	r3, r3, #8
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <_ZL12MX_GPIO_Initv+0xb8>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001086:	4816      	ldr	r0, [pc, #88]	; (80010e0 <_ZL12MX_GPIO_Initv+0xbc>)
 8001088:	f000 fcf2 	bl	8001a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Dir_Pin|En_Pin|Step_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f240 4103 	movw	r1, #1027	; 0x403
 8001092:	4814      	ldr	r0, [pc, #80]	; (80010e4 <_ZL12MX_GPIO_Initv+0xc0>)
 8001094:	f000 fcec 	bl	8001a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8001098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	4619      	mov	r1, r3
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <_ZL12MX_GPIO_Initv+0xbc>)
 80010b2:	f000 fb61 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dir_Pin En_Pin Step_Pin */
  GPIO_InitStruct.Pin = Dir_Pin|En_Pin|Step_Pin;
 80010b6:	f240 4303 	movw	r3, #1027	; 0x403
 80010ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <_ZL12MX_GPIO_Initv+0xc0>)
 80010d0:	f000 fb52 	bl	8001778 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40011000 	.word	0x40011000
 80010e4:	40010c00 	.word	0x40010c00

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010f0:	e7fe      	b.n	80010f0 <Error_Handler+0x8>
	...

080010f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_MspInit+0x6c>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <HAL_MspInit+0x6c>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6193      	str	r3, [r2, #24]
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_MspInit+0x6c>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <HAL_MspInit+0x6c>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <HAL_MspInit+0x6c>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_MspInit+0x6c>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	2005      	movs	r0, #5
 8001130:	f000 fa2d 	bl	800158e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001134:	2005      	movs	r0, #5
 8001136:	f000 fa46 	bl	80015c6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_MspInit+0x70>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_MspInit+0x70>)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000
 8001164:	40010000 	.word	0x40010000

08001168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <HAL_UART_MspInit+0x98>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d137      	bne.n	80011f8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_UART_MspInit+0x9c>)
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <HAL_UART_MspInit+0x9c>)
 800118e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001192:	61d3      	str	r3, [r2, #28]
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_UART_MspInit+0x9c>)
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_UART_MspInit+0x9c>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_UART_MspInit+0x9c>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_UART_MspInit+0x9c>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011b8:	2304      	movs	r3, #4
 80011ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	480f      	ldr	r0, [pc, #60]	; (8001208 <HAL_UART_MspInit+0xa0>)
 80011cc:	f000 fad4 	bl	8001778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011d0:	2308      	movs	r3, #8
 80011d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4619      	mov	r1, r3
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <HAL_UART_MspInit+0xa0>)
 80011e4:	f000 fac8 	bl	8001778 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2026      	movs	r0, #38	; 0x26
 80011ee:	f000 f9ce 	bl	800158e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011f2:	2026      	movs	r0, #38	; 0x26
 80011f4:	f000 f9e7 	bl	80015c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40004400 	.word	0x40004400
 8001204:	40021000 	.word	0x40021000
 8001208:	40010800 	.word	0x40010800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001252:	f000 f885 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}

0800125a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
	...

08001268 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <USART2_IRQHandler+0x10>)
 800126e:	f001 fab1 	bl	80027d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000028 	.word	0x20000028

0800127c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001288:	f7ff fff8 	bl	800127c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800128e:	490c      	ldr	r1, [pc, #48]	; (80012c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001290:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012a4:	4c09      	ldr	r4, [pc, #36]	; (80012cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f001 ffe7 	bl	8003284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b6:	f7ff fdbb 	bl	8000e30 <main>
  bx lr
 80012ba:	4770      	bx	lr
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012c4:	08003318 	.word	0x08003318
  ldr r2, =_sbss
 80012c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012cc:	20000074 	.word	0x20000074

080012d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_2_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_Init+0x28>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_Init+0x28>)
 80012de:	f043 0310 	orr.w	r3, r3, #16
 80012e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f947 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f000 f808 	bl	8001300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff ff00 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40022000 	.word	0x40022000

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x54>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x58>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	fbb3 f3f1 	udiv	r3, r3, r1
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f95f 	bl	80015e2 <HAL_SYSTICK_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00e      	b.n	800134c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d80a      	bhi.n	800134a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f000 f927 	bl	800158e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <HAL_InitTick+0x5c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000000 	.word	0x20000000
 8001358:	20000008 	.word	0x20000008
 800135c:	20000004 	.word	0x20000004

08001360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x1c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_IncTick+0x20>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a03      	ldr	r2, [pc, #12]	; (8001380 <HAL_IncTick+0x20>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	20000008 	.word	0x20000008
 8001380:	20000070 	.word	0x20000070

08001384 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b02      	ldr	r3, [pc, #8]	; (8001394 <HAL_GetTick+0x10>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	20000070 	.word	0x20000070

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff fff0 	bl	8001384 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffe0 	bl	8001384 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000008 	.word	0x20000008

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4906      	ldr	r1, [pc, #24]	; (8001478 <__NVIC_EnableIRQ+0x34>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db0a      	blt.n	80014a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	490c      	ldr	r1, [pc, #48]	; (80014c8 <__NVIC_SetPriority+0x4c>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	440b      	add	r3, r1
 80014a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a4:	e00a      	b.n	80014bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <__NVIC_SetPriority+0x50>)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3b04      	subs	r3, #4
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	761a      	strb	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf28      	it	cs
 80014ee:	2304      	movcs	r3, #4
 80014f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3304      	adds	r3, #4
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d902      	bls.n	8001500 <NVIC_EncodePriority+0x30>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3b03      	subs	r3, #3
 80014fe:	e000      	b.n	8001502 <NVIC_EncodePriority+0x32>
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43d9      	mvns	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	4313      	orrs	r3, r2
         );
}
 800152a:	4618      	mov	r0, r3
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001544:	d301      	bcc.n	800154a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001546:	2301      	movs	r3, #1
 8001548:	e00f      	b.n	800156a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <SysTick_Config+0x40>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001552:	210f      	movs	r1, #15
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f7ff ff90 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SysTick_Config+0x40>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SysTick_Config+0x40>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	e000e010 	.word	0xe000e010

08001578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff2d 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a0:	f7ff ff42 	bl	8001428 <__NVIC_GetPriorityGrouping>
 80015a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7ff ff90 	bl	80014d0 <NVIC_EncodePriority>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff5f 	bl	800147c <__NVIC_SetPriority>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff35 	bl	8001444 <__NVIC_EnableIRQ>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffa2 	bl	8001534 <SysTick_Config>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d008      	beq.n	8001624 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2204      	movs	r2, #4
 8001616:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e020      	b.n	8001666 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 020e 	bic.w	r2, r2, #14
 8001632:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0201 	bic.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164c:	2101      	movs	r1, #1
 800164e:	fa01 f202 	lsl.w	r2, r1, r2
 8001652:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001664:	7bfb      	ldrb	r3, [r7, #15]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d005      	beq.n	8001694 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2204      	movs	r2, #4
 800168c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
 8001692:	e051      	b.n	8001738 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 020e 	bic.w	r2, r2, #14
 80016a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a22      	ldr	r2, [pc, #136]	; (8001744 <HAL_DMA_Abort_IT+0xd4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d029      	beq.n	8001712 <HAL_DMA_Abort_IT+0xa2>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a21      	ldr	r2, [pc, #132]	; (8001748 <HAL_DMA_Abort_IT+0xd8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d022      	beq.n	800170e <HAL_DMA_Abort_IT+0x9e>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a1f      	ldr	r2, [pc, #124]	; (800174c <HAL_DMA_Abort_IT+0xdc>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01a      	beq.n	8001708 <HAL_DMA_Abort_IT+0x98>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a1e      	ldr	r2, [pc, #120]	; (8001750 <HAL_DMA_Abort_IT+0xe0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d012      	beq.n	8001702 <HAL_DMA_Abort_IT+0x92>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <HAL_DMA_Abort_IT+0xe4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00a      	beq.n	80016fc <HAL_DMA_Abort_IT+0x8c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <HAL_DMA_Abort_IT+0xe8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d102      	bne.n	80016f6 <HAL_DMA_Abort_IT+0x86>
 80016f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016f4:	e00e      	b.n	8001714 <HAL_DMA_Abort_IT+0xa4>
 80016f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016fa:	e00b      	b.n	8001714 <HAL_DMA_Abort_IT+0xa4>
 80016fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001700:	e008      	b.n	8001714 <HAL_DMA_Abort_IT+0xa4>
 8001702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001706:	e005      	b.n	8001714 <HAL_DMA_Abort_IT+0xa4>
 8001708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170c:	e002      	b.n	8001714 <HAL_DMA_Abort_IT+0xa4>
 800170e:	2310      	movs	r3, #16
 8001710:	e000      	b.n	8001714 <HAL_DMA_Abort_IT+0xa4>
 8001712:	2301      	movs	r3, #1
 8001714:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_DMA_Abort_IT+0xec>)
 8001716:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4798      	blx	r3
    } 
  }
  return status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40020008 	.word	0x40020008
 8001748:	4002001c 	.word	0x4002001c
 800174c:	40020030 	.word	0x40020030
 8001750:	40020044 	.word	0x40020044
 8001754:	40020058 	.word	0x40020058
 8001758:	4002006c 	.word	0x4002006c
 800175c:	40020000 	.word	0x40020000

08001760 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
	...

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	b480      	push	{r7}
 800177a:	b08b      	sub	sp, #44	; 0x2c
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178a:	e161      	b.n	8001a50 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800178c:	2201      	movs	r2, #1
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	f040 8150 	bne.w	8001a4a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4a97      	ldr	r2, [pc, #604]	; (8001a0c <HAL_GPIO_Init+0x294>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d05e      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017b4:	4a95      	ldr	r2, [pc, #596]	; (8001a0c <HAL_GPIO_Init+0x294>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d875      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017ba:	4a95      	ldr	r2, [pc, #596]	; (8001a10 <HAL_GPIO_Init+0x298>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d058      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017c0:	4a93      	ldr	r2, [pc, #588]	; (8001a10 <HAL_GPIO_Init+0x298>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d86f      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017c6:	4a93      	ldr	r2, [pc, #588]	; (8001a14 <HAL_GPIO_Init+0x29c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d052      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017cc:	4a91      	ldr	r2, [pc, #580]	; (8001a14 <HAL_GPIO_Init+0x29c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d869      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017d2:	4a91      	ldr	r2, [pc, #580]	; (8001a18 <HAL_GPIO_Init+0x2a0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d04c      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017d8:	4a8f      	ldr	r2, [pc, #572]	; (8001a18 <HAL_GPIO_Init+0x2a0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d863      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017de:	4a8f      	ldr	r2, [pc, #572]	; (8001a1c <HAL_GPIO_Init+0x2a4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d046      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017e4:	4a8d      	ldr	r2, [pc, #564]	; (8001a1c <HAL_GPIO_Init+0x2a4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d85d      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d82a      	bhi.n	8001844 <HAL_GPIO_Init+0xcc>
 80017ee:	2b12      	cmp	r3, #18
 80017f0:	d859      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <HAL_GPIO_Init+0x80>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001873 	.word	0x08001873
 80017fc:	0800184d 	.word	0x0800184d
 8001800:	0800185f 	.word	0x0800185f
 8001804:	080018a1 	.word	0x080018a1
 8001808:	080018a7 	.word	0x080018a7
 800180c:	080018a7 	.word	0x080018a7
 8001810:	080018a7 	.word	0x080018a7
 8001814:	080018a7 	.word	0x080018a7
 8001818:	080018a7 	.word	0x080018a7
 800181c:	080018a7 	.word	0x080018a7
 8001820:	080018a7 	.word	0x080018a7
 8001824:	080018a7 	.word	0x080018a7
 8001828:	080018a7 	.word	0x080018a7
 800182c:	080018a7 	.word	0x080018a7
 8001830:	080018a7 	.word	0x080018a7
 8001834:	080018a7 	.word	0x080018a7
 8001838:	080018a7 	.word	0x080018a7
 800183c:	08001855 	.word	0x08001855
 8001840:	08001869 	.word	0x08001869
 8001844:	4a76      	ldr	r2, [pc, #472]	; (8001a20 <HAL_GPIO_Init+0x2a8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800184a:	e02c      	b.n	80018a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	623b      	str	r3, [r7, #32]
          break;
 8001852:	e029      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	3304      	adds	r3, #4
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e024      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	3308      	adds	r3, #8
 8001864:	623b      	str	r3, [r7, #32]
          break;
 8001866:	e01f      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	330c      	adds	r3, #12
 800186e:	623b      	str	r3, [r7, #32]
          break;
 8001870:	e01a      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800187a:	2304      	movs	r3, #4
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e013      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001888:	2308      	movs	r3, #8
 800188a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	611a      	str	r2, [r3, #16]
          break;
 8001892:	e009      	b.n	80018a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001894:	2308      	movs	r3, #8
 8001896:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	615a      	str	r2, [r3, #20]
          break;
 800189e:	e003      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
          break;
 80018a4:	e000      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          break;
 80018a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2bff      	cmp	r3, #255	; 0xff
 80018ac:	d801      	bhi.n	80018b2 <HAL_GPIO_Init+0x13a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	e001      	b.n	80018b6 <HAL_GPIO_Init+0x13e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3304      	adds	r3, #4
 80018b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2bff      	cmp	r3, #255	; 0xff
 80018bc:	d802      	bhi.n	80018c4 <HAL_GPIO_Init+0x14c>
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	e002      	b.n	80018ca <HAL_GPIO_Init+0x152>
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	3b08      	subs	r3, #8
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	210f      	movs	r1, #15
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	6a39      	ldr	r1, [r7, #32]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80a9 	beq.w	8001a4a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018f8:	4b4a      	ldr	r3, [pc, #296]	; (8001a24 <HAL_GPIO_Init+0x2ac>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a49      	ldr	r2, [pc, #292]	; (8001a24 <HAL_GPIO_Init+0x2ac>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_GPIO_Init+0x2ac>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001910:	4a45      	ldr	r2, [pc, #276]	; (8001a28 <HAL_GPIO_Init+0x2b0>)
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	220f      	movs	r2, #15
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a3d      	ldr	r2, [pc, #244]	; (8001a2c <HAL_GPIO_Init+0x2b4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00d      	beq.n	8001958 <HAL_GPIO_Init+0x1e0>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a3c      	ldr	r2, [pc, #240]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d007      	beq.n	8001954 <HAL_GPIO_Init+0x1dc>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a3b      	ldr	r2, [pc, #236]	; (8001a34 <HAL_GPIO_Init+0x2bc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_GPIO_Init+0x1d8>
 800194c:	2302      	movs	r3, #2
 800194e:	e004      	b.n	800195a <HAL_GPIO_Init+0x1e2>
 8001950:	2303      	movs	r3, #3
 8001952:	e002      	b.n	800195a <HAL_GPIO_Init+0x1e2>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_GPIO_Init+0x1e2>
 8001958:	2300      	movs	r3, #0
 800195a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195c:	f002 0203 	and.w	r2, r2, #3
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	4093      	lsls	r3, r2
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800196a:	492f      	ldr	r1, [pc, #188]	; (8001a28 <HAL_GPIO_Init+0x2b0>)
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001984:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	492b      	ldr	r1, [pc, #172]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	608b      	str	r3, [r1, #8]
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001992:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	43db      	mvns	r3, r3
 800199a:	4927      	ldr	r1, [pc, #156]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 800199c:	4013      	ands	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ac:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	4921      	ldr	r1, [pc, #132]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	491d      	ldr	r1, [pc, #116]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4917      	ldr	r1, [pc, #92]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4913      	ldr	r1, [pc, #76]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d01f      	beq.n	8001a3c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	490d      	ldr	r1, [pc, #52]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e01f      	b.n	8001a4a <HAL_GPIO_Init+0x2d2>
 8001a0a:	bf00      	nop
 8001a0c:	10320000 	.word	0x10320000
 8001a10:	10310000 	.word	0x10310000
 8001a14:	10220000 	.word	0x10220000
 8001a18:	10210000 	.word	0x10210000
 8001a1c:	10120000 	.word	0x10120000
 8001a20:	10110000 	.word	0x10110000
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	40010800 	.word	0x40010800
 8001a30:	40010c00 	.word	0x40010c00
 8001a34:	40011000 	.word	0x40011000
 8001a38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_GPIO_Init+0x2f4>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	4909      	ldr	r1, [pc, #36]	; (8001a6c <HAL_GPIO_Init+0x2f4>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f47f ae96 	bne.w	800178c <HAL_GPIO_Init+0x14>
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	372c      	adds	r7, #44	; 0x2c
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	40010400 	.word	0x40010400

08001a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a80:	787b      	ldrb	r3, [r7, #1]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a8c:	e003      	b.n	8001a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	041a      	lsls	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ab2:	887a      	ldrh	r2, [r7, #2]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43d9      	mvns	r1, r3
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	400b      	ands	r3, r1
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	611a      	str	r2, [r3, #16]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e272      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8087 	beq.w	8001c02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af4:	4b92      	ldr	r3, [pc, #584]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d00c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b00:	4b8f      	ldr	r3, [pc, #572]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d112      	bne.n	8001b32 <HAL_RCC_OscConfig+0x5e>
 8001b0c:	4b8c      	ldr	r3, [pc, #560]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b18:	d10b      	bne.n	8001b32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1a:	4b89      	ldr	r3, [pc, #548]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d06c      	beq.n	8001c00 <HAL_RCC_OscConfig+0x12c>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d168      	bne.n	8001c00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e24c      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x76>
 8001b3c:	4b80      	ldr	r3, [pc, #512]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a7f      	ldr	r2, [pc, #508]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e02e      	b.n	8001ba8 <HAL_RCC_OscConfig+0xd4>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x98>
 8001b52:	4b7b      	ldr	r3, [pc, #492]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a7a      	ldr	r2, [pc, #488]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b78      	ldr	r3, [pc, #480]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a77      	ldr	r2, [pc, #476]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e01d      	b.n	8001ba8 <HAL_RCC_OscConfig+0xd4>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0xbc>
 8001b76:	4b72      	ldr	r3, [pc, #456]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a71      	ldr	r2, [pc, #452]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b6f      	ldr	r3, [pc, #444]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6e      	ldr	r2, [pc, #440]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_RCC_OscConfig+0xd4>
 8001b90:	4b6b      	ldr	r3, [pc, #428]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a6a      	ldr	r2, [pc, #424]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b68      	ldr	r3, [pc, #416]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a67      	ldr	r2, [pc, #412]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d013      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fbe8 	bl	8001384 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff fbe4 	bl	8001384 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e200      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0xe4>
 8001bd6:	e014      	b.n	8001c02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fbd4 	bl	8001384 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be0:	f7ff fbd0 	bl	8001384 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	; 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e1ec      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf2:	4b53      	ldr	r3, [pc, #332]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x10c>
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d063      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c0e:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c1a:	4b49      	ldr	r3, [pc, #292]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d11c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x18c>
 8001c26:	4b46      	ldr	r3, [pc, #280]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d116      	bne.n	8001c60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c32:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <HAL_RCC_OscConfig+0x176>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e1c0      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4939      	ldr	r1, [pc, #228]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	e03a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c68:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fb89 	bl	8001384 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c76:	f7ff fb85 	bl	8001384 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e1a1      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4927      	ldr	r1, [pc, #156]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
 8001ca8:	e015      	b.n	8001cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001caa:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fb68 	bl	8001384 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fb64 	bl	8001384 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e180      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d03a      	beq.n	8001d58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d019      	beq.n	8001d1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_RCC_OscConfig+0x274>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf0:	f7ff fb48 	bl	8001384 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf8:	f7ff fb44 	bl	8001384 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e160      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f000 face 	bl	80022b8 <RCC_Delay>
 8001d1c:	e01c      	b.n	8001d58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_RCC_OscConfig+0x274>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7ff fb2e 	bl	8001384 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fb2a 	bl	8001384 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d908      	bls.n	8001d4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e146      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	42420000 	.word	0x42420000
 8001d48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	4b92      	ldr	r3, [pc, #584]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e9      	bne.n	8001d2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80a6 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6a:	4b8b      	ldr	r3, [pc, #556]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10d      	bne.n	8001d92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4a87      	ldr	r2, [pc, #540]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	61d3      	str	r3, [r2, #28]
 8001d82:	4b85      	ldr	r3, [pc, #532]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d92:	4b82      	ldr	r3, [pc, #520]	; (8001f9c <HAL_RCC_OscConfig+0x4c8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d118      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <HAL_RCC_OscConfig+0x4c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7e      	ldr	r2, [pc, #504]	; (8001f9c <HAL_RCC_OscConfig+0x4c8>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001daa:	f7ff faeb 	bl	8001384 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db2:	f7ff fae7 	bl	8001384 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b64      	cmp	r3, #100	; 0x64
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e103      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	4b75      	ldr	r3, [pc, #468]	; (8001f9c <HAL_RCC_OscConfig+0x4c8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x312>
 8001dd8:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a6e      	ldr	r2, [pc, #440]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	e02d      	b.n	8001e42 <HAL_RCC_OscConfig+0x36e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x334>
 8001dee:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a69      	ldr	r2, [pc, #420]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	4b67      	ldr	r3, [pc, #412]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a66      	ldr	r2, [pc, #408]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	e01c      	b.n	8001e42 <HAL_RCC_OscConfig+0x36e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d10c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x356>
 8001e10:	4b61      	ldr	r3, [pc, #388]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a60      	ldr	r2, [pc, #384]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	4b5e      	ldr	r3, [pc, #376]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a5d      	ldr	r2, [pc, #372]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6213      	str	r3, [r2, #32]
 8001e28:	e00b      	b.n	8001e42 <HAL_RCC_OscConfig+0x36e>
 8001e2a:	4b5b      	ldr	r3, [pc, #364]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a5a      	ldr	r2, [pc, #360]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6213      	str	r3, [r2, #32]
 8001e36:	4b58      	ldr	r3, [pc, #352]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a57      	ldr	r2, [pc, #348]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d015      	beq.n	8001e76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fa9b 	bl	8001384 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7ff fa97 	bl	8001384 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0b1      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	4b4b      	ldr	r3, [pc, #300]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ee      	beq.n	8001e52 <HAL_RCC_OscConfig+0x37e>
 8001e74:	e014      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fa85 	bl	8001384 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff fa81 	bl	8001384 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e09b      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e94:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a3b      	ldr	r2, [pc, #236]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8087 	beq.w	8001fca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebc:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d061      	beq.n	8001f8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d146      	bne.n	8001f5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fa55 	bl	8001384 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ede:	f7ff fa51 	bl	8001384 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e06d      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef0:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f04:	d108      	bne.n	8001f18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	4921      	ldr	r1, [pc, #132]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f18:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a19      	ldr	r1, [r3, #32]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	491b      	ldr	r1, [pc, #108]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7ff fa25 	bl	8001384 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7ff fa21 	bl	8001384 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e03d      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x46a>
 8001f5c:	e035      	b.n	8001fca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fa0e 	bl	8001384 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7ff fa0a 	bl	8001384 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e026      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x498>
 8001f8a:	e01e      	b.n	8001fca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d107      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e019      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_OscConfig+0x500>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0d0      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d910      	bls.n	800201c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 0207 	bic.w	r2, r3, #7
 8002002:	4965      	ldr	r1, [pc, #404]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b8      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002034:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a58      	ldr	r2, [pc, #352]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800203e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800204c:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a52      	ldr	r2, [pc, #328]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002056:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b50      	ldr	r3, [pc, #320]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	494d      	ldr	r1, [pc, #308]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d040      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b47      	ldr	r3, [pc, #284]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d115      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07f      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002096:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e073      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e06b      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b6:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f023 0203 	bic.w	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4936      	ldr	r1, [pc, #216]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c8:	f7ff f95c 	bl	8001384 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d0:	f7ff f958 	bl	8001384 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e053      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 020c 	and.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1eb      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d210      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 0207 	bic.w	r2, r3, #7
 800210e:	4922      	ldr	r1, [pc, #136]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e032      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4916      	ldr	r1, [pc, #88]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	490e      	ldr	r1, [pc, #56]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002166:	f000 f821 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 800216a:	4602      	mov	r2, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	490a      	ldr	r1, [pc, #40]	; (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002178:	5ccb      	ldrb	r3, [r1, r3]
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f8ba 	bl	8001300 <HAL_InitTick>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40022000 	.word	0x40022000
 800219c:	40021000 	.word	0x40021000
 80021a0:	080032e4 	.word	0x080032e4
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000004 	.word	0x20000004

080021ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021c6:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <HAL_RCC_GetSysClockFreq+0x94>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d002      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x30>
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d003      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x36>
 80021da:	e027      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_RCC_GetSysClockFreq+0x98>)
 80021de:	613b      	str	r3, [r7, #16]
      break;
 80021e0:	e027      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	0c9b      	lsrs	r3, r3, #18
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	4a17      	ldr	r2, [pc, #92]	; (8002248 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021ec:	5cd3      	ldrb	r3, [r2, r3]
 80021ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d010      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_RCC_GetSysClockFreq+0x94>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	0c5b      	lsrs	r3, r3, #17
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	4a11      	ldr	r2, [pc, #68]	; (800224c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <HAL_RCC_GetSysClockFreq+0x98>)
 800220e:	fb03 f202 	mul.w	r2, r3, r2
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	fbb2 f3f3 	udiv	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e004      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	613b      	str	r3, [r7, #16]
      break;
 800222a:	e002      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_RCC_GetSysClockFreq+0x98>)
 800222e:	613b      	str	r3, [r7, #16]
      break;
 8002230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002232:	693b      	ldr	r3, [r7, #16]
}
 8002234:	4618      	mov	r0, r3
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	007a1200 	.word	0x007a1200
 8002248:	080032fc 	.word	0x080032fc
 800224c:	0800330c 	.word	0x0800330c
 8002250:	003d0900 	.word	0x003d0900

08002254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002258:	4b02      	ldr	r3, [pc, #8]	; (8002264 <HAL_RCC_GetHCLKFreq+0x10>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	20000000 	.word	0x20000000

08002268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800226c:	f7ff fff2 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4903      	ldr	r1, [pc, #12]	; (800228c <HAL_RCC_GetPCLK1Freq+0x24>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	080032f4 	.word	0x080032f4

08002290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002294:	f7ff ffde 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	0adb      	lsrs	r3, r3, #11
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4903      	ldr	r1, [pc, #12]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	080032f4 	.word	0x080032f4

080022b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <RCC_Delay+0x34>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <RCC_Delay+0x38>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	0a5b      	lsrs	r3, r3, #9
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022d4:	bf00      	nop
  }
  while (Delay --);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	60fa      	str	r2, [r7, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f9      	bne.n	80022d4 <RCC_Delay+0x1c>
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	20000000 	.word	0x20000000
 80022f0:	10624dd3 	.word	0x10624dd3

080022f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e042      	b.n	800238c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7fe ff24 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2224      	movs	r2, #36	; 0x24
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002336:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 ff0d 	bl	8003158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800234c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800235c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800236c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d16d      	bne.n	8002490 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <HAL_UART_Transmit+0x2c>
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e066      	b.n	8002492 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2221      	movs	r2, #33	; 0x21
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023d2:	f7fe ffd7 	bl	8001384 <HAL_GetTick>
 80023d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ec:	d108      	bne.n	8002400 <HAL_UART_Transmit+0x6c>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d104      	bne.n	8002400 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	e003      	b.n	8002408 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002408:	e02a      	b.n	8002460 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2200      	movs	r2, #0
 8002412:	2180      	movs	r1, #128	; 0x80
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fc95 	bl	8002d44 <UART_WaitOnFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e036      	b.n	8002492 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10b      	bne.n	8002442 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002438:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	3302      	adds	r3, #2
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	e007      	b.n	8002452 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	3301      	adds	r3, #1
 8002450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1cf      	bne.n	800240a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2200      	movs	r2, #0
 8002472:	2140      	movs	r1, #64	; 0x40
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fc65 	bl	8002d44 <UART_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e006      	b.n	8002492 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3720      	adds	r7, #32
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b08a      	sub	sp, #40	; 0x28
 800249e:	af02      	add	r7, sp, #8
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	603b      	str	r3, [r7, #0]
 80024a6:	4613      	mov	r3, r2
 80024a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d17c      	bne.n	80025b4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_UART_Receive+0x2c>
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e075      	b.n	80025b6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2222      	movs	r2, #34	; 0x22
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024de:	f7fe ff51 	bl	8001384 <HAL_GetTick>
 80024e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f8:	d108      	bne.n	800250c <HAL_UART_Receive+0x72>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d104      	bne.n	800250c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	e003      	b.n	8002514 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002514:	e043      	b.n	800259e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2200      	movs	r2, #0
 800251e:	2120      	movs	r1, #32
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fc0f 	bl	8002d44 <UART_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e042      	b.n	80025b6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10c      	bne.n	8002550 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	b29b      	uxth	r3, r3
 800253e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002542:	b29a      	uxth	r2, r3
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	3302      	adds	r3, #2
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	e01f      	b.n	8002590 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002558:	d007      	beq.n	800256a <HAL_UART_Receive+0xd0>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10a      	bne.n	8002578 <HAL_UART_Receive+0xde>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e008      	b.n	800258a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002584:	b2da      	uxtb	r2, r3
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3301      	adds	r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1b6      	bne.n	8002516 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e000      	b.n	80025b6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025b4:	2302      	movs	r3, #2
  }
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b08e      	sub	sp, #56	; 0x38
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	330c      	adds	r3, #12
 80025cc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	e853 3f00 	ldrex	r3, [r3]
 80025d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ee:	e841 2300 	strex	r3, r2, [r1]
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1e5      	bne.n	80025c6 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	d036      	beq.n	8002676 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3314      	adds	r3, #20
 800260e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	e853 3f00 	ldrex	r3, [r3]
 8002616:	60bb      	str	r3, [r7, #8]
   return(result);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3314      	adds	r3, #20
 8002626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002628:	61ba      	str	r2, [r7, #24]
 800262a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262c:	6979      	ldr	r1, [r7, #20]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	e841 2300 	strex	r3, r2, [r1]
 8002634:	613b      	str	r3, [r7, #16]
   return(result);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e5      	bne.n	8002608 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	2b00      	cmp	r3, #0
 8002642:	d018      	beq.n	8002676 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	2200      	movs	r2, #0
 800264a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe ffd2 	bl	80015fa <HAL_DMA_Abort>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f87d 	bl	8001760 <HAL_DMA_GetError>
 8002666:	4603      	mov	r3, r0
 8002668:	2b20      	cmp	r3, #32
 800266a:	d104      	bne.n	8002676 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2210      	movs	r2, #16
 8002670:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e007      	b.n	8002686 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3738      	adds	r7, #56	; 0x38
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b09a      	sub	sp, #104	; 0x68
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	330c      	adds	r3, #12
 800269c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a0:	e853 3f00 	ldrex	r3, [r3]
 80026a4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80026a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026ac:	667b      	str	r3, [r7, #100]	; 0x64
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	330c      	adds	r3, #12
 80026b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80026b6:	657a      	str	r2, [r7, #84]	; 0x54
 80026b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80026bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026be:	e841 2300 	strex	r3, r2, [r1]
 80026c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80026c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1e5      	bne.n	8002696 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3314      	adds	r3, #20
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d4:	e853 3f00 	ldrex	r3, [r3]
 80026d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	663b      	str	r3, [r7, #96]	; 0x60
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3314      	adds	r3, #20
 80026e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026ea:	643a      	str	r2, [r7, #64]	; 0x40
 80026ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80026f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026f2:	e841 2300 	strex	r3, r2, [r1]
 80026f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80026f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1e5      	bne.n	80026ca <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	2b01      	cmp	r3, #1
 8002704:	d119      	bne.n	800273a <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	330c      	adds	r3, #12
 800270c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	e853 3f00 	ldrex	r3, [r3]
 8002714:	61fb      	str	r3, [r7, #28]
   return(result);
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f023 0310 	bic.w	r3, r3, #16
 800271c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	330c      	adds	r3, #12
 8002724:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800272c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272e:	e841 2300 	strex	r3, r2, [r1]
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1e5      	bne.n	8002706 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d036      	beq.n	80027b6 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3314      	adds	r3, #20
 800274e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	e853 3f00 	ldrex	r3, [r3]
 8002756:	60bb      	str	r3, [r7, #8]
   return(result);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800275e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3314      	adds	r3, #20
 8002766:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002768:	61ba      	str	r2, [r7, #24]
 800276a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276c:	6979      	ldr	r1, [r7, #20]
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	e841 2300 	strex	r3, r2, [r1]
 8002774:	613b      	str	r3, [r7, #16]
   return(result);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1e5      	bne.n	8002748 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d018      	beq.n	80027b6 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002788:	2200      	movs	r2, #0
 800278a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe ff32 	bl	80015fa <HAL_DMA_Abort>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00c      	beq.n	80027b6 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe ffdd 	bl	8001760 <HAL_DMA_GetError>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d104      	bne.n	80027b6 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2210      	movs	r2, #16
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e00a      	b.n	80027cc <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3768      	adds	r7, #104	; 0x68
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b0ba      	sub	sp, #232	; 0xe8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800281a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <HAL_UART_IRQHandler+0x66>
 8002826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fbd1 	bl	8002fda <UART_Receive_IT>
      return;
 8002838:	e25b      	b.n	8002cf2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800283a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80de 	beq.w	8002a00 <HAL_UART_IRQHandler+0x22c>
 8002844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d106      	bne.n	800285e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002854:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 80d1 	beq.w	8002a00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800285e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_UART_IRQHandler+0xae>
 800286a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_UART_IRQHandler+0xd2>
 800288e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	f043 0202 	orr.w	r2, r3, #2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <HAL_UART_IRQHandler+0xf6>
 80028b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f043 0204 	orr.w	r2, r3, #4
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d011      	beq.n	80028fa <HAL_UART_IRQHandler+0x126>
 80028d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f043 0208 	orr.w	r2, r3, #8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 81f2 	beq.w	8002ce8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_UART_IRQHandler+0x14e>
 8002910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fb5c 	bl	8002fda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf14      	ite	ne
 8002930:	2301      	movne	r3, #1
 8002932:	2300      	moveq	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <HAL_UART_IRQHandler+0x17a>
 8002946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d04f      	beq.n	80029ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fa66 	bl	8002e20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d041      	beq.n	80029e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3314      	adds	r3, #20
 8002968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002970:	e853 3f00 	ldrex	r3, [r3]
 8002974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800297c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3314      	adds	r3, #20
 800298a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800298e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002996:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800299a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800299e:	e841 2300 	strex	r3, r2, [r1]
 80029a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1d9      	bne.n	8002962 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d013      	beq.n	80029de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ba:	4a7e      	ldr	r2, [pc, #504]	; (8002bb4 <HAL_UART_IRQHandler+0x3e0>)
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fe54 	bl	8001670 <HAL_DMA_Abort_IT>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d016      	beq.n	80029fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029d8:	4610      	mov	r0, r2
 80029da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029dc:	e00e      	b.n	80029fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f99c 	bl	8002d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e4:	e00a      	b.n	80029fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f998 	bl	8002d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ec:	e006      	b.n	80029fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f994 	bl	8002d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80029fa:	e175      	b.n	8002ce8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fc:	bf00      	nop
    return;
 80029fe:	e173      	b.n	8002ce8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	f040 814f 	bne.w	8002ca8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8148 	beq.w	8002ca8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8141 	beq.w	8002ca8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80b6 	beq.w	8002bb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 8145 	beq.w	8002cec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	f080 813e 	bcs.w	8002cec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	f000 8088 	beq.w	8002b94 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	330c      	adds	r3, #12
 8002a8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a92:	e853 3f00 	ldrex	r3, [r3]
 8002a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	330c      	adds	r3, #12
 8002aac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ab0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ab4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002abc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ac0:	e841 2300 	strex	r3, r2, [r1]
 8002ac4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1d9      	bne.n	8002a84 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3314      	adds	r3, #20
 8002ad6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ada:	e853 3f00 	ldrex	r3, [r3]
 8002ade:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3314      	adds	r3, #20
 8002af0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002af4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002af8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002afc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b00:	e841 2300 	strex	r3, r2, [r1]
 8002b04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e1      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3314      	adds	r3, #20
 8002b12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b16:	e853 3f00 	ldrex	r3, [r3]
 8002b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3314      	adds	r3, #20
 8002b2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b30:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b38:	e841 2300 	strex	r3, r2, [r1]
 8002b3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e3      	bne.n	8002b0c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b64:	f023 0310 	bic.w	r3, r3, #16
 8002b68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	330c      	adds	r3, #12
 8002b72:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b76:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b78:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b7e:	e841 2300 	strex	r3, r2, [r1]
 8002b82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e3      	bne.n	8002b52 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fd33 	bl	80015fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	4619      	mov	r1, r3
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f8bf 	bl	8002d2e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bb0:	e09c      	b.n	8002cec <HAL_UART_IRQHandler+0x518>
 8002bb2:	bf00      	nop
 8002bb4:	08002ee5 	.word	0x08002ee5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 808e 	beq.w	8002cf0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8089 	beq.w	8002cf0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	330c      	adds	r3, #12
 8002be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	e853 3f00 	ldrex	r3, [r3]
 8002bec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c02:	647a      	str	r2, [r7, #68]	; 0x44
 8002c04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c0a:	e841 2300 	strex	r3, r2, [r1]
 8002c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1e3      	bne.n	8002bde <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3314      	adds	r3, #20
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	e853 3f00 	ldrex	r3, [r3]
 8002c24:	623b      	str	r3, [r7, #32]
   return(result);
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3314      	adds	r3, #20
 8002c36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c3a:	633a      	str	r2, [r7, #48]	; 0x30
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c42:	e841 2300 	strex	r3, r2, [r1]
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1e3      	bne.n	8002c16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	330c      	adds	r3, #12
 8002c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	e853 3f00 	ldrex	r3, [r3]
 8002c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0310 	bic.w	r3, r3, #16
 8002c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	330c      	adds	r3, #12
 8002c7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c80:	61fa      	str	r2, [r7, #28]
 8002c82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c84:	69b9      	ldr	r1, [r7, #24]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	e841 2300 	strex	r3, r2, [r1]
 8002c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e3      	bne.n	8002c5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f844 	bl	8002d2e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ca6:	e023      	b.n	8002cf0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d009      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x4f4>
 8002cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f923 	bl	8002f0c <UART_Transmit_IT>
    return;
 8002cc6:	e014      	b.n	8002cf2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00e      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x51e>
 8002cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f962 	bl	8002faa <UART_EndTransmit_IT>
    return;
 8002ce6:	e004      	b.n	8002cf2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002ce8:	bf00      	nop
 8002cea:	e002      	b.n	8002cf2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002cec:	bf00      	nop
 8002cee:	e000      	b.n	8002cf2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002cf0:	bf00      	nop
  }
}
 8002cf2:	37e8      	adds	r7, #232	; 0xe8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b090      	sub	sp, #64	; 0x40
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d54:	e050      	b.n	8002df8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d04c      	beq.n	8002df8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d007      	beq.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d64:	f7fe fb0e 	bl	8001384 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d241      	bcs.n	8002df8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	e853 3f00 	ldrex	r3, [r3]
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d94:	637a      	str	r2, [r7, #52]	; 0x34
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d9c:	e841 2300 	strex	r3, r2, [r1]
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e5      	bne.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3314      	adds	r3, #20
 8002dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	e853 3f00 	ldrex	r3, [r3]
 8002db6:	613b      	str	r3, [r7, #16]
   return(result);
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3314      	adds	r3, #20
 8002dc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dc8:	623a      	str	r2, [r7, #32]
 8002dca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dcc:	69f9      	ldr	r1, [r7, #28]
 8002dce:	6a3a      	ldr	r2, [r7, #32]
 8002dd0:	e841 2300 	strex	r3, r2, [r1]
 8002dd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e5      	bne.n	8002da8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e00f      	b.n	8002e18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4013      	ands	r3, r2
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d09f      	beq.n	8002d56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3740      	adds	r7, #64	; 0x40
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b095      	sub	sp, #84	; 0x54
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	330c      	adds	r3, #12
 8002e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	e853 3f00 	ldrex	r3, [r3]
 8002e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e48:	643a      	str	r2, [r7, #64]	; 0x40
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e50:	e841 2300 	strex	r3, r2, [r1]
 8002e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e5      	bne.n	8002e28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3314      	adds	r3, #20
 8002e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	e853 3f00 	ldrex	r3, [r3]
 8002e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3314      	adds	r3, #20
 8002e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e84:	e841 2300 	strex	r3, r2, [r1]
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e5      	bne.n	8002e5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d119      	bne.n	8002ecc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	e853 3f00 	ldrex	r3, [r3]
 8002ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f023 0310 	bic.w	r3, r3, #16
 8002eae:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eb8:	61ba      	str	r2, [r7, #24]
 8002eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebc:	6979      	ldr	r1, [r7, #20]
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	e841 2300 	strex	r3, r2, [r1]
 8002ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e5      	bne.n	8002e98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002eda:	bf00      	nop
 8002edc:	3754      	adds	r7, #84	; 0x54
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7ff ff0c 	bl	8002d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b21      	cmp	r3, #33	; 0x21
 8002f1e:	d13e      	bne.n	8002f9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f28:	d114      	bne.n	8002f54 <UART_Transmit_IT+0x48>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d110      	bne.n	8002f54 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	1c9a      	adds	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	621a      	str	r2, [r3, #32]
 8002f52:	e008      	b.n	8002f66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	1c59      	adds	r1, r3, #1
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6211      	str	r1, [r2, #32]
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4619      	mov	r1, r3
 8002f74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10f      	bne.n	8002f9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e000      	b.n	8002fa0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
  }
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff fe94 	bl	8002cf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b08c      	sub	sp, #48	; 0x30
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b22      	cmp	r3, #34	; 0x22
 8002fec:	f040 80ae 	bne.w	800314c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff8:	d117      	bne.n	800302a <UART_Receive_IT+0x50>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d113      	bne.n	800302a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003002:	2300      	movs	r3, #0
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	b29b      	uxth	r3, r3
 8003014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003018:	b29a      	uxth	r2, r3
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	1c9a      	adds	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
 8003028:	e026      	b.n	8003078 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003030:	2300      	movs	r3, #0
 8003032:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303c:	d007      	beq.n	800304e <UART_Receive_IT+0x74>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <UART_Receive_IT+0x82>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e008      	b.n	800306e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003068:	b2da      	uxtb	r2, r3
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29b      	uxth	r3, r3
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4619      	mov	r1, r3
 8003086:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003088:	2b00      	cmp	r3, #0
 800308a:	d15d      	bne.n	8003148 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0220 	bic.w	r2, r2, #32
 800309a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d135      	bne.n	800313e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	330c      	adds	r3, #12
 80030de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	613b      	str	r3, [r7, #16]
   return(result);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f023 0310 	bic.w	r3, r3, #16
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	623a      	str	r2, [r7, #32]
 80030fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	69f9      	ldr	r1, [r7, #28]
 80030fe:	6a3a      	ldr	r2, [r7, #32]
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	61bb      	str	r3, [r7, #24]
   return(result);
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e5      	bne.n	80030d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b10      	cmp	r3, #16
 8003118:	d10a      	bne.n	8003130 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff fdf9 	bl	8002d2e <HAL_UARTEx_RxEventCallback>
 800313c:	e002      	b.n	8003144 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff fde3 	bl	8002d0a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	e002      	b.n	800314e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	3730      	adds	r7, #48	; 0x30
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003192:	f023 030c 	bic.w	r3, r3, #12
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	430b      	orrs	r3, r1
 800319e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2c      	ldr	r2, [pc, #176]	; (800326c <UART_SetConfig+0x114>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d103      	bne.n	80031c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031c0:	f7ff f866 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	e002      	b.n	80031ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031c8:	f7ff f84e 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 80031cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009a      	lsls	r2, r3, #2
 80031d8:	441a      	add	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	4a22      	ldr	r2, [pc, #136]	; (8003270 <UART_SetConfig+0x118>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	0119      	lsls	r1, r3, #4
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009a      	lsls	r2, r3, #2
 80031f8:	441a      	add	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	fbb2 f2f3 	udiv	r2, r2, r3
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <UART_SetConfig+0x118>)
 8003206:	fba3 0302 	umull	r0, r3, r3, r2
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2064      	movs	r0, #100	; 0x64
 800320e:	fb00 f303 	mul.w	r3, r0, r3
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	3332      	adds	r3, #50	; 0x32
 8003218:	4a15      	ldr	r2, [pc, #84]	; (8003270 <UART_SetConfig+0x118>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003224:	4419      	add	r1, r3
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009a      	lsls	r2, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	fbb2 f2f3 	udiv	r2, r2, r3
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <UART_SetConfig+0x118>)
 800323e:	fba3 0302 	umull	r0, r3, r3, r2
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	2064      	movs	r0, #100	; 0x64
 8003246:	fb00 f303 	mul.w	r3, r0, r3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	3332      	adds	r3, #50	; 0x32
 8003250:	4a07      	ldr	r2, [pc, #28]	; (8003270 <UART_SetConfig+0x118>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	f003 020f 	and.w	r2, r3, #15
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	440a      	add	r2, r1
 8003262:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40013800 	.word	0x40013800
 8003270:	51eb851f 	.word	0x51eb851f

08003274 <memset>:
 8003274:	4603      	mov	r3, r0
 8003276:	4402      	add	r2, r0
 8003278:	4293      	cmp	r3, r2
 800327a:	d100      	bne.n	800327e <memset+0xa>
 800327c:	4770      	bx	lr
 800327e:	f803 1b01 	strb.w	r1, [r3], #1
 8003282:	e7f9      	b.n	8003278 <memset+0x4>

08003284 <__libc_init_array>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	2600      	movs	r6, #0
 8003288:	4d0c      	ldr	r5, [pc, #48]	; (80032bc <__libc_init_array+0x38>)
 800328a:	4c0d      	ldr	r4, [pc, #52]	; (80032c0 <__libc_init_array+0x3c>)
 800328c:	1b64      	subs	r4, r4, r5
 800328e:	10a4      	asrs	r4, r4, #2
 8003290:	42a6      	cmp	r6, r4
 8003292:	d109      	bne.n	80032a8 <__libc_init_array+0x24>
 8003294:	f000 f81a 	bl	80032cc <_init>
 8003298:	2600      	movs	r6, #0
 800329a:	4d0a      	ldr	r5, [pc, #40]	; (80032c4 <__libc_init_array+0x40>)
 800329c:	4c0a      	ldr	r4, [pc, #40]	; (80032c8 <__libc_init_array+0x44>)
 800329e:	1b64      	subs	r4, r4, r5
 80032a0:	10a4      	asrs	r4, r4, #2
 80032a2:	42a6      	cmp	r6, r4
 80032a4:	d105      	bne.n	80032b2 <__libc_init_array+0x2e>
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ac:	4798      	blx	r3
 80032ae:	3601      	adds	r6, #1
 80032b0:	e7ee      	b.n	8003290 <__libc_init_array+0xc>
 80032b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b6:	4798      	blx	r3
 80032b8:	3601      	adds	r6, #1
 80032ba:	e7f2      	b.n	80032a2 <__libc_init_array+0x1e>
 80032bc:	08003310 	.word	0x08003310
 80032c0:	08003310 	.word	0x08003310
 80032c4:	08003310 	.word	0x08003310
 80032c8:	08003314 	.word	0x08003314

080032cc <_init>:
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	bf00      	nop
 80032d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d2:	bc08      	pop	{r3}
 80032d4:	469e      	mov	lr, r3
 80032d6:	4770      	bx	lr

080032d8 <_fini>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	bf00      	nop
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr
