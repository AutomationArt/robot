
hlop1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d78  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eac  08002eac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002eac  08002eac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eac  08002eac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eac  08002eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002ec0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002ec0  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007fad  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015ee  00000000  00000000  00028025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  00029618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073a  00000000  00000000  00029f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017125  00000000  00000000  0002a6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ed7  00000000  00000000  000417cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087a74  00000000  00000000  0004b6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002970  00000000  00000000  000d311c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000d5a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002e70 	.word	0x08002e70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002e70 	.word	0x08002e70

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_d2f>:
 80005d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005e0:	bf24      	itt	cs
 80005e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005ea:	d90d      	bls.n	8000608 <__aeabi_d2f+0x30>
 80005ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000600:	bf08      	it	eq
 8000602:	f020 0001 	biceq.w	r0, r0, #1
 8000606:	4770      	bx	lr
 8000608:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800060c:	d121      	bne.n	8000652 <__aeabi_d2f+0x7a>
 800060e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000612:	bfbc      	itt	lt
 8000614:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000618:	4770      	bxlt	lr
 800061a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000622:	f1c2 0218 	rsb	r2, r2, #24
 8000626:	f1c2 0c20 	rsb	ip, r2, #32
 800062a:	fa10 f30c 	lsls.w	r3, r0, ip
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	bf18      	it	ne
 8000634:	f040 0001 	orrne.w	r0, r0, #1
 8000638:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800063c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000640:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000644:	ea40 000c 	orr.w	r0, r0, ip
 8000648:	fa23 f302 	lsr.w	r3, r3, r2
 800064c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000650:	e7cc      	b.n	80005ec <__aeabi_d2f+0x14>
 8000652:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000656:	d107      	bne.n	8000668 <__aeabi_d2f+0x90>
 8000658:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800065c:	bf1e      	ittt	ne
 800065e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000662:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000666:	4770      	bxne	lr
 8000668:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800066c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_fmul>:
 8000678:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800067c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000680:	bf1e      	ittt	ne
 8000682:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000686:	ea92 0f0c 	teqne	r2, ip
 800068a:	ea93 0f0c 	teqne	r3, ip
 800068e:	d06f      	beq.n	8000770 <__aeabi_fmul+0xf8>
 8000690:	441a      	add	r2, r3
 8000692:	ea80 0c01 	eor.w	ip, r0, r1
 8000696:	0240      	lsls	r0, r0, #9
 8000698:	bf18      	it	ne
 800069a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800069e:	d01e      	beq.n	80006de <__aeabi_fmul+0x66>
 80006a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80006a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80006a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80006ac:	fba0 3101 	umull	r3, r1, r0, r1
 80006b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80006b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80006b8:	bf3e      	ittt	cc
 80006ba:	0049      	lslcc	r1, r1, #1
 80006bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80006c0:	005b      	lslcc	r3, r3, #1
 80006c2:	ea40 0001 	orr.w	r0, r0, r1
 80006c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80006ca:	2afd      	cmp	r2, #253	; 0xfd
 80006cc:	d81d      	bhi.n	800070a <__aeabi_fmul+0x92>
 80006ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80006d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006d6:	bf08      	it	eq
 80006d8:	f020 0001 	biceq.w	r0, r0, #1
 80006dc:	4770      	bx	lr
 80006de:	f090 0f00 	teq	r0, #0
 80006e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006e6:	bf08      	it	eq
 80006e8:	0249      	lsleq	r1, r1, #9
 80006ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80006f2:	3a7f      	subs	r2, #127	; 0x7f
 80006f4:	bfc2      	ittt	gt
 80006f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006fe:	4770      	bxgt	lr
 8000700:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000704:	f04f 0300 	mov.w	r3, #0
 8000708:	3a01      	subs	r2, #1
 800070a:	dc5d      	bgt.n	80007c8 <__aeabi_fmul+0x150>
 800070c:	f112 0f19 	cmn.w	r2, #25
 8000710:	bfdc      	itt	le
 8000712:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000716:	4770      	bxle	lr
 8000718:	f1c2 0200 	rsb	r2, r2, #0
 800071c:	0041      	lsls	r1, r0, #1
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	f1c2 0220 	rsb	r2, r2, #32
 8000726:	fa00 fc02 	lsl.w	ip, r0, r2
 800072a:	ea5f 0031 	movs.w	r0, r1, rrx
 800072e:	f140 0000 	adc.w	r0, r0, #0
 8000732:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000736:	bf08      	it	eq
 8000738:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800073c:	4770      	bx	lr
 800073e:	f092 0f00 	teq	r2, #0
 8000742:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000746:	bf02      	ittt	eq
 8000748:	0040      	lsleq	r0, r0, #1
 800074a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800074e:	3a01      	subeq	r2, #1
 8000750:	d0f9      	beq.n	8000746 <__aeabi_fmul+0xce>
 8000752:	ea40 000c 	orr.w	r0, r0, ip
 8000756:	f093 0f00 	teq	r3, #0
 800075a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800075e:	bf02      	ittt	eq
 8000760:	0049      	lsleq	r1, r1, #1
 8000762:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000766:	3b01      	subeq	r3, #1
 8000768:	d0f9      	beq.n	800075e <__aeabi_fmul+0xe6>
 800076a:	ea41 010c 	orr.w	r1, r1, ip
 800076e:	e78f      	b.n	8000690 <__aeabi_fmul+0x18>
 8000770:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000774:	ea92 0f0c 	teq	r2, ip
 8000778:	bf18      	it	ne
 800077a:	ea93 0f0c 	teqne	r3, ip
 800077e:	d00a      	beq.n	8000796 <__aeabi_fmul+0x11e>
 8000780:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000784:	bf18      	it	ne
 8000786:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800078a:	d1d8      	bne.n	800073e <__aeabi_fmul+0xc6>
 800078c:	ea80 0001 	eor.w	r0, r0, r1
 8000790:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000794:	4770      	bx	lr
 8000796:	f090 0f00 	teq	r0, #0
 800079a:	bf17      	itett	ne
 800079c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80007a0:	4608      	moveq	r0, r1
 80007a2:	f091 0f00 	teqne	r1, #0
 80007a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80007aa:	d014      	beq.n	80007d6 <__aeabi_fmul+0x15e>
 80007ac:	ea92 0f0c 	teq	r2, ip
 80007b0:	d101      	bne.n	80007b6 <__aeabi_fmul+0x13e>
 80007b2:	0242      	lsls	r2, r0, #9
 80007b4:	d10f      	bne.n	80007d6 <__aeabi_fmul+0x15e>
 80007b6:	ea93 0f0c 	teq	r3, ip
 80007ba:	d103      	bne.n	80007c4 <__aeabi_fmul+0x14c>
 80007bc:	024b      	lsls	r3, r1, #9
 80007be:	bf18      	it	ne
 80007c0:	4608      	movne	r0, r1
 80007c2:	d108      	bne.n	80007d6 <__aeabi_fmul+0x15e>
 80007c4:	ea80 0001 	eor.w	r0, r0, r1
 80007c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80007de:	4770      	bx	lr

080007e0 <__aeabi_fdiv>:
 80007e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007e8:	bf1e      	ittt	ne
 80007ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007ee:	ea92 0f0c 	teqne	r2, ip
 80007f2:	ea93 0f0c 	teqne	r3, ip
 80007f6:	d069      	beq.n	80008cc <__aeabi_fdiv+0xec>
 80007f8:	eba2 0203 	sub.w	r2, r2, r3
 80007fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000800:	0249      	lsls	r1, r1, #9
 8000802:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000806:	d037      	beq.n	8000878 <__aeabi_fdiv+0x98>
 8000808:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800080c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000810:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000814:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000818:	428b      	cmp	r3, r1
 800081a:	bf38      	it	cc
 800081c:	005b      	lslcc	r3, r3, #1
 800081e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000822:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000826:	428b      	cmp	r3, r1
 8000828:	bf24      	itt	cs
 800082a:	1a5b      	subcs	r3, r3, r1
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000834:	bf24      	itt	cs
 8000836:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800083a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800083e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000842:	bf24      	itt	cs
 8000844:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000848:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800084c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000850:	bf24      	itt	cs
 8000852:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000856:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	bf18      	it	ne
 800085e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000862:	d1e0      	bne.n	8000826 <__aeabi_fdiv+0x46>
 8000864:	2afd      	cmp	r2, #253	; 0xfd
 8000866:	f63f af50 	bhi.w	800070a <__aeabi_fmul+0x92>
 800086a:	428b      	cmp	r3, r1
 800086c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000870:	bf08      	it	eq
 8000872:	f020 0001 	biceq.w	r0, r0, #1
 8000876:	4770      	bx	lr
 8000878:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800087c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000880:	327f      	adds	r2, #127	; 0x7f
 8000882:	bfc2      	ittt	gt
 8000884:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000888:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800088c:	4770      	bxgt	lr
 800088e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000892:	f04f 0300 	mov.w	r3, #0
 8000896:	3a01      	subs	r2, #1
 8000898:	e737      	b.n	800070a <__aeabi_fmul+0x92>
 800089a:	f092 0f00 	teq	r2, #0
 800089e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008a2:	bf02      	ittt	eq
 80008a4:	0040      	lsleq	r0, r0, #1
 80008a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008aa:	3a01      	subeq	r2, #1
 80008ac:	d0f9      	beq.n	80008a2 <__aeabi_fdiv+0xc2>
 80008ae:	ea40 000c 	orr.w	r0, r0, ip
 80008b2:	f093 0f00 	teq	r3, #0
 80008b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008ba:	bf02      	ittt	eq
 80008bc:	0049      	lsleq	r1, r1, #1
 80008be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008c2:	3b01      	subeq	r3, #1
 80008c4:	d0f9      	beq.n	80008ba <__aeabi_fdiv+0xda>
 80008c6:	ea41 010c 	orr.w	r1, r1, ip
 80008ca:	e795      	b.n	80007f8 <__aeabi_fdiv+0x18>
 80008cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008d0:	ea92 0f0c 	teq	r2, ip
 80008d4:	d108      	bne.n	80008e8 <__aeabi_fdiv+0x108>
 80008d6:	0242      	lsls	r2, r0, #9
 80008d8:	f47f af7d 	bne.w	80007d6 <__aeabi_fmul+0x15e>
 80008dc:	ea93 0f0c 	teq	r3, ip
 80008e0:	f47f af70 	bne.w	80007c4 <__aeabi_fmul+0x14c>
 80008e4:	4608      	mov	r0, r1
 80008e6:	e776      	b.n	80007d6 <__aeabi_fmul+0x15e>
 80008e8:	ea93 0f0c 	teq	r3, ip
 80008ec:	d104      	bne.n	80008f8 <__aeabi_fdiv+0x118>
 80008ee:	024b      	lsls	r3, r1, #9
 80008f0:	f43f af4c 	beq.w	800078c <__aeabi_fmul+0x114>
 80008f4:	4608      	mov	r0, r1
 80008f6:	e76e      	b.n	80007d6 <__aeabi_fmul+0x15e>
 80008f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008fc:	bf18      	it	ne
 80008fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000902:	d1ca      	bne.n	800089a <__aeabi_fdiv+0xba>
 8000904:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000908:	f47f af5c 	bne.w	80007c4 <__aeabi_fmul+0x14c>
 800090c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000910:	f47f af3c 	bne.w	800078c <__aeabi_fmul+0x114>
 8000914:	e75f      	b.n	80007d6 <__aeabi_fmul+0x15e>
 8000916:	bf00      	nop

08000918 <__gesf2>:
 8000918:	f04f 3cff 	mov.w	ip, #4294967295
 800091c:	e006      	b.n	800092c <__cmpsf2+0x4>
 800091e:	bf00      	nop

08000920 <__lesf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	e002      	b.n	800092c <__cmpsf2+0x4>
 8000926:	bf00      	nop

08000928 <__cmpsf2>:
 8000928:	f04f 0c01 	mov.w	ip, #1
 800092c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000930:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000934:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000938:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800093c:	bf18      	it	ne
 800093e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000942:	d011      	beq.n	8000968 <__cmpsf2+0x40>
 8000944:	b001      	add	sp, #4
 8000946:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800094a:	bf18      	it	ne
 800094c:	ea90 0f01 	teqne	r0, r1
 8000950:	bf58      	it	pl
 8000952:	ebb2 0003 	subspl.w	r0, r2, r3
 8000956:	bf88      	it	hi
 8000958:	17c8      	asrhi	r0, r1, #31
 800095a:	bf38      	it	cc
 800095c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000960:	bf18      	it	ne
 8000962:	f040 0001 	orrne.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800096c:	d102      	bne.n	8000974 <__cmpsf2+0x4c>
 800096e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000972:	d105      	bne.n	8000980 <__cmpsf2+0x58>
 8000974:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000978:	d1e4      	bne.n	8000944 <__cmpsf2+0x1c>
 800097a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800097e:	d0e1      	beq.n	8000944 <__cmpsf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cfrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4608      	mov	r0, r1
 800098c:	4661      	mov	r1, ip
 800098e:	e7ff      	b.n	8000990 <__aeabi_cfcmpeq>

08000990 <__aeabi_cfcmpeq>:
 8000990:	b50f      	push	{r0, r1, r2, r3, lr}
 8000992:	f7ff ffc9 	bl	8000928 <__cmpsf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080009a0 <__aeabi_fcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cfcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_fcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cfcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_fcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cfcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_fcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffd2 	bl	8000988 <__aeabi_cfrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_fcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc8 	bl	8000988 <__aeabi_cfrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_f2uiz>:
 8000a04:	0042      	lsls	r2, r0, #1
 8000a06:	d20e      	bcs.n	8000a26 <__aeabi_f2uiz+0x22>
 8000a08:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a0c:	d30b      	bcc.n	8000a26 <__aeabi_f2uiz+0x22>
 8000a0e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a12:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a16:	d409      	bmi.n	8000a2c <__aeabi_f2uiz+0x28>
 8000a18:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a20:	fa23 f002 	lsr.w	r0, r3, r2
 8000a24:	4770      	bx	lr
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	4770      	bx	lr
 8000a2c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a30:	d101      	bne.n	8000a36 <__aeabi_f2uiz+0x32>
 8000a32:	0242      	lsls	r2, r0, #9
 8000a34:	d102      	bne.n	8000a3c <__aeabi_f2uiz+0x38>
 8000a36:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <steppingyakkazavmaxim>:

uint16_t step1 = 2000; //200 на оборот
uint16_t step2 = 8000; //40 оборотов
uint16_t timeAll = 40; //40 секунд //   берем мотор с більшоб кількістю кроків рауємо його час та розраховуємо швидкість імпульсів для мотора 2

int steppingyakkazavmaxim(float stepM1, float stepM2) {
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b08b      	sub	sp, #44	; 0x2c
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
	uint32_t psc_max=72; //72 мгц / 72 - 1 мегагерц = 1000 за секунду
 8000a4e:	2348      	movs	r3, #72	; 0x48
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
	//числа 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000a52:	2108      	movs	r1, #8
 8000a54:	4867      	ldr	r0, [pc, #412]	; (8000bf4 <steppingyakkazavmaxim+0x1b0>)
 8000a56:	f001 fc3d 	bl	80022d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	4866      	ldr	r0, [pc, #408]	; (8000bf8 <steppingyakkazavmaxim+0x1b4>)
 8000a5e:	f001 fc39 	bl	80022d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 8000a62:	4864      	ldr	r0, [pc, #400]	; (8000bf4 <steppingyakkazavmaxim+0x1b0>)
 8000a64:	f001 fb16 	bl	8002094 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 8000a68:	4863      	ldr	r0, [pc, #396]	; (8000bf8 <steppingyakkazavmaxim+0x1b4>)
 8000a6a:	f001 fb13 	bl	8002094 <HAL_TIM_Base_Stop_IT>

	//  частота шим = входящая частота / период (arr)
	//  125 000 (125 килогерц)  = 16 000 000 / 128
	// (1/60)*1000 = частота 16 (герц);
float periodM1=60;
 8000a6e:	4b63      	ldr	r3, [pc, #396]	; (8000bfc <steppingyakkazavmaxim+0x1b8>)
 8000a70:	623b      	str	r3, [r7, #32]
uint32_t psc=1800;
 8000a72:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000a76:	61fb      	str	r3, [r7, #28]

if(stepM1>stepM2){
 8000a78:	6839      	ldr	r1, [r7, #0]
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffb8 	bl	80009f0 <__aeabi_fcmpgt>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d04e      	beq.n	8000b24 <steppingyakkazavmaxim+0xe0>

	htim1.Instance->PSC = psc;
 8000a86:	4b5b      	ldr	r3, [pc, #364]	; (8000bf4 <steppingyakkazavmaxim+0x1b0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	69fa      	ldr	r2, [r7, #28]
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
	htim1.Instance->ARR = periodM1;
 8000a8e:	4b59      	ldr	r3, [pc, #356]	; (8000bf4 <steppingyakkazavmaxim+0x1b0>)
 8000a90:	681c      	ldr	r4, [r3, #0]
 8000a92:	6a38      	ldr	r0, [r7, #32]
 8000a94:	f7ff ffb6 	bl	8000a04 <__aeabi_f2uiz>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim1.Instance->CCR3 = periodM1/2;
 8000a9c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000aa0:	6a38      	ldr	r0, [r7, #32]
 8000aa2:	f7ff fe9d 	bl	80007e0 <__aeabi_fdiv>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b52      	ldr	r3, [pc, #328]	; (8000bf4 <steppingyakkazavmaxim+0x1b0>)
 8000aac:	681c      	ldr	r4, [r3, #0]
 8000aae:	4610      	mov	r0, r2
 8000ab0:	f7ff ffa8 	bl	8000a04 <__aeabi_f2uiz>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	63e3      	str	r3, [r4, #60]	; 0x3c

	float delimiter= stepM1/stepM2;
 8000ab8:	6839      	ldr	r1, [r7, #0]
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fe90 	bl	80007e0 <__aeabi_fdiv>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	613b      	str	r3, [r7, #16]
	float mnoj= ceil(periodM1*delimiter);
 8000ac4:	6939      	ldr	r1, [r7, #16]
 8000ac6:	6a38      	ldr	r0, [r7, #32]
 8000ac8:	f7ff fdd6 	bl	8000678 <__aeabi_fmul>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fca2 	bl	8000418 <__aeabi_f2d>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	4610      	mov	r0, r2
 8000ada:	4619      	mov	r1, r3
 8000adc:	f002 f948 	bl	8002d70 <ceil>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	4610      	mov	r0, r2
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f7ff fd76 	bl	80005d8 <__aeabi_d2f>
 8000aec:	4603      	mov	r3, r0
 8000aee:	60fb      	str	r3, [r7, #12]

	htim2.Instance->PSC = psc;
 8000af0:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <steppingyakkazavmaxim+0x1b4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	69fa      	ldr	r2, [r7, #28]
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
	htim2.Instance->ARR = mnoj;
 8000af8:	4b3f      	ldr	r3, [pc, #252]	; (8000bf8 <steppingyakkazavmaxim+0x1b4>)
 8000afa:	681c      	ldr	r4, [r3, #0]
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f7ff ff81 	bl	8000a04 <__aeabi_f2uiz>
 8000b02:	4603      	mov	r3, r0
 8000b04:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim2.Instance->CCR3 = mnoj/2;
 8000b06:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff fe68 	bl	80007e0 <__aeabi_fdiv>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <steppingyakkazavmaxim+0x1b4>)
 8000b16:	681c      	ldr	r4, [r3, #0]
 8000b18:	4610      	mov	r0, r2
 8000b1a:	f7ff ff73 	bl	8000a04 <__aeabi_f2uiz>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000b22:	e054      	b.n	8000bce <steppingyakkazavmaxim+0x18a>

} else if (stepM1<stepM2) {
 8000b24:	6839      	ldr	r1, [r7, #0]
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ff44 	bl	80009b4 <__aeabi_fcmplt>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d04d      	beq.n	8000bce <steppingyakkazavmaxim+0x18a>
//	uint16_t impMore = (72000000/psc_max)/1000; 						//імпульсів кроків за секунду для мотора з більшої кількістю кроків  КРОКІВ НА СЕКУНДУ
//	uint16_t allSecMore = (stepM2/impMore)*1000;		 				//загальний час роботи мотора із більшої кількістю кроків  мілісекунд
//	uint16_t stepSecM1 =  (stepM1/allSecMore)*1000; 					//кроків на секунду на двигуна LESS  250
//	uint16_t PSCmLess= 72000000 / (stepSecM1 * 1000); 					//дільник для мотора LESS

	htim2.Instance->PSC = psc;
 8000b32:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <steppingyakkazavmaxim+0x1b4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
	htim2.Instance->ARR = periodM1;
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <steppingyakkazavmaxim+0x1b4>)
 8000b3c:	681c      	ldr	r4, [r3, #0]
 8000b3e:	6a38      	ldr	r0, [r7, #32]
 8000b40:	f7ff ff60 	bl	8000a04 <__aeabi_f2uiz>
 8000b44:	4603      	mov	r3, r0
 8000b46:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim2.Instance->CCR3 = periodM1/2;
 8000b48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b4c:	6a38      	ldr	r0, [r7, #32]
 8000b4e:	f7ff fe47 	bl	80007e0 <__aeabi_fdiv>
 8000b52:	4603      	mov	r3, r0
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <steppingyakkazavmaxim+0x1b4>)
 8000b58:	681c      	ldr	r4, [r3, #0]
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	f7ff ff52 	bl	8000a04 <__aeabi_f2uiz>
 8000b60:	4603      	mov	r3, r0
 8000b62:	63e3      	str	r3, [r4, #60]	; 0x3c

	float delimiter= stepM2/stepM1;
 8000b64:	6879      	ldr	r1, [r7, #4]
 8000b66:	6838      	ldr	r0, [r7, #0]
 8000b68:	f7ff fe3a 	bl	80007e0 <__aeabi_fdiv>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	61bb      	str	r3, [r7, #24]
	float mnoj= ceil(periodM1*delimiter);
 8000b70:	69b9      	ldr	r1, [r7, #24]
 8000b72:	6a38      	ldr	r0, [r7, #32]
 8000b74:	f7ff fd80 	bl	8000678 <__aeabi_fmul>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fc4c 	bl	8000418 <__aeabi_f2d>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4610      	mov	r0, r2
 8000b86:	4619      	mov	r1, r3
 8000b88:	f002 f8f2 	bl	8002d70 <ceil>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	460b      	mov	r3, r1
 8000b90:	4610      	mov	r0, r2
 8000b92:	4619      	mov	r1, r3
 8000b94:	f7ff fd20 	bl	80005d8 <__aeabi_d2f>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	617b      	str	r3, [r7, #20]

	htim1.Instance->PSC = psc;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <steppingyakkazavmaxim+0x1b0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	69fa      	ldr	r2, [r7, #28]
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
	htim1.Instance->ARR = mnoj;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <steppingyakkazavmaxim+0x1b0>)
 8000ba6:	681c      	ldr	r4, [r3, #0]
 8000ba8:	6978      	ldr	r0, [r7, #20]
 8000baa:	f7ff ff2b 	bl	8000a04 <__aeabi_f2uiz>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim1.Instance->CCR3 = mnoj/2;
 8000bb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	f7ff fe12 	bl	80007e0 <__aeabi_fdiv>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <steppingyakkazavmaxim+0x1b0>)
 8000bc2:	681c      	ldr	r4, [r3, #0]
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	f7ff ff1d 	bl	8000a04 <__aeabi_f2uiz>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	63e3      	str	r3, [r4, #60]	; 0x3c

}

	//Старт таймера та переривань
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000bce:	2108      	movs	r1, #8
 8000bd0:	4808      	ldr	r0, [pc, #32]	; (8000bf4 <steppingyakkazavmaxim+0x1b0>)
 8000bd2:	f001 fadd 	bl	8002190 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000bd6:	2108      	movs	r1, #8
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <steppingyakkazavmaxim+0x1b4>)
 8000bda:	f001 fad9 	bl	8002190 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <steppingyakkazavmaxim+0x1b0>)
 8000be0:	f001 fa06 	bl	8001ff0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <steppingyakkazavmaxim+0x1b4>)
 8000be6:	f001 fa03 	bl	8001ff0 <HAL_TIM_Base_Start_IT>

	return 0;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	372c      	adds	r7, #44	; 0x2c
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	20000028 	.word	0x20000028
 8000bf8:	20000070 	.word	0x20000070
 8000bfc:	42700000 	.word	0x42700000

08000c00 <HAL_TIM_PeriodElapsedCallback>:
}


int cntImpulse1 = 0, cntImpulse2 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) /*CallBack, вызванный при окончании периода Ш�?М*/
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
//			HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
//			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
//			HAL_TIM_Base_Stop_IT(&htim2);
//		}
//	}
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
	...

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c18:	f000 fb00 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1c:	f000 f824 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c20:	f000 f946 	bl	8000eb0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c24:	f000 f866 	bl	8000cf4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c28:	f000 f8e8 	bl	8000dfc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(En_GPIO_Port,En_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2120      	movs	r1, #32
 8000c30:	4809      	ldr	r0, [pc, #36]	; (8000c58 <main+0x44>)
 8000c32:	f000 fde7 	bl	8001804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Dir_GPIO_Port,Dir_Pin, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2140      	movs	r1, #64	; 0x40
 8000c3a:	4807      	ldr	r0, [pc, #28]	; (8000c58 <main+0x44>)
 8000c3c:	f000 fde2 	bl	8001804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Dir2_GPIO_Port,Dir2_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <main+0x48>)
 8000c48:	f000 fddc 	bl	8001804 <HAL_GPIO_WritePin>

 // timetostep(20000, 1, 5000, 0, 40, 50);

  steppingyakkazavmaxim(5000, 10000);
 8000c4c:	4904      	ldr	r1, [pc, #16]	; (8000c60 <main+0x4c>)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <main+0x50>)
 8000c50:	f7ff fef8 	bl	8000a44 <steppingyakkazavmaxim>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <main+0x40>
 8000c56:	bf00      	nop
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	40010c00 	.word	0x40010c00
 8000c60:	461c4000 	.word	0x461c4000
 8000c64:	459c4000 	.word	0x459c4000

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b090      	sub	sp, #64	; 0x40
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 0318 	add.w	r3, r7, #24
 8000c72:	2228      	movs	r2, #40	; 0x28
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 f84d 	bl	8002d16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ca6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 fdbf 	bl	8001834 <HAL_RCC_OscConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cbc:	f000 f97c 	bl	8000fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2102      	movs	r1, #2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 f82c 	bl	8001d38 <HAL_RCC_ClockConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ce6:	f000 f967 	bl	8000fb8 <Error_Handler>
  }
}
 8000cea:	bf00      	nop
 8000cec:	3740      	adds	r7, #64	; 0x40
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b092      	sub	sp, #72	; 0x48
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2220      	movs	r2, #32
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fff9 	bl	8002d16 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d24:	4b33      	ldr	r3, [pc, #204]	; (8000df4 <MX_TIM1_Init+0x100>)
 8000d26:	4a34      	ldr	r2, [pc, #208]	; (8000df8 <MX_TIM1_Init+0x104>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8000d2a:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <MX_TIM1_Init+0x100>)
 8000d2c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b30      	ldr	r3, [pc, #192]	; (8000df4 <MX_TIM1_Init+0x100>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000d38:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <MX_TIM1_Init+0x100>)
 8000d3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <MX_TIM1_Init+0x100>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d46:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <MX_TIM1_Init+0x100>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <MX_TIM1_Init+0x100>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d52:	4828      	ldr	r0, [pc, #160]	; (8000df4 <MX_TIM1_Init+0x100>)
 8000d54:	f001 f9cc 	bl	80020f0 <HAL_TIM_PWM_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d5e:	f000 f92b 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d62:	2300      	movs	r3, #0
 8000d64:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4820      	ldr	r0, [pc, #128]	; (8000df4 <MX_TIM1_Init+0x100>)
 8000d72:	f001 ff0f 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 f91c 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d80:	2360      	movs	r3, #96	; 0x60
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	2208      	movs	r2, #8
 8000da2:	4619      	mov	r1, r3
 8000da4:	4813      	ldr	r0, [pc, #76]	; (8000df4 <MX_TIM1_Init+0x100>)
 8000da6:	f001 fc01 	bl	80025ac <HAL_TIM_PWM_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000db0:	f000 f902 	bl	8000fb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <MX_TIM1_Init+0x100>)
 8000dd8:	f001 ff3a 	bl	8002c50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000de2:	f000 f8e9 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <MX_TIM1_Init+0x100>)
 8000de8:	f000 f95e 	bl	80010a8 <HAL_TIM_MspPostInit>

}
 8000dec:	bf00      	nop
 8000dee:	3748      	adds	r7, #72	; 0x48
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000028 	.word	0x20000028
 8000df8:	40012c00 	.word	0x40012c00

08000dfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <MX_TIM2_Init+0xb0>)
 8000e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <MX_TIM2_Init+0xb0>)
 8000e28:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <MX_TIM2_Init+0xb0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_TIM2_Init+0xb0>)
 8000e36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_TIM2_Init+0xb0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_TIM2_Init+0xb0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e48:	4818      	ldr	r0, [pc, #96]	; (8000eac <MX_TIM2_Init+0xb0>)
 8000e4a:	f001 f951 	bl	80020f0 <HAL_TIM_PWM_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e54:	f000 f8b0 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e60:	f107 0320 	add.w	r3, r7, #32
 8000e64:	4619      	mov	r1, r3
 8000e66:	4811      	ldr	r0, [pc, #68]	; (8000eac <MX_TIM2_Init+0xb0>)
 8000e68:	f001 fe94 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e72:	f000 f8a1 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e76:	2360      	movs	r3, #96	; 0x60
 8000e78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2208      	movs	r2, #8
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4807      	ldr	r0, [pc, #28]	; (8000eac <MX_TIM2_Init+0xb0>)
 8000e8e:	f001 fb8d 	bl	80025ac <HAL_TIM_PWM_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e98:	f000 f88e 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e9c:	4803      	ldr	r0, [pc, #12]	; (8000eac <MX_TIM2_Init+0xb0>)
 8000e9e:	f000 f903 	bl	80010a8 <HAL_TIM_MspPostInit>

}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000070 	.word	0x20000070

08000eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <MX_GPIO_Init+0xf8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a37      	ldr	r2, [pc, #220]	; (8000fa8 <MX_GPIO_Init+0xf8>)
 8000eca:	f043 0310 	orr.w	r3, r3, #16
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <MX_GPIO_Init+0xf8>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000edc:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <MX_GPIO_Init+0xf8>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a31      	ldr	r2, [pc, #196]	; (8000fa8 <MX_GPIO_Init+0xf8>)
 8000ee2:	f043 0320 	orr.w	r3, r3, #32
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <MX_GPIO_Init+0xf8>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0320 	and.w	r3, r3, #32
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <MX_GPIO_Init+0xf8>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a2b      	ldr	r2, [pc, #172]	; (8000fa8 <MX_GPIO_Init+0xf8>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <MX_GPIO_Init+0xf8>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <MX_GPIO_Init+0xf8>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a25      	ldr	r2, [pc, #148]	; (8000fa8 <MX_GPIO_Init+0xf8>)
 8000f12:	f043 0308 	orr.w	r3, r3, #8
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <MX_GPIO_Init+0xf8>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2a:	4820      	ldr	r0, [pc, #128]	; (8000fac <MX_GPIO_Init+0xfc>)
 8000f2c:	f000 fc6a 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, En_Pin|Dir_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2160      	movs	r1, #96	; 0x60
 8000f34:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <MX_GPIO_Init+0x100>)
 8000f36:	f000 fc65 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dir2_GPIO_Port, Dir2_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f40:	481c      	ldr	r0, [pc, #112]	; (8000fb4 <MX_GPIO_Init+0x104>)
 8000f42:	f000 fc5f 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8000f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4813      	ldr	r0, [pc, #76]	; (8000fac <MX_GPIO_Init+0xfc>)
 8000f60:	f000 facc 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : En_Pin Dir_Pin */
  GPIO_InitStruct.Pin = En_Pin|Dir_Pin;
 8000f64:	2360      	movs	r3, #96	; 0x60
 8000f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_GPIO_Init+0x100>)
 8000f7c:	f000 fabe 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Dir2_Pin */
  GPIO_InitStruct.Pin = Dir2_Pin;
 8000f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Dir2_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	4619      	mov	r1, r3
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <MX_GPIO_Init+0x104>)
 8000f9a:	f000 faaf 	bl	80014fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3720      	adds	r7, #32
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	40010c00 	.word	0x40010c00

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fc0:	e7fe      	b.n	8000fc0 <Error_Handler+0x8>
	...

08000fc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_MspInit+0x5c>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <HAL_MspInit+0x5c>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_MspInit+0x5c>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_MspInit+0x5c>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <HAL_MspInit+0x5c>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_MspInit+0x5c>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_MspInit+0x60>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_MspInit+0x60>)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	40021000 	.word	0x40021000
 8001024:	40010000 	.word	0x40010000

08001028 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a1a      	ldr	r2, [pc, #104]	; (80010a0 <HAL_TIM_PWM_MspInit+0x78>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d114      	bne.n	8001064 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_TIM_PWM_MspInit+0x7c>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001040:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001044:	6193      	str	r3, [r2, #24]
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2019      	movs	r0, #25
 8001058:	f000 fa19 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800105c:	2019      	movs	r0, #25
 800105e:	f000 fa32 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001062:	e018      	b.n	8001096 <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106c:	d113      	bne.n	8001096 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	61d3      	str	r3, [r2, #28]
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_TIM_PWM_MspInit+0x7c>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	201c      	movs	r0, #28
 800108c:	f000 f9ff 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001090:	201c      	movs	r0, #28
 8001092:	f000 fa18 	bl	80014c6 <HAL_NVIC_EnableIRQ>
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40012c00 	.word	0x40012c00
 80010a4:	40021000 	.word	0x40021000

080010a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <HAL_TIM_MspPostInit+0x98>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d119      	bne.n	80010fc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <HAL_TIM_MspPostInit+0x9c>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <HAL_TIM_MspPostInit+0x9c>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <HAL_TIM_MspPostInit+0x9c>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0310 	add.w	r3, r7, #16
 80010f2:	4619      	mov	r1, r3
 80010f4:	4814      	ldr	r0, [pc, #80]	; (8001148 <HAL_TIM_MspPostInit+0xa0>)
 80010f6:	f000 fa01 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010fa:	e01c      	b.n	8001136 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001104:	d117      	bne.n	8001136 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_TIM_MspPostInit+0x9c>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_TIM_MspPostInit+0x9c>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6193      	str	r3, [r2, #24]
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <HAL_TIM_MspPostInit+0x9c>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800111e:	2304      	movs	r3, #4
 8001120:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <HAL_TIM_MspPostInit+0xa0>)
 8001132:	f000 f9e3 	bl	80014fc <HAL_GPIO_Init>
}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40012c00 	.word	0x40012c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40010800 	.word	0x40010800

0800114c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <NMI_Handler+0x4>

08001152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
 {
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <MemManage_Handler+0x4>

0800115e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <BusFault_Handler+0x4>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <UsageFault_Handler+0x4>

0800116a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001192:	f000 f889 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <TIM1_UP_IRQHandler+0x10>)
 80011a2:	f001 f8fb 	bl	800239c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000028 	.word	0x20000028

080011b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM2_IRQHandler+0x10>)
 80011b6:	f001 f8f1 	bl	800239c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000070 	.word	0x20000070

080011c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
         bl  SystemInit
 80011d0:	f7ff fff8 	bl	80011c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d4:	480b      	ldr	r0, [pc, #44]	; (8001204 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011d6:	490c      	ldr	r1, [pc, #48]	; (8001208 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <LoopFillZerobss+0x16>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
   bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011ec:	4c09      	ldr	r4, [pc, #36]	; (8001214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fa:	f001 fd95 	bl	8002d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011fe:	f7ff fd09 	bl	8000c14 <main>
  bx lr
 8001202:	4770      	bx	lr
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800120c:	08002eb4 	.word	0x08002eb4
  ldr r2, =_sbss
 8001210:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001214:	200000bc 	.word	0x200000bc

08001218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_2_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_Init+0x28>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_Init+0x28>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f923 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001232:	200f      	movs	r0, #15
 8001234:	f000 f808 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001238:	f7ff fec4 	bl	8000fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40022000 	.word	0x40022000

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f93b 	bl	80014e2 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f903 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_IncTick+0x1c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_IncTick+0x20>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <HAL_IncTick+0x20>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	20000008 	.word	0x20000008
 80012c8:	200000b8 	.word	0x200000b8

080012cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <HAL_GetTick+0x10>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	200000b8 	.word	0x200000b8

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4906      	ldr	r1, [pc, #24]	; (8001378 <__NVIC_EnableIRQ+0x34>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff90 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff2d 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff42 	bl	8001328 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff90 	bl	80013d0 <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5f 	bl	800137c <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff35 	bl	8001344 <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa2 	bl	8001434 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b08b      	sub	sp, #44	; 0x2c
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	e169      	b.n	80017e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001510:	2201      	movs	r2, #1
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	429a      	cmp	r2, r3
 800152a:	f040 8158 	bne.w	80017de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4a9a      	ldr	r2, [pc, #616]	; (800179c <HAL_GPIO_Init+0x2a0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d05e      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001538:	4a98      	ldr	r2, [pc, #608]	; (800179c <HAL_GPIO_Init+0x2a0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d875      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 800153e:	4a98      	ldr	r2, [pc, #608]	; (80017a0 <HAL_GPIO_Init+0x2a4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d058      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001544:	4a96      	ldr	r2, [pc, #600]	; (80017a0 <HAL_GPIO_Init+0x2a4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d86f      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 800154a:	4a96      	ldr	r2, [pc, #600]	; (80017a4 <HAL_GPIO_Init+0x2a8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d052      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001550:	4a94      	ldr	r2, [pc, #592]	; (80017a4 <HAL_GPIO_Init+0x2a8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d869      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 8001556:	4a94      	ldr	r2, [pc, #592]	; (80017a8 <HAL_GPIO_Init+0x2ac>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d04c      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 800155c:	4a92      	ldr	r2, [pc, #584]	; (80017a8 <HAL_GPIO_Init+0x2ac>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d863      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 8001562:	4a92      	ldr	r2, [pc, #584]	; (80017ac <HAL_GPIO_Init+0x2b0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d046      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001568:	4a90      	ldr	r2, [pc, #576]	; (80017ac <HAL_GPIO_Init+0x2b0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d85d      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 800156e:	2b12      	cmp	r3, #18
 8001570:	d82a      	bhi.n	80015c8 <HAL_GPIO_Init+0xcc>
 8001572:	2b12      	cmp	r3, #18
 8001574:	d859      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <HAL_GPIO_Init+0x80>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	080015f7 	.word	0x080015f7
 8001580:	080015d1 	.word	0x080015d1
 8001584:	080015e3 	.word	0x080015e3
 8001588:	08001625 	.word	0x08001625
 800158c:	0800162b 	.word	0x0800162b
 8001590:	0800162b 	.word	0x0800162b
 8001594:	0800162b 	.word	0x0800162b
 8001598:	0800162b 	.word	0x0800162b
 800159c:	0800162b 	.word	0x0800162b
 80015a0:	0800162b 	.word	0x0800162b
 80015a4:	0800162b 	.word	0x0800162b
 80015a8:	0800162b 	.word	0x0800162b
 80015ac:	0800162b 	.word	0x0800162b
 80015b0:	0800162b 	.word	0x0800162b
 80015b4:	0800162b 	.word	0x0800162b
 80015b8:	0800162b 	.word	0x0800162b
 80015bc:	0800162b 	.word	0x0800162b
 80015c0:	080015d9 	.word	0x080015d9
 80015c4:	080015ed 	.word	0x080015ed
 80015c8:	4a79      	ldr	r2, [pc, #484]	; (80017b0 <HAL_GPIO_Init+0x2b4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ce:	e02c      	b.n	800162a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e029      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	3304      	adds	r3, #4
 80015de:	623b      	str	r3, [r7, #32]
          break;
 80015e0:	e024      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	3308      	adds	r3, #8
 80015e8:	623b      	str	r3, [r7, #32]
          break;
 80015ea:	e01f      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	330c      	adds	r3, #12
 80015f2:	623b      	str	r3, [r7, #32]
          break;
 80015f4:	e01a      	b.n	800162c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015fe:	2304      	movs	r3, #4
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e013      	b.n	800162c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d105      	bne.n	8001618 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800160c:	2308      	movs	r3, #8
 800160e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	611a      	str	r2, [r3, #16]
          break;
 8001616:	e009      	b.n	800162c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001618:	2308      	movs	r3, #8
 800161a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	615a      	str	r2, [r3, #20]
          break;
 8001622:	e003      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x130>
          break;
 800162a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2bff      	cmp	r3, #255	; 0xff
 8001630:	d801      	bhi.n	8001636 <HAL_GPIO_Init+0x13a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	e001      	b.n	800163a <HAL_GPIO_Init+0x13e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3304      	adds	r3, #4
 800163a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2bff      	cmp	r3, #255	; 0xff
 8001640:	d802      	bhi.n	8001648 <HAL_GPIO_Init+0x14c>
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	e002      	b.n	800164e <HAL_GPIO_Init+0x152>
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	3b08      	subs	r3, #8
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	210f      	movs	r1, #15
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	401a      	ands	r2, r3
 8001660:	6a39      	ldr	r1, [r7, #32]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	431a      	orrs	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80b1 	beq.w	80017de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800167c:	4b4d      	ldr	r3, [pc, #308]	; (80017b4 <HAL_GPIO_Init+0x2b8>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a4c      	ldr	r2, [pc, #304]	; (80017b4 <HAL_GPIO_Init+0x2b8>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6193      	str	r3, [r2, #24]
 8001688:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <HAL_GPIO_Init+0x2b8>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001694:	4a48      	ldr	r2, [pc, #288]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a40      	ldr	r2, [pc, #256]	; (80017bc <HAL_GPIO_Init+0x2c0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d013      	beq.n	80016e8 <HAL_GPIO_Init+0x1ec>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a3f      	ldr	r2, [pc, #252]	; (80017c0 <HAL_GPIO_Init+0x2c4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d00d      	beq.n	80016e4 <HAL_GPIO_Init+0x1e8>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a3e      	ldr	r2, [pc, #248]	; (80017c4 <HAL_GPIO_Init+0x2c8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d007      	beq.n	80016e0 <HAL_GPIO_Init+0x1e4>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a3d      	ldr	r2, [pc, #244]	; (80017c8 <HAL_GPIO_Init+0x2cc>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d101      	bne.n	80016dc <HAL_GPIO_Init+0x1e0>
 80016d8:	2303      	movs	r3, #3
 80016da:	e006      	b.n	80016ea <HAL_GPIO_Init+0x1ee>
 80016dc:	2304      	movs	r3, #4
 80016de:	e004      	b.n	80016ea <HAL_GPIO_Init+0x1ee>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e002      	b.n	80016ea <HAL_GPIO_Init+0x1ee>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_GPIO_Init+0x1ee>
 80016e8:	2300      	movs	r3, #0
 80016ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ec:	f002 0203 	and.w	r2, r2, #3
 80016f0:	0092      	lsls	r2, r2, #2
 80016f2:	4093      	lsls	r3, r2
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016fa:	492f      	ldr	r1, [pc, #188]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	492c      	ldr	r1, [pc, #176]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	43db      	mvns	r3, r3
 800172a:	4928      	ldr	r1, [pc, #160]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800172c:	4013      	ands	r3, r2
 800172e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	4922      	ldr	r1, [pc, #136]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	60cb      	str	r3, [r1, #12]
 8001748:	e006      	b.n	8001758 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	43db      	mvns	r3, r3
 8001752:	491e      	ldr	r1, [pc, #120]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001754:	4013      	ands	r3, r2
 8001756:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4918      	ldr	r1, [pc, #96]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	4914      	ldr	r1, [pc, #80]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800177c:	4013      	ands	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d021      	beq.n	80017d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	490e      	ldr	r1, [pc, #56]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
 8001798:	e021      	b.n	80017de <HAL_GPIO_Init+0x2e2>
 800179a:	bf00      	nop
 800179c:	10320000 	.word	0x10320000
 80017a0:	10310000 	.word	0x10310000
 80017a4:	10220000 	.word	0x10220000
 80017a8:	10210000 	.word	0x10210000
 80017ac:	10120000 	.word	0x10120000
 80017b0:	10110000 	.word	0x10110000
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	40010800 	.word	0x40010800
 80017c0:	40010c00 	.word	0x40010c00
 80017c4:	40011000 	.word	0x40011000
 80017c8:	40011400 	.word	0x40011400
 80017cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_GPIO_Init+0x304>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	4909      	ldr	r1, [pc, #36]	; (8001800 <HAL_GPIO_Init+0x304>)
 80017da:	4013      	ands	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	3301      	adds	r3, #1
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	fa22 f303 	lsr.w	r3, r2, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f47f ae8e 	bne.w	8001510 <HAL_GPIO_Init+0x14>
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	372c      	adds	r7, #44	; 0x2c
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	40010400 	.word	0x40010400

08001804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
 8001810:	4613      	mov	r3, r2
 8001812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001814:	787b      	ldrb	r3, [r7, #1]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001820:	e003      	b.n	800182a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	041a      	lsls	r2, r3, #16
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	611a      	str	r2, [r3, #16]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e272      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8087 	beq.w	8001962 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001854:	4b92      	ldr	r3, [pc, #584]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b04      	cmp	r3, #4
 800185e:	d00c      	beq.n	800187a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001860:	4b8f      	ldr	r3, [pc, #572]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b08      	cmp	r3, #8
 800186a:	d112      	bne.n	8001892 <HAL_RCC_OscConfig+0x5e>
 800186c:	4b8c      	ldr	r3, [pc, #560]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001878:	d10b      	bne.n	8001892 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187a:	4b89      	ldr	r3, [pc, #548]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d06c      	beq.n	8001960 <HAL_RCC_OscConfig+0x12c>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d168      	bne.n	8001960 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e24c      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x76>
 800189c:	4b80      	ldr	r3, [pc, #512]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a7f      	ldr	r2, [pc, #508]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e02e      	b.n	8001908 <HAL_RCC_OscConfig+0xd4>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x98>
 80018b2:	4b7b      	ldr	r3, [pc, #492]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a7a      	ldr	r2, [pc, #488]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b78      	ldr	r3, [pc, #480]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a77      	ldr	r2, [pc, #476]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e01d      	b.n	8001908 <HAL_RCC_OscConfig+0xd4>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0xbc>
 80018d6:	4b72      	ldr	r3, [pc, #456]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a71      	ldr	r2, [pc, #452]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b6f      	ldr	r3, [pc, #444]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a6e      	ldr	r2, [pc, #440]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e00b      	b.n	8001908 <HAL_RCC_OscConfig+0xd4>
 80018f0:	4b6b      	ldr	r3, [pc, #428]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a6a      	ldr	r2, [pc, #424]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b68      	ldr	r3, [pc, #416]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a67      	ldr	r2, [pc, #412]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001906:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d013      	beq.n	8001938 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fcdc 	bl	80012cc <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fcd8 	bl	80012cc <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e200      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0xe4>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff fcc8 	bl	80012cc <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff fcc4 	bl	80012cc <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e1ec      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x10c>
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d063      	beq.n	8001a36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800196e:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800197a:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b08      	cmp	r3, #8
 8001984:	d11c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x18c>
 8001986:	4b46      	ldr	r3, [pc, #280]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d116      	bne.n	80019c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	4b43      	ldr	r3, [pc, #268]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <HAL_RCC_OscConfig+0x176>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d001      	beq.n	80019aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e1c0      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019aa:	4b3d      	ldr	r3, [pc, #244]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4939      	ldr	r1, [pc, #228]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	e03a      	b.n	8001a36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c8:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7ff fc7d 	bl	80012cc <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d6:	f7ff fc79 	bl	80012cc <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e1a1      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e8:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4927      	ldr	r1, [pc, #156]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e015      	b.n	8001a36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fc5c 	bl	80012cc <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a18:	f7ff fc58 	bl	80012cc <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e180      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d03a      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d019      	beq.n	8001a7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a50:	f7ff fc3c 	bl	80012cc <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff fc38 	bl	80012cc <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e160      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f000 fa9c 	bl	8001fb4 <RCC_Delay>
 8001a7c:	e01c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7ff fc22 	bl	80012cc <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8a:	e00f      	b.n	8001aac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8c:	f7ff fc1e 	bl	80012cc <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d908      	bls.n	8001aac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e146      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	42420000 	.word	0x42420000
 8001aa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	4b92      	ldr	r3, [pc, #584]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e9      	bne.n	8001a8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80a6 	beq.w	8001c12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aca:	4b8b      	ldr	r3, [pc, #556]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10d      	bne.n	8001af2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b88      	ldr	r3, [pc, #544]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a87      	ldr	r2, [pc, #540]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b85      	ldr	r3, [pc, #532]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aee:	2301      	movs	r3, #1
 8001af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af2:	4b82      	ldr	r3, [pc, #520]	; (8001cfc <HAL_RCC_OscConfig+0x4c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d118      	bne.n	8001b30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afe:	4b7f      	ldr	r3, [pc, #508]	; (8001cfc <HAL_RCC_OscConfig+0x4c8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7e      	ldr	r2, [pc, #504]	; (8001cfc <HAL_RCC_OscConfig+0x4c8>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fbdf 	bl	80012cc <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b12:	f7ff fbdb 	bl	80012cc <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b64      	cmp	r3, #100	; 0x64
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e103      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	4b75      	ldr	r3, [pc, #468]	; (8001cfc <HAL_RCC_OscConfig+0x4c8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x312>
 8001b38:	4b6f      	ldr	r3, [pc, #444]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a6e      	ldr	r2, [pc, #440]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	e02d      	b.n	8001ba2 <HAL_RCC_OscConfig+0x36e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x334>
 8001b4e:	4b6a      	ldr	r3, [pc, #424]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a69      	ldr	r2, [pc, #420]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	4b67      	ldr	r3, [pc, #412]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a66      	ldr	r2, [pc, #408]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	e01c      	b.n	8001ba2 <HAL_RCC_OscConfig+0x36e>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d10c      	bne.n	8001b8a <HAL_RCC_OscConfig+0x356>
 8001b70:	4b61      	ldr	r3, [pc, #388]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a60      	ldr	r2, [pc, #384]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6213      	str	r3, [r2, #32]
 8001b7c:	4b5e      	ldr	r3, [pc, #376]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a5d      	ldr	r2, [pc, #372]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	e00b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x36e>
 8001b8a:	4b5b      	ldr	r3, [pc, #364]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a5a      	ldr	r2, [pc, #360]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6213      	str	r3, [r2, #32]
 8001b96:	4b58      	ldr	r3, [pc, #352]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a57      	ldr	r2, [pc, #348]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d015      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001baa:	f7ff fb8f 	bl	80012cc <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7ff fb8b 	bl	80012cc <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e0b1      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	4b4b      	ldr	r3, [pc, #300]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0ee      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x37e>
 8001bd4:	e014      	b.n	8001c00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff fb79 	bl	80012cc <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7ff fb75 	bl	80012cc <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e09b      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf4:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ee      	bne.n	8001bde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d105      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c06:	4b3c      	ldr	r3, [pc, #240]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4a3b      	ldr	r2, [pc, #236]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8087 	beq.w	8001d2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c1c:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d061      	beq.n	8001cec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d146      	bne.n	8001cbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c30:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <HAL_RCC_OscConfig+0x4cc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7ff fb49 	bl	80012cc <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7ff fb45 	bl	80012cc <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e06d      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c50:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d108      	bne.n	8001c78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4921      	ldr	r1, [pc, #132]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a19      	ldr	r1, [r3, #32]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	491b      	ldr	r1, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_RCC_OscConfig+0x4cc>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fb19 	bl	80012cc <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff fb15 	bl	80012cc <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e03d      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x46a>
 8001cbc:	e035      	b.n	8001d2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_RCC_OscConfig+0x4cc>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fb02 	bl	80012cc <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff fafe 	bl	80012cc <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e026      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x498>
 8001cea:	e01e      	b.n	8001d2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e019      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_OscConfig+0x500>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000

08001d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0d0      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d910      	bls.n	8001d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b67      	ldr	r3, [pc, #412]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 0207 	bic.w	r2, r3, #7
 8001d62:	4965      	ldr	r1, [pc, #404]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0b8      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d020      	beq.n	8001dca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d94:	4b59      	ldr	r3, [pc, #356]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4a58      	ldr	r2, [pc, #352]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dac:	4b53      	ldr	r3, [pc, #332]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001db6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b50      	ldr	r3, [pc, #320]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	494d      	ldr	r1, [pc, #308]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d040      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d115      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e07f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df6:	4b41      	ldr	r3, [pc, #260]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e073      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e06:	4b3d      	ldr	r3, [pc, #244]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e06b      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e16:	4b39      	ldr	r3, [pc, #228]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f023 0203 	bic.w	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4936      	ldr	r1, [pc, #216]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e28:	f7ff fa50 	bl	80012cc <HAL_GetTick>
 8001e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e30:	f7ff fa4c 	bl	80012cc <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e053      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 020c 	and.w	r2, r3, #12
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d1eb      	bne.n	8001e30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d210      	bcs.n	8001e88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 0207 	bic.w	r2, r3, #7
 8001e6e:	4922      	ldr	r1, [pc, #136]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e032      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4916      	ldr	r1, [pc, #88]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	490e      	ldr	r1, [pc, #56]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ec6:	f000 f821 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	490a      	ldr	r1, [pc, #40]	; (8001f00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed8:	5ccb      	ldrb	r3, [r1, r3]
 8001eda:	fa22 f303 	lsr.w	r3, r2, r3
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <HAL_RCC_ClockConfig+0x1cc>)
 8001ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_ClockConfig+0x1d0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f9ae 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40022000 	.word	0x40022000
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08002e88 	.word	0x08002e88
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d002      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x30>
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d003      	beq.n	8001f42 <HAL_RCC_GetSysClockFreq+0x36>
 8001f3a:	e027      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f3e:	613b      	str	r3, [r7, #16]
      break;
 8001f40:	e027      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	0c9b      	lsrs	r3, r3, #18
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f4c:	5cd3      	ldrb	r3, [r2, r3]
 8001f4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d010      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	0c5b      	lsrs	r3, r3, #17
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	4a11      	ldr	r2, [pc, #68]	; (8001fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f6e:	fb03 f202 	mul.w	r2, r3, r2
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	e004      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	613b      	str	r3, [r7, #16]
      break;
 8001f8a:	e002      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f8e:	613b      	str	r3, [r7, #16]
      break;
 8001f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f92:	693b      	ldr	r3, [r7, #16]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	007a1200 	.word	0x007a1200
 8001fa8:	08002e98 	.word	0x08002e98
 8001fac:	08002ea8 	.word	0x08002ea8
 8001fb0:	003d0900 	.word	0x003d0900

08001fb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <RCC_Delay+0x34>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <RCC_Delay+0x38>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0a5b      	lsrs	r3, r3, #9
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fd0:	bf00      	nop
  }
  while (Delay --);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1e5a      	subs	r2, r3, #1
 8001fd6:	60fa      	str	r2, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f9      	bne.n	8001fd0 <RCC_Delay+0x1c>
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	10624dd3 	.word	0x10624dd3

08001ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d001      	beq.n	8002008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e03a      	b.n	800207e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a18      	ldr	r2, [pc, #96]	; (8002088 <HAL_TIM_Base_Start_IT+0x98>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00e      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x58>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002032:	d009      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x58>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <HAL_TIM_Base_Start_IT+0x9c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x58>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a13      	ldr	r2, [pc, #76]	; (8002090 <HAL_TIM_Base_Start_IT+0xa0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d111      	bne.n	800206c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b06      	cmp	r3, #6
 8002058:	d010      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206a:	e007      	b.n	800207c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40000400 	.word	0x40000400
 8002090:	40000800 	.word	0x40000800

08002094 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6a1a      	ldr	r2, [r3, #32]
 80020b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10f      	bne.n	80020dc <HAL_TIM_Base_Stop_IT+0x48>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6a1a      	ldr	r2, [r3, #32]
 80020c2:	f240 4344 	movw	r3, #1092	; 0x444
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_Base_Stop_IT+0x48>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e041      	b.n	8002186 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe ff86 	bl	8001028 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3304      	adds	r3, #4
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f000 fb22 	bl	8002778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d109      	bne.n	80021b4 <HAL_TIM_PWM_Start+0x24>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	bf14      	ite	ne
 80021ac:	2301      	movne	r3, #1
 80021ae:	2300      	moveq	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	e022      	b.n	80021fa <HAL_TIM_PWM_Start+0x6a>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d109      	bne.n	80021ce <HAL_TIM_PWM_Start+0x3e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	bf14      	ite	ne
 80021c6:	2301      	movne	r3, #1
 80021c8:	2300      	moveq	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	e015      	b.n	80021fa <HAL_TIM_PWM_Start+0x6a>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d109      	bne.n	80021e8 <HAL_TIM_PWM_Start+0x58>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e008      	b.n	80021fa <HAL_TIM_PWM_Start+0x6a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e05e      	b.n	80022c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d104      	bne.n	8002212 <HAL_TIM_PWM_Start+0x82>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002210:	e013      	b.n	800223a <HAL_TIM_PWM_Start+0xaa>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d104      	bne.n	8002222 <HAL_TIM_PWM_Start+0x92>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002220:	e00b      	b.n	800223a <HAL_TIM_PWM_Start+0xaa>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b08      	cmp	r3, #8
 8002226:	d104      	bne.n	8002232 <HAL_TIM_PWM_Start+0xa2>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002230:	e003      	b.n	800223a <HAL_TIM_PWM_Start+0xaa>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2202      	movs	r2, #2
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2201      	movs	r2, #1
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fc82 	bl	8002b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1e      	ldr	r2, [pc, #120]	; (80022c8 <HAL_TIM_PWM_Start+0x138>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d107      	bne.n	8002262 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a18      	ldr	r2, [pc, #96]	; (80022c8 <HAL_TIM_PWM_Start+0x138>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d00e      	beq.n	800228a <HAL_TIM_PWM_Start+0xfa>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002274:	d009      	beq.n	800228a <HAL_TIM_PWM_Start+0xfa>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_TIM_PWM_Start+0x13c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d004      	beq.n	800228a <HAL_TIM_PWM_Start+0xfa>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <HAL_TIM_PWM_Start+0x140>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d111      	bne.n	80022ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b06      	cmp	r3, #6
 800229a:	d010      	beq.n	80022be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ac:	e007      	b.n	80022be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40012c00 	.word	0x40012c00
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40000800 	.word	0x40000800

080022d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	6839      	ldr	r1, [r7, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fc30 	bl	8002b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a29      	ldr	r2, [pc, #164]	; (8002398 <HAL_TIM_PWM_Stop+0xc4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d117      	bne.n	8002326 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6a1a      	ldr	r2, [r3, #32]
 80022fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10f      	bne.n	8002326 <HAL_TIM_PWM_Stop+0x52>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6a1a      	ldr	r2, [r3, #32]
 800230c:	f240 4344 	movw	r3, #1092	; 0x444
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d107      	bne.n	8002326 <HAL_TIM_PWM_Stop+0x52>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002324:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6a1a      	ldr	r2, [r3, #32]
 800232c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10f      	bne.n	8002356 <HAL_TIM_PWM_Stop+0x82>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	f240 4344 	movw	r3, #1092	; 0x444
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d107      	bne.n	8002356 <HAL_TIM_PWM_Stop+0x82>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d104      	bne.n	8002366 <HAL_TIM_PWM_Stop+0x92>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002364:	e013      	b.n	800238e <HAL_TIM_PWM_Stop+0xba>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b04      	cmp	r3, #4
 800236a:	d104      	bne.n	8002376 <HAL_TIM_PWM_Stop+0xa2>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002374:	e00b      	b.n	800238e <HAL_TIM_PWM_Stop+0xba>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b08      	cmp	r3, #8
 800237a:	d104      	bne.n	8002386 <HAL_TIM_PWM_Stop+0xb2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002384:	e003      	b.n	800238e <HAL_TIM_PWM_Stop+0xba>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40012c00 	.word	0x40012c00

0800239c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d122      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d11b      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0202 	mvn.w	r2, #2
 80023c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f9af 	bl	8002742 <HAL_TIM_IC_CaptureCallback>
 80023e4:	e005      	b.n	80023f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f9a2 	bl	8002730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f9b1 	bl	8002754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b04      	cmp	r3, #4
 8002404:	d122      	bne.n	800244c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b04      	cmp	r3, #4
 8002412:	d11b      	bne.n	800244c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0204 	mvn.w	r2, #4
 800241c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f985 	bl	8002742 <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f978 	bl	8002730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f987 	bl	8002754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b08      	cmp	r3, #8
 8002458:	d122      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b08      	cmp	r3, #8
 8002466:	d11b      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0208 	mvn.w	r2, #8
 8002470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2204      	movs	r2, #4
 8002476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f95b 	bl	8002742 <HAL_TIM_IC_CaptureCallback>
 800248c:	e005      	b.n	800249a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f94e 	bl	8002730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f95d 	bl	8002754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b10      	cmp	r3, #16
 80024ac:	d122      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d11b      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0210 	mvn.w	r2, #16
 80024c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2208      	movs	r2, #8
 80024ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f931 	bl	8002742 <HAL_TIM_IC_CaptureCallback>
 80024e0:	e005      	b.n	80024ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f924 	bl	8002730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f933 	bl	8002754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d107      	bne.n	8002520 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0201 	mvn.w	r2, #1
 8002518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe fb70 	bl	8000c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	2b80      	cmp	r3, #128	; 0x80
 800252c:	d10e      	bne.n	800254c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002538:	2b80      	cmp	r3, #128	; 0x80
 800253a:	d107      	bne.n	800254c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fbdc 	bl	8002d04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d10e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d107      	bne.n	8002578 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f8f7 	bl	8002766 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b20      	cmp	r3, #32
 8002584:	d10e      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b20      	cmp	r3, #32
 8002592:	d107      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0220 	mvn.w	r2, #32
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fba7 	bl	8002cf2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0ae      	b.n	8002728 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	f200 809f 	bhi.w	8002718 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025da:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	08002615 	.word	0x08002615
 80025e4:	08002719 	.word	0x08002719
 80025e8:	08002719 	.word	0x08002719
 80025ec:	08002719 	.word	0x08002719
 80025f0:	08002655 	.word	0x08002655
 80025f4:	08002719 	.word	0x08002719
 80025f8:	08002719 	.word	0x08002719
 80025fc:	08002719 	.word	0x08002719
 8002600:	08002697 	.word	0x08002697
 8002604:	08002719 	.word	0x08002719
 8002608:	08002719 	.word	0x08002719
 800260c:	08002719 	.word	0x08002719
 8002610:	080026d7 	.word	0x080026d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f90e 	bl	800283c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0208 	orr.w	r2, r2, #8
 800262e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0204 	bic.w	r2, r2, #4
 800263e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6999      	ldr	r1, [r3, #24]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	619a      	str	r2, [r3, #24]
      break;
 8002652:	e064      	b.n	800271e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f954 	bl	8002908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800266e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6999      	ldr	r1, [r3, #24]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	021a      	lsls	r2, r3, #8
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	619a      	str	r2, [r3, #24]
      break;
 8002694:	e043      	b.n	800271e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	4618      	mov	r0, r3
 800269e:	f000 f99d 	bl	80029dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0208 	orr.w	r2, r2, #8
 80026b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0204 	bic.w	r2, r2, #4
 80026c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69d9      	ldr	r1, [r3, #28]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	61da      	str	r2, [r3, #28]
      break;
 80026d4:	e023      	b.n	800271e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f9e7 	bl	8002ab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69d9      	ldr	r1, [r3, #28]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	021a      	lsls	r2, r3, #8
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	61da      	str	r2, [r3, #28]
      break;
 8002716:	e002      	b.n	800271e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	75fb      	strb	r3, [r7, #23]
      break;
 800271c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002726:	7dfb      	ldrb	r3, [r7, #23]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a29      	ldr	r2, [pc, #164]	; (8002830 <TIM_Base_SetConfig+0xb8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00b      	beq.n	80027a8 <TIM_Base_SetConfig+0x30>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002796:	d007      	beq.n	80027a8 <TIM_Base_SetConfig+0x30>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a26      	ldr	r2, [pc, #152]	; (8002834 <TIM_Base_SetConfig+0xbc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d003      	beq.n	80027a8 <TIM_Base_SetConfig+0x30>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a25      	ldr	r2, [pc, #148]	; (8002838 <TIM_Base_SetConfig+0xc0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d108      	bne.n	80027ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <TIM_Base_SetConfig+0xb8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00b      	beq.n	80027da <TIM_Base_SetConfig+0x62>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c8:	d007      	beq.n	80027da <TIM_Base_SetConfig+0x62>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a19      	ldr	r2, [pc, #100]	; (8002834 <TIM_Base_SetConfig+0xbc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d003      	beq.n	80027da <TIM_Base_SetConfig+0x62>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a18      	ldr	r2, [pc, #96]	; (8002838 <TIM_Base_SetConfig+0xc0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d108      	bne.n	80027ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a07      	ldr	r2, [pc, #28]	; (8002830 <TIM_Base_SetConfig+0xb8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d103      	bne.n	8002820 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	615a      	str	r2, [r3, #20]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40000400 	.word	0x40000400
 8002838:	40000800 	.word	0x40000800

0800283c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f023 0201 	bic.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0303 	bic.w	r3, r3, #3
 8002872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f023 0302 	bic.w	r3, r3, #2
 8002884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a1c      	ldr	r2, [pc, #112]	; (8002904 <TIM_OC1_SetConfig+0xc8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d10c      	bne.n	80028b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f023 0308 	bic.w	r3, r3, #8
 800289e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a13      	ldr	r2, [pc, #76]	; (8002904 <TIM_OC1_SetConfig+0xc8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d111      	bne.n	80028de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	621a      	str	r2, [r3, #32]
}
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40012c00 	.word	0x40012c00

08002908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f023 0210 	bic.w	r2, r3, #16
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f023 0320 	bic.w	r3, r3, #32
 8002952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <TIM_OC2_SetConfig+0xd0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d10d      	bne.n	8002984 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800296e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002982:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <TIM_OC2_SetConfig+0xd0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d113      	bne.n	80029b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800299a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	621a      	str	r2, [r3, #32]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	40012c00 	.word	0x40012c00

080029dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <TIM_OC3_SetConfig+0xd0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10d      	bne.n	8002a56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a14      	ldr	r2, [pc, #80]	; (8002aac <TIM_OC3_SetConfig+0xd0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d113      	bne.n	8002a86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	621a      	str	r2, [r3, #32]
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40012c00 	.word	0x40012c00

08002ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	031b      	lsls	r3, r3, #12
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a0f      	ldr	r2, [pc, #60]	; (8002b48 <TIM_OC4_SetConfig+0x98>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d109      	bne.n	8002b24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	019b      	lsls	r3, r3, #6
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	621a      	str	r2, [r3, #32]
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	40012c00 	.word	0x40012c00

08002b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2201      	movs	r2, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a1a      	ldr	r2, [r3, #32]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	401a      	ands	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a1a      	ldr	r2, [r3, #32]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e046      	b.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf8:	d009      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10c      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800

08002c50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e03d      	b.n	8002ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <memset>:
 8002d16:	4603      	mov	r3, r0
 8002d18:	4402      	add	r2, r0
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d100      	bne.n	8002d20 <memset+0xa>
 8002d1e:	4770      	bx	lr
 8002d20:	f803 1b01 	strb.w	r1, [r3], #1
 8002d24:	e7f9      	b.n	8002d1a <memset+0x4>
	...

08002d28 <__libc_init_array>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	4d0c      	ldr	r5, [pc, #48]	; (8002d60 <__libc_init_array+0x38>)
 8002d2e:	4c0d      	ldr	r4, [pc, #52]	; (8002d64 <__libc_init_array+0x3c>)
 8002d30:	1b64      	subs	r4, r4, r5
 8002d32:	10a4      	asrs	r4, r4, #2
 8002d34:	42a6      	cmp	r6, r4
 8002d36:	d109      	bne.n	8002d4c <__libc_init_array+0x24>
 8002d38:	f000 f89a 	bl	8002e70 <_init>
 8002d3c:	2600      	movs	r6, #0
 8002d3e:	4d0a      	ldr	r5, [pc, #40]	; (8002d68 <__libc_init_array+0x40>)
 8002d40:	4c0a      	ldr	r4, [pc, #40]	; (8002d6c <__libc_init_array+0x44>)
 8002d42:	1b64      	subs	r4, r4, r5
 8002d44:	10a4      	asrs	r4, r4, #2
 8002d46:	42a6      	cmp	r6, r4
 8002d48:	d105      	bne.n	8002d56 <__libc_init_array+0x2e>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d50:	4798      	blx	r3
 8002d52:	3601      	adds	r6, #1
 8002d54:	e7ee      	b.n	8002d34 <__libc_init_array+0xc>
 8002d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5a:	4798      	blx	r3
 8002d5c:	3601      	adds	r6, #1
 8002d5e:	e7f2      	b.n	8002d46 <__libc_init_array+0x1e>
 8002d60:	08002eac 	.word	0x08002eac
 8002d64:	08002eac 	.word	0x08002eac
 8002d68:	08002eac 	.word	0x08002eac
 8002d6c:	08002eb0 	.word	0x08002eb0

08002d70 <ceil>:
 8002d70:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d78:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8002d7c:	2e13      	cmp	r6, #19
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4607      	mov	r7, r0
 8002d82:	460c      	mov	r4, r1
 8002d84:	4605      	mov	r5, r0
 8002d86:	dc30      	bgt.n	8002dea <ceil+0x7a>
 8002d88:	2e00      	cmp	r6, #0
 8002d8a:	da12      	bge.n	8002db2 <ceil+0x42>
 8002d8c:	a334      	add	r3, pc, #208	; (adr r3, 8002e60 <ceil+0xf0>)
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f7fd f9e3 	bl	800015c <__adddf3>
 8002d96:	2200      	movs	r2, #0
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f7fd fc13 	bl	80005c4 <__aeabi_dcmpgt>
 8002d9e:	b128      	cbz	r0, 8002dac <ceil+0x3c>
 8002da0:	2c00      	cmp	r4, #0
 8002da2:	db54      	blt.n	8002e4e <ceil+0xde>
 8002da4:	433c      	orrs	r4, r7
 8002da6:	d056      	beq.n	8002e56 <ceil+0xe6>
 8002da8:	2500      	movs	r5, #0
 8002daa:	4c2f      	ldr	r4, [pc, #188]	; (8002e68 <ceil+0xf8>)
 8002dac:	4623      	mov	r3, r4
 8002dae:	462f      	mov	r7, r5
 8002db0:	e025      	b.n	8002dfe <ceil+0x8e>
 8002db2:	4a2e      	ldr	r2, [pc, #184]	; (8002e6c <ceil+0xfc>)
 8002db4:	fa42 f806 	asr.w	r8, r2, r6
 8002db8:	ea01 0208 	and.w	r2, r1, r8
 8002dbc:	4302      	orrs	r2, r0
 8002dbe:	d01e      	beq.n	8002dfe <ceil+0x8e>
 8002dc0:	a327      	add	r3, pc, #156	; (adr r3, 8002e60 <ceil+0xf0>)
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	f7fd f9c9 	bl	800015c <__adddf3>
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f7fd fbf9 	bl	80005c4 <__aeabi_dcmpgt>
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d0ea      	beq.n	8002dac <ceil+0x3c>
 8002dd6:	2c00      	cmp	r4, #0
 8002dd8:	bfc2      	ittt	gt
 8002dda:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8002dde:	4133      	asrgt	r3, r6
 8002de0:	18e4      	addgt	r4, r4, r3
 8002de2:	2500      	movs	r5, #0
 8002de4:	ea24 0408 	bic.w	r4, r4, r8
 8002de8:	e7e0      	b.n	8002dac <ceil+0x3c>
 8002dea:	2e33      	cmp	r6, #51	; 0x33
 8002dec:	dd0b      	ble.n	8002e06 <ceil+0x96>
 8002dee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002df2:	d104      	bne.n	8002dfe <ceil+0x8e>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f7fd f9b1 	bl	800015c <__adddf3>
 8002dfa:	4607      	mov	r7, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4638      	mov	r0, r7
 8002e00:	4619      	mov	r1, r3
 8002e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e06:	f04f 38ff 	mov.w	r8, #4294967295
 8002e0a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8002e0e:	fa28 f802 	lsr.w	r8, r8, r2
 8002e12:	ea10 0f08 	tst.w	r0, r8
 8002e16:	d0f2      	beq.n	8002dfe <ceil+0x8e>
 8002e18:	a311      	add	r3, pc, #68	; (adr r3, 8002e60 <ceil+0xf0>)
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	f7fd f99d 	bl	800015c <__adddf3>
 8002e22:	2200      	movs	r2, #0
 8002e24:	2300      	movs	r3, #0
 8002e26:	f7fd fbcd 	bl	80005c4 <__aeabi_dcmpgt>
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	d0be      	beq.n	8002dac <ceil+0x3c>
 8002e2e:	2c00      	cmp	r4, #0
 8002e30:	dd0a      	ble.n	8002e48 <ceil+0xd8>
 8002e32:	2e14      	cmp	r6, #20
 8002e34:	d101      	bne.n	8002e3a <ceil+0xca>
 8002e36:	3401      	adds	r4, #1
 8002e38:	e006      	b.n	8002e48 <ceil+0xd8>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8002e40:	40b3      	lsls	r3, r6
 8002e42:	441d      	add	r5, r3
 8002e44:	42af      	cmp	r7, r5
 8002e46:	d8f6      	bhi.n	8002e36 <ceil+0xc6>
 8002e48:	ea25 0508 	bic.w	r5, r5, r8
 8002e4c:	e7ae      	b.n	8002dac <ceil+0x3c>
 8002e4e:	2500      	movs	r5, #0
 8002e50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8002e54:	e7aa      	b.n	8002dac <ceil+0x3c>
 8002e56:	4625      	mov	r5, r4
 8002e58:	e7a8      	b.n	8002dac <ceil+0x3c>
 8002e5a:	bf00      	nop
 8002e5c:	f3af 8000 	nop.w
 8002e60:	8800759c 	.word	0x8800759c
 8002e64:	7e37e43c 	.word	0x7e37e43c
 8002e68:	3ff00000 	.word	0x3ff00000
 8002e6c:	000fffff 	.word	0x000fffff

08002e70 <_init>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	bf00      	nop
 8002e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e76:	bc08      	pop	{r3}
 8002e78:	469e      	mov	lr, r3
 8002e7a:	4770      	bx	lr

08002e7c <_fini>:
 8002e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7e:	bf00      	nop
 8002e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e82:	bc08      	pop	{r3}
 8002e84:	469e      	mov	lr, r3
 8002e86:	4770      	bx	lr
