
hlop1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080028d8  080028d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028fc  080028fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080028fc  080028fc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028fc  080028fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028fc  080028fc  000128fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002900  08002900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000010  08002914  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002914  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007fab  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015f4  00000000  00000000  00028027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  00029620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073b  00000000  00000000  00029f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016608  00000000  00000000  0002a6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009b73  00000000  00000000  00040cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000841ee  00000000  00000000  0004a82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000274c  00000000  00000000  000cea1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000d1168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080028c0 	.word	0x080028c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080028c0 	.word	0x080028c0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2uiz>:
 80004c4:	004a      	lsls	r2, r1, #1
 80004c6:	d211      	bcs.n	80004ec <__aeabi_d2uiz+0x28>
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d211      	bcs.n	80004f2 <__aeabi_d2uiz+0x2e>
 80004ce:	d50d      	bpl.n	80004ec <__aeabi_d2uiz+0x28>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d40e      	bmi.n	80004f8 <__aeabi_d2uiz+0x34>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	fa23 f002 	lsr.w	r0, r3, r2
 80004ea:	4770      	bx	lr
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	4770      	bx	lr
 80004f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004f6:	d102      	bne.n	80004fe <__aeabi_d2uiz+0x3a>
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	4770      	bx	lr
 80004fe:	f04f 0000 	mov.w	r0, #0
 8000502:	4770      	bx	lr

08000504 <steppingyakkazavmaxim>:
int step1 = 2000; //200 на оборот
int step2 = 8000; //40 оборотов
int timeAll = 40; //40 секунд //   берем мотор с більшоб кількістю кроків рауємо його час та розраховуємо швидкість імпульсів для мотора 2


int steppingyakkazavmaxim(int stepM1, int stepM2) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
	uint32_t psc_max=24; //72 мгц / 72 - 1 мегагерц = 1000 за секунду
 800050e:	2318      	movs	r3, #24
 8000510:	61fb      	str	r3, [r7, #28]
	//числа 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - ок да? Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000512:	2108      	movs	r1, #8
 8000514:	485c      	ldr	r0, [pc, #368]	; (8000688 <steppingyakkazavmaxim+0x184>)
 8000516:	f001 fc85 	bl	8001e24 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800051a:	2108      	movs	r1, #8
 800051c:	485b      	ldr	r0, [pc, #364]	; (800068c <steppingyakkazavmaxim+0x188>)
 800051e:	f001 fc81 	bl	8001e24 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 8000522:	4859      	ldr	r0, [pc, #356]	; (8000688 <steppingyakkazavmaxim+0x184>)
 8000524:	f001 fb5e 	bl	8001be4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 8000528:	4858      	ldr	r0, [pc, #352]	; (800068c <steppingyakkazavmaxim+0x188>)
 800052a:	f001 fb5b 	bl	8001be4 <HAL_TIM_Base_Stop_IT>

if(stepM1>stepM2){
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	429a      	cmp	r2, r3
 8000534:	dd48      	ble.n	80005c8 <steppingyakkazavmaxim+0xc4>

	htim1.Instance->PSC = psc_max; //тому що 20 килогерц максимальна швидкість імпульсів для nema17 виходить 20000 імпульсів на секунду. 20 тисяч карл
 8000536:	4b54      	ldr	r3, [pc, #336]	; (8000688 <steppingyakkazavmaxim+0x184>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	629a      	str	r2, [r3, #40]	; 0x28
	htim1.Instance->ARR = 1000;  //ось тут треба глянуть щоб все було добре на осцилографі
 800053e:	4b52      	ldr	r3, [pc, #328]	; (8000688 <steppingyakkazavmaxim+0x184>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->CCR3 = 300; //довжина імпульсу
 8000548:	4b4f      	ldr	r3, [pc, #316]	; (8000688 <steppingyakkazavmaxim+0x184>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000550:	63da      	str	r2, [r3, #60]	; 0x3c

	uint16_t impMore = (72000000/psc_max)/1000; 						//імпульсів кроків за секунду для мотора з більшої кількістю кроків  КРОКІВ НА СЕКУНДУ
 8000552:	4a4f      	ldr	r2, [pc, #316]	; (8000690 <steppingyakkazavmaxim+0x18c>)
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	827b      	strh	r3, [r7, #18]
	uint16_t allSecMore =  __builtin_ceil(stepM1/impMore); 				//загальний час роботи мотора із більшої кількістю кроків СЕКУНД
 800055c:	8a7b      	ldrh	r3, [r7, #18]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	fb92 f3f3 	sdiv	r3, r2, r3
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff43 	bl	80003f0 <__aeabi_i2d>
 800056a:	4602      	mov	r2, r0
 800056c:	460b      	mov	r3, r1
 800056e:	4610      	mov	r0, r2
 8000570:	4619      	mov	r1, r3
 8000572:	f7ff ffa7 	bl	80004c4 <__aeabi_d2uiz>
 8000576:	4603      	mov	r3, r0
 8000578:	823b      	strh	r3, [r7, #16]
	uint16_t stepSecM2 =  __builtin_ceil(stepM2/allSecMore); 			//кроків на секунду на двигуна LESS
 800057a:	8a3b      	ldrh	r3, [r7, #16]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ff34 	bl	80003f0 <__aeabi_i2d>
 8000588:	4602      	mov	r2, r0
 800058a:	460b      	mov	r3, r1
 800058c:	4610      	mov	r0, r2
 800058e:	4619      	mov	r1, r3
 8000590:	f7ff ff98 	bl	80004c4 <__aeabi_d2uiz>
 8000594:	4603      	mov	r3, r0
 8000596:	81fb      	strh	r3, [r7, #14]
	uint16_t PSCmLess= 72000000 / (stepSecM2 * 1000); 					//дільник для мотора LESS
 8000598:	89fb      	ldrh	r3, [r7, #14]
 800059a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800059e:	fb02 f303 	mul.w	r3, r2, r3
 80005a2:	4a3c      	ldr	r2, [pc, #240]	; (8000694 <steppingyakkazavmaxim+0x190>)
 80005a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80005a8:	81bb      	strh	r3, [r7, #12]

	htim2.Instance->PSC = PSCmLess;
 80005aa:	4b38      	ldr	r3, [pc, #224]	; (800068c <steppingyakkazavmaxim+0x188>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	89ba      	ldrh	r2, [r7, #12]
 80005b0:	629a      	str	r2, [r3, #40]	; 0x28
	htim2.Instance->ARR = 1000;
 80005b2:	4b36      	ldr	r3, [pc, #216]	; (800068c <steppingyakkazavmaxim+0x188>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ba:	62da      	str	r2, [r3, #44]	; 0x2c
	htim2.Instance->CCR3 = 300;
 80005bc:	4b33      	ldr	r3, [pc, #204]	; (800068c <steppingyakkazavmaxim+0x188>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80005c6:	e04b      	b.n	8000660 <steppingyakkazavmaxim+0x15c>

} else if (stepM1<stepM2) {
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	da47      	bge.n	8000660 <steppingyakkazavmaxim+0x15c>

	uint16_t impMore = (72000000/psc_max)/1000; 			//імпульсів кроків за секунду для мотора з більшої кількістю кроків  КРОКІВ НА СЕКУНДУ
 80005d0:	4a2f      	ldr	r2, [pc, #188]	; (8000690 <steppingyakkazavmaxim+0x18c>)
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	837b      	strh	r3, [r7, #26]
	uint16_t allSecMore = __builtin_ceil(stepM2/impMore); 				//загальний час роботи мотора із більшої кількістю кроків СЕКУНД
 80005da:	8b7b      	ldrh	r3, [r7, #26]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	fb92 f3f3 	sdiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff04 	bl	80003f0 <__aeabi_i2d>
 80005e8:	4602      	mov	r2, r0
 80005ea:	460b      	mov	r3, r1
 80005ec:	4610      	mov	r0, r2
 80005ee:	4619      	mov	r1, r3
 80005f0:	f7ff ff68 	bl	80004c4 <__aeabi_d2uiz>
 80005f4:	4603      	mov	r3, r0
 80005f6:	833b      	strh	r3, [r7, #24]
	uint16_t stepSecM2 = __builtin_ceil(stepM1/allSecMore); 			//кроків на секунду на двигуна LESS
 80005f8:	8b3b      	ldrh	r3, [r7, #24]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fef5 	bl	80003f0 <__aeabi_i2d>
 8000606:	4602      	mov	r2, r0
 8000608:	460b      	mov	r3, r1
 800060a:	4610      	mov	r0, r2
 800060c:	4619      	mov	r1, r3
 800060e:	f7ff ff59 	bl	80004c4 <__aeabi_d2uiz>
 8000612:	4603      	mov	r3, r0
 8000614:	82fb      	strh	r3, [r7, #22]
	uint16_t PSCmLess= 72000000 / (stepSecM2 * 1000); 	//дільник для мотора LESS
 8000616:	8afb      	ldrh	r3, [r7, #22]
 8000618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800061c:	fb02 f303 	mul.w	r3, r2, r3
 8000620:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <steppingyakkazavmaxim+0x190>)
 8000622:	fb92 f3f3 	sdiv	r3, r2, r3
 8000626:	82bb      	strh	r3, [r7, #20]

	htim1.Instance->PSC = PSCmLess;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <steppingyakkazavmaxim+0x184>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	8aba      	ldrh	r2, [r7, #20]
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
	htim1.Instance->ARR = 1000;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <steppingyakkazavmaxim+0x184>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000638:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->CCR3 = 300;
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <steppingyakkazavmaxim+0x184>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000642:	63da      	str	r2, [r3, #60]	; 0x3c

	htim2.Instance->PSC = psc_max;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <steppingyakkazavmaxim+0x188>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	69fa      	ldr	r2, [r7, #28]
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
	htim2.Instance->ARR = 1000;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <steppingyakkazavmaxim+0x188>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000654:	62da      	str	r2, [r3, #44]	; 0x2c
	htim2.Instance->CCR3 = 300;
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <steppingyakkazavmaxim+0x188>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800065e:	63da      	str	r2, [r3, #60]	; 0x3c
}

	//Старт таймера та переривань
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000660:	2108      	movs	r1, #8
 8000662:	4809      	ldr	r0, [pc, #36]	; (8000688 <steppingyakkazavmaxim+0x184>)
 8000664:	f001 fb3c 	bl	8001ce0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000668:	2108      	movs	r1, #8
 800066a:	4808      	ldr	r0, [pc, #32]	; (800068c <steppingyakkazavmaxim+0x188>)
 800066c:	f001 fb38 	bl	8001ce0 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <steppingyakkazavmaxim+0x184>)
 8000672:	f001 fa65 	bl	8001b40 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <steppingyakkazavmaxim+0x188>)
 8000678:	f001 fa62 	bl	8001b40 <HAL_TIM_Base_Start_IT>

	return 0;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3720      	adds	r7, #32
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000002c 	.word	0x2000002c
 800068c:	20000074 	.word	0x20000074
 8000690:	00011940 	.word	0x00011940
 8000694:	044aa200 	.word	0x044aa200

08000698 <HAL_TIM_PeriodElapsedCallback>:
}


int cntImpulse1 = 0, cntImpulse2 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) /*CallBack, вызванный при окончании периода Ш�?М*/
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1f      	ldr	r2, [pc, #124]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d11c      	bne.n	80006e4 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		++cntImpulse1;
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80006b2:	6013      	str	r3, [r2, #0]

		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	481c      	ldr	r0, [pc, #112]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80006ba:	f000 fe49 	bl	8001350 <HAL_GPIO_TogglePin>
		if (cntImpulse1 >= step1) {
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	db28      	blt.n	800071c <HAL_TIM_PeriodElapsedCallback+0x84>
			HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2120      	movs	r1, #32
 80006ce:	4819      	ldr	r0, [pc, #100]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80006d0:	f000 fe26 	bl	8001320 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80006d4:	2108      	movs	r1, #8
 80006d6:	4818      	ldr	r0, [pc, #96]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006d8:	f001 fba4 	bl	8001e24 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 80006dc:	4816      	ldr	r0, [pc, #88]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006de:	f001 fa81 	bl	8001be4 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
			HAL_TIM_Base_Stop_IT(&htim2);
		}
	}
}
 80006e2:	e01b      	b.n	800071c <HAL_TIM_PeriodElapsedCallback+0x84>
	} else if (htim->Instance == TIM2) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006ec:	d116      	bne.n	800071c <HAL_TIM_PeriodElapsedCallback+0x84>
		++cntImpulse2;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	4a11      	ldr	r2, [pc, #68]	; (800073c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80006f6:	6013      	str	r3, [r2, #0]
		if (cntImpulse1 >= step1) {
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	429a      	cmp	r2, r3
 8000702:	db0b      	blt.n	800071c <HAL_TIM_PeriodElapsedCallback+0x84>
			HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2120      	movs	r1, #32
 8000708:	480a      	ldr	r0, [pc, #40]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800070a:	f000 fe09 	bl	8001320 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800070e:	2108      	movs	r1, #8
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000712:	f001 fb87 	bl	8001e24 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8000716:	480a      	ldr	r0, [pc, #40]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000718:	f001 fa64 	bl	8001be4 <HAL_TIM_Base_Stop_IT>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40012c00 	.word	0x40012c00
 8000728:	200000bc 	.word	0x200000bc
 800072c:	40011000 	.word	0x40011000
 8000730:	20000000 	.word	0x20000000
 8000734:	40010800 	.word	0x40010800
 8000738:	2000002c 	.word	0x2000002c
 800073c:	200000c0 	.word	0x200000c0
 8000740:	20000074 	.word	0x20000074

08000744 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000748:	f000 faf6 	bl	8000d38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800074c:	f000 f81c 	bl	8000788 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000750:	f000 f93c 	bl	80009cc <MX_GPIO_Init>
	MX_TIM1_Init();
 8000754:	f000 f85e 	bl	8000814 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000758:	f000 f8e0 	bl	800091c <MX_TIM2_Init>
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
//	HAL_TIM_Base_Start_IT(&htim1);
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
//	HAL_TIM_Base_Start_IT(&htim2);
	/* USER CODE END 2 */
	HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <main+0x3c>)
 8000762:	f000 fddd 	bl	8001320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Dir2_GPIO_Port, Dir2_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <main+0x40>)
 800076e:	f000 fdd7 	bl	8001320 <HAL_GPIO_WritePin>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
//	timetostep(step1, 1, step2, 0, timeAll,50);

	steppingyakkazavmaxim(2000,4000);
 8000772:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000776:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800077a:	f7ff fec3 	bl	8000504 <steppingyakkazavmaxim>
	while (1) {
 800077e:	e7fe      	b.n	800077e <main+0x3a>
 8000780:	40010800 	.word	0x40010800
 8000784:	40010c00 	.word	0x40010c00

08000788 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b090      	sub	sp, #64	; 0x40
 800078c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800078e:	f107 0318 	add.w	r3, r7, #24
 8000792:	2228      	movs	r2, #40	; 0x28
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f002 f865 	bl	8002866 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	2302      	movs	r3, #2
 80007be:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007cc:	f107 0318 	add.w	r3, r7, #24
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fdd7 	bl	8001384 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x58>
		Error_Handler();
 80007dc:	f000 f97a 	bl	8000ad4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2102      	movs	r1, #2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f844 	bl	8001888 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x82>
		Error_Handler();
 8000806:	f000 f965 	bl	8000ad4 <Error_Handler>
	}
}
 800080a:	bf00      	nop
 800080c:	3740      	adds	r7, #64	; 0x40
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b092      	sub	sp, #72	; 0x48
 8000818:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800081a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	615a      	str	r2, [r3, #20]
 8000836:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2220      	movs	r2, #32
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f002 f811 	bl	8002866 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000844:	4b33      	ldr	r3, [pc, #204]	; (8000914 <MX_TIM1_Init+0x100>)
 8000846:	4a34      	ldr	r2, [pc, #208]	; (8000918 <MX_TIM1_Init+0x104>)
 8000848:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 7200 - 1;
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <MX_TIM1_Init+0x100>)
 800084c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000850:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <MX_TIM1_Init+0x100>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100 - 1;
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <MX_TIM1_Init+0x100>)
 800085a:	2263      	movs	r2, #99	; 0x63
 800085c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_TIM1_Init+0x100>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000864:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <MX_TIM1_Init+0x100>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086a:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <MX_TIM1_Init+0x100>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000870:	4828      	ldr	r0, [pc, #160]	; (8000914 <MX_TIM1_Init+0x100>)
 8000872:	f001 f9e5 	bl	8001c40 <HAL_TIM_PWM_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0x6c>
		Error_Handler();
 800087c:	f000 f92a 	bl	8000ad4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	647b      	str	r3, [r7, #68]	; 0x44

	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000888:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800088c:	4619      	mov	r1, r3
 800088e:	4821      	ldr	r0, [pc, #132]	; (8000914 <MX_TIM1_Init+0x100>)
 8000890:	f001 ff28 	bl	80026e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800089a:	f000 f91b 	bl	8000ad4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089e:	2360      	movs	r3, #96	; 0x60
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	2208      	movs	r2, #8
 80008c0:	4619      	mov	r1, r3
 80008c2:	4814      	ldr	r0, [pc, #80]	; (8000914 <MX_TIM1_Init+0x100>)
 80008c4:	f001 fc1a 	bl	80020fc <HAL_TIM_PWM_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 80008ce:	f000 f901 	bl	8000ad4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ea:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4619      	mov	r1, r3
 80008f4:	4807      	ldr	r0, [pc, #28]	; (8000914 <MX_TIM1_Init+0x100>)
 80008f6:	f001 ff53 	bl	80027a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8000900:	f000 f8e8 	bl	8000ad4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <MX_TIM1_Init+0x100>)
 8000906:	f000 f95d 	bl	8000bc4 <HAL_TIM_MspPostInit>

}
 800090a:	bf00      	nop
 800090c:	3748      	adds	r7, #72	; 0x48
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000002c 	.word	0x2000002c
 8000918:	40012c00 	.word	0x40012c00

0800091c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_TIM2_Init+0xac>)
 8000940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000944:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7200 - 1;
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_TIM2_Init+0xac>)
 8000948:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800094c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_TIM2_Init+0xac>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100 - 1;
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_TIM2_Init+0xac>)
 8000956:	2263      	movs	r2, #99	; 0x63
 8000958:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_TIM2_Init+0xac>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_TIM2_Init+0xac>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000966:	4818      	ldr	r0, [pc, #96]	; (80009c8 <MX_TIM2_Init+0xac>)
 8000968:	f001 f96a 	bl	8001c40 <HAL_TIM_PWM_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x5a>
		Error_Handler();
 8000972:	f000 f8af 	bl	8000ad4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	4619      	mov	r1, r3
 8000984:	4810      	ldr	r0, [pc, #64]	; (80009c8 <MX_TIM2_Init+0xac>)
 8000986:	f001 fead 	bl	80026e4 <HAL_TIMEx_MasterConfigSynchronization>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8000990:	f000 f8a0 	bl	8000ad4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000994:	2360      	movs	r3, #96	; 0x60
 8000996:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2208      	movs	r2, #8
 80009a8:	4619      	mov	r1, r3
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <MX_TIM2_Init+0xac>)
 80009ac:	f001 fba6 	bl	80020fc <HAL_TIM_PWM_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80009b6:	f000 f88d 	bl	8000ad4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80009ba:	4803      	ldr	r0, [pc, #12]	; (80009c8 <MX_TIM2_Init+0xac>)
 80009bc:	f000 f902 	bl	8000bc4 <HAL_TIM_MspPostInit>

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000074 	.word	0x20000074

080009cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009e0:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <MX_GPIO_Init+0xf8>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a37      	ldr	r2, [pc, #220]	; (8000ac4 <MX_GPIO_Init+0xf8>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b35      	ldr	r3, [pc, #212]	; (8000ac4 <MX_GPIO_Init+0xf8>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <MX_GPIO_Init+0xf8>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a31      	ldr	r2, [pc, #196]	; (8000ac4 <MX_GPIO_Init+0xf8>)
 80009fe:	f043 0320 	orr.w	r3, r3, #32
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <MX_GPIO_Init+0xf8>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0320 	and.w	r3, r3, #32
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <MX_GPIO_Init+0xf8>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a2b      	ldr	r2, [pc, #172]	; (8000ac4 <MX_GPIO_Init+0xf8>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_GPIO_Init+0xf8>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <MX_GPIO_Init+0xf8>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <MX_GPIO_Init+0xf8>)
 8000a2e:	f043 0308 	orr.w	r3, r3, #8
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <MX_GPIO_Init+0xf8>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a46:	4820      	ldr	r0, [pc, #128]	; (8000ac8 <MX_GPIO_Init+0xfc>)
 8000a48:	f000 fc6a 	bl	8001320 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, En_Pin | Dir_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2160      	movs	r1, #96	; 0x60
 8000a50:	481e      	ldr	r0, [pc, #120]	; (8000acc <MX_GPIO_Init+0x100>)
 8000a52:	f000 fc65 	bl	8001320 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Dir2_GPIO_Port, Dir2_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5c:	481c      	ldr	r0, [pc, #112]	; (8000ad0 <MX_GPIO_Init+0x104>)
 8000a5e:	f000 fc5f 	bl	8001320 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Led_Pin */
	GPIO_InitStruct.Pin = Led_Pin;
 8000a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a66:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <MX_GPIO_Init+0xfc>)
 8000a7c:	f000 facc 	bl	8001018 <HAL_GPIO_Init>

	/*Configure GPIO pins : En_Pin Dir_Pin */
	GPIO_InitStruct.Pin = En_Pin | Dir_Pin;
 8000a80:	2360      	movs	r3, #96	; 0x60
 8000a82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_GPIO_Init+0x100>)
 8000a98:	f000 fabe 	bl	8001018 <HAL_GPIO_Init>

	/*Configure GPIO pin : Dir2_Pin */
	GPIO_InitStruct.Pin = Dir2_Pin;
 8000a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Dir2_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <MX_GPIO_Init+0x104>)
 8000ab6:	f000 faaf 	bl	8001018 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000aba:	bf00      	nop
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40011000 	.word	0x40011000
 8000acc:	40010800 	.word	0x40010800
 8000ad0:	40010c00 	.word	0x40010c00

08000ad4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_MspInit+0x5c>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <HAL_MspInit+0x5c>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_MspInit+0x5c>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <HAL_MspInit+0x60>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_MspInit+0x60>)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000

08000b44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a1a      	ldr	r2, [pc, #104]	; (8000bbc <HAL_TIM_PWM_MspInit+0x78>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d114      	bne.n	8000b80 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000b5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b60:	6193      	str	r3, [r2, #24]
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	2019      	movs	r0, #25
 8000b74:	f000 fa19 	bl	8000faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b78:	2019      	movs	r0, #25
 8000b7a:	f000 fa32 	bl	8000fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b7e:	e018      	b.n	8000bb2 <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b88:	d113      	bne.n	8000bb2 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	201c      	movs	r0, #28
 8000ba8:	f000 f9ff 	bl	8000faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bac:	201c      	movs	r0, #28
 8000bae:	f000 fa18 	bl	8000fe2 <HAL_NVIC_EnableIRQ>
}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40012c00 	.word	0x40012c00
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <HAL_TIM_MspPostInit+0x98>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d119      	bne.n	8000c18 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <HAL_TIM_MspPostInit+0x9c>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a1d      	ldr	r2, [pc, #116]	; (8000c60 <HAL_TIM_MspPostInit+0x9c>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <HAL_TIM_MspPostInit+0x9c>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4814      	ldr	r0, [pc, #80]	; (8000c64 <HAL_TIM_MspPostInit+0xa0>)
 8000c12:	f000 fa01 	bl	8001018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c16:	e01c      	b.n	8000c52 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c20:	d117      	bne.n	8000c52 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_TIM_MspPostInit+0x9c>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <HAL_TIM_MspPostInit+0x9c>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_TIM_MspPostInit+0x9c>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_TIM_MspPostInit+0xa0>)
 8000c4e:	f000 f9e3 	bl	8001018 <HAL_GPIO_Init>
}
 8000c52:	bf00      	nop
 8000c54:	3720      	adds	r7, #32
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40012c00 	.word	0x40012c00
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010800 	.word	0x40010800

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cae:	f000 f889 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <TIM1_UP_IRQHandler+0x10>)
 8000cbe:	f001 f915 	bl	8001eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000002c 	.word	0x2000002c

08000ccc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <TIM2_IRQHandler+0x10>)
 8000cd2:	f001 f90b 	bl	8001eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000074 	.word	0x20000074

08000ce0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
         bl  SystemInit
 8000cec:	f7ff fff8 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cf2:	490c      	ldr	r1, [pc, #48]	; (8000d24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cf4:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
   bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d08:	4c09      	ldr	r4, [pc, #36]	; (8000d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d16:	f001 fdaf 	bl	8002878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d1a:	f7ff fd13 	bl	8000744 <main>
  bx lr
 8000d1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d28:	08002904 	.word	0x08002904
  ldr r2, =_sbss
 8000d2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d30:	200000c8 	.word	0x200000c8

08000d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_2_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_Init+0x28>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_Init+0x28>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f923 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	200f      	movs	r0, #15
 8000d50:	f000 f808 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff fec4 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40022000 	.word	0x40022000

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x54>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x58>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f93b 	bl	8000ffe <HAL_SYSTICK_Config>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00e      	b.n	8000db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d80a      	bhi.n	8000dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f000 f903 	bl	8000faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_InitTick+0x5c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x1c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	200000c4 	.word	0x200000c4

08000de8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <HAL_GetTick+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	200000c4 	.word	0x200000c4

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4906      	ldr	r1, [pc, #24]	; (8000e94 <__NVIC_EnableIRQ+0x34>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f60:	d301      	bcc.n	8000f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00f      	b.n	8000f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <SysTick_Config+0x40>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f7ff ff90 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SysTick_Config+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SysTick_Config+0x40>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff2d 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff42 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff90 	bl	8000eec <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5f 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff35 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffa2 	bl	8000f50 <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b08b      	sub	sp, #44	; 0x2c
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102a:	e169      	b.n	8001300 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800102c:	2201      	movs	r2, #1
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	69fa      	ldr	r2, [r7, #28]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	429a      	cmp	r2, r3
 8001046:	f040 8158 	bne.w	80012fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	4a9a      	ldr	r2, [pc, #616]	; (80012b8 <HAL_GPIO_Init+0x2a0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d05e      	beq.n	8001112 <HAL_GPIO_Init+0xfa>
 8001054:	4a98      	ldr	r2, [pc, #608]	; (80012b8 <HAL_GPIO_Init+0x2a0>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d875      	bhi.n	8001146 <HAL_GPIO_Init+0x12e>
 800105a:	4a98      	ldr	r2, [pc, #608]	; (80012bc <HAL_GPIO_Init+0x2a4>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d058      	beq.n	8001112 <HAL_GPIO_Init+0xfa>
 8001060:	4a96      	ldr	r2, [pc, #600]	; (80012bc <HAL_GPIO_Init+0x2a4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d86f      	bhi.n	8001146 <HAL_GPIO_Init+0x12e>
 8001066:	4a96      	ldr	r2, [pc, #600]	; (80012c0 <HAL_GPIO_Init+0x2a8>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d052      	beq.n	8001112 <HAL_GPIO_Init+0xfa>
 800106c:	4a94      	ldr	r2, [pc, #592]	; (80012c0 <HAL_GPIO_Init+0x2a8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d869      	bhi.n	8001146 <HAL_GPIO_Init+0x12e>
 8001072:	4a94      	ldr	r2, [pc, #592]	; (80012c4 <HAL_GPIO_Init+0x2ac>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d04c      	beq.n	8001112 <HAL_GPIO_Init+0xfa>
 8001078:	4a92      	ldr	r2, [pc, #584]	; (80012c4 <HAL_GPIO_Init+0x2ac>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d863      	bhi.n	8001146 <HAL_GPIO_Init+0x12e>
 800107e:	4a92      	ldr	r2, [pc, #584]	; (80012c8 <HAL_GPIO_Init+0x2b0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d046      	beq.n	8001112 <HAL_GPIO_Init+0xfa>
 8001084:	4a90      	ldr	r2, [pc, #576]	; (80012c8 <HAL_GPIO_Init+0x2b0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d85d      	bhi.n	8001146 <HAL_GPIO_Init+0x12e>
 800108a:	2b12      	cmp	r3, #18
 800108c:	d82a      	bhi.n	80010e4 <HAL_GPIO_Init+0xcc>
 800108e:	2b12      	cmp	r3, #18
 8001090:	d859      	bhi.n	8001146 <HAL_GPIO_Init+0x12e>
 8001092:	a201      	add	r2, pc, #4	; (adr r2, 8001098 <HAL_GPIO_Init+0x80>)
 8001094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001098:	08001113 	.word	0x08001113
 800109c:	080010ed 	.word	0x080010ed
 80010a0:	080010ff 	.word	0x080010ff
 80010a4:	08001141 	.word	0x08001141
 80010a8:	08001147 	.word	0x08001147
 80010ac:	08001147 	.word	0x08001147
 80010b0:	08001147 	.word	0x08001147
 80010b4:	08001147 	.word	0x08001147
 80010b8:	08001147 	.word	0x08001147
 80010bc:	08001147 	.word	0x08001147
 80010c0:	08001147 	.word	0x08001147
 80010c4:	08001147 	.word	0x08001147
 80010c8:	08001147 	.word	0x08001147
 80010cc:	08001147 	.word	0x08001147
 80010d0:	08001147 	.word	0x08001147
 80010d4:	08001147 	.word	0x08001147
 80010d8:	08001147 	.word	0x08001147
 80010dc:	080010f5 	.word	0x080010f5
 80010e0:	08001109 	.word	0x08001109
 80010e4:	4a79      	ldr	r2, [pc, #484]	; (80012cc <HAL_GPIO_Init+0x2b4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ea:	e02c      	b.n	8001146 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	623b      	str	r3, [r7, #32]
          break;
 80010f2:	e029      	b.n	8001148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	3304      	adds	r3, #4
 80010fa:	623b      	str	r3, [r7, #32]
          break;
 80010fc:	e024      	b.n	8001148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	3308      	adds	r3, #8
 8001104:	623b      	str	r3, [r7, #32]
          break;
 8001106:	e01f      	b.n	8001148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	330c      	adds	r3, #12
 800110e:	623b      	str	r3, [r7, #32]
          break;
 8001110:	e01a      	b.n	8001148 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800111a:	2304      	movs	r3, #4
 800111c:	623b      	str	r3, [r7, #32]
          break;
 800111e:	e013      	b.n	8001148 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d105      	bne.n	8001134 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001128:	2308      	movs	r3, #8
 800112a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	611a      	str	r2, [r3, #16]
          break;
 8001132:	e009      	b.n	8001148 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001134:	2308      	movs	r3, #8
 8001136:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	615a      	str	r2, [r3, #20]
          break;
 800113e:	e003      	b.n	8001148 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
          break;
 8001144:	e000      	b.n	8001148 <HAL_GPIO_Init+0x130>
          break;
 8001146:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2bff      	cmp	r3, #255	; 0xff
 800114c:	d801      	bhi.n	8001152 <HAL_GPIO_Init+0x13a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	e001      	b.n	8001156 <HAL_GPIO_Init+0x13e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3304      	adds	r3, #4
 8001156:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	2bff      	cmp	r3, #255	; 0xff
 800115c:	d802      	bhi.n	8001164 <HAL_GPIO_Init+0x14c>
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	e002      	b.n	800116a <HAL_GPIO_Init+0x152>
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	3b08      	subs	r3, #8
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	210f      	movs	r1, #15
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	401a      	ands	r2, r3
 800117c:	6a39      	ldr	r1, [r7, #32]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	431a      	orrs	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 80b1 	beq.w	80012fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001198:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <HAL_GPIO_Init+0x2b8>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a4c      	ldr	r2, [pc, #304]	; (80012d0 <HAL_GPIO_Init+0x2b8>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b4a      	ldr	r3, [pc, #296]	; (80012d0 <HAL_GPIO_Init+0x2b8>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011b0:	4a48      	ldr	r2, [pc, #288]	; (80012d4 <HAL_GPIO_Init+0x2bc>)
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4013      	ands	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a40      	ldr	r2, [pc, #256]	; (80012d8 <HAL_GPIO_Init+0x2c0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d013      	beq.n	8001204 <HAL_GPIO_Init+0x1ec>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a3f      	ldr	r2, [pc, #252]	; (80012dc <HAL_GPIO_Init+0x2c4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d00d      	beq.n	8001200 <HAL_GPIO_Init+0x1e8>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a3e      	ldr	r2, [pc, #248]	; (80012e0 <HAL_GPIO_Init+0x2c8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d007      	beq.n	80011fc <HAL_GPIO_Init+0x1e4>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a3d      	ldr	r2, [pc, #244]	; (80012e4 <HAL_GPIO_Init+0x2cc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d101      	bne.n	80011f8 <HAL_GPIO_Init+0x1e0>
 80011f4:	2303      	movs	r3, #3
 80011f6:	e006      	b.n	8001206 <HAL_GPIO_Init+0x1ee>
 80011f8:	2304      	movs	r3, #4
 80011fa:	e004      	b.n	8001206 <HAL_GPIO_Init+0x1ee>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e002      	b.n	8001206 <HAL_GPIO_Init+0x1ee>
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <HAL_GPIO_Init+0x1ee>
 8001204:	2300      	movs	r3, #0
 8001206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001208:	f002 0203 	and.w	r2, r2, #3
 800120c:	0092      	lsls	r2, r2, #2
 800120e:	4093      	lsls	r3, r2
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001216:	492f      	ldr	r1, [pc, #188]	; (80012d4 <HAL_GPIO_Init+0x2bc>)
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	492c      	ldr	r1, [pc, #176]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	608b      	str	r3, [r1, #8]
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	43db      	mvns	r3, r3
 8001246:	4928      	ldr	r1, [pc, #160]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001248:	4013      	ands	r3, r2
 800124a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d006      	beq.n	8001266 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	4922      	ldr	r1, [pc, #136]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	60cb      	str	r3, [r1, #12]
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	43db      	mvns	r3, r3
 800126e:	491e      	ldr	r1, [pc, #120]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001270:	4013      	ands	r3, r2
 8001272:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d006      	beq.n	800128e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	4918      	ldr	r1, [pc, #96]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
 800128c:	e006      	b.n	800129c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	43db      	mvns	r3, r3
 8001296:	4914      	ldr	r1, [pc, #80]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001298:	4013      	ands	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d021      	beq.n	80012ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	490e      	ldr	r1, [pc, #56]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	600b      	str	r3, [r1, #0]
 80012b4:	e021      	b.n	80012fa <HAL_GPIO_Init+0x2e2>
 80012b6:	bf00      	nop
 80012b8:	10320000 	.word	0x10320000
 80012bc:	10310000 	.word	0x10310000
 80012c0:	10220000 	.word	0x10220000
 80012c4:	10210000 	.word	0x10210000
 80012c8:	10120000 	.word	0x10120000
 80012cc:	10110000 	.word	0x10110000
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000
 80012d8:	40010800 	.word	0x40010800
 80012dc:	40010c00 	.word	0x40010c00
 80012e0:	40011000 	.word	0x40011000
 80012e4:	40011400 	.word	0x40011400
 80012e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_GPIO_Init+0x304>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	4909      	ldr	r1, [pc, #36]	; (800131c <HAL_GPIO_Init+0x304>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	3301      	adds	r3, #1
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	fa22 f303 	lsr.w	r3, r2, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	f47f ae8e 	bne.w	800102c <HAL_GPIO_Init+0x14>
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	372c      	adds	r7, #44	; 0x2c
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
 800132c:	4613      	mov	r3, r2
 800132e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800133c:	e003      	b.n	8001346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	041a      	lsls	r2, r3, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	611a      	str	r2, [r3, #16]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4013      	ands	r3, r2
 8001368:	041a      	lsls	r2, r3, #16
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43d9      	mvns	r1, r3
 800136e:	887b      	ldrh	r3, [r7, #2]
 8001370:	400b      	ands	r3, r1
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	611a      	str	r2, [r3, #16]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
	...

08001384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e272      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 8087 	beq.w	80014b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a4:	4b92      	ldr	r3, [pc, #584]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d00c      	beq.n	80013ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013b0:	4b8f      	ldr	r3, [pc, #572]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d112      	bne.n	80013e2 <HAL_RCC_OscConfig+0x5e>
 80013bc:	4b8c      	ldr	r3, [pc, #560]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c8:	d10b      	bne.n	80013e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ca:	4b89      	ldr	r3, [pc, #548]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d06c      	beq.n	80014b0 <HAL_RCC_OscConfig+0x12c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d168      	bne.n	80014b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e24c      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x76>
 80013ec:	4b80      	ldr	r3, [pc, #512]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a7f      	ldr	r2, [pc, #508]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e02e      	b.n	8001458 <HAL_RCC_OscConfig+0xd4>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x98>
 8001402:	4b7b      	ldr	r3, [pc, #492]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a7a      	ldr	r2, [pc, #488]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b78      	ldr	r3, [pc, #480]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a77      	ldr	r2, [pc, #476]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e01d      	b.n	8001458 <HAL_RCC_OscConfig+0xd4>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0xbc>
 8001426:	4b72      	ldr	r3, [pc, #456]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a71      	ldr	r2, [pc, #452]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6e      	ldr	r2, [pc, #440]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0xd4>
 8001440:	4b6b      	ldr	r3, [pc, #428]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a6a      	ldr	r2, [pc, #424]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b68      	ldr	r3, [pc, #416]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a67      	ldr	r2, [pc, #412]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fcc2 	bl	8000de8 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fcbe 	bl	8000de8 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e200      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	4b5d      	ldr	r3, [pc, #372]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0xe4>
 8001486:	e014      	b.n	80014b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fcae 	bl	8000de8 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fcaa 	bl	8000de8 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1ec      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x10c>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d063      	beq.n	8001586 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014be:	4b4c      	ldr	r3, [pc, #304]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014ca:	4b49      	ldr	r3, [pc, #292]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d11c      	bne.n	8001510 <HAL_RCC_OscConfig+0x18c>
 80014d6:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d116      	bne.n	8001510 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_RCC_OscConfig+0x176>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e1c0      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4939      	ldr	r1, [pc, #228]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150e:	e03a      	b.n	8001586 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001518:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fc63 	bl	8000de8 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001526:	f7ff fc5f 	bl	8000de8 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e1a1      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001544:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4927      	ldr	r1, [pc, #156]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 8001554:	4313      	orrs	r3, r2
 8001556:	600b      	str	r3, [r1, #0]
 8001558:	e015      	b.n	8001586 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fc42 	bl	8000de8 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001568:	f7ff fc3e 	bl	8000de8 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e180      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d03a      	beq.n	8001608 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d019      	beq.n	80015ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_RCC_OscConfig+0x274>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a0:	f7ff fc22 	bl	8000de8 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fc1e 	bl	8000de8 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e160      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f000 fa9c 	bl	8001b04 <RCC_Delay>
 80015cc:	e01c      	b.n	8001608 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_RCC_OscConfig+0x274>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d4:	f7ff fc08 	bl	8000de8 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015da:	e00f      	b.n	80015fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015dc:	f7ff fc04 	bl	8000de8 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d908      	bls.n	80015fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e146      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	42420000 	.word	0x42420000
 80015f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	4b92      	ldr	r3, [pc, #584]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1e9      	bne.n	80015dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80a6 	beq.w	8001762 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161a:	4b8b      	ldr	r3, [pc, #556]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10d      	bne.n	8001642 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b88      	ldr	r3, [pc, #544]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a87      	ldr	r2, [pc, #540]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b85      	ldr	r3, [pc, #532]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163e:	2301      	movs	r3, #1
 8001640:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	4b82      	ldr	r3, [pc, #520]	; (800184c <HAL_RCC_OscConfig+0x4c8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164a:	2b00      	cmp	r3, #0
 800164c:	d118      	bne.n	8001680 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164e:	4b7f      	ldr	r3, [pc, #508]	; (800184c <HAL_RCC_OscConfig+0x4c8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a7e      	ldr	r2, [pc, #504]	; (800184c <HAL_RCC_OscConfig+0x4c8>)
 8001654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165a:	f7ff fbc5 	bl	8000de8 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001662:	f7ff fbc1 	bl	8000de8 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b64      	cmp	r3, #100	; 0x64
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e103      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	4b75      	ldr	r3, [pc, #468]	; (800184c <HAL_RCC_OscConfig+0x4c8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x312>
 8001688:	4b6f      	ldr	r3, [pc, #444]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4a6e      	ldr	r2, [pc, #440]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6213      	str	r3, [r2, #32]
 8001694:	e02d      	b.n	80016f2 <HAL_RCC_OscConfig+0x36e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x334>
 800169e:	4b6a      	ldr	r3, [pc, #424]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4a69      	ldr	r2, [pc, #420]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6213      	str	r3, [r2, #32]
 80016aa:	4b67      	ldr	r3, [pc, #412]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	4a66      	ldr	r2, [pc, #408]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	f023 0304 	bic.w	r3, r3, #4
 80016b4:	6213      	str	r3, [r2, #32]
 80016b6:	e01c      	b.n	80016f2 <HAL_RCC_OscConfig+0x36e>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b05      	cmp	r3, #5
 80016be:	d10c      	bne.n	80016da <HAL_RCC_OscConfig+0x356>
 80016c0:	4b61      	ldr	r3, [pc, #388]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4a60      	ldr	r2, [pc, #384]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	6213      	str	r3, [r2, #32]
 80016cc:	4b5e      	ldr	r3, [pc, #376]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a5d      	ldr	r2, [pc, #372]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6213      	str	r3, [r2, #32]
 80016d8:	e00b      	b.n	80016f2 <HAL_RCC_OscConfig+0x36e>
 80016da:	4b5b      	ldr	r3, [pc, #364]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4a5a      	ldr	r2, [pc, #360]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	6213      	str	r3, [r2, #32]
 80016e6:	4b58      	ldr	r3, [pc, #352]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4a57      	ldr	r2, [pc, #348]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d015      	beq.n	8001726 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff fb75 	bl	8000de8 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff fb71 	bl	8000de8 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e0b1      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001718:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0ee      	beq.n	8001702 <HAL_RCC_OscConfig+0x37e>
 8001724:	e014      	b.n	8001750 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff fb5f 	bl	8000de8 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff fb5b 	bl	8000de8 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	; 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e09b      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001744:	4b40      	ldr	r3, [pc, #256]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1ee      	bne.n	800172e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d105      	bne.n	8001762 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001756:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	4a3b      	ldr	r2, [pc, #236]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001760:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8087 	beq.w	800187a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176c:	4b36      	ldr	r3, [pc, #216]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b08      	cmp	r3, #8
 8001776:	d061      	beq.n	800183c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d146      	bne.n	800180e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001780:	4b33      	ldr	r3, [pc, #204]	; (8001850 <HAL_RCC_OscConfig+0x4cc>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff fb2f 	bl	8000de8 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff fb2b 	bl	8000de8 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e06d      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a0:	4b29      	ldr	r3, [pc, #164]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b4:	d108      	bne.n	80017c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4921      	ldr	r1, [pc, #132]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a19      	ldr	r1, [r3, #32]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	430b      	orrs	r3, r1
 80017da:	491b      	ldr	r1, [pc, #108]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_RCC_OscConfig+0x4cc>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff faff 	bl	8000de8 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ee:	f7ff fafb 	bl	8000de8 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e03d      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x46a>
 800180c:	e035      	b.n	800187a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <HAL_RCC_OscConfig+0x4cc>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fae8 	bl	8000de8 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff fae4 	bl	8000de8 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e026      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x498>
 800183a:	e01e      	b.n	800187a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d107      	bne.n	8001854 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e019      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
 8001848:	40021000 	.word	0x40021000
 800184c:	40007000 	.word	0x40007000
 8001850:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_RCC_OscConfig+0x500>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	429a      	cmp	r2, r3
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000

08001888 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0d0      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800189c:	4b6a      	ldr	r3, [pc, #424]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d910      	bls.n	80018cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b67      	ldr	r3, [pc, #412]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 0207 	bic.w	r2, r3, #7
 80018b2:	4965      	ldr	r1, [pc, #404]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	4b63      	ldr	r3, [pc, #396]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0b8      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e4:	4b59      	ldr	r3, [pc, #356]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	4a58      	ldr	r2, [pc, #352]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018fc:	4b53      	ldr	r3, [pc, #332]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4a52      	ldr	r2, [pc, #328]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001906:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001908:	4b50      	ldr	r3, [pc, #320]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	494d      	ldr	r1, [pc, #308]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d040      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d115      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e07f      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e073      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e06b      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f023 0203 	bic.w	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4936      	ldr	r1, [pc, #216]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001978:	f7ff fa36 	bl	8000de8 <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	e00a      	b.n	8001996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001980:	f7ff fa32 	bl	8000de8 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e053      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 020c 	and.w	r2, r3, #12
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1eb      	bne.n	8001980 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d210      	bcs.n	80019d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 0207 	bic.w	r2, r3, #7
 80019be:	4922      	ldr	r1, [pc, #136]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e032      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d008      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4916      	ldr	r1, [pc, #88]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d009      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	490e      	ldr	r1, [pc, #56]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a16:	f000 f821 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	490a      	ldr	r1, [pc, #40]	; (8001a50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a28:	5ccb      	ldrb	r3, [r1, r3]
 8001a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2e:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <HAL_RCC_ClockConfig+0x1cc>)
 8001a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_ClockConfig+0x1d0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f994 	bl	8000d64 <HAL_InitTick>

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40022000 	.word	0x40022000
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	080028d8 	.word	0x080028d8
 8001a54:	20000004 	.word	0x20000004
 8001a58:	20000008 	.word	0x20000008

08001a5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d002      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x30>
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x36>
 8001a8a:	e027      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a8e:	613b      	str	r3, [r7, #16]
      break;
 8001a90:	e027      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	0c9b      	lsrs	r3, r3, #18
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a9c:	5cd3      	ldrb	r3, [r2, r3]
 8001a9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d010      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	0c5b      	lsrs	r3, r3, #17
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	4a11      	ldr	r2, [pc, #68]	; (8001afc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001abe:	fb03 f202 	mul.w	r2, r3, r2
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e004      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	613b      	str	r3, [r7, #16]
      break;
 8001ada:	e002      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ade:	613b      	str	r3, [r7, #16]
      break;
 8001ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae2:	693b      	ldr	r3, [r7, #16]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	007a1200 	.word	0x007a1200
 8001af8:	080028e8 	.word	0x080028e8
 8001afc:	080028f8 	.word	0x080028f8
 8001b00:	003d0900 	.word	0x003d0900

08001b04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <RCC_Delay+0x34>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <RCC_Delay+0x38>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0a5b      	lsrs	r3, r3, #9
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b20:	bf00      	nop
  }
  while (Delay --);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1e5a      	subs	r2, r3, #1
 8001b26:	60fa      	str	r2, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f9      	bne.n	8001b20 <RCC_Delay+0x1c>
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	20000004 	.word	0x20000004
 8001b3c:	10624dd3 	.word	0x10624dd3

08001b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d001      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e03a      	b.n	8001bce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <HAL_TIM_Base_Start_IT+0x98>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00e      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0x58>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b82:	d009      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0x58>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <HAL_TIM_Base_Start_IT+0x9c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d004      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0x58>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d111      	bne.n	8001bbc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d010      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0201 	orr.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bba:	e007      	b.n	8001bcc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	40012c00 	.word	0x40012c00
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40000800 	.word	0x40000800

08001be4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6a1a      	ldr	r2, [r3, #32]
 8001c02:	f241 1311 	movw	r3, #4369	; 0x1111
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10f      	bne.n	8001c2c <HAL_TIM_Base_Stop_IT+0x48>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a1a      	ldr	r2, [r3, #32]
 8001c12:	f240 4344 	movw	r3, #1092	; 0x444
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d107      	bne.n	8001c2c <HAL_TIM_Base_Stop_IT+0x48>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e041      	b.n	8001cd6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe ff6c 	bl	8000b44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4610      	mov	r0, r2
 8001c80:	f000 fb22 	bl	80022c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d109      	bne.n	8001d04 <HAL_TIM_PWM_Start+0x24>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	e022      	b.n	8001d4a <HAL_TIM_PWM_Start+0x6a>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d109      	bne.n	8001d1e <HAL_TIM_PWM_Start+0x3e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	bf14      	ite	ne
 8001d16:	2301      	movne	r3, #1
 8001d18:	2300      	moveq	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	e015      	b.n	8001d4a <HAL_TIM_PWM_Start+0x6a>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d109      	bne.n	8001d38 <HAL_TIM_PWM_Start+0x58>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	bf14      	ite	ne
 8001d30:	2301      	movne	r3, #1
 8001d32:	2300      	moveq	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	e008      	b.n	8001d4a <HAL_TIM_PWM_Start+0x6a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	bf14      	ite	ne
 8001d44:	2301      	movne	r3, #1
 8001d46:	2300      	moveq	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e05e      	b.n	8001e10 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d104      	bne.n	8001d62 <HAL_TIM_PWM_Start+0x82>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d60:	e013      	b.n	8001d8a <HAL_TIM_PWM_Start+0xaa>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d104      	bne.n	8001d72 <HAL_TIM_PWM_Start+0x92>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d70:	e00b      	b.n	8001d8a <HAL_TIM_PWM_Start+0xaa>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d104      	bne.n	8001d82 <HAL_TIM_PWM_Start+0xa2>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d80:	e003      	b.n	8001d8a <HAL_TIM_PWM_Start+0xaa>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	6839      	ldr	r1, [r7, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fc82 	bl	800269c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1e      	ldr	r2, [pc, #120]	; (8001e18 <HAL_TIM_PWM_Start+0x138>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d107      	bne.n	8001db2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <HAL_TIM_PWM_Start+0x138>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00e      	beq.n	8001dda <HAL_TIM_PWM_Start+0xfa>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc4:	d009      	beq.n	8001dda <HAL_TIM_PWM_Start+0xfa>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_TIM_PWM_Start+0x13c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d004      	beq.n	8001dda <HAL_TIM_PWM_Start+0xfa>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <HAL_TIM_PWM_Start+0x140>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d111      	bne.n	8001dfe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b06      	cmp	r3, #6
 8001dea:	d010      	beq.n	8001e0e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfc:	e007      	b.n	8001e0e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0201 	orr.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40012c00 	.word	0x40012c00
 8001e1c:	40000400 	.word	0x40000400
 8001e20:	40000800 	.word	0x40000800

08001e24 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2200      	movs	r2, #0
 8001e34:	6839      	ldr	r1, [r7, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fc30 	bl	800269c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a29      	ldr	r2, [pc, #164]	; (8001ee8 <HAL_TIM_PWM_Stop+0xc4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d117      	bne.n	8001e76 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6a1a      	ldr	r2, [r3, #32]
 8001e4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10f      	bne.n	8001e76 <HAL_TIM_PWM_Stop+0x52>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6a1a      	ldr	r2, [r3, #32]
 8001e5c:	f240 4344 	movw	r3, #1092	; 0x444
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d107      	bne.n	8001e76 <HAL_TIM_PWM_Stop+0x52>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6a1a      	ldr	r2, [r3, #32]
 8001e7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10f      	bne.n	8001ea6 <HAL_TIM_PWM_Stop+0x82>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6a1a      	ldr	r2, [r3, #32]
 8001e8c:	f240 4344 	movw	r3, #1092	; 0x444
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d107      	bne.n	8001ea6 <HAL_TIM_PWM_Stop+0x82>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d104      	bne.n	8001eb6 <HAL_TIM_PWM_Stop+0x92>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eb4:	e013      	b.n	8001ede <HAL_TIM_PWM_Stop+0xba>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d104      	bne.n	8001ec6 <HAL_TIM_PWM_Stop+0xa2>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ec4:	e00b      	b.n	8001ede <HAL_TIM_PWM_Stop+0xba>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d104      	bne.n	8001ed6 <HAL_TIM_PWM_Stop+0xb2>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ed4:	e003      	b.n	8001ede <HAL_TIM_PWM_Stop+0xba>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40012c00 	.word	0x40012c00

08001eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d122      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d11b      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0202 	mvn.w	r2, #2
 8001f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f9af 	bl	8002292 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f9a2 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f9b1 	bl	80022a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d122      	bne.n	8001f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d11b      	bne.n	8001f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0204 	mvn.w	r2, #4
 8001f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f985 	bl	8002292 <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f978 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f987 	bl	80022a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d122      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0208 	mvn.w	r2, #8
 8001fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f95b 	bl	8002292 <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e005      	b.n	8001fea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f94e 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f95d 	bl	80022a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b10      	cmp	r3, #16
 8001ffc:	d122      	bne.n	8002044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b10      	cmp	r3, #16
 800200a:	d11b      	bne.n	8002044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0210 	mvn.w	r2, #16
 8002014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2208      	movs	r2, #8
 800201a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f931 	bl	8002292 <HAL_TIM_IC_CaptureCallback>
 8002030:	e005      	b.n	800203e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f924 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f933 	bl	80022a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d107      	bne.n	8002070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0201 	mvn.w	r2, #1
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe fb14 	bl	8000698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207a:	2b80      	cmp	r3, #128	; 0x80
 800207c:	d10e      	bne.n	800209c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002088:	2b80      	cmp	r3, #128	; 0x80
 800208a:	d107      	bne.n	800209c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fbdc 	bl	8002854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a6:	2b40      	cmp	r3, #64	; 0x40
 80020a8:	d10e      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	2b40      	cmp	r3, #64	; 0x40
 80020b6:	d107      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8f7 	bl	80022b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d10e      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d107      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0220 	mvn.w	r2, #32
 80020ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fba7 	bl	8002842 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002116:	2302      	movs	r3, #2
 8002118:	e0ae      	b.n	8002278 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	f200 809f 	bhi.w	8002268 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	08002165 	.word	0x08002165
 8002134:	08002269 	.word	0x08002269
 8002138:	08002269 	.word	0x08002269
 800213c:	08002269 	.word	0x08002269
 8002140:	080021a5 	.word	0x080021a5
 8002144:	08002269 	.word	0x08002269
 8002148:	08002269 	.word	0x08002269
 800214c:	08002269 	.word	0x08002269
 8002150:	080021e7 	.word	0x080021e7
 8002154:	08002269 	.word	0x08002269
 8002158:	08002269 	.word	0x08002269
 800215c:	08002269 	.word	0x08002269
 8002160:	08002227 	.word	0x08002227
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f90e 	bl	800238c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0208 	orr.w	r2, r2, #8
 800217e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0204 	bic.w	r2, r2, #4
 800218e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6999      	ldr	r1, [r3, #24]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	619a      	str	r2, [r3, #24]
      break;
 80021a2:	e064      	b.n	800226e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f954 	bl	8002458 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6999      	ldr	r1, [r3, #24]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	021a      	lsls	r2, r3, #8
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	619a      	str	r2, [r3, #24]
      break;
 80021e4:	e043      	b.n	800226e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f99d 	bl	800252c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0208 	orr.w	r2, r2, #8
 8002200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69da      	ldr	r2, [r3, #28]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0204 	bic.w	r2, r2, #4
 8002210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69d9      	ldr	r1, [r3, #28]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	61da      	str	r2, [r3, #28]
      break;
 8002224:	e023      	b.n	800226e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	4618      	mov	r0, r3
 800222e:	f000 f9e7 	bl	8002600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69da      	ldr	r2, [r3, #28]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69d9      	ldr	r1, [r3, #28]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	021a      	lsls	r2, r3, #8
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	61da      	str	r2, [r3, #28]
      break;
 8002266:	e002      	b.n	800226e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	75fb      	strb	r3, [r7, #23]
      break;
 800226c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002276:	7dfb      	ldrb	r3, [r7, #23]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <TIM_Base_SetConfig+0xb8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00b      	beq.n	80022f8 <TIM_Base_SetConfig+0x30>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e6:	d007      	beq.n	80022f8 <TIM_Base_SetConfig+0x30>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a26      	ldr	r2, [pc, #152]	; (8002384 <TIM_Base_SetConfig+0xbc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d003      	beq.n	80022f8 <TIM_Base_SetConfig+0x30>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a25      	ldr	r2, [pc, #148]	; (8002388 <TIM_Base_SetConfig+0xc0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d108      	bne.n	800230a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <TIM_Base_SetConfig+0xb8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00b      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002318:	d007      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a19      	ldr	r2, [pc, #100]	; (8002384 <TIM_Base_SetConfig+0xbc>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d003      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a18      	ldr	r2, [pc, #96]	; (8002388 <TIM_Base_SetConfig+0xc0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d108      	bne.n	800233c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <TIM_Base_SetConfig+0xb8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d103      	bne.n	8002370 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	615a      	str	r2, [r3, #20]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	40012c00 	.word	0x40012c00
 8002384:	40000400 	.word	0x40000400
 8002388:	40000800 	.word	0x40000800

0800238c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f023 0201 	bic.w	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f023 0303 	bic.w	r3, r3, #3
 80023c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f023 0302 	bic.w	r3, r3, #2
 80023d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a1c      	ldr	r2, [pc, #112]	; (8002454 <TIM_OC1_SetConfig+0xc8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d10c      	bne.n	8002402 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f023 0308 	bic.w	r3, r3, #8
 80023ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a13      	ldr	r2, [pc, #76]	; (8002454 <TIM_OC1_SetConfig+0xc8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d111      	bne.n	800242e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	621a      	str	r2, [r3, #32]
}
 8002448:	bf00      	nop
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40012c00 	.word	0x40012c00

08002458 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f023 0210 	bic.w	r2, r3, #16
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800248e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4313      	orrs	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f023 0320 	bic.w	r3, r3, #32
 80024a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <TIM_OC2_SetConfig+0xd0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d10d      	bne.n	80024d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <TIM_OC2_SetConfig+0xd0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d113      	bne.n	8002504 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	621a      	str	r2, [r3, #32]
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	40012c00 	.word	0x40012c00

0800252c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0303 	bic.w	r3, r3, #3
 8002562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <TIM_OC3_SetConfig+0xd0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d10d      	bne.n	80025a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a14      	ldr	r2, [pc, #80]	; (80025fc <TIM_OC3_SetConfig+0xd0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d113      	bne.n	80025d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	621a      	str	r2, [r3, #32]
}
 80025f0:	bf00      	nop
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40012c00 	.word	0x40012c00

08002600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800262e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800264a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	031b      	lsls	r3, r3, #12
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a0f      	ldr	r2, [pc, #60]	; (8002698 <TIM_OC4_SetConfig+0x98>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d109      	bne.n	8002674 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	019b      	lsls	r3, r3, #6
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	621a      	str	r2, [r3, #32]
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	40012c00 	.word	0x40012c00

0800269c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	2201      	movs	r2, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a1a      	ldr	r2, [r3, #32]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	43db      	mvns	r3, r3
 80026be:	401a      	ands	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a1a      	ldr	r2, [r3, #32]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	621a      	str	r2, [r3, #32]
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e046      	b.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a16      	ldr	r2, [pc, #88]	; (8002794 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00e      	beq.n	800275e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002748:	d009      	beq.n	800275e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d004      	beq.n	800275e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a10      	ldr	r2, [pc, #64]	; (800279c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10c      	bne.n	8002778 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	4313      	orrs	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	40012c00 	.word	0x40012c00
 8002798:	40000400 	.word	0x40000400
 800279c:	40000800 	.word	0x40000800

080027a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e03d      	b.n	8002838 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <memset>:
 8002866:	4603      	mov	r3, r0
 8002868:	4402      	add	r2, r0
 800286a:	4293      	cmp	r3, r2
 800286c:	d100      	bne.n	8002870 <memset+0xa>
 800286e:	4770      	bx	lr
 8002870:	f803 1b01 	strb.w	r1, [r3], #1
 8002874:	e7f9      	b.n	800286a <memset+0x4>
	...

08002878 <__libc_init_array>:
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	2600      	movs	r6, #0
 800287c:	4d0c      	ldr	r5, [pc, #48]	; (80028b0 <__libc_init_array+0x38>)
 800287e:	4c0d      	ldr	r4, [pc, #52]	; (80028b4 <__libc_init_array+0x3c>)
 8002880:	1b64      	subs	r4, r4, r5
 8002882:	10a4      	asrs	r4, r4, #2
 8002884:	42a6      	cmp	r6, r4
 8002886:	d109      	bne.n	800289c <__libc_init_array+0x24>
 8002888:	f000 f81a 	bl	80028c0 <_init>
 800288c:	2600      	movs	r6, #0
 800288e:	4d0a      	ldr	r5, [pc, #40]	; (80028b8 <__libc_init_array+0x40>)
 8002890:	4c0a      	ldr	r4, [pc, #40]	; (80028bc <__libc_init_array+0x44>)
 8002892:	1b64      	subs	r4, r4, r5
 8002894:	10a4      	asrs	r4, r4, #2
 8002896:	42a6      	cmp	r6, r4
 8002898:	d105      	bne.n	80028a6 <__libc_init_array+0x2e>
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a0:	4798      	blx	r3
 80028a2:	3601      	adds	r6, #1
 80028a4:	e7ee      	b.n	8002884 <__libc_init_array+0xc>
 80028a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028aa:	4798      	blx	r3
 80028ac:	3601      	adds	r6, #1
 80028ae:	e7f2      	b.n	8002896 <__libc_init_array+0x1e>
 80028b0:	080028fc 	.word	0x080028fc
 80028b4:	080028fc 	.word	0x080028fc
 80028b8:	080028fc 	.word	0x080028fc
 80028bc:	08002900 	.word	0x08002900

080028c0 <_init>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	bf00      	nop
 80028c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c6:	bc08      	pop	{r3}
 80028c8:	469e      	mov	lr, r3
 80028ca:	4770      	bx	lr

080028cc <_fini>:
 80028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ce:	bf00      	nop
 80028d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d2:	bc08      	pop	{r3}
 80028d4:	469e      	mov	lr, r3
 80028d6:	4770      	bx	lr
